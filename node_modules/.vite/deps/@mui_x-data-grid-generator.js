import {
  isDeepEqual as isDeepEqual2
} from "./chunk-4Q2VP3AD.js";
import {
  DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS,
  DATA_GRID_PRO_PROPS_DEFAULT_VALUES,
  GRID_ACTIONS_COLUMN_TYPE,
  GRID_CHECKBOX_SELECTION_COL_DEF,
  GRID_CHECKBOX_SELECTION_FIELD,
  GRID_COLUMN_MENU_SLOTS_PRO,
  GRID_COLUMN_MENU_SLOT_PROPS_PRO,
  GRID_DATETIME_COL_DEF,
  GRID_DATE_COL_DEF,
  GRID_DEFAULT_LOCALE_TEXT,
  GRID_DETAIL_PANEL_TOGGLE_FIELD,
  GRID_REORDER_COL_DEF,
  GRID_ROOT_GROUP_ID,
  GRID_STRING_COL_DEF,
  GridContextProvider,
  GridFooterPlaceholder,
  GridGenericColumnMenu,
  GridHeader,
  GridLogicOperator,
  GridRoot,
  GridVirtualScroller,
  _objectDestructuringEmpty,
  addPinnedRow,
  columnGroupsStateInitializer,
  columnMenuStateInitializer,
  columnPinningStateInitializer,
  columnReorderStateInitializer,
  columnResizeStateInitializer,
  columnsStateInitializer,
  computeSlots,
  createRowTree,
  createSelector as createSelector2,
  densityStateInitializer,
  detailPanelStateInitializer,
  dimensionsStateInitializer,
  editingStateInitializer,
  filterStateInitializer,
  focusStateInitializer,
  getDataGridUtilityClass,
  getGridDefaultColumnTypes,
  getTotalHeaderHeight,
  getVisibleRowsLookup,
  gridClasses,
  gridColumnLookupSelector,
  gridDimensionsSelector,
  gridFilteredDescendantCountLookupSelector,
  gridFilteredRowsLookupSelector,
  gridFocusCellSelector,
  gridRowTreeSelector,
  gridRowsDataRowIdToIdLookupSelector,
  gridSortedRowIdsSelector,
  headerFilteringStateInitializer,
  insertNodeInTree,
  isDeepEqual,
  isNavigationKey,
  isNumber,
  isSingleSelectColDef,
  paginationStateInitializer,
  passFilterLogic,
  preferencePanelStateInitializer,
  propValidatorsDataGrid,
  propValidatorsDataGridPro,
  removeNodeFromTree,
  rowPinningStateInitializer,
  rowSelectionStateInitializer,
  rowsMetaStateInitializer,
  rowsStateInitializer,
  serializeCellValue,
  sortRowTree,
  sortingStateInitializer,
  updateRowTree,
  useFirstRender,
  useGridApiEventHandler,
  useGridApiMethod,
  useGridClipboard,
  useGridColumnGrouping,
  useGridColumnMenu,
  useGridColumnPinning,
  useGridColumnPinningPreProcessors,
  useGridColumnReorder,
  useGridColumnResize,
  useGridColumnSpanning,
  useGridColumns,
  useGridCsvExport,
  useGridDensity,
  useGridDetailPanel,
  useGridDetailPanelPreProcessors,
  useGridDimensions,
  useGridEditing,
  useGridEvents,
  useGridFilter,
  useGridFocus,
  useGridHeaderFiltering,
  useGridInfiniteLoader,
  useGridInitialization,
  useGridInitializeState,
  useGridKeyboardNavigation,
  useGridLazyLoader,
  useGridLazyLoaderPreProcessors,
  useGridPagination,
  useGridParamsApi,
  useGridPreferencesPanel,
  useGridPrintExport,
  useGridRegisterPipeProcessor,
  useGridRegisterStrategyProcessor,
  useGridRootProps,
  useGridRowPinning,
  useGridRowPinningPreProcessors,
  useGridRowReorder,
  useGridRowReorderPreProcessors,
  useGridRowSelection,
  useGridRowSelectionPreProcessors,
  useGridRows,
  useGridRowsMeta,
  useGridRowsPreProcessors,
  useGridScroll,
  useGridSelector,
  useGridSorting,
  useGridStatePersistence,
  useGridTreeData,
  useGridTreeDataPreProcessors,
  useGridVirtualization,
  useGridVisibleRows,
  useProps,
  validateProps,
  virtualizationStateInitializer
} from "./chunk-JAOQ75A5.js";
import {
  createSelector,
  defaultMemoize
} from "./chunk-FMMXVFU3.js";
import {
  Avatar_default,
  Rating_default,
  Slider_default,
  sliderClasses_default
} from "./chunk-33I6MUUV.js";
import {
  Autocomplete_default,
  Badge_default,
  CircularProgress_default,
  InputAdornment_default,
  InputLabel_default,
  Popper_default,
  Skeleton_default,
  TablePagination_default,
  TextField_default,
  Tooltip_default,
  autocompleteClasses_default,
  tablePaginationClasses_default
} from "./chunk-QXM2BK7Q.js";
import "./chunk-4NAIDPE5.js";
import {
  FormControlLabel_default,
  FormControl_default
} from "./chunk-GQHHNRM2.js";
import {
  Divider_default,
  ListItemIcon_default,
  ListItemText_default,
  MenuItem_default
} from "./chunk-LDE6OBSI.js";
import "./chunk-Z7CNAJ33.js";
import {
  ClickAwayListener,
  Grow_default,
  InputBase_default,
  MenuList_default,
  Select_default,
  createFilterOptions
} from "./chunk-XIQNDS5R.js";
import "./chunk-X22SKOJV.js";
import "./chunk-D5GYTFQX.js";
import "./chunk-FW6FIXEZ.js";
import "./chunk-2OOX7RZB.js";
import "./chunk-ZTIJNTVX.js";
import "./chunk-QDX45L6Z.js";
import {
  Checkbox_default
} from "./chunk-CT3WLBNQ.js";
import "./chunk-HN7H22RL.js";
import "./chunk-Z22SVX7Y.js";
import {
  Chip_default
} from "./chunk-I7WCXPNG.js";
import {
  pink_default
} from "./chunk-AH5WTFTD.js";
import "./chunk-QDJVDI5K.js";
import {
  FocusTrap
} from "./chunk-OCWCLIN5.js";
import "./chunk-Z6IRM5XB.js";
import "./chunk-MJ6AVA52.js";
import "./chunk-FI76IA77.js";
import {
  IconButton_default
} from "./chunk-YXQ6QY7B.js";
import "./chunk-PAWGHFCJ.js";
import {
  Paper_default
} from "./chunk-FHJ52VNT.js";
import {
  Box_default
} from "./chunk-6AEXSLVD.js";
import "./chunk-KDNF6H7T.js";
import "./chunk-FMFFUJ5P.js";
import {
  useTheme
} from "./chunk-LY4R2TS4.js";
import {
  Button_default
} from "./chunk-IFOXVUWV.js";
import "./chunk-ZMAZEG7D.js";
import "./chunk-QX3BOZBI.js";
import {
  require_react_dom
} from "./chunk-UJBO7CMO.js";
import {
  alpha,
  darken,
  decomposeColor,
  lighten,
  recomposeColor,
  styled_default as styled_default2,
  toPropertyKey
} from "./chunk-MBJTPD5G.js";
import "./chunk-3XZ2AXMY.js";
import "./chunk-CGR5WT2I.js";
import "./chunk-3ZNUCULA.js";
import {
  require_createSvgIcon
} from "./chunk-N5QQYKCM.js";
import {
  init_utils as init_utils2,
  useId_default
} from "./chunk-S3UIT3XQ.js";
import "./chunk-2B6DFDTW.js";
import {
  ownerDocument_default
} from "./chunk-V32D6BTL.js";
import "./chunk-7MTWBOIH.js";
import "./chunk-STVXRECU.js";
import "./chunk-PEJGBJJK.js";
import "./chunk-E6B3MQFQ.js";
import {
  createSvgIcon
} from "./chunk-KJJVYXUJ.js";
import {
  useEventCallback_default as useEventCallback_default2
} from "./chunk-OSHLZY6S.js";
import "./chunk-VSSZ73PR.js";
import "./chunk-SZPIHBNK.js";
import {
  require_interopRequireDefault,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-Q26AP4Y5.js";
import "./chunk-224YVIB4.js";
import {
  blue_default,
  green_default,
  lightBlue_default,
  orange_default,
  purple_default,
  red_default
} from "./chunk-E2CJO64A.js";
import {
  HTMLElementType,
  debounce,
  init_useEventCallback,
  init_useLazyRef,
  init_useOnMount,
  init_useTimeout,
  init_utils,
  ownerDocument,
  ownerWindow,
  ponyfillGlobal_default,
  refType_default,
  useEnhancedEffect_default,
  useEventCallback_default,
  useForkRef,
  useId,
  useLazyRef,
  useOnMount,
  useTimeout
} from "./chunk-ZBKY45JQ.js";
import {
  _objectWithoutPropertiesLoose,
  capitalize,
  clsx_default,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_clsx,
  init_composeClasses,
  init_objectWithoutPropertiesLoose
} from "./chunk-XJFY7SEY.js";
import {
  _extends,
  init_extends
} from "./chunk-4GAI7T4A.js";
import {
  require_prop_types
} from "./chunk-7V6PODYD.js";
import "./chunk-UEKKFXKA.js";
import {
  require_jsx_runtime
} from "./chunk-EVYFT2IE.js";
import {
  require_react
} from "./chunk-KTLD2JDZ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-BYPFWIQ6.js";

// node_modules/@mui/icons-material/Info.js
var require_Info = __commonJS({
  "node_modules/@mui/icons-material/Info.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z"
    }), "Info");
  }
});

// node_modules/@mui/icons-material/ReportProblem.js
var require_ReportProblem = __commonJS({
  "node_modules/@mui/icons-material/ReportProblem.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M1 21h22L12 2zm12-3h-2v-2h2zm0-4h-2v-4h2z"
    }), "ReportProblem");
  }
});

// node_modules/@mui/icons-material/Autorenew.js
var require_Autorenew = __commonJS({
  "node_modules/@mui/icons-material/Autorenew.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6m6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26"
    }), "Autorenew");
  }
});

// node_modules/@mui/icons-material/Done.js
var require_Done = __commonJS({
  "node_modules/@mui/icons-material/Done.js"(exports) {
    "use strict";
    "use client";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _jsxRuntime = require_jsx_runtime();
    var _default = exports.default = (0, _createSvgIcon.default)((0, _jsxRuntime.jsx)("path", {
      d: "M9 16.2 4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4z"
    }), "Done");
  }
});

// node_modules/chance/chance.js
var require_chance = __commonJS({
  "node_modules/chance/chance.js"(exports, module) {
    (function() {
      var MAX_INT = 9007199254740992;
      var MIN_INT = -MAX_INT;
      var NUMBERS = "0123456789";
      var CHARS_LOWER = "abcdefghijklmnopqrstuvwxyz";
      var CHARS_UPPER = CHARS_LOWER.toUpperCase();
      var HEX_POOL = NUMBERS + "abcdef";
      function UnsupportedError(message) {
        this.name = "UnsupportedError";
        this.message = message || "This feature is not supported on this platform";
      }
      UnsupportedError.prototype = new Error();
      UnsupportedError.prototype.constructor = UnsupportedError;
      var slice = Array.prototype.slice;
      function Chance2(seed) {
        if (!(this instanceof Chance2)) {
          if (!seed) {
            seed = null;
          }
          return seed === null ? new Chance2() : new Chance2(seed);
        }
        if (typeof seed === "function") {
          this.random = seed;
          return this;
        }
        if (arguments.length) {
          this.seed = 0;
        }
        for (var i2 = 0; i2 < arguments.length; i2++) {
          var seedling = 0;
          if (Object.prototype.toString.call(arguments[i2]) === "[object String]") {
            for (var j = 0; j < arguments[i2].length; j++) {
              var hash = 0;
              for (var k2 = 0; k2 < arguments[i2].length; k2++) {
                hash = arguments[i2].charCodeAt(k2) + (hash << 6) + (hash << 16) - hash;
              }
              seedling += hash;
            }
          } else {
            seedling = arguments[i2];
          }
          this.seed += (arguments.length - i2) * seedling;
        }
        this.mt = this.mersenne_twister(this.seed);
        this.bimd5 = this.blueimp_md5();
        this.random = function() {
          return this.mt.random(this.seed);
        };
        return this;
      }
      Chance2.prototype.VERSION = "1.1.11";
      function initOptions(options, defaults) {
        options = options || {};
        if (defaults) {
          for (var i2 in defaults) {
            if (typeof options[i2] === "undefined") {
              options[i2] = defaults[i2];
            }
          }
        }
        return options;
      }
      function range2(size) {
        return Array.apply(null, Array(size)).map(function(_, i2) {
          return i2;
        });
      }
      function testRange(test, errorMessage) {
        if (test) {
          throw new RangeError(errorMessage);
        }
      }
      var base64 = function() {
        throw new Error("No Base64 encoder available.");
      };
      (function determineBase64Encoder() {
        if (typeof btoa === "function") {
          base64 = btoa;
        } else if (typeof Buffer === "function") {
          base64 = function(input) {
            return new Buffer(input).toString("base64");
          };
        }
      })();
      Chance2.prototype.bool = function(options) {
        options = initOptions(options, { likelihood: 50 });
        testRange(
          options.likelihood < 0 || options.likelihood > 100,
          "Chance: Likelihood accepts values from 0 to 100."
        );
        return this.random() * 100 < options.likelihood;
      };
      Chance2.prototype.falsy = function(options) {
        options = initOptions(options, { pool: [false, null, 0, NaN, "", void 0] });
        var pool = options.pool, index = this.integer({ min: 0, max: pool.length - 1 }), value = pool[index];
        return value;
      };
      Chance2.prototype.animal = function(options) {
        options = initOptions(options);
        if (typeof options.type !== "undefined") {
          testRange(
            !this.get("animals")[options.type.toLowerCase()],
            "Please pick from desert, ocean, grassland, forest, zoo, pets, farm."
          );
          return this.pick(this.get("animals")[options.type.toLowerCase()]);
        }
        var animalTypeArray = ["desert", "forest", "ocean", "zoo", "farm", "pet", "grassland"];
        return this.pick(this.get("animals")[this.pick(animalTypeArray)]);
      };
      Chance2.prototype.character = function(options) {
        options = initOptions(options);
        var symbols = "!@#$%^&*()[]", letters, pool;
        if (options.casing === "lower") {
          letters = CHARS_LOWER;
        } else if (options.casing === "upper") {
          letters = CHARS_UPPER;
        } else {
          letters = CHARS_LOWER + CHARS_UPPER;
        }
        if (options.pool) {
          pool = options.pool;
        } else {
          pool = "";
          if (options.alpha) {
            pool += letters;
          }
          if (options.numeric) {
            pool += NUMBERS;
          }
          if (options.symbols) {
            pool += symbols;
          }
          if (!pool) {
            pool = letters + NUMBERS + symbols;
          }
        }
        return pool.charAt(this.natural({ max: pool.length - 1 }));
      };
      Chance2.prototype.floating = function(options) {
        options = initOptions(options, { fixed: 4 });
        testRange(
          options.fixed && options.precision,
          "Chance: Cannot specify both fixed and precision."
        );
        var num;
        var fixed = Math.pow(10, options.fixed);
        var max = MAX_INT / fixed;
        var min = -max;
        testRange(
          options.min && options.fixed && options.min < min,
          "Chance: Min specified is out of range with fixed. Min should be, at least, " + min
        );
        testRange(
          options.max && options.fixed && options.max > max,
          "Chance: Max specified is out of range with fixed. Max should be, at most, " + max
        );
        options = initOptions(options, { min, max });
        num = this.integer({ min: options.min * fixed, max: options.max * fixed });
        var num_fixed = (num / fixed).toFixed(options.fixed);
        return parseFloat(num_fixed);
      };
      Chance2.prototype.integer = function(options) {
        options = initOptions(options, { min: MIN_INT, max: MAX_INT });
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);
      };
      Chance2.prototype.natural = function(options) {
        options = initOptions(options, { min: 0, max: MAX_INT });
        if (typeof options.numerals === "number") {
          testRange(options.numerals < 1, "Chance: Numerals cannot be less than one.");
          options.min = Math.pow(10, options.numerals - 1);
          options.max = Math.pow(10, options.numerals) - 1;
        }
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        if (options.exclude) {
          testRange(!Array.isArray(options.exclude), "Chance: exclude must be an array.");
          for (var exclusionIndex in options.exclude) {
            testRange(!Number.isInteger(options.exclude[exclusionIndex]), "Chance: exclude must be numbers.");
          }
          var random2 = options.min + this.natural({ max: options.max - options.min - options.exclude.length });
          var sortedExclusions = options.exclude.sort();
          for (var sortedExclusionIndex in sortedExclusions) {
            if (random2 < sortedExclusions[sortedExclusionIndex]) {
              break;
            }
            random2++;
          }
          return random2;
        }
        return this.integer(options);
      };
      Chance2.prototype.prime = function(options) {
        options = initOptions(options, { min: 0, max: 1e4 });
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        var lastPrime = data.primes[data.primes.length - 1];
        if (options.max > lastPrime) {
          for (var i2 = lastPrime + 2; i2 <= options.max; ++i2) {
            if (this.is_prime(i2)) {
              data.primes.push(i2);
            }
          }
        }
        var targetPrimes = data.primes.filter(function(prime) {
          return prime >= options.min && prime <= options.max;
        });
        return this.pick(targetPrimes);
      };
      Chance2.prototype.is_prime = function(n) {
        if (n % 1 || n < 2) {
          return false;
        }
        if (n % 2 === 0) {
          return n === 2;
        }
        if (n % 3 === 0) {
          return n === 3;
        }
        var m = Math.sqrt(n);
        for (var i2 = 5; i2 <= m; i2 += 6) {
          if (n % i2 === 0 || n % (i2 + 2) === 0) {
            return false;
          }
        }
        return true;
      };
      Chance2.prototype.hex = function(options) {
        options = initOptions(options, { min: 0, max: MAX_INT, casing: "lower" });
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        var integer = this.natural({ min: options.min, max: options.max });
        if (options.casing === "upper") {
          return integer.toString(16).toUpperCase();
        }
        return integer.toString(16);
      };
      Chance2.prototype.letter = function(options) {
        options = initOptions(options, { casing: "lower" });
        var pool = "abcdefghijklmnopqrstuvwxyz";
        var letter = this.character({ pool });
        if (options.casing === "upper") {
          letter = letter.toUpperCase();
        }
        return letter;
      };
      Chance2.prototype.string = function(options) {
        options = initOptions(options, { min: 5, max: 20 });
        if (options.length !== 0 && !options.length) {
          options.length = this.natural({ min: options.min, max: options.max });
        }
        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
        var length = options.length, text = this.n(this.character, length, options);
        return text.join("");
      };
      function CopyToken(c) {
        this.c = c;
      }
      CopyToken.prototype = {
        substitute: function() {
          return this.c;
        }
      };
      function EscapeToken(c) {
        this.c = c;
      }
      EscapeToken.prototype = {
        substitute: function() {
          if (!/[{}\\]/.test(this.c)) {
            throw new Error('Invalid escape sequence: "\\' + this.c + '".');
          }
          return this.c;
        }
      };
      function ReplaceToken(c) {
        this.c = c;
      }
      ReplaceToken.prototype = {
        replacers: {
          "#": function(chance3) {
            return chance3.character({ pool: NUMBERS });
          },
          "A": function(chance3) {
            return chance3.character({ pool: CHARS_UPPER });
          },
          "a": function(chance3) {
            return chance3.character({ pool: CHARS_LOWER });
          }
        },
        substitute: function(chance3) {
          var replacer = this.replacers[this.c];
          if (!replacer) {
            throw new Error('Invalid replacement character: "' + this.c + '".');
          }
          return replacer(chance3);
        }
      };
      function parseTemplate(template) {
        var tokens = [];
        var mode = "identity";
        for (var i2 = 0; i2 < template.length; i2++) {
          var c = template[i2];
          switch (mode) {
            case "escape":
              tokens.push(new EscapeToken(c));
              mode = "identity";
              break;
            case "identity":
              if (c === "{") {
                mode = "replace";
              } else if (c === "\\") {
                mode = "escape";
              } else {
                tokens.push(new CopyToken(c));
              }
              break;
            case "replace":
              if (c === "}") {
                mode = "identity";
              } else {
                tokens.push(new ReplaceToken(c));
              }
              break;
          }
        }
        return tokens;
      }
      Chance2.prototype.template = function(template) {
        if (!template) {
          throw new Error("Template string is required");
        }
        var self2 = this;
        return parseTemplate(template).map(function(token) {
          return token.substitute(self2);
        }).join("");
      };
      Chance2.prototype.buffer = function(options) {
        if (typeof Buffer === "undefined") {
          throw new UnsupportedError("Sorry, the buffer() function is not supported on your platform");
        }
        options = initOptions(options, { length: this.natural({ min: 5, max: 20 }) });
        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
        var length = options.length;
        var content = this.n(this.character, length, options);
        return Buffer.from(content);
      };
      Chance2.prototype.capitalize = function(word) {
        return word.charAt(0).toUpperCase() + word.substr(1);
      };
      Chance2.prototype.mixin = function(obj) {
        for (var func_name in obj) {
          this[func_name] = obj[func_name];
        }
        return this;
      };
      Chance2.prototype.unique = function(fn, num, options) {
        testRange(
          typeof fn !== "function",
          "Chance: The first argument must be a function."
        );
        var comparator = function(arr2, val) {
          return arr2.indexOf(val) !== -1;
        };
        if (options) {
          comparator = options.comparator || comparator;
        }
        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);
        while (arr.length < num) {
          var clonedParams = JSON.parse(JSON.stringify(params));
          result = fn.apply(this, clonedParams);
          if (!comparator(arr, result)) {
            arr.push(result);
            count = 0;
          }
          if (++count > MAX_DUPLICATES) {
            throw new RangeError("Chance: num is likely too large for sample set");
          }
        }
        return arr;
      };
      Chance2.prototype.n = function(fn, n) {
        testRange(
          typeof fn !== "function",
          "Chance: The first argument must be a function."
        );
        if (typeof n === "undefined") {
          n = 1;
        }
        var i2 = n, arr = [], params = slice.call(arguments, 2);
        i2 = Math.max(0, i2);
        for (null; i2--; null) {
          arr.push(fn.apply(this, params));
        }
        return arr;
      };
      Chance2.prototype.pad = function(number, width, pad) {
        pad = pad || "0";
        number = number + "";
        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;
      };
      Chance2.prototype.pick = function(arr, count) {
        if (arr.length === 0) {
          throw new RangeError("Chance: Cannot pick() from an empty array");
        }
        if (!count || count === 1) {
          return arr[this.natural({ max: arr.length - 1 })];
        } else {
          return this.shuffle(arr).slice(0, count);
        }
      };
      Chance2.prototype.pickone = function(arr) {
        if (arr.length === 0) {
          throw new RangeError("Chance: Cannot pickone() from an empty array");
        }
        return arr[this.natural({ max: arr.length - 1 })];
      };
      Chance2.prototype.pickset = function(arr, count) {
        if (count === 0) {
          return [];
        }
        if (arr.length === 0) {
          throw new RangeError("Chance: Cannot pickset() from an empty array");
        }
        if (count < 0) {
          throw new RangeError("Chance: Count must be a positive number");
        }
        if (!count || count === 1) {
          return [this.pickone(arr)];
        } else {
          var array = arr.slice(0);
          var end = array.length;
          return this.n(function() {
            var index = this.natural({ max: --end });
            var value = array[index];
            array[index] = array[end];
            return value;
          }, Math.min(end, count));
        }
      };
      Chance2.prototype.shuffle = function(arr) {
        var new_array = [], j = 0, length = Number(arr.length), source_indexes = range2(length), last_source_index = length - 1, selected_source_index;
        for (var i2 = 0; i2 < length; i2++) {
          selected_source_index = this.natural({ max: last_source_index });
          j = source_indexes[selected_source_index];
          new_array[i2] = arr[j];
          source_indexes[selected_source_index] = source_indexes[last_source_index];
          last_source_index -= 1;
        }
        return new_array;
      };
      Chance2.prototype.weighted = function(arr, weights, trim) {
        if (arr.length !== weights.length) {
          throw new RangeError("Chance: Length of array and weights must match");
        }
        var sum = 0;
        var val;
        for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {
          val = weights[weightIndex];
          if (isNaN(val)) {
            throw new RangeError("Chance: All weights must be numbers");
          }
          if (val > 0) {
            sum += val;
          }
        }
        if (sum === 0) {
          throw new RangeError("Chance: No valid entries in array weights");
        }
        var selected = this.random() * sum;
        var total = 0;
        var lastGoodIdx = -1;
        var chosenIdx;
        for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {
          val = weights[weightIndex];
          total += val;
          if (val > 0) {
            if (selected <= total) {
              chosenIdx = weightIndex;
              break;
            }
            lastGoodIdx = weightIndex;
          }
          if (weightIndex === weights.length - 1) {
            chosenIdx = lastGoodIdx;
          }
        }
        var chosen = arr[chosenIdx];
        trim = typeof trim === "undefined" ? false : trim;
        if (trim) {
          arr.splice(chosenIdx, 1);
          weights.splice(chosenIdx, 1);
        }
        return chosen;
      };
      Chance2.prototype.paragraph = function(options) {
        options = initOptions(options);
        var sentences = options.sentences || this.natural({ min: 3, max: 7 }), sentence_array = this.n(this.sentence, sentences), separator = options.linebreak === true ? "\n" : " ";
        return sentence_array.join(separator);
      };
      Chance2.prototype.sentence = function(options) {
        options = initOptions(options);
        var words = options.words || this.natural({ min: 12, max: 18 }), punctuation = options.punctuation, text, word_array = this.n(this.word, words);
        text = word_array.join(" ");
        text = this.capitalize(text);
        if (punctuation !== false && !/^[.?;!:]$/.test(punctuation)) {
          punctuation = ".";
        }
        if (punctuation) {
          text += punctuation;
        }
        return text;
      };
      Chance2.prototype.syllable = function(options) {
        options = initOptions(options);
        var length = options.length || this.natural({ min: 2, max: 3 }), consonants = "bcdfghjklmnprstvwz", vowels = "aeiou", all = consonants + vowels, text = "", chr;
        for (var i2 = 0; i2 < length; i2++) {
          if (i2 === 0) {
            chr = this.character({ pool: all });
          } else if (consonants.indexOf(chr) === -1) {
            chr = this.character({ pool: consonants });
          } else {
            chr = this.character({ pool: vowels });
          }
          text += chr;
        }
        if (options.capitalize) {
          text = this.capitalize(text);
        }
        return text;
      };
      Chance2.prototype.word = function(options) {
        options = initOptions(options);
        testRange(
          options.syllables && options.length,
          "Chance: Cannot specify both syllables AND length."
        );
        var syllables = options.syllables || this.natural({ min: 1, max: 3 }), text = "";
        if (options.length) {
          do {
            text += this.syllable();
          } while (text.length < options.length);
          text = text.substring(0, options.length);
        } else {
          for (var i2 = 0; i2 < syllables; i2++) {
            text += this.syllable();
          }
        }
        if (options.capitalize) {
          text = this.capitalize(text);
        }
        return text;
      };
      Chance2.prototype.age = function(options) {
        options = initOptions(options);
        var ageRange;
        switch (options.type) {
          case "child":
            ageRange = { min: 0, max: 12 };
            break;
          case "teen":
            ageRange = { min: 13, max: 19 };
            break;
          case "adult":
            ageRange = { min: 18, max: 65 };
            break;
          case "senior":
            ageRange = { min: 65, max: 100 };
            break;
          case "all":
            ageRange = { min: 0, max: 100 };
            break;
          default:
            ageRange = { min: 18, max: 65 };
            break;
        }
        return this.natural(ageRange);
      };
      Chance2.prototype.birthday = function(options) {
        var age = this.age(options);
        var now = /* @__PURE__ */ new Date();
        var currentYear = now.getFullYear();
        if (options && options.type) {
          var min = /* @__PURE__ */ new Date();
          var max = /* @__PURE__ */ new Date();
          min.setFullYear(currentYear - age - 1);
          max.setFullYear(currentYear - age);
          options = initOptions(options, {
            min,
            max
          });
        } else if (options && (options.minAge !== void 0 || options.maxAge !== void 0)) {
          testRange(options.minAge < 0, "Chance: MinAge cannot be less than zero.");
          testRange(options.minAge > options.maxAge, "Chance: MinAge cannot be greater than MaxAge.");
          var minAge = options.minAge !== void 0 ? options.minAge : 0;
          var maxAge = options.maxAge !== void 0 ? options.maxAge : 100;
          var minDate = new Date(currentYear - maxAge - 1, now.getMonth(), now.getDate());
          var maxDate = new Date(currentYear - minAge, now.getMonth(), now.getDate());
          minDate.setDate(minDate.getDate() + 1);
          maxDate.setDate(maxDate.getDate() + 1);
          maxDate.setMilliseconds(maxDate.getMilliseconds() - 1);
          options = initOptions(options, {
            min: minDate,
            max: maxDate
          });
        } else {
          options = initOptions(options, {
            year: currentYear - age
          });
        }
        return this.date(options);
      };
      Chance2.prototype.cpf = function(options) {
        options = initOptions(options, {
          formatted: true
        });
        var n = this.n(this.natural, 9, { max: 9 });
        var d1 = n[8] * 2 + n[7] * 3 + n[6] * 4 + n[5] * 5 + n[4] * 6 + n[3] * 7 + n[2] * 8 + n[1] * 9 + n[0] * 10;
        d1 = 11 - d1 % 11;
        if (d1 >= 10) {
          d1 = 0;
        }
        var d2 = d1 * 2 + n[8] * 3 + n[7] * 4 + n[6] * 5 + n[5] * 6 + n[4] * 7 + n[3] * 8 + n[2] * 9 + n[1] * 10 + n[0] * 11;
        d2 = 11 - d2 % 11;
        if (d2 >= 10) {
          d2 = 0;
        }
        var cpf = "" + n[0] + n[1] + n[2] + "." + n[3] + n[4] + n[5] + "." + n[6] + n[7] + n[8] + "-" + d1 + d2;
        return options.formatted ? cpf : cpf.replace(/\D/g, "");
      };
      Chance2.prototype.cnpj = function(options) {
        options = initOptions(options, {
          formatted: true
        });
        var n = this.n(this.natural, 12, { max: 12 });
        var d1 = n[11] * 2 + n[10] * 3 + n[9] * 4 + n[8] * 5 + n[7] * 6 + n[6] * 7 + n[5] * 8 + n[4] * 9 + n[3] * 2 + n[2] * 3 + n[1] * 4 + n[0] * 5;
        d1 = 11 - d1 % 11;
        if (d1 < 2) {
          d1 = 0;
        }
        var d2 = d1 * 2 + n[11] * 3 + n[10] * 4 + n[9] * 5 + n[8] * 6 + n[7] * 7 + n[6] * 8 + n[5] * 9 + n[4] * 2 + n[3] * 3 + n[2] * 4 + n[1] * 5 + n[0] * 6;
        d2 = 11 - d2 % 11;
        if (d2 < 2) {
          d2 = 0;
        }
        var cnpj = "" + n[0] + n[1] + "." + n[2] + n[3] + n[4] + "." + n[5] + n[6] + n[7] + "/" + n[8] + n[9] + n[10] + n[11] + "-" + d1 + d2;
        return options.formatted ? cnpj : cnpj.replace(/\D/g, "");
      };
      Chance2.prototype.first = function(options) {
        options = initOptions(options, { gender: this.gender(), nationality: "en" });
        return this.pick(this.get("firstNames")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);
      };
      Chance2.prototype.profession = function(options) {
        options = initOptions(options);
        if (options.rank) {
          return this.pick(["Apprentice ", "Junior ", "Senior ", "Lead "]) + this.pick(this.get("profession"));
        } else {
          return this.pick(this.get("profession"));
        }
      };
      Chance2.prototype.company = function() {
        return this.pick(this.get("company"));
      };
      Chance2.prototype.gender = function(options) {
        options = initOptions(options, { extraGenders: [] });
        return this.pick(["Male", "Female"].concat(options.extraGenders));
      };
      Chance2.prototype.last = function(options) {
        options = initOptions(options, { nationality: "*" });
        if (options.nationality === "*") {
          var allLastNames = [];
          var lastNames = this.get("lastNames");
          Object.keys(lastNames).forEach(function(key) {
            allLastNames = allLastNames.concat(lastNames[key]);
          });
          return this.pick(allLastNames);
        } else {
          return this.pick(this.get("lastNames")[options.nationality.toLowerCase()]);
        }
      };
      Chance2.prototype.israelId = function() {
        var x = this.string({ pool: "0123456789", length: 8 });
        var y = 0;
        for (var i2 = 0; i2 < x.length; i2++) {
          var thisDigit = x[i2] * (i2 / 2 === parseInt(i2 / 2) ? 1 : 2);
          thisDigit = this.pad(thisDigit, 2).toString();
          thisDigit = parseInt(thisDigit[0]) + parseInt(thisDigit[1]);
          y = y + thisDigit;
        }
        x = x + (10 - parseInt(y.toString().slice(-1))).toString().slice(-1);
        return x;
      };
      Chance2.prototype.mrz = function(options) {
        var checkDigit = function(input) {
          var alpha2 = "<ABCDEFGHIJKLMNOPQRSTUVWXYXZ".split(""), multipliers = [7, 3, 1], runningTotal = 0;
          if (typeof input !== "string") {
            input = input.toString();
          }
          input.split("").forEach(function(character, idx) {
            var pos = alpha2.indexOf(character);
            if (pos !== -1) {
              character = pos === 0 ? 0 : pos + 9;
            } else {
              character = parseInt(character, 10);
            }
            character *= multipliers[idx % multipliers.length];
            runningTotal += character;
          });
          return runningTotal % 10;
        };
        var generate = function(opts) {
          var pad = function(length) {
            return new Array(length + 1).join("<");
          };
          var number = [
            "P<",
            opts.issuer,
            opts.last.toUpperCase(),
            "<<",
            opts.first.toUpperCase(),
            pad(39 - (opts.last.length + opts.first.length + 2)),
            opts.passportNumber,
            checkDigit(opts.passportNumber),
            opts.nationality,
            opts.dob,
            checkDigit(opts.dob),
            opts.gender,
            opts.expiry,
            checkDigit(opts.expiry),
            pad(14),
            checkDigit(pad(14))
          ].join("");
          return number + checkDigit(number.substr(44, 10) + number.substr(57, 7) + number.substr(65, 7));
        };
        var that = this;
        options = initOptions(options, {
          first: this.first(),
          last: this.last(),
          passportNumber: this.integer({ min: 1e8, max: 999999999 }),
          dob: function() {
            var date = that.birthday({ type: "adult" });
            return [
              date.getFullYear().toString().substr(2),
              that.pad(date.getMonth() + 1, 2),
              that.pad(date.getDate(), 2)
            ].join("");
          }(),
          expiry: function() {
            var date = /* @__PURE__ */ new Date();
            return [
              (date.getFullYear() + 5).toString().substr(2),
              that.pad(date.getMonth() + 1, 2),
              that.pad(date.getDate(), 2)
            ].join("");
          }(),
          gender: this.gender() === "Female" ? "F" : "M",
          issuer: "GBR",
          nationality: "GBR"
        });
        return generate(options);
      };
      Chance2.prototype.name = function(options) {
        options = initOptions(options);
        var first = this.first(options), last = this.last(options), name;
        if (options.middle) {
          name = first + " " + this.first(options) + " " + last;
        } else if (options.middle_initial) {
          name = first + " " + this.character({ alpha: true, casing: "upper" }) + ". " + last;
        } else {
          name = first + " " + last;
        }
        if (options.prefix) {
          name = this.prefix(options) + " " + name;
        }
        if (options.suffix) {
          name = name + " " + this.suffix(options);
        }
        return name;
      };
      Chance2.prototype.name_prefixes = function(gender) {
        gender = gender || "all";
        gender = gender.toLowerCase();
        var prefixes = [
          { name: "Doctor", abbreviation: "Dr." }
        ];
        if (gender === "male" || gender === "all") {
          prefixes.push({ name: "Mister", abbreviation: "Mr." });
        }
        if (gender === "female" || gender === "all") {
          prefixes.push({ name: "Miss", abbreviation: "Miss" });
          prefixes.push({ name: "Misses", abbreviation: "Mrs." });
        }
        return prefixes;
      };
      Chance2.prototype.prefix = function(options) {
        return this.name_prefix(options);
      };
      Chance2.prototype.name_prefix = function(options) {
        options = initOptions(options, { gender: "all" });
        return options.full ? this.pick(this.name_prefixes(options.gender)).name : this.pick(this.name_prefixes(options.gender)).abbreviation;
      };
      Chance2.prototype.HIDN = function() {
        var idn_pool = "0123456789";
        var idn_chrs = "ABCDEFGHIJKLMNOPQRSTUVWXYXZ";
        var idn = "";
        idn += this.string({ pool: idn_pool, length: 6 });
        idn += this.string({ pool: idn_chrs, length: 2 });
        return idn;
      };
      Chance2.prototype.ssn = function(options) {
        options = initOptions(options, { ssnFour: false, dashes: true });
        var ssn_pool = "1234567890", ssn, dash = options.dashes ? "-" : "";
        if (!options.ssnFour) {
          ssn = this.string({ pool: ssn_pool, length: 3 }) + dash + this.string({ pool: ssn_pool, length: 2 }) + dash + this.string({ pool: ssn_pool, length: 4 });
        } else {
          ssn = this.string({ pool: ssn_pool, length: 4 });
        }
        return ssn;
      };
      Chance2.prototype.aadhar = function(options) {
        options = initOptions(options, { onlyLastFour: false, separatedByWhiteSpace: true });
        var aadhar_pool = "1234567890", aadhar, whiteSpace = options.separatedByWhiteSpace ? " " : "";
        if (!options.onlyLastFour) {
          aadhar = this.string({ pool: aadhar_pool, length: 4 }) + whiteSpace + this.string({ pool: aadhar_pool, length: 4 }) + whiteSpace + this.string({ pool: aadhar_pool, length: 4 });
        } else {
          aadhar = this.string({ pool: aadhar_pool, length: 4 });
        }
        return aadhar;
      };
      Chance2.prototype.name_suffixes = function() {
        var suffixes = [
          { name: "Doctor of Osteopathic Medicine", abbreviation: "D.O." },
          { name: "Doctor of Philosophy", abbreviation: "Ph.D." },
          { name: "Esquire", abbreviation: "Esq." },
          { name: "Junior", abbreviation: "Jr." },
          { name: "Juris Doctor", abbreviation: "J.D." },
          { name: "Master of Arts", abbreviation: "M.A." },
          { name: "Master of Business Administration", abbreviation: "M.B.A." },
          { name: "Master of Science", abbreviation: "M.S." },
          { name: "Medical Doctor", abbreviation: "M.D." },
          { name: "Senior", abbreviation: "Sr." },
          { name: "The Third", abbreviation: "III" },
          { name: "The Fourth", abbreviation: "IV" },
          { name: "Bachelor of Engineering", abbreviation: "B.E" },
          { name: "Bachelor of Technology", abbreviation: "B.TECH" }
        ];
        return suffixes;
      };
      Chance2.prototype.suffix = function(options) {
        return this.name_suffix(options);
      };
      Chance2.prototype.name_suffix = function(options) {
        options = initOptions(options);
        return options.full ? this.pick(this.name_suffixes()).name : this.pick(this.name_suffixes()).abbreviation;
      };
      Chance2.prototype.nationalities = function() {
        return this.get("nationalities");
      };
      Chance2.prototype.nationality = function() {
        var nationality = this.pick(this.nationalities());
        return nationality.name;
      };
      Chance2.prototype.zodiac = function() {
        const zodiacSymbols = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"];
        return this.pickone(zodiacSymbols);
      };
      Chance2.prototype.android_id = function() {
        return "APA91" + this.string({ pool: "0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_", length: 178 });
      };
      Chance2.prototype.apple_token = function() {
        return this.string({ pool: "abcdef1234567890", length: 64 });
      };
      Chance2.prototype.wp8_anid2 = function() {
        return base64(this.hash({ length: 32 }));
      };
      Chance2.prototype.wp7_anid = function() {
        return "A=" + this.guid().replace(/-/g, "").toUpperCase() + "&E=" + this.hash({ length: 3 }) + "&W=" + this.integer({ min: 0, max: 9 });
      };
      Chance2.prototype.bb_pin = function() {
        return this.hash({ length: 8 });
      };
      Chance2.prototype.avatar = function(options) {
        var url = null;
        var URL_BASE = "//www.gravatar.com/avatar/";
        var PROTOCOLS = {
          http: "http",
          https: "https"
        };
        var FILE_TYPES = {
          bmp: "bmp",
          gif: "gif",
          jpg: "jpg",
          png: "png"
        };
        var FALLBACKS = {
          "404": "404",
          // Return 404 if not found
          mm: "mm",
          // Mystery man
          identicon: "identicon",
          // Geometric pattern based on hash
          monsterid: "monsterid",
          // A generated monster icon
          wavatar: "wavatar",
          // A generated face
          retro: "retro",
          // 8-bit icon
          blank: "blank"
          // A transparent png
        };
        var RATINGS = {
          g: "g",
          pg: "pg",
          r: "r",
          x: "x"
        };
        var opts = {
          protocol: null,
          email: null,
          fileExtension: null,
          size: null,
          fallback: null,
          rating: null
        };
        if (!options) {
          opts.email = this.email();
          options = {};
        } else if (typeof options === "string") {
          opts.email = options;
          options = {};
        } else if (typeof options !== "object") {
          return null;
        } else if (options.constructor === "Array") {
          return null;
        }
        opts = initOptions(options, opts);
        if (!opts.email) {
          opts.email = this.email();
        }
        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ":" : "";
        opts.size = parseInt(opts.size, 0) ? opts.size : "";
        opts.rating = RATINGS[opts.rating] ? opts.rating : "";
        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : "";
        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : "";
        url = opts.protocol + URL_BASE + this.bimd5.md5(opts.email) + (opts.fileExtension ? "." + opts.fileExtension : "") + (opts.size || opts.rating || opts.fallback ? "?" : "") + (opts.size ? "&s=" + opts.size.toString() : "") + (opts.rating ? "&r=" + opts.rating : "") + (opts.fallback ? "&d=" + opts.fallback : "");
        return url;
      };
      Chance2.prototype.color = function(options) {
        function gray(value, delimiter) {
          return [value, value, value].join(delimiter || "");
        }
        function rgb(hasAlpha) {
          var rgbValue = hasAlpha ? "rgba" : "rgb";
          var alphaChannel = hasAlpha ? "," + this.floating({ min: min_alpha, max: max_alpha }) : "";
          var colorValue2 = isGrayscale ? gray(this.natural({ min: min_rgb, max: max_rgb }), ",") : this.natural({ min: min_green, max: max_green }) + "," + this.natural({ min: min_blue, max: max_blue }) + "," + this.natural({ max: 255 });
          return rgbValue + "(" + colorValue2 + alphaChannel + ")";
        }
        function hex(start, end, withHash) {
          var symbol = withHash ? "#" : "";
          var hexstring = "";
          if (isGrayscale) {
            hexstring = gray(this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2));
            if (options.format === "shorthex") {
              hexstring = gray(this.hex({ min: 0, max: 15 }));
            }
          } else {
            if (options.format === "shorthex") {
              hexstring = this.pad(this.hex({ min: Math.floor(min_red / 16), max: Math.floor(max_red / 16) }), 1) + this.pad(this.hex({ min: Math.floor(min_green / 16), max: Math.floor(max_green / 16) }), 1) + this.pad(this.hex({ min: Math.floor(min_blue / 16), max: Math.floor(max_blue / 16) }), 1);
            } else if (min_red !== void 0 || max_red !== void 0 || min_green !== void 0 || max_green !== void 0 || min_blue !== void 0 || max_blue !== void 0) {
              hexstring = this.pad(this.hex({ min: min_red, max: max_red }), 2) + this.pad(this.hex({ min: min_green, max: max_green }), 2) + this.pad(this.hex({ min: min_blue, max: max_blue }), 2);
            } else {
              hexstring = this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2) + this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2) + this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2);
            }
          }
          return symbol + hexstring;
        }
        options = initOptions(options, {
          format: this.pick(["hex", "shorthex", "rgb", "rgba", "0x", "name"]),
          grayscale: false,
          casing: "lower",
          min: 0,
          max: 255,
          min_red: void 0,
          max_red: void 0,
          min_green: void 0,
          max_green: void 0,
          min_blue: void 0,
          max_blue: void 0,
          min_alpha: 0,
          max_alpha: 1
        });
        var isGrayscale = options.grayscale;
        var min_rgb = options.min;
        var max_rgb = options.max;
        var min_red = options.min_red;
        var max_red = options.max_red;
        var min_green = options.min_green;
        var max_green = options.max_green;
        var min_blue = options.min_blue;
        var max_blue = options.max_blue;
        var min_alpha = options.min_alpha;
        var max_alpha = options.max_alpha;
        if (options.min_red === void 0) {
          min_red = min_rgb;
        }
        if (options.max_red === void 0) {
          max_red = max_rgb;
        }
        if (options.min_green === void 0) {
          min_green = min_rgb;
        }
        if (options.max_green === void 0) {
          max_green = max_rgb;
        }
        if (options.min_blue === void 0) {
          min_blue = min_rgb;
        }
        if (options.max_blue === void 0) {
          max_blue = max_rgb;
        }
        if (options.min_alpha === void 0) {
          min_alpha = 0;
        }
        if (options.max_alpha === void 0) {
          max_alpha = 1;
        }
        if (isGrayscale && min_rgb === 0 && max_rgb === 255 && min_red !== void 0 && max_red !== void 0) {
          min_rgb = (min_red + min_green + min_blue) / 3;
          max_rgb = (max_red + max_green + max_blue) / 3;
        }
        var colorValue;
        if (options.format === "hex") {
          colorValue = hex.call(this, 2, 6, true);
        } else if (options.format === "shorthex") {
          colorValue = hex.call(this, 1, 3, true);
        } else if (options.format === "rgb") {
          colorValue = rgb.call(this, false);
        } else if (options.format === "rgba") {
          colorValue = rgb.call(this, true);
        } else if (options.format === "0x") {
          colorValue = "0x" + hex.call(this, 2, 6);
        } else if (options.format === "name") {
          return this.pick(this.get("colorNames"));
        } else {
          throw new RangeError('Invalid format provided. Please provide one of "hex", "shorthex", "rgb", "rgba", "0x" or "name".');
        }
        if (options.casing === "upper") {
          colorValue = colorValue.toUpperCase();
        }
        return colorValue;
      };
      Chance2.prototype.domain = function(options) {
        options = initOptions(options);
        return this.word() + "." + (options.tld || this.tld());
      };
      Chance2.prototype.email = function(options) {
        options = initOptions(options);
        return this.word({ length: options.length }) + "@" + (options.domain || this.domain());
      };
      Chance2.prototype.fbid = function() {
        return "10000" + this.string({ pool: "1234567890", length: 11 });
      };
      Chance2.prototype.google_analytics = function() {
        var account = this.pad(this.natural({ max: 999999 }), 6);
        var property = this.pad(this.natural({ max: 99 }), 2);
        return "UA-" + account + "-" + property;
      };
      Chance2.prototype.hashtag = function() {
        return "#" + this.word();
      };
      Chance2.prototype.ip = function() {
        return this.natural({ min: 1, max: 254 }) + "." + this.natural({ max: 255 }) + "." + this.natural({ max: 255 }) + "." + this.natural({ min: 1, max: 254 });
      };
      Chance2.prototype.ipv6 = function() {
        var ip_addr = this.n(this.hash, 8, { length: 4 });
        return ip_addr.join(":");
      };
      Chance2.prototype.klout = function() {
        return this.natural({ min: 1, max: 99 });
      };
      Chance2.prototype.mac = function(options) {
        options = initOptions(options, { delimiter: ":" });
        return this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2);
      };
      Chance2.prototype.semver = function(options) {
        options = initOptions(options, { include_prerelease: true });
        var range3 = this.pickone(["^", "~", "<", ">", "<=", ">=", "="]);
        if (options.range) {
          range3 = options.range;
        }
        var prerelease = "";
        if (options.include_prerelease) {
          prerelease = this.weighted(["", "-dev", "-beta", "-alpha"], [50, 10, 5, 1]);
        }
        return range3 + this.rpg("3d10").join(".") + prerelease;
      };
      Chance2.prototype.tlds = function() {
        return ["com", "org", "edu", "gov", "co.uk", "net", "io", "ac", "ad", "ae", "af", "ag", "ai", "al", "am", "ao", "aq", "ar", "as", "at", "au", "aw", "ax", "az", "ba", "bb", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bm", "bn", "bo", "br", "bs", "bt", "bv", "bw", "by", "bz", "ca", "cc", "cd", "cf", "cg", "ch", "ci", "ck", "cl", "cm", "cn", "co", "cr", "cu", "cv", "cw", "cx", "cy", "cz", "de", "dj", "dk", "dm", "do", "dz", "ec", "ee", "eg", "eh", "er", "es", "et", "eu", "fi", "fj", "fk", "fm", "fo", "fr", "ga", "gb", "gd", "ge", "gf", "gg", "gh", "gi", "gl", "gm", "gn", "gp", "gq", "gr", "gs", "gt", "gu", "gw", "gy", "hk", "hm", "hn", "hr", "ht", "hu", "id", "ie", "il", "im", "in", "io", "iq", "ir", "is", "it", "je", "jm", "jo", "jp", "ke", "kg", "kh", "ki", "km", "kn", "kp", "kr", "kw", "ky", "kz", "la", "lb", "lc", "li", "lk", "lr", "ls", "lt", "lu", "lv", "ly", "ma", "mc", "md", "me", "mg", "mh", "mk", "ml", "mm", "mn", "mo", "mp", "mq", "mr", "ms", "mt", "mu", "mv", "mw", "mx", "my", "mz", "na", "nc", "ne", "nf", "ng", "ni", "nl", "no", "np", "nr", "nu", "nz", "om", "pa", "pe", "pf", "pg", "ph", "pk", "pl", "pm", "pn", "pr", "ps", "pt", "pw", "py", "qa", "re", "ro", "rs", "ru", "rw", "sa", "sb", "sc", "sd", "se", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sr", "ss", "st", "su", "sv", "sx", "sy", "sz", "tc", "td", "tf", "tg", "th", "tj", "tk", "tl", "tm", "tn", "to", "tp", "tr", "tt", "tv", "tw", "tz", "ua", "ug", "uk", "us", "uy", "uz", "va", "vc", "ve", "vg", "vi", "vn", "vu", "wf", "ws", "ye", "yt", "za", "zm", "zw"];
      };
      Chance2.prototype.tld = function() {
        return this.pick(this.tlds());
      };
      Chance2.prototype.twitter = function() {
        return "@" + this.word();
      };
      Chance2.prototype.url = function(options) {
        options = initOptions(options, { protocol: "http", domain: this.domain(options), domain_prefix: "", path: this.word(), extensions: [] });
        var extension = options.extensions.length > 0 ? "." + this.pick(options.extensions) : "";
        var domain = options.domain_prefix ? options.domain_prefix + "." + options.domain : options.domain;
        return options.protocol + "://" + domain + "/" + options.path + extension;
      };
      Chance2.prototype.port = function() {
        return this.integer({ min: 0, max: 65535 });
      };
      Chance2.prototype.locale = function(options) {
        options = initOptions(options);
        if (options.region) {
          return this.pick(this.get("locale_regions"));
        } else {
          return this.pick(this.get("locale_languages"));
        }
      };
      Chance2.prototype.locales = function(options) {
        options = initOptions(options);
        if (options.region) {
          return this.get("locale_regions");
        } else {
          return this.get("locale_languages");
        }
      };
      Chance2.prototype.loremPicsum = function(options) {
        options = initOptions(options, { width: 500, height: 500, greyscale: false, blurred: false });
        var greyscale = options.greyscale ? "g/" : "";
        var query = options.blurred ? "/?blur" : "/?random";
        return "https://picsum.photos/" + greyscale + options.width + "/" + options.height + query;
      };
      Chance2.prototype.address = function(options) {
        options = initOptions(options);
        return this.natural({ min: 5, max: 2e3 }) + " " + this.street(options);
      };
      Chance2.prototype.altitude = function(options) {
        options = initOptions(options, { fixed: 5, min: 0, max: 8848 });
        return this.floating({
          min: options.min,
          max: options.max,
          fixed: options.fixed
        });
      };
      Chance2.prototype.areacode = function(options) {
        options = initOptions(options, { parens: true });
        var areacode = options.exampleNumber ? "555" : this.natural({ min: 2, max: 9 }).toString() + this.natural({ min: 0, max: 8 }).toString() + this.natural({ min: 0, max: 9 }).toString();
        return options.parens ? "(" + areacode + ")" : areacode;
      };
      Chance2.prototype.city = function() {
        return this.capitalize(this.word({ syllables: 3 }));
      };
      Chance2.prototype.coordinates = function(options) {
        return this.latitude(options) + ", " + this.longitude(options);
      };
      Chance2.prototype.countries = function() {
        return this.get("countries");
      };
      Chance2.prototype.country = function(options) {
        options = initOptions(options);
        var country = this.pick(this.countries());
        return options.raw ? country : options.full ? country.name : country.abbreviation;
      };
      Chance2.prototype.depth = function(options) {
        options = initOptions(options, { fixed: 5, min: -10994, max: 0 });
        return this.floating({
          min: options.min,
          max: options.max,
          fixed: options.fixed
        });
      };
      Chance2.prototype.geohash = function(options) {
        options = initOptions(options, { length: 7 });
        return this.string({ length: options.length, pool: "0123456789bcdefghjkmnpqrstuvwxyz" });
      };
      Chance2.prototype.geojson = function(options) {
        return this.latitude(options) + ", " + this.longitude(options) + ", " + this.altitude(options);
      };
      Chance2.prototype.latitude = function(options) {
        var [DDM, DMS, DD] = ["ddm", "dms", "dd"];
        options = initOptions(
          options,
          options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ? { min: 0, max: 89, fixed: 4 } : { fixed: 5, min: -90, max: 90, format: DD }
        );
        var format = options.format.toLowerCase();
        if (format === DDM || format === DMS) {
          testRange(options.min < 0 || options.min > 89, "Chance: Min specified is out of range. Should be between 0 - 89");
          testRange(options.max < 0 || options.max > 89, "Chance: Max specified is out of range. Should be between 0 - 89");
          testRange(options.fixed > 4, "Chance: Fixed specified should be below or equal to 4");
        }
        switch (format) {
          case DDM: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.floating({ min: 0, max: 59, fixed: options.fixed });
          }
          case DMS: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.integer({ min: 0, max: 59 }) + "’" + this.floating({ min: 0, max: 59, fixed: options.fixed }) + "”";
          }
          case DD:
          default: {
            return this.floating({ min: options.min, max: options.max, fixed: options.fixed });
          }
        }
      };
      Chance2.prototype.longitude = function(options) {
        var [DDM, DMS, DD] = ["ddm", "dms", "dd"];
        options = initOptions(
          options,
          options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ? { min: 0, max: 179, fixed: 4 } : { fixed: 5, min: -180, max: 180, format: DD }
        );
        var format = options.format.toLowerCase();
        if (format === DDM || format === DMS) {
          testRange(options.min < 0 || options.min > 179, "Chance: Min specified is out of range. Should be between 0 - 179");
          testRange(options.max < 0 || options.max > 179, "Chance: Max specified is out of range. Should be between 0 - 179");
          testRange(options.fixed > 4, "Chance: Fixed specified should be below or equal to 4");
        }
        switch (format) {
          case DDM: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.floating({ min: 0, max: 59.9999, fixed: options.fixed });
          }
          case DMS: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.integer({ min: 0, max: 59 }) + "’" + this.floating({ min: 0, max: 59.9999, fixed: options.fixed }) + "”";
          }
          case DD:
          default: {
            return this.floating({ min: options.min, max: options.max, fixed: options.fixed });
          }
        }
      };
      Chance2.prototype.phone = function(options) {
        var self2 = this, numPick, ukNum = function(parts) {
          var section = [];
          parts.sections.forEach(function(n) {
            section.push(self2.string({ pool: "0123456789", length: n }));
          });
          return parts.area + section.join(" ");
        };
        options = initOptions(options, {
          formatted: true,
          country: "us",
          mobile: false,
          exampleNumber: false
        });
        if (!options.formatted) {
          options.parens = false;
        }
        var phone;
        switch (options.country) {
          case "fr":
            if (!options.mobile) {
              numPick = this.pick([
                // Valid zone and département codes.
                "01" + this.pick(["30", "34", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "53", "55", "56", "58", "60", "64", "69", "70", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83"]) + self2.string({ pool: "0123456789", length: 6 }),
                "02" + this.pick(["14", "18", "22", "23", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "40", "41", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "56", "57", "61", "62", "69", "72", "76", "77", "78", "85", "90", "96", "97", "98", "99"]) + self2.string({ pool: "0123456789", length: 6 }),
                "03" + this.pick(["10", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "39", "44", "45", "51", "52", "54", "55", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90"]) + self2.string({ pool: "0123456789", length: 6 }),
                "04" + this.pick(["11", "13", "15", "20", "22", "26", "27", "30", "32", "34", "37", "42", "43", "44", "50", "56", "57", "63", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "88", "89", "90", "91", "92", "93", "94", "95", "97", "98"]) + self2.string({ pool: "0123456789", length: 6 }),
                "05" + this.pick(["08", "16", "17", "19", "24", "31", "32", "33", "34", "35", "40", "45", "46", "47", "49", "53", "55", "56", "57", "58", "59", "61", "62", "63", "64", "65", "67", "79", "81", "82", "86", "87", "90", "94"]) + self2.string({ pool: "0123456789", length: 6 }),
                "09" + self2.string({ pool: "0123456789", length: 8 })
              ]);
              phone = options.formatted ? numPick.match(/../g).join(" ") : numPick;
            } else {
              numPick = this.pick(["06", "07"]) + self2.string({ pool: "0123456789", length: 8 });
              phone = options.formatted ? numPick.match(/../g).join(" ") : numPick;
            }
            break;
          case "uk":
            if (!options.mobile) {
              numPick = this.pick([
                //valid area codes of major cities/counties followed by random numbers in required format.
                { area: "01" + this.character({ pool: "234569" }) + "1 ", sections: [3, 4] },
                { area: "020 " + this.character({ pool: "378" }), sections: [3, 4] },
                { area: "023 " + this.character({ pool: "89" }), sections: [3, 4] },
                { area: "024 7", sections: [3, 4] },
                { area: "028 " + this.pick(["25", "28", "37", "71", "82", "90", "92", "95"]), sections: [2, 4] },
                { area: "012" + this.pick(["04", "08", "54", "76", "97", "98"]) + " ", sections: [6] },
                { area: "013" + this.pick(["63", "64", "84", "86"]) + " ", sections: [6] },
                { area: "014" + this.pick(["04", "20", "60", "61", "80", "88"]) + " ", sections: [6] },
                { area: "015" + this.pick(["24", "27", "62", "66"]) + " ", sections: [6] },
                { area: "016" + this.pick(["06", "29", "35", "47", "59", "95"]) + " ", sections: [6] },
                { area: "017" + this.pick(["26", "44", "50", "68"]) + " ", sections: [6] },
                { area: "018" + this.pick(["27", "37", "84", "97"]) + " ", sections: [6] },
                { area: "019" + this.pick(["00", "05", "35", "46", "49", "63", "95"]) + " ", sections: [6] }
              ]);
              phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(" ", "", "g");
            } else {
              numPick = this.pick([
                { area: "07" + this.pick(["4", "5", "7", "8", "9"]), sections: [2, 6] },
                { area: "07624 ", sections: [6] }
              ]);
              phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(" ", "");
            }
            break;
          case "za":
            if (!options.mobile) {
              numPick = this.pick([
                "01" + this.pick(["0", "1", "2", "3", "4", "5", "6", "7", "8"]) + self2.string({ pool: "0123456789", length: 7 }),
                "02" + this.pick(["1", "2", "3", "4", "7", "8"]) + self2.string({ pool: "0123456789", length: 7 }),
                "03" + this.pick(["1", "2", "3", "5", "6", "9"]) + self2.string({ pool: "0123456789", length: 7 }),
                "04" + this.pick(["1", "2", "3", "4", "5", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 7 }),
                "05" + this.pick(["1", "3", "4", "6", "7", "8"]) + self2.string({ pool: "0123456789", length: 7 })
              ]);
              phone = options.formatted || numPick;
            } else {
              numPick = this.pick([
                "060" + this.pick(["3", "4", "5", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 6 }),
                "061" + this.pick(["0", "1", "2", "3", "4", "5", "8"]) + self2.string({ pool: "0123456789", length: 6 }),
                "06" + self2.string({ pool: "0123456789", length: 7 }),
                "071" + this.pick(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 6 }),
                "07" + this.pick(["2", "3", "4", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 7 }),
                "08" + this.pick(["0", "1", "2", "3", "4", "5"]) + self2.string({ pool: "0123456789", length: 7 })
              ]);
              phone = options.formatted || numPick;
            }
            break;
          case "us":
            var areacode = this.areacode(options).toString();
            var exchange = this.natural({ min: 2, max: 9 }).toString() + this.natural({ min: 0, max: 9 }).toString() + this.natural({ min: 0, max: 9 }).toString();
            var subscriber = this.natural({ min: 1e3, max: 9999 }).toString();
            phone = options.formatted ? areacode + " " + exchange + "-" + subscriber : areacode + exchange + subscriber;
            break;
          case "br":
            var areaCode = this.pick(["11", "12", "13", "14", "15", "16", "17", "18", "19", "21", "22", "24", "27", "28", "31", "32", "33", "34", "35", "37", "38", "41", "42", "43", "44", "45", "46", "47", "48", "49", "51", "53", "54", "55", "61", "62", "63", "64", "65", "66", "67", "68", "69", "71", "73", "74", "75", "77", "79", "81", "82", "83", "84", "85", "86", "87", "88", "89", "91", "92", "93", "94", "95", "96", "97", "98", "99"]);
            var prefix;
            if (options.mobile) {
              prefix = "9" + self2.string({ pool: "0123456789", length: 4 });
            } else {
              prefix = this.natural({ min: 2e3, max: 5999 }).toString();
            }
            var mcdu = self2.string({ pool: "0123456789", length: 4 });
            phone = options.formatted ? "(" + areaCode + ") " + prefix + "-" + mcdu : areaCode + prefix + mcdu;
            break;
        }
        return phone;
      };
      Chance2.prototype.postal = function() {
        var pd = this.character({ pool: "XVTSRPNKLMHJGECBA" });
        var fsa = pd + this.natural({ max: 9 }) + this.character({ alpha: true, casing: "upper" });
        var ldu = this.natural({ max: 9 }) + this.character({ alpha: true, casing: "upper" }) + this.natural({ max: 9 });
        return fsa + " " + ldu;
      };
      Chance2.prototype.postcode = function() {
        var area = this.pick(this.get("postcodeAreas")).code;
        var district = this.natural({ max: 9 });
        var subDistrict = this.bool() ? this.character({ alpha: true, casing: "upper" }) : "";
        var outward = area + district + subDistrict;
        var sector = this.natural({ max: 9 });
        var unit = this.character({ alpha: true, casing: "upper" }) + this.character({ alpha: true, casing: "upper" });
        var inward = sector + unit;
        return outward + " " + inward;
      };
      Chance2.prototype.counties = function(options) {
        options = initOptions(options, { country: "uk" });
        return this.get("counties")[options.country.toLowerCase()];
      };
      Chance2.prototype.county = function(options) {
        return this.pick(this.counties(options)).name;
      };
      Chance2.prototype.provinces = function(options) {
        options = initOptions(options, { country: "ca" });
        return this.get("provinces")[options.country.toLowerCase()];
      };
      Chance2.prototype.province = function(options) {
        return options && options.full ? this.pick(this.provinces(options)).name : this.pick(this.provinces(options)).abbreviation;
      };
      Chance2.prototype.state = function(options) {
        return options && options.full ? this.pick(this.states(options)).name : this.pick(this.states(options)).abbreviation;
      };
      Chance2.prototype.states = function(options) {
        options = initOptions(options, { country: "us", us_states_and_dc: true });
        var states;
        switch (options.country.toLowerCase()) {
          case "us":
            var us_states_and_dc = this.get("us_states_and_dc"), territories = this.get("territories"), armed_forces = this.get("armed_forces");
            states = [];
            if (options.us_states_and_dc) {
              states = states.concat(us_states_and_dc);
            }
            if (options.territories) {
              states = states.concat(territories);
            }
            if (options.armed_forces) {
              states = states.concat(armed_forces);
            }
            break;
          case "it":
          case "mx":
            states = this.get("country_regions")[options.country.toLowerCase()];
            break;
          case "uk":
            states = this.get("counties")[options.country.toLowerCase()];
            break;
        }
        return states;
      };
      Chance2.prototype.street = function(options) {
        options = initOptions(options, { country: "us", syllables: 2 });
        var street;
        switch (options.country.toLowerCase()) {
          case "us":
            street = this.word({ syllables: options.syllables });
            street = this.capitalize(street);
            street += " ";
            street += options.short_suffix ? this.street_suffix(options).abbreviation : this.street_suffix(options).name;
            break;
          case "it":
            street = this.word({ syllables: options.syllables });
            street = this.capitalize(street);
            street = (options.short_suffix ? this.street_suffix(options).abbreviation : this.street_suffix(options).name) + " " + street;
            break;
        }
        return street;
      };
      Chance2.prototype.street_suffix = function(options) {
        options = initOptions(options, { country: "us" });
        return this.pick(this.street_suffixes(options));
      };
      Chance2.prototype.street_suffixes = function(options) {
        options = initOptions(options, { country: "us" });
        return this.get("street_suffixes")[options.country.toLowerCase()];
      };
      Chance2.prototype.zip = function(options) {
        var zip = this.n(this.natural, 5, { max: 9 });
        if (options && options.plusfour === true) {
          zip.push("-");
          zip = zip.concat(this.n(this.natural, 4, { max: 9 }));
        }
        return zip.join("");
      };
      Chance2.prototype.ampm = function() {
        return this.bool() ? "am" : "pm";
      };
      Chance2.prototype.date = function(options) {
        var date_string, date;
        if (options && (options.min || options.max)) {
          options = initOptions(options, {
            american: true,
            string: false
          });
          var min = typeof options.min !== "undefined" ? options.min.getTime() : 1;
          var max = typeof options.max !== "undefined" ? options.max.getTime() : 864e13;
          date = new Date(this.integer({ min, max }));
        } else {
          var m = this.month({ raw: true });
          var daysInMonth = m.days;
          if (options && options.month) {
            daysInMonth = this.get("months")[(options.month % 12 + 12) % 12].days;
          }
          options = initOptions(options, {
            year: parseInt(this.year(), 10),
            // Necessary to subtract 1 because Date() 0-indexes month but not day or year
            // for some reason.
            month: m.numeric - 1,
            day: this.natural({ min: 1, max: daysInMonth }),
            hour: this.hour({ twentyfour: true }),
            minute: this.minute(),
            second: this.second(),
            millisecond: this.millisecond(),
            american: true,
            string: false
          });
          date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
        }
        if (options.american) {
          date_string = date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear();
        } else {
          date_string = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
        }
        return options.string ? date_string : date;
      };
      Chance2.prototype.hammertime = function(options) {
        return this.date(options).getTime();
      };
      Chance2.prototype.hour = function(options) {
        options = initOptions(options, {
          min: options && options.twentyfour ? 0 : 1,
          max: options && options.twentyfour ? 23 : 12
        });
        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.twentyfour && options.max > 23, "Chance: Max cannot be greater than 23 for twentyfour option.");
        testRange(!options.twentyfour && options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        return this.natural({ min: options.min, max: options.max });
      };
      Chance2.prototype.millisecond = function() {
        return this.natural({ max: 999 });
      };
      Chance2.prototype.minute = Chance2.prototype.second = function(options) {
        options = initOptions(options, { min: 0, max: 59 });
        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.max > 59, "Chance: Max cannot be greater than 59.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        return this.natural({ min: options.min, max: options.max });
      };
      Chance2.prototype.month = function(options) {
        options = initOptions(options, { min: 1, max: 12 });
        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        var month = this.pick(this.months().slice(options.min - 1, options.max));
        return options.raw ? month : month.name;
      };
      Chance2.prototype.months = function() {
        return this.get("months");
      };
      Chance2.prototype.second = function() {
        return this.natural({ max: 59 });
      };
      Chance2.prototype.timestamp = function() {
        return this.natural({ min: 1, max: parseInt((/* @__PURE__ */ new Date()).getTime() / 1e3, 10) });
      };
      Chance2.prototype.weekday = function(options) {
        options = initOptions(options, { weekday_only: false });
        var weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
        if (!options.weekday_only) {
          weekdays.push("Saturday");
          weekdays.push("Sunday");
        }
        return this.pickone(weekdays);
      };
      Chance2.prototype.year = function(options) {
        options = initOptions(options, { min: (/* @__PURE__ */ new Date()).getFullYear() });
        options.max = typeof options.max !== "undefined" ? options.max : options.min + 100;
        return this.natural(options).toString();
      };
      Chance2.prototype.cc = function(options) {
        options = initOptions(options);
        var type, number, to_generate;
        type = options.type ? this.cc_type({ name: options.type, raw: true }) : this.cc_type({ raw: true });
        number = type.prefix.split("");
        to_generate = type.length - type.prefix.length - 1;
        number = number.concat(this.n(this.integer, to_generate, { min: 0, max: 9 }));
        number.push(this.luhn_calculate(number.join("")));
        return number.join("");
      };
      Chance2.prototype.cc_types = function() {
        return this.get("cc_types");
      };
      Chance2.prototype.cc_type = function(options) {
        options = initOptions(options);
        var types = this.cc_types(), type = null;
        if (options.name) {
          for (var i2 = 0; i2 < types.length; i2++) {
            if (types[i2].name === options.name || types[i2].short_name === options.name) {
              type = types[i2];
              break;
            }
          }
          if (type === null) {
            throw new RangeError("Chance: Credit card type '" + options.name + "' is not supported");
          }
        } else {
          type = this.pick(types);
        }
        return options.raw ? type : type.name;
      };
      Chance2.prototype.currency_types = function() {
        return this.get("currency_types");
      };
      Chance2.prototype.currency = function() {
        return this.pick(this.currency_types());
      };
      Chance2.prototype.timezones = function() {
        return this.get("timezones");
      };
      Chance2.prototype.timezone = function() {
        return this.pick(this.timezones());
      };
      Chance2.prototype.currency_pair = function(returnAsString) {
        var currencies = this.unique(this.currency, 2, {
          comparator: function(arr, val) {
            return arr.reduce(function(acc, item) {
              return acc || item.code === val.code;
            }, false);
          }
        });
        if (returnAsString) {
          return currencies[0].code + "/" + currencies[1].code;
        } else {
          return currencies;
        }
      };
      Chance2.prototype.dollar = function(options) {
        options = initOptions(options, { max: 1e4, min: 0 });
        var dollar = this.floating({ min: options.min, max: options.max, fixed: 2 }).toString(), cents = dollar.split(".")[1];
        if (cents === void 0) {
          dollar += ".00";
        } else if (cents.length < 2) {
          dollar = dollar + "0";
        }
        if (dollar < 0) {
          return "-$" + dollar.replace("-", "");
        } else {
          return "$" + dollar;
        }
      };
      Chance2.prototype.euro = function(options) {
        return Number(this.dollar(options).replace("$", "")).toLocaleString() + "€";
      };
      Chance2.prototype.exp = function(options) {
        options = initOptions(options);
        var exp = {};
        exp.year = this.exp_year();
        if (exp.year === (/* @__PURE__ */ new Date()).getFullYear().toString()) {
          exp.month = this.exp_month({ future: true });
        } else {
          exp.month = this.exp_month();
        }
        return options.raw ? exp : exp.month + "/" + exp.year;
      };
      Chance2.prototype.exp_month = function(options) {
        options = initOptions(options);
        var month, month_int, curMonth = (/* @__PURE__ */ new Date()).getMonth() + 1;
        if (options.future && curMonth !== 12) {
          do {
            month = this.month({ raw: true }).numeric;
            month_int = parseInt(month, 10);
          } while (month_int <= curMonth);
        } else {
          month = this.month({ raw: true }).numeric;
        }
        return month;
      };
      Chance2.prototype.exp_year = function() {
        var curMonth = (/* @__PURE__ */ new Date()).getMonth() + 1, curYear = (/* @__PURE__ */ new Date()).getFullYear();
        return this.year({ min: curMonth === 12 ? curYear + 1 : curYear, max: curYear + 10 });
      };
      Chance2.prototype.vat = function(options) {
        options = initOptions(options, { country: "it" });
        switch (options.country.toLowerCase()) {
          case "it":
            return this.it_vat();
        }
      };
      Chance2.prototype.iban = function() {
        var alpha2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        var alphanum = alpha2 + "0123456789";
        var iban = this.string({ length: 2, pool: alpha2 }) + this.pad(this.integer({ min: 0, max: 99 }), 2) + this.string({ length: 4, pool: alphanum }) + this.pad(this.natural(), this.natural({ min: 6, max: 26 }));
        return iban;
      };
      Chance2.prototype.it_vat = function() {
        var it_vat = this.natural({ min: 1, max: 18e5 });
        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: "it" })).code, 3);
        return it_vat + this.luhn_calculate(it_vat);
      };
      Chance2.prototype.cf = function(options) {
        options = options || {};
        var gender = !!options.gender ? options.gender : this.gender(), first = !!options.first ? options.first : this.first({ gender, nationality: "it" }), last = !!options.last ? options.last : this.last({ nationality: "it" }), birthday = !!options.birthday ? options.birthday : this.birthday(), city = !!options.city ? options.city : this.pickone(["A", "B", "C", "D", "E", "F", "G", "H", "I", "L", "M", "Z"]) + this.pad(this.natural({ max: 999 }), 3), cf = [], name_generator = function(name, isLast) {
          var temp, return_value = [];
          if (name.length < 3) {
            return_value = name.split("").concat("XXX".split("")).splice(0, 3);
          } else {
            temp = name.toUpperCase().split("").map(function(c) {
              return "BCDFGHJKLMNPRSTVWZ".indexOf(c) !== -1 ? c : void 0;
            }).join("");
            if (temp.length > 3) {
              if (isLast) {
                temp = temp.substr(0, 3);
              } else {
                temp = temp[0] + temp.substr(2, 2);
              }
            }
            if (temp.length < 3) {
              return_value = temp;
              temp = name.toUpperCase().split("").map(function(c) {
                return "AEIOU".indexOf(c) !== -1 ? c : void 0;
              }).join("").substr(0, 3 - return_value.length);
            }
            return_value = return_value + temp;
          }
          return return_value;
        }, date_generator = function(birthday2, gender2, that) {
          var lettermonths = ["A", "B", "C", "D", "E", "H", "L", "M", "P", "R", "S", "T"];
          return birthday2.getFullYear().toString().substr(2) + lettermonths[birthday2.getMonth()] + that.pad(birthday2.getDate() + (gender2.toLowerCase() === "female" ? 40 : 0), 2);
        }, checkdigit_generator = function(cf2) {
          var range1 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", range22 = "ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ", evens = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", odds = "BAKPLCQDREVOSFTGUHMINJWZYX", digit = 0;
          for (var i2 = 0; i2 < 15; i2++) {
            if (i2 % 2 !== 0) {
              digit += evens.indexOf(range22[range1.indexOf(cf2[i2])]);
            } else {
              digit += odds.indexOf(range22[range1.indexOf(cf2[i2])]);
            }
          }
          return evens[digit % 26];
        };
        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split("")).join("");
        cf += checkdigit_generator(cf.toUpperCase(), this);
        return cf.toUpperCase();
      };
      Chance2.prototype.pl_pesel = function() {
        var number = this.natural({ min: 1, max: 9999999999 });
        var arr = this.pad(number, 10).split("");
        for (var i2 = 0; i2 < arr.length; i2++) {
          arr[i2] = parseInt(arr[i2]);
        }
        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;
        if (controlNumber !== 0) {
          controlNumber = 10 - controlNumber;
        }
        return arr.join("") + controlNumber;
      };
      Chance2.prototype.pl_nip = function() {
        var number = this.natural({ min: 1, max: 999999999 });
        var arr = this.pad(number, 9).split("");
        for (var i2 = 0; i2 < arr.length; i2++) {
          arr[i2] = parseInt(arr[i2]);
        }
        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;
        if (controlNumber === 10) {
          return this.pl_nip();
        }
        return arr.join("") + controlNumber;
      };
      Chance2.prototype.pl_regon = function() {
        var number = this.natural({ min: 1, max: 99999999 });
        var arr = this.pad(number, 8).split("");
        for (var i2 = 0; i2 < arr.length; i2++) {
          arr[i2] = parseInt(arr[i2]);
        }
        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;
        if (controlNumber === 10) {
          controlNumber = 0;
        }
        return arr.join("") + controlNumber;
      };
      Chance2.prototype.note = function(options) {
        options = initOptions(options, { notes: "flatKey" });
        var scales = {
          naturals: ["C", "D", "E", "F", "G", "A", "B"],
          flats: ["D♭", "E♭", "G♭", "A♭", "B♭"],
          sharps: ["C♯", "D♯", "F♯", "G♯", "A♯"]
        };
        scales.all = scales.naturals.concat(scales.flats.concat(scales.sharps));
        scales.flatKey = scales.naturals.concat(scales.flats);
        scales.sharpKey = scales.naturals.concat(scales.sharps);
        return this.pickone(scales[options.notes]);
      };
      Chance2.prototype.midi_note = function(options) {
        var min = 0;
        var max = 127;
        options = initOptions(options, { min, max });
        return this.integer({ min: options.min, max: options.max });
      };
      Chance2.prototype.chord_quality = function(options) {
        options = initOptions(options, { jazz: true });
        var chord_qualities = ["maj", "min", "aug", "dim"];
        if (options.jazz) {
          chord_qualities = [
            "maj7",
            "min7",
            "7",
            "sus",
            "dim",
            "ø"
          ];
        }
        return this.pickone(chord_qualities);
      };
      Chance2.prototype.chord = function(options) {
        options = initOptions(options);
        return this.note(options) + this.chord_quality(options);
      };
      Chance2.prototype.tempo = function(options) {
        var min = 40;
        var max = 320;
        options = initOptions(options, { min, max });
        return this.integer({ min: options.min, max: options.max });
      };
      Chance2.prototype.coin = function() {
        return this.bool() ? "heads" : "tails";
      };
      function diceFn(range3) {
        return function() {
          return this.natural(range3);
        };
      }
      Chance2.prototype.d4 = diceFn({ min: 1, max: 4 });
      Chance2.prototype.d6 = diceFn({ min: 1, max: 6 });
      Chance2.prototype.d8 = diceFn({ min: 1, max: 8 });
      Chance2.prototype.d10 = diceFn({ min: 1, max: 10 });
      Chance2.prototype.d12 = diceFn({ min: 1, max: 12 });
      Chance2.prototype.d20 = diceFn({ min: 1, max: 20 });
      Chance2.prototype.d30 = diceFn({ min: 1, max: 30 });
      Chance2.prototype.d100 = diceFn({ min: 1, max: 100 });
      Chance2.prototype.rpg = function(thrown, options) {
        options = initOptions(options);
        if (!thrown) {
          throw new RangeError("Chance: A type of die roll must be included");
        } else {
          var bits = thrown.toLowerCase().split("d"), rolls = [];
          if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {
            throw new Error("Chance: Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
          }
          for (var i2 = bits[0]; i2 > 0; i2--) {
            rolls[i2 - 1] = this.natural({ min: 1, max: bits[1] });
          }
          return typeof options.sum !== "undefined" && options.sum ? rolls.reduce(function(p, c) {
            return p + c;
          }) : rolls;
        }
      };
      Chance2.prototype.guid = function(options) {
        options = initOptions(options, { version: 5 });
        var guid_pool = "abcdef1234567890", variant_pool = "ab89", guid = this.string({ pool: guid_pool, length: 8 }) + "-" + this.string({ pool: guid_pool, length: 4 }) + "-" + // The Version
        options.version + this.string({ pool: guid_pool, length: 3 }) + "-" + // The Variant
        this.string({ pool: variant_pool, length: 1 }) + this.string({ pool: guid_pool, length: 3 }) + "-" + this.string({ pool: guid_pool, length: 12 });
        return guid;
      };
      Chance2.prototype.hash = function(options) {
        options = initOptions(options, { length: 40, casing: "lower" });
        var pool = options.casing === "upper" ? HEX_POOL.toUpperCase() : HEX_POOL;
        return this.string({ pool, length: options.length });
      };
      Chance2.prototype.luhn_check = function(num) {
        var str = num.toString();
        var checkDigit = +str.substring(str.length - 1);
        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));
      };
      Chance2.prototype.luhn_calculate = function(num) {
        var digits = num.toString().split("").reverse();
        var sum = 0;
        var digit;
        for (var i2 = 0, l = digits.length; l > i2; ++i2) {
          digit = +digits[i2];
          if (i2 % 2 === 0) {
            digit *= 2;
            if (digit > 9) {
              digit -= 9;
            }
          }
          sum += digit;
        }
        return sum * 9 % 10;
      };
      Chance2.prototype.md5 = function(options) {
        var opts = { str: "", key: null, raw: false };
        if (!options) {
          opts.str = this.string();
          options = {};
        } else if (typeof options === "string") {
          opts.str = options;
          options = {};
        } else if (typeof options !== "object") {
          return null;
        } else if (options.constructor === "Array") {
          return null;
        }
        opts = initOptions(options, opts);
        if (!opts.str) {
          throw new Error("A parameter is required to return an md5 hash.");
        }
        return this.bimd5.md5(opts.str, opts.key, opts.raw);
      };
      Chance2.prototype.file = function(options) {
        var fileOptions = options || {};
        var poolCollectionKey = "fileExtension";
        var typeRange = Object.keys(this.get("fileExtension"));
        var fileName;
        var fileExtension;
        fileName = this.word({ length: fileOptions.length });
        if (fileOptions.extension) {
          fileExtension = fileOptions.extension;
          return fileName + "." + fileExtension;
        }
        if (fileOptions.extensions) {
          if (Array.isArray(fileOptions.extensions)) {
            fileExtension = this.pickone(fileOptions.extensions);
            return fileName + "." + fileExtension;
          } else if (fileOptions.extensions.constructor === Object) {
            var extensionObjectCollection = fileOptions.extensions;
            var keys = Object.keys(extensionObjectCollection);
            fileExtension = this.pickone(extensionObjectCollection[this.pickone(keys)]);
            return fileName + "." + fileExtension;
          }
          throw new Error("Chance: Extensions must be an Array or Object");
        }
        if (fileOptions.fileType) {
          var fileType = fileOptions.fileType;
          if (typeRange.indexOf(fileType) !== -1) {
            fileExtension = this.pickone(this.get(poolCollectionKey)[fileType]);
            return fileName + "." + fileExtension;
          }
          throw new RangeError("Chance: Expect file type value to be 'raster', 'vector', '3d' or 'document'");
        }
        fileExtension = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);
        return fileName + "." + fileExtension;
      };
      Chance2.prototype.fileWithContent = function(options) {
        var fileOptions = options || {};
        var fileName = "fileName" in fileOptions ? fileOptions.fileName : this.file().split(".")[0];
        fileName += "." + ("fileExtension" in fileOptions ? fileOptions.fileExtension : this.file().split(".")[1]);
        if (typeof fileOptions.fileSize !== "number") {
          throw new Error("File size must be an integer");
        }
        var file = {
          fileData: this.buffer({ length: fileOptions.fileSize }),
          fileName
        };
        return file;
      };
      var data = {
        firstNames: {
          "male": {
            "en": ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas", "Christopher", "Daniel", "Matthew", "George", "Donald", "Anthony", "Paul", "Mark", "Edward", "Steven", "Kenneth", "Andrew", "Brian", "Joshua", "Kevin", "Ronald", "Timothy", "Jason", "Jeffrey", "Frank", "Gary", "Ryan", "Nicholas", "Eric", "Stephen", "Jacob", "Larry", "Jonathan", "Scott", "Raymond", "Justin", "Brandon", "Gregory", "Samuel", "Benjamin", "Patrick", "Jack", "Henry", "Walter", "Dennis", "Jerry", "Alexander", "Peter", "Tyler", "Douglas", "Harold", "Aaron", "Jose", "Adam", "Arthur", "Zachary", "Carl", "Nathan", "Albert", "Kyle", "Lawrence", "Joe", "Willie", "Gerald", "Roger", "Keith", "Jeremy", "Terry", "Harry", "Ralph", "Sean", "Jesse", "Roy", "Louis", "Billy", "Austin", "Bruce", "Eugene", "Christian", "Bryan", "Wayne", "Russell", "Howard", "Fred", "Ethan", "Jordan", "Philip", "Alan", "Juan", "Randy", "Vincent", "Bobby", "Dylan", "Johnny", "Phillip", "Victor", "Clarence", "Ernest", "Martin", "Craig", "Stanley", "Shawn", "Travis", "Bradley", "Leonard", "Earl", "Gabriel", "Jimmy", "Francis", "Todd", "Noah", "Danny", "Dale", "Cody", "Carlos", "Allen", "Frederick", "Logan", "Curtis", "Alex", "Joel", "Luis", "Norman", "Marvin", "Glenn", "Tony", "Nathaniel", "Rodney", "Melvin", "Alfred", "Steve", "Cameron", "Chad", "Edwin", "Caleb", "Evan", "Antonio", "Lee", "Herbert", "Jeffery", "Isaac", "Derek", "Ricky", "Marcus", "Theodore", "Elijah", "Luke", "Jesus", "Eddie", "Troy", "Mike", "Dustin", "Ray", "Adrian", "Bernard", "Leroy", "Angel", "Randall", "Wesley", "Ian", "Jared", "Mason", "Hunter", "Calvin", "Oscar", "Clifford", "Jay", "Shane", "Ronnie", "Barry", "Lucas", "Corey", "Manuel", "Leo", "Tommy", "Warren", "Jackson", "Isaiah", "Connor", "Don", "Dean", "Jon", "Julian", "Miguel", "Bill", "Lloyd", "Charlie", "Mitchell", "Leon", "Jerome", "Darrell", "Jeremiah", "Alvin", "Brett", "Seth", "Floyd", "Jim", "Blake", "Micheal", "Gordon", "Trevor", "Lewis", "Erik", "Edgar", "Vernon", "Devin", "Gavin", "Jayden", "Chris", "Clyde", "Tom", "Derrick", "Mario", "Brent", "Marc", "Herman", "Chase", "Dominic", "Ricardo", "Franklin", "Maurice", "Max", "Aiden", "Owen", "Lester", "Gilbert", "Elmer", "Gene", "Francisco", "Glen", "Cory", "Garrett", "Clayton", "Sam", "Jorge", "Chester", "Alejandro", "Jeff", "Harvey", "Milton", "Cole", "Ivan", "Andre", "Duane", "Landon"],
            // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163
            "it": ["Adolfo", "Alberto", "Aldo", "Alessandro", "Alessio", "Alfredo", "Alvaro", "Andrea", "Angelo", "Angiolo", "Antonino", "Antonio", "Attilio", "Benito", "Bernardo", "Bruno", "Carlo", "Cesare", "Christian", "Claudio", "Corrado", "Cosimo", "Cristian", "Cristiano", "Daniele", "Dario", "David", "Davide", "Diego", "Dino", "Domenico", "Duccio", "Edoardo", "Elia", "Elio", "Emanuele", "Emiliano", "Emilio", "Enrico", "Enzo", "Ettore", "Fabio", "Fabrizio", "Federico", "Ferdinando", "Fernando", "Filippo", "Francesco", "Franco", "Gabriele", "Giacomo", "Giampaolo", "Giampiero", "Giancarlo", "Gianfranco", "Gianluca", "Gianmarco", "Gianni", "Gino", "Giorgio", "Giovanni", "Giuliano", "Giulio", "Giuseppe", "Graziano", "Gregorio", "Guido", "Iacopo", "Jacopo", "Lapo", "Leonardo", "Lorenzo", "Luca", "Luciano", "Luigi", "Manuel", "Marcello", "Marco", "Marino", "Mario", "Massimiliano", "Massimo", "Matteo", "Mattia", "Maurizio", "Mauro", "Michele", "Mirko", "Mohamed", "Nello", "Neri", "Niccolò", "Nicola", "Osvaldo", "Otello", "Paolo", "Pier Luigi", "Piero", "Pietro", "Raffaele", "Remo", "Renato", "Renzo", "Riccardo", "Roberto", "Rolando", "Romano", "Salvatore", "Samuele", "Sandro", "Sergio", "Silvano", "Simone", "Stefano", "Thomas", "Tommaso", "Ubaldo", "Ugo", "Umberto", "Valerio", "Valter", "Vasco", "Vincenzo", "Vittorio"],
            // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html
            "nl": ["Aaron", "Abel", "Adam", "Adriaan", "Albert", "Alexander", "Ali", "Arjen", "Arno", "Bart", "Bas", "Bastiaan", "Benjamin", "Bob", "Boris", "Bram", "Brent", "Cas", "Casper", "Chris", "Christiaan", "Cornelis", "Daan", "Daley", "Damian", "Dani", "Daniel", "Daniël", "David", "Dean", "Dirk", "Dylan", "Egbert", "Elijah", "Erik", "Erwin", "Evert", "Ezra", "Fabian", "Fedde", "Finn", "Florian", "Floris", "Frank", "Frans", "Frederik", "Freek", "Geert", "Gerard", "Gerben", "Gerrit", "Gijs", "Guus", "Hans", "Hendrik", "Henk", "Herman", "Hidde", "Hugo", "Jaap", "Jan Jaap", "Jan-Willem", "Jack", "Jacob", "Jan", "Jason", "Jasper", "Jayden", "Jelle", "Jelte", "Jens", "Jeroen", "Jesse", "Jim", "Job", "Joep", "Johannes", "John", "Jonathan", "Joris", "Joshua", "Joël", "Julian", "Kees", "Kevin", "Koen", "Lars", "Laurens", "Leendert", "Lennard", "Lodewijk", "Luc", "Luca", "Lucas", "Lukas", "Luuk", "Maarten", "Marcus", "Martijn", "Martin", "Matthijs", "Maurits", "Max", "Mees", "Melle", "Mick", "Mika", "Milan", "Mohamed", "Mohammed", "Morris", "Muhammed", "Nathan", "Nick", "Nico", "Niek", "Niels", "Noah", "Noud", "Olivier", "Oscar", "Owen", "Paul", "Pepijn", "Peter", "Pieter", "Pim", "Quinten", "Reinier", "Rens", "Robin", "Ruben", "Sam", "Samuel", "Sander", "Sebastiaan", "Sem", "Sep", "Sepp", "Siem", "Simon", "Stan", "Stef", "Steven", "Stijn", "Sven", "Teun", "Thijmen", "Thijs", "Thomas", "Tijn", "Tim", "Timo", "Tobias", "Tom", "Victor", "Vince", "Willem", "Wim", "Wouter", "Yusuf"],
            // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie
            "fr": ["Aaron", "Abdon", "Abel", "Abélard", "Abelin", "Abondance", "Abraham", "Absalon", "Acace", "Achaire", "Achille", "Adalard", "Adalbald", "Adalbéron", "Adalbert", "Adalric", "Adam", "Adegrin", "Adel", "Adelin", "Andelin", "Adelphe", "Adam", "Adéodat", "Adhémar", "Adjutor", "Adolphe", "Adonis", "Adon", "Adrien", "Agapet", "Agathange", "Agathon", "Agilbert", "Agénor", "Agnan", "Aignan", "Agrippin", "Aimable", "Aimé", "Alain", "Alban", "Albin", "Aubin", "Albéric", "Albert", "Albertet", "Alcibiade", "Alcide", "Alcée", "Alcime", "Aldonce", "Aldric", "Aldéric", "Aleaume", "Alexandre", "Alexis", "Alix", "Alliaume", "Aleaume", "Almine", "Almire", "Aloïs", "Alphée", "Alphonse", "Alpinien", "Alverède", "Amalric", "Amaury", "Amandin", "Amant", "Ambroise", "Amédée", "Amélien", "Amiel", "Amour", "Anaël", "Anastase", "Anatole", "Ancelin", "Andéol", "Andoche", "André", "Andoche", "Ange", "Angelin", "Angilbe", "Anglebert", "Angoustan", "Anicet", "Anne", "Annibal", "Ansbert", "Anselme", "Anthelme", "Antheaume", "Anthime", "Antide", "Antoine", "Antonius", "Antonin", "Apollinaire", "Apollon", "Aquilin", "Arcade", "Archambaud", "Archambeau", "Archange", "Archibald", "Arian", "Ariel", "Ariste", "Aristide", "Armand", "Armel", "Armin", "Arnould", "Arnaud", "Arolde", "Arsène", "Arsinoé", "Arthaud", "Arthème", "Arthur", "Ascelin", "Athanase", "Aubry", "Audebert", "Audouin", "Audran", "Audric", "Auguste", "Augustin", "Aurèle", "Aurélien", "Aurian", "Auxence", "Axel", "Aymard", "Aymeric", "Aymon", "Aymond", "Balthazar", "Baptiste", "Barnabé", "Barthélemy", "Bartimée", "Basile", "Bastien", "Baudouin", "Bénigne", "Benjamin", "Benoît", "Bérenger", "Bérard", "Bernard", "Bertrand", "Blaise", "Bon", "Boniface", "Bouchard", "Brice", "Brieuc", "Bruno", "Brunon", "Calixte", "Calliste", "Camélien", "Camille", "Camillien", "Candide", "Caribert", "Carloman", "Cassandre", "Cassien", "Cédric", "Céleste", "Célestin", "Célien", "Césaire", "César", "Charles", "Charlemagne", "Childebert", "Chilpéric", "Chrétien", "Christian", "Christodule", "Christophe", "Chrysostome", "Clarence", "Claude", "Claudien", "Cléandre", "Clément", "Clotaire", "Côme", "Constance", "Constant", "Constantin", "Corentin", "Cyprien", "Cyriaque", "Cyrille", "Cyril", "Damien", "Daniel", "David", "Delphin", "Denis", "Désiré", "Didier", "Dieudonné", "Dimitri", "Dominique", "Dorian", "Dorothée", "Edgard", "Edmond", "Édouard", "Éleuthère", "Élie", "Élisée", "Émeric", "Émile", "Émilien", "Emmanuel", "Enguerrand", "Épiphane", "Éric", "Esprit", "Ernest", "Étienne", "Eubert", "Eudes", "Eudoxe", "Eugène", "Eusèbe", "Eustache", "Évariste", "Évrard", "Fabien", "Fabrice", "Falba", "Félicité", "Félix", "Ferdinand", "Fiacre", "Fidèle", "Firmin", "Flavien", "Flodoard", "Florent", "Florentin", "Florestan", "Florian", "Fortuné", "Foulques", "Francisque", "François", "Français", "Franciscus", "Francs", "Frédéric", "Fulbert", "Fulcran", "Fulgence", "Gabin", "Gabriel", "Gaël", "Garnier", "Gaston", "Gaspard", "Gatien", "Gaud", "Gautier", "Gédéon", "Geoffroy", "Georges", "Géraud", "Gérard", "Gerbert", "Germain", "Gervais", "Ghislain", "Gilbert", "Gilles", "Girart", "Gislebert", "Gondebaud", "Gonthier", "Gontran", "Gonzague", "Grégoire", "Guérin", "Gui", "Guillaume", "Gustave", "Guy", "Guyot", "Hardouin", "Hector", "Hédelin", "Hélier", "Henri", "Herbert", "Herluin", "Hervé", "Hilaire", "Hildebert", "Hincmar", "Hippolyte", "Honoré", "Hubert", "Hugues", "Innocent", "Isabeau", "Isidore", "Jacques", "Japhet", "Jason", "Jean", "Jeannel", "Jeannot", "Jérémie", "Jérôme", "Joachim", "Joanny", "Job", "Jocelyn", "Joël", "Johan", "Jonas", "Jonathan", "Joseph", "Josse", "Josselin", "Jourdain", "Jude", "Judicaël", "Jules", "Julien", "Juste", "Justin", "Lambert", "Landry", "Laurent", "Lazare", "Léandre", "Léon", "Léonard", "Léopold", "Leu", "Loup", "Leufroy", "Libère", "Liétald", "Lionel", "Loïc", "Longin", "Lorrain", "Lorraine", "Lothaire", "Louis", "Loup", "Luc", "Lucas", "Lucien", "Ludolphe", "Ludovic", "Macaire", "Malo", "Mamert", "Manassé", "Marc", "Marceau", "Marcel", "Marcelin", "Marius", "Marseille", "Martial", "Martin", "Mathurin", "Matthias", "Mathias", "Matthieu", "Maugis", "Maurice", "Mauricet", "Maxence", "Maxime", "Maximilien", "Mayeul", "Médéric", "Melchior", "Mence", "Merlin", "Mérovée", "Michaël", "Michel", "Moïse", "Morgan", "Nathan", "Nathanaël", "Narcisse", "Néhémie", "Nestor", "Nestor", "Nicéphore", "Nicolas", "Noé", "Noël", "Norbert", "Normand", "Normands", "Octave", "Odilon", "Odon", "Oger", "Olivier", "Oury", "Pacôme", "Palémon", "Parfait", "Pascal", "Paterne", "Patrice", "Paul", "Pépin", "Perceval", "Philémon", "Philibert", "Philippe", "Philothée", "Pie", "Pierre", "Pierrick", "Prosper", "Quentin", "Raoul", "Raphaël", "Raymond", "Régis", "Réjean", "Rémi", "Renaud", "René", "Reybaud", "Richard", "Robert", "Roch", "Rodolphe", "Rodrigue", "Roger", "Roland", "Romain", "Romuald", "Roméo", "Rome", "Ronan", "Roselin", "Salomon", "Samuel", "Savin", "Savinien", "Scholastique", "Sébastien", "Séraphin", "Serge", "Séverin", "Sidoine", "Sigebert", "Sigismond", "Silvère", "Simon", "Siméon", "Sixte", "Stanislas", "Stéphane", "Stephan", "Sylvain", "Sylvestre", "Tancrède", "Tanguy", "Taurin", "Théodore", "Théodose", "Théophile", "Théophraste", "Thibault", "Thibert", "Thierry", "Thomas", "Timoléon", "Timothée", "Titien", "Tonnin", "Toussaint", "Trajan", "Tristan", "Turold", "Tim", "Ulysse", "Urbain", "Valentin", "Valère", "Valéry", "Venance", "Venant", "Venceslas", "Vianney", "Victor", "Victorien", "Victorin", "Vigile", "Vincent", "Vital", "Vitalien", "Vivien", "Waleran", "Wandrille", "Xavier", "Xénophon", "Yves", "Zacharie", "Zaché", "Zéphirin"]
          },
          "female": {
            "en": ["Mary", "Emma", "Elizabeth", "Minnie", "Margaret", "Ida", "Alice", "Bertha", "Sarah", "Annie", "Clara", "Ella", "Florence", "Cora", "Martha", "Laura", "Nellie", "Grace", "Carrie", "Maude", "Mabel", "Bessie", "Jennie", "Gertrude", "Julia", "Hattie", "Edith", "Mattie", "Rose", "Catherine", "Lillian", "Ada", "Lillie", "Helen", "Jessie", "Louise", "Ethel", "Lula", "Myrtle", "Eva", "Frances", "Lena", "Lucy", "Edna", "Maggie", "Pearl", "Daisy", "Fannie", "Josephine", "Dora", "Rosa", "Katherine", "Agnes", "Marie", "Nora", "May", "Mamie", "Blanche", "Stella", "Ellen", "Nancy", "Effie", "Sallie", "Nettie", "Della", "Lizzie", "Flora", "Susie", "Maud", "Mae", "Etta", "Harriet", "Sadie", "Caroline", "Katie", "Lydia", "Elsie", "Kate", "Susan", "Mollie", "Alma", "Addie", "Georgia", "Eliza", "Lulu", "Nannie", "Lottie", "Amanda", "Belle", "Charlotte", "Rebecca", "Ruth", "Viola", "Olive", "Amelia", "Hannah", "Jane", "Virginia", "Emily", "Matilda", "Irene", "Kathryn", "Esther", "Willie", "Henrietta", "Ollie", "Amy", "Rachel", "Sara", "Estella", "Theresa", "Augusta", "Ora", "Pauline", "Josie", "Lola", "Sophia", "Leona", "Anne", "Mildred", "Ann", "Beulah", "Callie", "Lou", "Delia", "Eleanor", "Barbara", "Iva", "Louisa", "Maria", "Mayme", "Evelyn", "Estelle", "Nina", "Betty", "Marion", "Bettie", "Dorothy", "Luella", "Inez", "Lela", "Rosie", "Allie", "Millie", "Janie", "Cornelia", "Victoria", "Ruby", "Winifred", "Alta", "Celia", "Christine", "Beatrice", "Birdie", "Harriett", "Mable", "Myra", "Sophie", "Tillie", "Isabel", "Sylvia", "Carolyn", "Isabelle", "Leila", "Sally", "Ina", "Essie", "Bertie", "Nell", "Alberta", "Katharine", "Lora", "Rena", "Mina", "Rhoda", "Mathilda", "Abbie", "Eula", "Dollie", "Hettie", "Eunice", "Fanny", "Ola", "Lenora", "Adelaide", "Christina", "Lelia", "Nelle", "Sue", "Johanna", "Lilly", "Lucinda", "Minerva", "Lettie", "Roxie", "Cynthia", "Helena", "Hilda", "Hulda", "Bernice", "Genevieve", "Jean", "Cordelia", "Marian", "Francis", "Jeanette", "Adeline", "Gussie", "Leah", "Lois", "Lura", "Mittie", "Hallie", "Isabella", "Olga", "Phoebe", "Teresa", "Hester", "Lida", "Lina", "Winnie", "Claudia", "Marguerite", "Vera", "Cecelia", "Bess", "Emilie", "Rosetta", "Verna", "Myrtie", "Cecilia", "Elva", "Olivia", "Ophelia", "Georgie", "Elnora", "Violet", "Adele", "Lily", "Linnie", "Loretta", "Madge", "Polly", "Virgie", "Eugenia", "Lucile", "Lucille", "Mabelle", "Rosalie"],
            // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162
            "it": ["Ada", "Adriana", "Alessandra", "Alessia", "Alice", "Angela", "Anna", "Anna Maria", "Annalisa", "Annita", "Annunziata", "Antonella", "Arianna", "Asia", "Assunta", "Aurora", "Barbara", "Beatrice", "Benedetta", "Bianca", "Bruna", "Camilla", "Carla", "Carlotta", "Carmela", "Carolina", "Caterina", "Catia", "Cecilia", "Chiara", "Cinzia", "Clara", "Claudia", "Costanza", "Cristina", "Daniela", "Debora", "Diletta", "Dina", "Donatella", "Elena", "Eleonora", "Elisa", "Elisabetta", "Emanuela", "Emma", "Eva", "Federica", "Fernanda", "Fiorella", "Fiorenza", "Flora", "Franca", "Francesca", "Gabriella", "Gaia", "Gemma", "Giada", "Gianna", "Gina", "Ginevra", "Giorgia", "Giovanna", "Giulia", "Giuliana", "Giuseppa", "Giuseppina", "Grazia", "Graziella", "Greta", "Ida", "Ilaria", "Ines", "Iolanda", "Irene", "Irma", "Isabella", "Jessica", "Laura", "Lea", "Letizia", "Licia", "Lidia", "Liliana", "Lina", "Linda", "Lisa", "Livia", "Loretta", "Luana", "Lucia", "Luciana", "Lucrezia", "Luisa", "Manuela", "Mara", "Marcella", "Margherita", "Maria", "Maria Cristina", "Maria Grazia", "Maria Luisa", "Maria Pia", "Maria Teresa", "Marina", "Marisa", "Marta", "Martina", "Marzia", "Matilde", "Melissa", "Michela", "Milena", "Mirella", "Monica", "Natalina", "Nella", "Nicoletta", "Noemi", "Olga", "Paola", "Patrizia", "Piera", "Pierina", "Raffaella", "Rebecca", "Renata", "Rina", "Rita", "Roberta", "Rosa", "Rosanna", "Rossana", "Rossella", "Sabrina", "Sandra", "Sara", "Serena", "Silvana", "Silvia", "Simona", "Simonetta", "Sofia", "Sonia", "Stefania", "Susanna", "Teresa", "Tina", "Tiziana", "Tosca", "Valentina", "Valeria", "Vanda", "Vanessa", "Vanna", "Vera", "Veronica", "Vilma", "Viola", "Virginia", "Vittoria"],
            // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html
            "nl": ["Ada", "Arianne", "Afke", "Amanda", "Amber", "Amy", "Aniek", "Anita", "Anja", "Anna", "Anne", "Annelies", "Annemarie", "Annette", "Anouk", "Astrid", "Aukje", "Barbara", "Bianca", "Carla", "Carlijn", "Carolien", "Chantal", "Charlotte", "Claudia", "Daniëlle", "Debora", "Diane", "Dora", "Eline", "Elise", "Ella", "Ellen", "Emma", "Esmee", "Evelien", "Esther", "Erica", "Eva", "Femke", "Fleur", "Floor", "Froukje", "Gea", "Gerda", "Hanna", "Hanneke", "Heleen", "Hilde", "Ilona", "Ina", "Inge", "Ingrid", "Iris", "Isabel", "Isabelle", "Janneke", "Jasmijn", "Jeanine", "Jennifer", "Jessica", "Johanna", "Joke", "Julia", "Julie", "Karen", "Karin", "Katja", "Kim", "Lara", "Laura", "Lena", "Lianne", "Lieke", "Lilian", "Linda", "Lisa", "Lisanne", "Lotte", "Louise", "Maaike", "Manon", "Marga", "Maria", "Marissa", "Marit", "Marjolein", "Martine", "Marleen", "Melissa", "Merel", "Miranda", "Michelle", "Mirjam", "Mirthe", "Naomi", "Natalie", "Nienke", "Nina", "Noortje", "Olivia", "Patricia", "Paula", "Paulien", "Ramona", "Ria", "Rianne", "Roos", "Rosanne", "Ruth", "Sabrina", "Sandra", "Sanne", "Sara", "Saskia", "Silvia", "Sofia", "Sophie", "Sonja", "Suzanne", "Tamara", "Tess", "Tessa", "Tineke", "Valerie", "Vanessa", "Veerle", "Vera", "Victoria", "Wendy", "Willeke", "Yvonne", "Zoë"],
            // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie
            "fr": ["Abdon", "Abel", "Abigaëlle", "Abigaïl", "Acacius", "Acanthe", "Adalbert", "Adalsinde", "Adegrine", "Adélaïde", "Adèle", "Adélie", "Adeline", "Adeltrude", "Adolphe", "Adonis", "Adrastée", "Adrehilde", "Adrienne", "Agathe", "Agilbert", "Aglaé", "Aignan", "Agneflète", "Agnès", "Agrippine", "Aimé", "Alaine", "Alaïs", "Albane", "Albérade", "Alberte", "Alcide", "Alcine", "Alcyone", "Aldegonde", "Aleth", "Alexandrine", "Alexine", "Alice", "Aliénor", "Aliette", "Aline", "Alix", "Alizé", "Aloïse", "Aloyse", "Alphonsine", "Althée", "Amaliane", "Amalthée", "Amande", "Amandine", "Amant", "Amarande", "Amaranthe", "Amaryllis", "Ambre", "Ambroisie", "Amélie", "Améthyste", "Aminte", "Anaël", "Anaïs", "Anastasie", "Anatole", "Ancelin", "Andrée", "Anémone", "Angadrême", "Angèle", "Angeline", "Angélique", "Angilbert", "Anicet", "Annabelle", "Anne", "Annette", "Annick", "Annie", "Annonciade", "Ansbert", "Anstrudie", "Anthelme", "Antigone", "Antoinette", "Antonine", "Aphélie", "Apolline", "Apollonie", "Aquiline", "Arabelle", "Arcadie", "Archange", "Argine", "Ariane", "Aricie", "Ariel", "Arielle", "Arlette", "Armance", "Armande", "Armandine", "Armelle", "Armide", "Armelle", "Armin", "Arnaud", "Arsène", "Arsinoé", "Artémis", "Arthur", "Ascelin", "Ascension", "Assomption", "Astarté", "Astérie", "Astrée", "Astrid", "Athalie", "Athanasie", "Athina", "Aube", "Albert", "Aude", "Audrey", "Augustine", "Aure", "Aurélie", "Aurélien", "Aurèle", "Aurore", "Auxence", "Aveline", "Abigaëlle", "Avoye", "Axelle", "Aymard", "Azalée", "Adèle", "Adeline", "Barbe", "Basilisse", "Bathilde", "Béatrice", "Béatrix", "Bénédicte", "Bérengère", "Bernadette", "Berthe", "Bertille", "Beuve", "Blanche", "Blanc", "Blandine", "Brigitte", "Brune", "Brunehilde", "Callista", "Camille", "Capucine", "Carine", "Caroline", "Cassandre", "Catherine", "Cécile", "Céleste", "Célestine", "Céline", "Chantal", "Charlène", "Charline", "Charlotte", "Chloé", "Christelle", "Christiane", "Christine", "Claire", "Clara", "Claude", "Claudine", "Clarisse", "Clémence", "Clémentine", "Cléo", "Clio", "Clotilde", "Coline", "Conception", "Constance", "Coralie", "Coraline", "Corentine", "Corinne", "Cyrielle", "Daniel", "Daniel", "Daphné", "Débora", "Delphine", "Denise", "Diane", "Dieudonné", "Dominique", "Doriane", "Dorothée", "Douce", "Édith", "Edmée", "Éléonore", "Éliane", "Élia", "Éliette", "Élisabeth", "Élise", "Ella", "Élodie", "Éloïse", "Elsa", "Émeline", "Émérance", "Émérentienne", "Émérencie", "Émilie", "Emma", "Emmanuelle", "Emmelie", "Ernestine", "Esther", "Estelle", "Eudoxie", "Eugénie", "Eulalie", "Euphrasie", "Eusébie", "Évangéline", "Eva", "Ève", "Évelyne", "Fanny", "Fantine", "Faustine", "Félicie", "Fernande", "Flavie", "Fleur", "Flore", "Florence", "Florie", "Fortuné", "France", "Francia", "Françoise", "Francine", "Gabrielle", "Gaëlle", "Garance", "Geneviève", "Georgette", "Gerberge", "Germaine", "Gertrude", "Gisèle", "Guenièvre", "Guilhemine", "Guillemette", "Gustave", "Gwenael", "Hélène", "Héloïse", "Henriette", "Hermine", "Hermione", "Hippolyte", "Honorine", "Hortense", "Huguette", "Ines", "Irène", "Irina", "Iris", "Isabeau", "Isabelle", "Iseult", "Isolde", "Ismérie", "Jacinthe", "Jacqueline", "Jade", "Janine", "Jeanne", "Jocelyne", "Joëlle", "Joséphine", "Judith", "Julia", "Julie", "Jules", "Juliette", "Justine", "Katy", "Kathy", "Katie", "Laura", "Laure", "Laureline", "Laurence", "Laurene", "Lauriane", "Laurianne", "Laurine", "Léa", "Léna", "Léonie", "Léon", "Léontine", "Lorraine", "Lucie", "Lucienne", "Lucille", "Ludivine", "Lydie", "Lydie", "Megane", "Madeleine", "Magali", "Maguelone", "Mallaury", "Manon", "Marceline", "Margot", "Marguerite", "Marianne", "Marie", "Myriam", "Marie", "Marine", "Marion", "Marlène", "Marthe", "Martine", "Mathilde", "Maud", "Maureen", "Mauricette", "Maxime", "Mélanie", "Melissa", "Mélissandre", "Mélisande", "Mélodie", "Michel", "Micheline", "Mireille", "Miriam", "Moïse", "Monique", "Morgane", "Muriel", "Mylène", "Nadège", "Nadine", "Nathalie", "Nicole", "Nicolette", "Nine", "Noël", "Noémie", "Océane", "Odette", "Odile", "Olive", "Olivia", "Olympe", "Ombline", "Ombeline", "Ophélie", "Oriande", "Oriane", "Ozanne", "Pascale", "Pascaline", "Paule", "Paulette", "Pauline", "Priscille", "Prisca", "Prisque", "Pécine", "Pélagie", "Pénélope", "Perrine", "Pétronille", "Philippine", "Philomène", "Philothée", "Primerose", "Prudence", "Pulchérie", "Quentine", "Quiéta", "Quintia", "Quintilla", "Rachel", "Raphaëlle", "Raymonde", "Rebecca", "Régine", "Réjeanne", "René", "Rita", "Rita", "Rolande", "Romane", "Rosalie", "Rose", "Roseline", "Sabine", "Salomé", "Sandra", "Sandrine", "Sarah", "Ségolène", "Séverine", "Sibylle", "Simone", "Sixt", "Solange", "Soline", "Solène", "Sophie", "Stéphanie", "Suzanne", "Sylvain", "Sylvie", "Tatiana", "Thaïs", "Théodora", "Thérèse", "Tiphaine", "Ursule", "Valentine", "Valérie", "Véronique", "Victoire", "Victorine", "Vinciane", "Violette", "Virginie", "Viviane", "Xavière", "Yolande", "Ysaline", "Yvette", "Yvonne", "Zélie", "Zita", "Zoé"]
          }
        },
        lastNames: {
          "en": ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson", "Clark", "Rodriguez", "Lewis", "Lee", "Walker", "Hall", "Allen", "Young", "Hernandez", "King", "Wright", "Lopez", "Hill", "Scott", "Green", "Adams", "Baker", "Gonzalez", "Nelson", "Carter", "Mitchell", "Perez", "Roberts", "Turner", "Phillips", "Campbell", "Parker", "Evans", "Edwards", "Collins", "Stewart", "Sanchez", "Morris", "Rogers", "Reed", "Cook", "Morgan", "Bell", "Murphy", "Bailey", "Rivera", "Cooper", "Richardson", "Cox", "Howard", "Ward", "Torres", "Peterson", "Gray", "Ramirez", "James", "Watson", "Brooks", "Kelly", "Sanders", "Price", "Bennett", "Wood", "Barnes", "Ross", "Henderson", "Coleman", "Jenkins", "Perry", "Powell", "Long", "Patterson", "Hughes", "Flores", "Washington", "Butler", "Simmons", "Foster", "Gonzales", "Bryant", "Alexander", "Russell", "Griffin", "Diaz", "Hayes", "Myers", "Ford", "Hamilton", "Graham", "Sullivan", "Wallace", "Woods", "Cole", "West", "Jordan", "Owens", "Reynolds", "Fisher", "Ellis", "Harrison", "Gibson", "McDonald", "Cruz", "Marshall", "Ortiz", "Gomez", "Murray", "Freeman", "Wells", "Webb", "Simpson", "Stevens", "Tucker", "Porter", "Hunter", "Hicks", "Crawford", "Henry", "Boyd", "Mason", "Morales", "Kennedy", "Warren", "Dixon", "Ramos", "Reyes", "Burns", "Gordon", "Shaw", "Holmes", "Rice", "Robertson", "Hunt", "Black", "Daniels", "Palmer", "Mills", "Nichols", "Grant", "Knight", "Ferguson", "Rose", "Stone", "Hawkins", "Dunn", "Perkins", "Hudson", "Spencer", "Gardner", "Stephens", "Payne", "Pierce", "Berry", "Matthews", "Arnold", "Wagner", "Willis", "Ray", "Watkins", "Olson", "Carroll", "Duncan", "Snyder", "Hart", "Cunningham", "Bradley", "Lane", "Andrews", "Ruiz", "Harper", "Fox", "Riley", "Armstrong", "Carpenter", "Weaver", "Greene", "Lawrence", "Elliott", "Chavez", "Sims", "Austin", "Peters", "Kelley", "Franklin", "Lawson", "Fields", "Gutierrez", "Ryan", "Schmidt", "Carr", "Vasquez", "Castillo", "Wheeler", "Chapman", "Oliver", "Montgomery", "Richards", "Williamson", "Johnston", "Banks", "Meyer", "Bishop", "McCoy", "Howell", "Alvarez", "Morrison", "Hansen", "Fernandez", "Garza", "Harvey", "Little", "Burton", "Stanley", "Nguyen", "George", "Jacobs", "Reid", "Kim", "Fuller", "Lynch", "Dean", "Gilbert", "Garrett", "Romero", "Welch", "Larson", "Frazier", "Burke", "Hanson", "Day", "Mendoza", "Moreno", "Bowman", "Medina", "Fowler", "Brewer", "Hoffman", "Carlson", "Silva", "Pearson", "Holland", "Douglas", "Fleming", "Jensen", "Vargas", "Byrd", "Davidson", "Hopkins", "May", "Terry", "Herrera", "Wade", "Soto", "Walters", "Curtis", "Neal", "Caldwell", "Lowe", "Jennings", "Barnett", "Graves", "Jimenez", "Horton", "Shelton", "Barrett", "Obrien", "Castro", "Sutton", "Gregory", "McKinney", "Lucas", "Miles", "Craig", "Rodriquez", "Chambers", "Holt", "Lambert", "Fletcher", "Watts", "Bates", "Hale", "Rhodes", "Pena", "Beck", "Newman", "Haynes", "McDaniel", "Mendez", "Bush", "Vaughn", "Parks", "Dawson", "Santiago", "Norris", "Hardy", "Love", "Steele", "Curry", "Powers", "Schultz", "Barker", "Guzman", "Page", "Munoz", "Ball", "Keller", "Chandler", "Weber", "Leonard", "Walsh", "Lyons", "Ramsey", "Wolfe", "Schneider", "Mullins", "Benson", "Sharp", "Bowen", "Daniel", "Barber", "Cummings", "Hines", "Baldwin", "Griffith", "Valdez", "Hubbard", "Salazar", "Reeves", "Warner", "Stevenson", "Burgess", "Santos", "Tate", "Cross", "Garner", "Mann", "Mack", "Moss", "Thornton", "Dennis", "McGee", "Farmer", "Delgado", "Aguilar", "Vega", "Glover", "Manning", "Cohen", "Harmon", "Rodgers", "Robbins", "Newton", "Todd", "Blair", "Higgins", "Ingram", "Reese", "Cannon", "Strickland", "Townsend", "Potter", "Goodwin", "Walton", "Rowe", "Hampton", "Ortega", "Patton", "Swanson", "Joseph", "Francis", "Goodman", "Maldonado", "Yates", "Becker", "Erickson", "Hodges", "Rios", "Conner", "Adkins", "Webster", "Norman", "Malone", "Hammond", "Flowers", "Cobb", "Moody", "Quinn", "Blake", "Maxwell", "Pope", "Floyd", "Osborne", "Paul", "McCarthy", "Guerrero", "Lindsey", "Estrada", "Sandoval", "Gibbs", "Tyler", "Gross", "Fitzgerald", "Stokes", "Doyle", "Sherman", "Saunders", "Wise", "Colon", "Gill", "Alvarado", "Greer", "Padilla", "Simon", "Waters", "Nunez", "Ballard", "Schwartz", "McBride", "Houston", "Christensen", "Klein", "Pratt", "Briggs", "Parsons", "McLaughlin", "Zimmerman", "French", "Buchanan", "Moran", "Copeland", "Roy", "Pittman", "Brady", "McCormick", "Holloway", "Brock", "Poole", "Frank", "Logan", "Owen", "Bass", "Marsh", "Drake", "Wong", "Jefferson", "Park", "Morton", "Abbott", "Sparks", "Patrick", "Norton", "Huff", "Clayton", "Massey", "Lloyd", "Figueroa", "Carson", "Bowers", "Roberson", "Barton", "Tran", "Lamb", "Harrington", "Casey", "Boone", "Cortez", "Clarke", "Mathis", "Singleton", "Wilkins", "Cain", "Bryan", "Underwood", "Hogan", "McKenzie", "Collier", "Luna", "Phelps", "McGuire", "Allison", "Bridges", "Wilkerson", "Nash", "Summers", "Atkins"],
          // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)
          "it": ["Acciai", "Aglietti", "Agostini", "Agresti", "Ahmed", "Aiazzi", "Albanese", "Alberti", "Alessi", "Alfani", "Alinari", "Alterini", "Amato", "Ammannati", "Ancillotti", "Andrei", "Andreini", "Andreoni", "Angeli", "Anichini", "Antonelli", "Antonini", "Arena", "Ariani", "Arnetoli", "Arrighi", "Baccani", "Baccetti", "Bacci", "Bacherini", "Badii", "Baggiani", "Baglioni", "Bagni", "Bagnoli", "Baldassini", "Baldi", "Baldini", "Ballerini", "Balli", "Ballini", "Balloni", "Bambi", "Banchi", "Bandinelli", "Bandini", "Bani", "Barbetti", "Barbieri", "Barchielli", "Bardazzi", "Bardelli", "Bardi", "Barducci", "Bargellini", "Bargiacchi", "Barni", "Baroncelli", "Baroncini", "Barone", "Baroni", "Baronti", "Bartalesi", "Bartoletti", "Bartoli", "Bartolini", "Bartoloni", "Bartolozzi", "Basagni", "Basile", "Bassi", "Batacchi", "Battaglia", "Battaglini", "Bausi", "Becagli", "Becattini", "Becchi", "Becucci", "Bellandi", "Bellesi", "Belli", "Bellini", "Bellucci", "Bencini", "Benedetti", "Benelli", "Beni", "Benini", "Bensi", "Benucci", "Benvenuti", "Berlincioni", "Bernacchioni", "Bernardi", "Bernardini", "Berni", "Bernini", "Bertelli", "Berti", "Bertini", "Bessi", "Betti", "Bettini", "Biagi", "Biagini", "Biagioni", "Biagiotti", "Biancalani", "Bianchi", "Bianchini", "Bianco", "Biffoli", "Bigazzi", "Bigi", "Biliotti", "Billi", "Binazzi", "Bindi", "Bini", "Biondi", "Bizzarri", "Bocci", "Bogani", "Bolognesi", "Bonaiuti", "Bonanni", "Bonciani", "Boncinelli", "Bondi", "Bonechi", "Bongini", "Boni", "Bonini", "Borchi", "Boretti", "Borghi", "Borghini", "Borgioli", "Borri", "Borselli", "Boschi", "Bottai", "Bracci", "Braccini", "Brandi", "Braschi", "Bravi", "Brazzini", "Breschi", "Brilli", "Brizzi", "Brogelli", "Brogi", "Brogioni", "Brunelli", "Brunetti", "Bruni", "Bruno", "Brunori", "Bruschi", "Bucci", "Bucciarelli", "Buccioni", "Bucelli", "Bulli", "Burberi", "Burchi", "Burgassi", "Burroni", "Bussotti", "Buti", "Caciolli", "Caiani", "Calabrese", "Calamai", "Calamandrei", "Caldini", "Calo'", "Calonaci", "Calosi", "Calvelli", "Cambi", "Camiciottoli", "Cammelli", "Cammilli", "Campolmi", "Cantini", "Capanni", "Capecchi", "Caponi", "Cappelletti", "Cappelli", "Cappellini", "Cappugi", "Capretti", "Caputo", "Carbone", "Carboni", "Cardini", "Carlesi", "Carletti", "Carli", "Caroti", "Carotti", "Carrai", "Carraresi", "Carta", "Caruso", "Casalini", "Casati", "Caselli", "Casini", "Castagnoli", "Castellani", "Castelli", "Castellucci", "Catalano", "Catarzi", "Catelani", "Cavaciocchi", "Cavallaro", "Cavallini", "Cavicchi", "Cavini", "Ceccarelli", "Ceccatelli", "Ceccherelli", "Ceccherini", "Cecchi", "Cecchini", "Cecconi", "Cei", "Cellai", "Celli", "Cellini", "Cencetti", "Ceni", "Cenni", "Cerbai", "Cesari", "Ceseri", "Checcacci", "Checchi", "Checcucci", "Cheli", "Chellini", "Chen", "Cheng", "Cherici", "Cherubini", "Chiaramonti", "Chiarantini", "Chiarelli", "Chiari", "Chiarini", "Chiarugi", "Chiavacci", "Chiesi", "Chimenti", "Chini", "Chirici", "Chiti", "Ciabatti", "Ciampi", "Cianchi", "Cianfanelli", "Cianferoni", "Ciani", "Ciapetti", "Ciappi", "Ciardi", "Ciatti", "Cicali", "Ciccone", "Cinelli", "Cini", "Ciobanu", "Ciolli", "Cioni", "Cipriani", "Cirillo", "Cirri", "Ciucchi", "Ciuffi", "Ciulli", "Ciullini", "Clemente", "Cocchi", "Cognome", "Coli", "Collini", "Colombo", "Colzi", "Comparini", "Conforti", "Consigli", "Conte", "Conti", "Contini", "Coppini", "Coppola", "Corsi", "Corsini", "Corti", "Cortini", "Cosi", "Costa", "Costantini", "Costantino", "Cozzi", "Cresci", "Crescioli", "Cresti", "Crini", "Curradi", "D'Agostino", "D'Alessandro", "D'Amico", "D'Angelo", "Daddi", "Dainelli", "Dallai", "Danti", "Davitti", "De Angelis", "De Luca", "De Marco", "De Rosa", "De Santis", "De Simone", "De Vita", "Degl'Innocenti", "Degli Innocenti", "Dei", "Del Lungo", "Del Re", "Di Marco", "Di Stefano", "Dini", "Diop", "Dobre", "Dolfi", "Donati", "Dondoli", "Dong", "Donnini", "Ducci", "Dumitru", "Ermini", "Esposito", "Evangelisti", "Fabbri", "Fabbrini", "Fabbrizzi", "Fabbroni", "Fabbrucci", "Fabiani", "Facchini", "Faggi", "Fagioli", "Failli", "Faini", "Falciani", "Falcini", "Falcone", "Fallani", "Falorni", "Falsini", "Falugiani", "Fancelli", "Fanelli", "Fanetti", "Fanfani", "Fani", "Fantappie'", "Fantechi", "Fanti", "Fantini", "Fantoni", "Farina", "Fattori", "Favilli", "Fedi", "Fei", "Ferrante", "Ferrara", "Ferrari", "Ferraro", "Ferretti", "Ferri", "Ferrini", "Ferroni", "Fiaschi", "Fibbi", "Fiesoli", "Filippi", "Filippini", "Fini", "Fioravanti", "Fiore", "Fiorentini", "Fiorini", "Fissi", "Focardi", "Foggi", "Fontana", "Fontanelli", "Fontani", "Forconi", "Formigli", "Forte", "Forti", "Fortini", "Fossati", "Fossi", "Francalanci", "Franceschi", "Franceschini", "Franchi", "Franchini", "Franci", "Francini", "Francioni", "Franco", "Frassineti", "Frati", "Fratini", "Frilli", "Frizzi", "Frosali", "Frosini", "Frullini", "Fusco", "Fusi", "Gabbrielli", "Gabellini", "Gagliardi", "Galanti", "Galardi", "Galeotti", "Galletti", "Galli", "Gallo", "Gallori", "Gambacciani", "Gargani", "Garofalo", "Garuglieri", "Gashi", "Gasperini", "Gatti", "Gelli", "Gensini", "Gentile", "Gentili", "Geri", "Gerini", "Gheri", "Ghini", "Giachetti", "Giachi", "Giacomelli", "Gianassi", "Giani", "Giannelli", "Giannetti", "Gianni", "Giannini", "Giannoni", "Giannotti", "Giannozzi", "Gigli", "Giordano", "Giorgetti", "Giorgi", "Giovacchini", "Giovannelli", "Giovannetti", "Giovannini", "Giovannoni", "Giuliani", "Giunti", "Giuntini", "Giusti", "Gonnelli", "Goretti", "Gori", "Gradi", "Gramigni", "Grassi", "Grasso", "Graziani", "Grazzini", "Greco", "Grifoni", "Grillo", "Grimaldi", "Grossi", "Gualtieri", "Guarducci", "Guarino", "Guarnieri", "Guasti", "Guerra", "Guerri", "Guerrini", "Guidi", "Guidotti", "He", "Hoxha", "Hu", "Huang", "Iandelli", "Ignesti", "Innocenti", "Jin", "La Rosa", "Lai", "Landi", "Landini", "Lanini", "Lapi", "Lapini", "Lari", "Lascialfari", "Lastrucci", "Latini", "Lazzeri", "Lazzerini", "Lelli", "Lenzi", "Leonardi", "Leoncini", "Leone", "Leoni", "Lepri", "Li", "Liao", "Lin", "Linari", "Lippi", "Lisi", "Livi", "Lombardi", "Lombardini", "Lombardo", "Longo", "Lopez", "Lorenzi", "Lorenzini", "Lorini", "Lotti", "Lu", "Lucchesi", "Lucherini", "Lunghi", "Lupi", "Madiai", "Maestrini", "Maffei", "Maggi", "Maggini", "Magherini", "Magini", "Magnani", "Magnelli", "Magni", "Magnolfi", "Magrini", "Malavolti", "Malevolti", "Manca", "Mancini", "Manetti", "Manfredi", "Mangani", "Mannelli", "Manni", "Mannini", "Mannucci", "Manuelli", "Manzini", "Marcelli", "Marchese", "Marchetti", "Marchi", "Marchiani", "Marchionni", "Marconi", "Marcucci", "Margheri", "Mari", "Mariani", "Marilli", "Marinai", "Marinari", "Marinelli", "Marini", "Marino", "Mariotti", "Marsili", "Martelli", "Martinelli", "Martini", "Martino", "Marzi", "Masi", "Masini", "Masoni", "Massai", "Materassi", "Mattei", "Matteini", "Matteucci", "Matteuzzi", "Mattioli", "Mattolini", "Matucci", "Mauro", "Mazzanti", "Mazzei", "Mazzetti", "Mazzi", "Mazzini", "Mazzocchi", "Mazzoli", "Mazzoni", "Mazzuoli", "Meacci", "Mecocci", "Meini", "Melani", "Mele", "Meli", "Mengoni", "Menichetti", "Meoni", "Merlini", "Messeri", "Messina", "Meucci", "Miccinesi", "Miceli", "Micheli", "Michelini", "Michelozzi", "Migliori", "Migliorini", "Milani", "Miniati", "Misuri", "Monaco", "Montagnani", "Montagni", "Montanari", "Montelatici", "Monti", "Montigiani", "Montini", "Morandi", "Morandini", "Morelli", "Moretti", "Morganti", "Mori", "Morini", "Moroni", "Morozzi", "Mugnai", "Mugnaini", "Mustafa", "Naldi", "Naldini", "Nannelli", "Nanni", "Nannini", "Nannucci", "Nardi", "Nardini", "Nardoni", "Natali", "Ndiaye", "Nencetti", "Nencini", "Nencioni", "Neri", "Nesi", "Nesti", "Niccolai", "Niccoli", "Niccolini", "Nigi", "Nistri", "Nocentini", "Noferini", "Novelli", "Nucci", "Nuti", "Nutini", "Oliva", "Olivieri", "Olmi", "Orlandi", "Orlandini", "Orlando", "Orsini", "Ortolani", "Ottanelli", "Pacciani", "Pace", "Paci", "Pacini", "Pagani", "Pagano", "Paggetti", "Pagliai", "Pagni", "Pagnini", "Paladini", "Palagi", "Palchetti", "Palloni", "Palmieri", "Palumbo", "Pampaloni", "Pancani", "Pandolfi", "Pandolfini", "Panerai", "Panichi", "Paoletti", "Paoli", "Paolini", "Papi", "Papini", "Papucci", "Parenti", "Parigi", "Parisi", "Parri", "Parrini", "Pasquini", "Passeri", "Pecchioli", "Pecorini", "Pellegrini", "Pepi", "Perini", "Perrone", "Peruzzi", "Pesci", "Pestelli", "Petri", "Petrini", "Petrucci", "Pettini", "Pezzati", "Pezzatini", "Piani", "Piazza", "Piazzesi", "Piazzini", "Piccardi", "Picchi", "Piccini", "Piccioli", "Pieraccini", "Pieraccioni", "Pieralli", "Pierattini", "Pieri", "Pierini", "Pieroni", "Pietrini", "Pini", "Pinna", "Pinto", "Pinzani", "Pinzauti", "Piras", "Pisani", "Pistolesi", "Poggesi", "Poggi", "Poggiali", "Poggiolini", "Poli", "Pollastri", "Porciani", "Pozzi", "Pratellesi", "Pratesi", "Prosperi", "Pruneti", "Pucci", "Puccini", "Puccioni", "Pugi", "Pugliese", "Puliti", "Querci", "Quercioli", "Raddi", "Radu", "Raffaelli", "Ragazzini", "Ranfagni", "Ranieri", "Rastrelli", "Raugei", "Raveggi", "Renai", "Renzi", "Rettori", "Ricci", "Ricciardi", "Ridi", "Ridolfi", "Rigacci", "Righi", "Righini", "Rinaldi", "Risaliti", "Ristori", "Rizzo", "Rocchi", "Rocchini", "Rogai", "Romagnoli", "Romanelli", "Romani", "Romano", "Romei", "Romeo", "Romiti", "Romoli", "Romolini", "Rontini", "Rosati", "Roselli", "Rosi", "Rossetti", "Rossi", "Rossini", "Rovai", "Ruggeri", "Ruggiero", "Russo", "Sabatini", "Saccardi", "Sacchetti", "Sacchi", "Sacco", "Salerno", "Salimbeni", "Salucci", "Salvadori", "Salvestrini", "Salvi", "Salvini", "Sanesi", "Sani", "Sanna", "Santi", "Santini", "Santoni", "Santoro", "Santucci", "Sardi", "Sarri", "Sarti", "Sassi", "Sbolci", "Scali", "Scarpelli", "Scarselli", "Scopetani", "Secci", "Selvi", "Senatori", "Senesi", "Serafini", "Sereni", "Serra", "Sestini", "Sguanci", "Sieni", "Signorini", "Silvestri", "Simoncini", "Simonetti", "Simoni", "Singh", "Sodi", "Soldi", "Somigli", "Sorbi", "Sorelli", "Sorrentino", "Sottili", "Spina", "Spinelli", "Staccioli", "Staderini", "Stefanelli", "Stefani", "Stefanini", "Stella", "Susini", "Tacchi", "Tacconi", "Taddei", "Tagliaferri", "Tamburini", "Tanganelli", "Tani", "Tanini", "Tapinassi", "Tarchi", "Tarchiani", "Targioni", "Tassi", "Tassini", "Tempesti", "Terzani", "Tesi", "Testa", "Testi", "Tilli", "Tinti", "Tirinnanzi", "Toccafondi", "Tofanari", "Tofani", "Tognaccini", "Tonelli", "Tonini", "Torelli", "Torrini", "Tosi", "Toti", "Tozzi", "Trambusti", "Trapani", "Tucci", "Turchi", "Ugolini", "Ulivi", "Valente", "Valenti", "Valentini", "Vangelisti", "Vanni", "Vannini", "Vannoni", "Vannozzi", "Vannucchi", "Vannucci", "Ventura", "Venturi", "Venturini", "Vestri", "Vettori", "Vichi", "Viciani", "Vieri", "Vigiani", "Vignoli", "Vignolini", "Vignozzi", "Villani", "Vinci", "Visani", "Vitale", "Vitali", "Viti", "Viviani", "Vivoli", "Volpe", "Volpi", "Wang", "Wu", "Xu", "Yang", "Ye", "Zagli", "Zani", "Zanieri", "Zanobini", "Zecchi", "Zetti", "Zhang", "Zheng", "Zhou", "Zhu", "Zingoni", "Zini", "Zoppi"],
          // http://www.voornamelijk.nl/meest-voorkomende-achternamen-in-nederland-en-amsterdam/
          "nl": ["Albers", "Alblas", "Appelman", "Baars", "Baas", "Bakker", "Blank", "Bleeker", "Blok", "Blom", "Boer", "Boers", "Boldewijn", "Boon", "Boot", "Bos", "Bosch", "Bosma", "Bosman", "Bouma", "Bouman", "Bouwman", "Brands", "Brouwer", "Burger", "Buijs", "Buitenhuis", "Ceder", "Cohen", "Dekker", "Dekkers", "Dijkman", "Dijkstra", "Driessen", "Drost", "Engel", "Evers", "Faber", "Franke", "Gerritsen", "Goedhart", "Goossens", "Groen", "Groenenberg", "Groot", "Haan", "Hart", "Heemskerk", "Hendriks", "Hermans", "Hoekstra", "Hofman", "Hopman", "Huisman", "Jacobs", "Jansen", "Janssen", "Jonker", "Jaspers", "Keijzer", "Klaassen", "Klein", "Koek", "Koenders", "Kok", "Kool", "Koopman", "Koopmans", "Koning", "Koster", "Kramer", "Kroon", "Kuijpers", "Kuiper", "Kuipers", "Kurt", "Koster", "Kwakman", "Los", "Lubbers", "Maas", "Markus", "Martens", "Meijer", "Mol", "Molenaar", "Mulder", "Nieuwenhuis", "Peeters", "Peters", "Pengel", "Pieters", "Pool", "Post", "Postma", "Prins", "Pronk", "Reijnders", "Rietveld", "Roest", "Roos", "Sanders", "Schaap", "Scheffer", "Schenk", "Schilder", "Schipper", "Schmidt", "Scholten", "Schouten", "Schut", "Schutte", "Schuurman", "Simons", "Smeets", "Smit", "Smits", "Snel", "Swinkels", "Tas", "Terpstra", "Timmermans", "Tol", "Tromp", "Troost", "Valk", "Veenstra", "Veldkamp", "Verbeek", "Verheul", "Verhoeven", "Vermeer", "Vermeulen", "Verweij", "Vink", "Visser", "Voorn", "Vos", "Wagenaar", "Wiersema", "Willems", "Willemsen", "Witteveen", "Wolff", "Wolters", "Zijlstra", "Zwart", "de Beer", "de Boer", "de Bruijn", "de Bruin", "de Graaf", "de Groot", "de Haan", "de Haas", "de Jager", "de Jong", "de Jonge", "de Koning", "de Lange", "de Leeuw", "de Ridder", "de Rooij", "de Ruiter", "de Vos", "de Vries", "de Waal", "de Wit", "de Zwart", "van Beek", "van Boven", "van Dam", "van Dijk", "van Dongen", "van Doorn", "van Egmond", "van Eijk", "van Es", "van Gelder", "van Gelderen", "van Houten", "van Hulst", "van Kempen", "van Kesteren", "van Leeuwen", "van Loon", "van Mill", "van Noord", "van Ommen", "van Ommeren", "van Oosten", "van Oostveen", "van Rijn", "van Schaik", "van Veen", "van Vliet", "van Wijk", "van Wijngaarden", "van den Poel", "van de Pol", "van den Ploeg", "van de Ven", "van den Berg", "van den Bosch", "van den Brink", "van den Broek", "van den Heuvel", "van der Heijden", "van der Horst", "van der Hulst", "van der Kroon", "van der Laan", "van der Linden", "van der Meer", "van der Meij", "van der Meulen", "van der Molen", "van der Sluis", "van der Spek", "van der Veen", "van der Velde", "van der Velden", "van der Vliet", "van der Wal"],
          // https://surnames.behindthename.com/top/lists/england-wales/1991
          "uk": ["Smith", "Jones", "Williams", "Taylor", "Brown", "Davies", "Evans", "Wilson", "Thomas", "Johnson", "Roberts", "Robinson", "Thompson", "Wright", "Walker", "White", "Edwards", "Hughes", "Green", "Hall", "Lewis", "Harris", "Clarke", "Patel", "Jackson", "Wood", "Turner", "Martin", "Cooper", "Hill", "Ward", "Morris", "Moore", "Clark", "Lee", "King", "Baker", "Harrison", "Morgan", "Allen", "James", "Scott", "Phillips", "Watson", "Davis", "Parker", "Price", "Bennett", "Young", "Griffiths", "Mitchell", "Kelly", "Cook", "Carter", "Richardson", "Bailey", "Collins", "Bell", "Shaw", "Murphy", "Miller", "Cox", "Richards", "Khan", "Marshall", "Anderson", "Simpson", "Ellis", "Adams", "Singh", "Begum", "Wilkinson", "Foster", "Chapman", "Powell", "Webb", "Rogers", "Gray", "Mason", "Ali", "Hunt", "Hussain", "Campbell", "Matthews", "Owen", "Palmer", "Holmes", "Mills", "Barnes", "Knight", "Lloyd", "Butler", "Russell", "Barker", "Fisher", "Stevens", "Jenkins", "Murray", "Dixon", "Harvey", "Graham", "Pearson", "Ahmed", "Fletcher", "Walsh", "Kaur", "Gibson", "Howard", "Andrews", "Stewart", "Elliott", "Reynolds", "Saunders", "Payne", "Fox", "Ford", "Pearce", "Day", "Brooks", "West", "Lawrence", "Cole", "Atkinson", "Bradley", "Spencer", "Gill", "Dawson", "Ball", "Burton", "O'brien", "Watts", "Rose", "Booth", "Perry", "Ryan", "Grant", "Wells", "Armstrong", "Francis", "Rees", "Hayes", "Hart", "Hudson", "Newman", "Barrett", "Webster", "Hunter", "Gregory", "Carr", "Lowe", "Page", "Marsh", "Riley", "Dunn", "Woods", "Parsons", "Berry", "Stone", "Reid", "Holland", "Hawkins", "Harding", "Porter", "Robertson", "Newton", "Oliver", "Reed", "Kennedy", "Williamson", "Bird", "Gardner", "Shah", "Dean", "Lane", "Cooke", "Bates", "Henderson", "Parry", "Burgess", "Bishop", "Walton", "Burns", "Nicholson", "Shepherd", "Ross", "Cross", "Long", "Freeman", "Warren", "Nicholls", "Hamilton", "Byrne", "Sutton", "Mcdonald", "Yates", "Hodgson", "Robson", "Curtis", "Hopkins", "O'connor", "Harper", "Coleman", "Watkins", "Moss", "Mccarthy", "Chambers", "O'neill", "Griffin", "Sharp", "Hardy", "Wheeler", "Potter", "Osborne", "Johnston", "Gordon", "Doyle", "Wallace", "George", "Jordan", "Hutchinson", "Rowe", "Burke", "May", "Pritchard", "Gilbert", "Willis", "Higgins", "Read", "Miles", "Stevenson", "Stephenson", "Hammond", "Arnold", "Buckley", "Walters", "Hewitt", "Barber", "Nelson", "Slater", "Austin", "Sullivan", "Whitehead", "Mann", "Frost", "Lambert", "Stephens", "Blake", "Akhtar", "Lynch", "Goodwin", "Barton", "Woodward", "Thomson", "Cunningham", "Quinn", "Barnett", "Baxter", "Bibi", "Clayton", "Nash", "Greenwood", "Jennings", "Holt", "Kemp", "Poole", "Gallagher", "Bond", "Stokes", "Tucker", "Davidson", "Fowler", "Heath", "Norman", "Middleton", "Lawson", "Banks", "French", "Stanley", "Jarvis", "Gibbs", "Ferguson", "Hayward", "Carroll", "Douglas", "Dickinson", "Todd", "Barlow", "Peters", "Lucas", "Knowles", "Hartley", "Miah", "Simmons", "Morton", "Alexander", "Field", "Morrison", "Norris", "Townsend", "Preston", "Hancock", "Thornton", "Baldwin", "Burrows", "Briggs", "Parkinson", "Reeves", "Macdonald", "Lamb", "Black", "Abbott", "Sanders", "Thorpe", "Holden", "Tomlinson", "Perkins", "Ashton", "Rhodes", "Fuller", "Howe", "Bryant", "Vaughan", "Dale", "Davey", "Weston", "Bartlett", "Whittaker", "Davison", "Kent", "Skinner", "Birch", "Morley", "Daniels", "Glover", "Howell", "Cartwright", "Pugh", "Humphreys", "Goddard", "Brennan", "Wall", "Kirby", "Bowen", "Savage", "Bull", "Wong", "Dobson", "Smart", "Wilkins", "Kirk", "Fraser", "Duffy", "Hicks", "Patterson", "Bradshaw", "Little", "Archer", "Warner", "Waters", "O'sullivan", "Farrell", "Brookes", "Atkins", "Kay", "Dodd", "Bentley", "Flynn", "John", "Schofield", "Short", "Haynes", "Wade", "Butcher", "Henry", "Sanderson", "Crawford", "Sheppard", "Bolton", "Coates", "Giles", "Gould", "Houghton", "Gibbons", "Pratt", "Manning", "Law", "Hooper", "Noble", "Dyer", "Rahman", "Clements", "Moran", "Sykes", "Chan", "Doherty", "Connolly", "Joyce", "Franklin", "Hobbs", "Coles", "Herbert", "Steele", "Kerr", "Leach", "Winter", "Owens", "Duncan", "Naylor", "Fleming", "Horton", "Finch", "Fitzgerald", "Randall", "Carpenter", "Marsden", "Browne", "Garner", "Pickering", "Hale", "Dennis", "Vincent", "Chadwick", "Chandler", "Sharpe", "Nolan", "Lyons", "Hurst", "Collier", "Peacock", "Howarth", "Faulkner", "Rice", "Pollard", "Welch", "Norton", "Gough", "Sinclair", "Blackburn", "Bryan", "Conway", "Power", "Cameron", "Daly", "Allan", "Hanson", "Gardiner", "Boyle", "Myers", "Turnbull", "Wallis", "Mahmood", "Sims", "Swift", "Iqbal", "Pope", "Brady", "Chamberlain", "Rowley", "Tyler", "Farmer", "Metcalfe", "Hilton", "Godfrey", "Holloway", "Parkin", "Bray", "Talbot", "Donnelly", "Nixon", "Charlton", "Benson", "Whitehouse", "Barry", "Hope", "Lord", "North", "Storey", "Connor", "Potts", "Bevan", "Hargreaves", "Mclean", "Mistry", "Bruce", "Howells", "Hyde", "Parkes", "Wyatt", "Fry", "Lees", "O'donnell", "Craig", "Forster", "Mckenzie", "Humphries", "Mellor", "Carey", "Ingram", "Summers", "Leonard"],
          // https://surnames.behindthename.com/top/lists/germany/2017
          "de": ["Müller", "Schmidt", "Schneider", "Fischer", "Weber", "Meyer", "Wagner", "Becker", "Schulz", "Hoffmann", "Schäfer", "Koch", "Bauer", "Richter", "Klein", "Wolf", "Schröder", "Neumann", "Schwarz", "Zimmermann", "Braun", "Krüger", "Hofmann", "Hartmann", "Lange", "Schmitt", "Werner", "Schmitz", "Krause", "Meier", "Lehmann", "Schmid", "Schulze", "Maier", "Köhler", "Herrmann", "König", "Walter", "Mayer", "Huber", "Kaiser", "Fuchs", "Peters", "Lang", "Scholz", "Möller", "Weiß", "Jung", "Hahn", "Schubert", "Vogel", "Friedrich", "Keller", "Günther", "Frank", "Berger", "Winkler", "Roth", "Beck", "Lorenz", "Baumann", "Franke", "Albrecht", "Schuster", "Simon", "Ludwig", "Böhm", "Winter", "Kraus", "Martin", "Schumacher", "Krämer", "Vogt", "Stein", "Jäger", "Otto", "Sommer", "Groß", "Seidel", "Heinrich", "Brandt", "Haas", "Schreiber", "Graf", "Schulte", "Dietrich", "Ziegler", "Kuhn", "Kühn", "Pohl", "Engel", "Horn", "Busch", "Bergmann", "Thomas", "Voigt", "Sauer", "Arnold", "Wolff", "Pfeiffer"],
          // http://www.japantimes.co.jp/life/2009/10/11/lifestyle/japans-top-100-most-common-family-names/
          "jp": ["Sato", "Suzuki", "Takahashi", "Tanaka", "Watanabe", "Ito", "Yamamoto", "Nakamura", "Kobayashi", "Kato", "Yoshida", "Yamada", "Sasaki", "Yamaguchi", "Saito", "Matsumoto", "Inoue", "Kimura", "Hayashi", "Shimizu", "Yamazaki", "Mori", "Abe", "Ikeda", "Hashimoto", "Yamashita", "Ishikawa", "Nakajima", "Maeda", "Fujita", "Ogawa", "Goto", "Okada", "Hasegawa", "Murakami", "Kondo", "Ishii", "Saito", "Sakamoto", "Endo", "Aoki", "Fujii", "Nishimura", "Fukuda", "Ota", "Miura", "Fujiwara", "Okamoto", "Matsuda", "Nakagawa", "Nakano", "Harada", "Ono", "Tamura", "Takeuchi", "Kaneko", "Wada", "Nakayama", "Ishida", "Ueda", "Morita", "Hara", "Shibata", "Sakai", "Kudo", "Yokoyama", "Miyazaki", "Miyamoto", "Uchida", "Takagi", "Ando", "Taniguchi", "Ohno", "Maruyama", "Imai", "Takada", "Fujimoto", "Takeda", "Murata", "Ueno", "Sugiyama", "Masuda", "Sugawara", "Hirano", "Kojima", "Otsuka", "Chiba", "Kubo", "Matsui", "Iwasaki", "Sakurai", "Kinoshita", "Noguchi", "Matsuo", "Nomura", "Kikuchi", "Sano", "Onishi", "Sugimoto", "Arai"],
          // http://www.lowchensaustralia.com/names/popular-spanish-names.htm
          "es": ["Garcia", "Fernandez", "Lopez", "Martinez", "Gonzalez", "Rodriguez", "Sanchez", "Perez", "Martin", "Gomez", "Ruiz", "Diaz", "Hernandez", "Alvarez", "Jimenez", "Moreno", "Munoz", "Alonso", "Romero", "Navarro", "Gutierrez", "Torres", "Dominguez", "Gil", "Vazquez", "Blanco", "Serrano", "Ramos", "Castro", "Suarez", "Sanz", "Rubio", "Ortega", "Molina", "Delgado", "Ortiz", "Morales", "Ramirez", "Marin", "Iglesias", "Santos", "Castillo", "Garrido", "Calvo", "Pena", "Cruz", "Cano", "Nunez", "Prieto", "Diez", "Lozano", "Vidal", "Pascual", "Ferrer", "Medina", "Vega", "Leon", "Herrero", "Vicente", "Mendez", "Guerrero", "Fuentes", "Campos", "Nieto", "Cortes", "Caballero", "Ibanez", "Lorenzo", "Pastor", "Gimenez", "Saez", "Soler", "Marquez", "Carrasco", "Herrera", "Montero", "Arias", "Crespo", "Flores", "Andres", "Aguilar", "Hidalgo", "Cabrera", "Mora", "Duran", "Velasco", "Rey", "Pardo", "Roman", "Vila", "Bravo", "Merino", "Moya", "Soto", "Izquierdo", "Reyes", "Redondo", "Marcos", "Carmona", "Menendez"],
          // Data taken from https://fr.wikipedia.org/wiki/Liste_des_noms_de_famille_les_plus_courants_en_France
          "fr": ["Martin", "Bernard", "Thomas", "Petit", "Robert", "Richard", "Durand", "Dubois", "Moreau", "Laurent", "Simon", "Michel", "Lefèvre", "Leroy", "Roux", "David", "Bertrand", "Morel", "Fournier", "Girard", "Bonnet", "Dupont", "Lambert", "Fontaine", "Rousseau", "Vincent", "Müller", "Lefèvre", "Faure", "André", "Mercier", "Blanc", "Guérin", "Boyer", "Garnier", "Chevalier", "François", "Legrand", "Gauthier", "Garcia", "Perrin", "Robin", "Clément", "Morin", "Nicolas", "Henry", "Roussel", "Matthieu", "Gautier", "Masson", "Marchand", "Duval", "Denis", "Dumont", "Marie", "Lemaire", "Noël", "Meyer", "Dufour", "Meunier", "Brun", "Blanchard", "Giraud", "Joly", "Rivière", "Lucas", "Brunet", "Gaillard", "Barbier", "Arnaud", "Martínez", "Gérard", "Roche", "Renard", "Schmitt", "Roy", "Leroux", "Colin", "Vidal", "Caron", "Picard", "Roger", "Fabre", "Aubert", "Lemoine", "Renaud", "Dumas", "Lacroix", "Olivier", "Philippe", "Bourgeois", "Pierre", "Benoît", "Rey", "Leclerc", "Payet", "Rolland", "Leclercq", "Guillaume", "Lecomte", "López", "Jean", "Dupuy", "Guillot", "Hubert", "Berger", "Carpentier", "Sánchez", "Dupuis", "Moulin", "Louis", "Deschamps", "Huet", "Vasseur", "Perez", "Boucher", "Fleury", "Royer", "Klein", "Jacquet", "Adam", "Paris", "Poirier", "Marty", "Aubry", "Guyot", "Carré", "Charles", "Renault", "Charpentier", "Ménard", "Maillard", "Baron", "Bertin", "Bailly", "Hervé", "Schneider", "Fernández", "Le GallGall", "Collet", "Léger", "Bouvier", "Julien", "Prévost", "Millet", "Perrot", "Daniel", "Le RouxRoux", "Cousin", "Germain", "Breton", "Besson", "Langlois", "Rémi", "Le GoffGoff", "Pelletier", "Lévêque", "Perrier", "Leblanc", "Barré", "Lebrun", "Marchal", "Weber", "Mallet", "Hamon", "Boulanger", "Jacob", "Monnier", "Michaud", "Rodríguez", "Guichard", "Gillet", "Étienne", "Grondin", "Poulain", "Tessier", "Chevallier", "Collin", "Chauvin", "Da SilvaSilva", "Bouchet", "Gay", "Lemaître", "Bénard", "Maréchal", "Humbert", "Reynaud", "Antoine", "Hoarau", "Perret", "Barthélemy", "Cordier", "Pichon", "Lejeune", "Gilbert", "Lamy", "Delaunay", "Pasquier", "Carlier", "LaporteLaporte"]
        },
        // Data taken from http://geoportal.statistics.gov.uk/datasets/ons-postcode-directory-latest-centroids
        postcodeAreas: [{ code: "AB" }, { code: "AL" }, { code: "B" }, { code: "BA" }, { code: "BB" }, { code: "BD" }, { code: "BH" }, { code: "BL" }, { code: "BN" }, { code: "BR" }, { code: "BS" }, { code: "BT" }, { code: "CA" }, { code: "CB" }, { code: "CF" }, { code: "CH" }, { code: "CM" }, { code: "CO" }, { code: "CR" }, { code: "CT" }, { code: "CV" }, { code: "CW" }, { code: "DA" }, { code: "DD" }, { code: "DE" }, { code: "DG" }, { code: "DH" }, { code: "DL" }, { code: "DN" }, { code: "DT" }, { code: "DY" }, { code: "E" }, { code: "EC" }, { code: "EH" }, { code: "EN" }, { code: "EX" }, { code: "FK" }, { code: "FY" }, { code: "G" }, { code: "GL" }, { code: "GU" }, { code: "GY" }, { code: "HA" }, { code: "HD" }, { code: "HG" }, { code: "HP" }, { code: "HR" }, { code: "HS" }, { code: "HU" }, { code: "HX" }, { code: "IG" }, { code: "IM" }, { code: "IP" }, { code: "IV" }, { code: "JE" }, { code: "KA" }, { code: "KT" }, { code: "KW" }, { code: "KY" }, { code: "L" }, { code: "LA" }, { code: "LD" }, { code: "LE" }, { code: "LL" }, { code: "LN" }, { code: "LS" }, { code: "LU" }, { code: "M" }, { code: "ME" }, { code: "MK" }, { code: "ML" }, { code: "N" }, { code: "NE" }, { code: "NG" }, { code: "NN" }, { code: "NP" }, { code: "NR" }, { code: "NW" }, { code: "OL" }, { code: "OX" }, { code: "PA" }, { code: "PE" }, { code: "PH" }, { code: "PL" }, { code: "PO" }, { code: "PR" }, { code: "RG" }, { code: "RH" }, { code: "RM" }, { code: "S" }, { code: "SA" }, { code: "SE" }, { code: "SG" }, { code: "SK" }, { code: "SL" }, { code: "SM" }, { code: "SN" }, { code: "SO" }, { code: "SP" }, { code: "SR" }, { code: "SS" }, { code: "ST" }, { code: "SW" }, { code: "SY" }, { code: "TA" }, { code: "TD" }, { code: "TF" }, { code: "TN" }, { code: "TQ" }, { code: "TR" }, { code: "TS" }, { code: "TW" }, { code: "UB" }, { code: "W" }, { code: "WA" }, { code: "WC" }, { code: "WD" }, { code: "WF" }, { code: "WN" }, { code: "WR" }, { code: "WS" }, { code: "WV" }, { code: "YO" }, { code: "ZE" }],
        // Data taken from https://github.com/umpirsky/country-list/blob/master/data/en_US/country.json
        countries: [{ "name": "Afghanistan", "abbreviation": "AF" }, { "name": "Åland Islands", "abbreviation": "AX" }, { "name": "Albania", "abbreviation": "AL" }, { "name": "Algeria", "abbreviation": "DZ" }, { "name": "American Samoa", "abbreviation": "AS" }, { "name": "Andorra", "abbreviation": "AD" }, { "name": "Angola", "abbreviation": "AO" }, { "name": "Anguilla", "abbreviation": "AI" }, { "name": "Antarctica", "abbreviation": "AQ" }, { "name": "Antigua & Barbuda", "abbreviation": "AG" }, { "name": "Argentina", "abbreviation": "AR" }, { "name": "Armenia", "abbreviation": "AM" }, { "name": "Aruba", "abbreviation": "AW" }, { "name": "Ascension Island", "abbreviation": "AC" }, { "name": "Australia", "abbreviation": "AU" }, { "name": "Austria", "abbreviation": "AT" }, { "name": "Azerbaijan", "abbreviation": "AZ" }, { "name": "Bahamas", "abbreviation": "BS" }, { "name": "Bahrain", "abbreviation": "BH" }, { "name": "Bangladesh", "abbreviation": "BD" }, { "name": "Barbados", "abbreviation": "BB" }, { "name": "Belarus", "abbreviation": "BY" }, { "name": "Belgium", "abbreviation": "BE" }, { "name": "Belize", "abbreviation": "BZ" }, { "name": "Benin", "abbreviation": "BJ" }, { "name": "Bermuda", "abbreviation": "BM" }, { "name": "Bhutan", "abbreviation": "BT" }, { "name": "Bolivia", "abbreviation": "BO" }, { "name": "Bosnia & Herzegovina", "abbreviation": "BA" }, { "name": "Botswana", "abbreviation": "BW" }, { "name": "Brazil", "abbreviation": "BR" }, { "name": "British Indian Ocean Territory", "abbreviation": "IO" }, { "name": "British Virgin Islands", "abbreviation": "VG" }, { "name": "Brunei", "abbreviation": "BN" }, { "name": "Bulgaria", "abbreviation": "BG" }, { "name": "Burkina Faso", "abbreviation": "BF" }, { "name": "Burundi", "abbreviation": "BI" }, { "name": "Cambodia", "abbreviation": "KH" }, { "name": "Cameroon", "abbreviation": "CM" }, { "name": "Canada", "abbreviation": "CA" }, { "name": "Canary Islands", "abbreviation": "IC" }, { "name": "Cape Verde", "abbreviation": "CV" }, { "name": "Caribbean Netherlands", "abbreviation": "BQ" }, { "name": "Cayman Islands", "abbreviation": "KY" }, { "name": "Central African Republic", "abbreviation": "CF" }, { "name": "Ceuta & Melilla", "abbreviation": "EA" }, { "name": "Chad", "abbreviation": "TD" }, { "name": "Chile", "abbreviation": "CL" }, { "name": "China", "abbreviation": "CN" }, { "name": "Christmas Island", "abbreviation": "CX" }, { "name": "Cocos (Keeling) Islands", "abbreviation": "CC" }, { "name": "Colombia", "abbreviation": "CO" }, { "name": "Comoros", "abbreviation": "KM" }, { "name": "Congo - Brazzaville", "abbreviation": "CG" }, { "name": "Congo - Kinshasa", "abbreviation": "CD" }, { "name": "Cook Islands", "abbreviation": "CK" }, { "name": "Costa Rica", "abbreviation": "CR" }, { "name": "Côte d'Ivoire", "abbreviation": "CI" }, { "name": "Croatia", "abbreviation": "HR" }, { "name": "Cuba", "abbreviation": "CU" }, { "name": "Curaçao", "abbreviation": "CW" }, { "name": "Cyprus", "abbreviation": "CY" }, { "name": "Czech Republic", "abbreviation": "CZ" }, { "name": "Denmark", "abbreviation": "DK" }, { "name": "Diego Garcia", "abbreviation": "DG" }, { "name": "Djibouti", "abbreviation": "DJ" }, { "name": "Dominica", "abbreviation": "DM" }, { "name": "Dominican Republic", "abbreviation": "DO" }, { "name": "Ecuador", "abbreviation": "EC" }, { "name": "Egypt", "abbreviation": "EG" }, { "name": "El Salvador", "abbreviation": "SV" }, { "name": "Equatorial Guinea", "abbreviation": "GQ" }, { "name": "Eritrea", "abbreviation": "ER" }, { "name": "Estonia", "abbreviation": "EE" }, { "name": "Ethiopia", "abbreviation": "ET" }, { "name": "Falkland Islands", "abbreviation": "FK" }, { "name": "Faroe Islands", "abbreviation": "FO" }, { "name": "Fiji", "abbreviation": "FJ" }, { "name": "Finland", "abbreviation": "FI" }, { "name": "France", "abbreviation": "FR" }, { "name": "French Guiana", "abbreviation": "GF" }, { "name": "French Polynesia", "abbreviation": "PF" }, { "name": "French Southern Territories", "abbreviation": "TF" }, { "name": "Gabon", "abbreviation": "GA" }, { "name": "Gambia", "abbreviation": "GM" }, { "name": "Georgia", "abbreviation": "GE" }, { "name": "Germany", "abbreviation": "DE" }, { "name": "Ghana", "abbreviation": "GH" }, { "name": "Gibraltar", "abbreviation": "GI" }, { "name": "Greece", "abbreviation": "GR" }, { "name": "Greenland", "abbreviation": "GL" }, { "name": "Grenada", "abbreviation": "GD" }, { "name": "Guadeloupe", "abbreviation": "GP" }, { "name": "Guam", "abbreviation": "GU" }, { "name": "Guatemala", "abbreviation": "GT" }, { "name": "Guernsey", "abbreviation": "GG" }, { "name": "Guinea", "abbreviation": "GN" }, { "name": "Guinea-Bissau", "abbreviation": "GW" }, { "name": "Guyana", "abbreviation": "GY" }, { "name": "Haiti", "abbreviation": "HT" }, { "name": "Honduras", "abbreviation": "HN" }, { "name": "Hong Kong SAR China", "abbreviation": "HK" }, { "name": "Hungary", "abbreviation": "HU" }, { "name": "Iceland", "abbreviation": "IS" }, { "name": "India", "abbreviation": "IN" }, { "name": "Indonesia", "abbreviation": "ID" }, { "name": "Iran", "abbreviation": "IR" }, { "name": "Iraq", "abbreviation": "IQ" }, { "name": "Ireland", "abbreviation": "IE" }, { "name": "Isle of Man", "abbreviation": "IM" }, { "name": "Israel", "abbreviation": "IL" }, { "name": "Italy", "abbreviation": "IT" }, { "name": "Jamaica", "abbreviation": "JM" }, { "name": "Japan", "abbreviation": "JP" }, { "name": "Jersey", "abbreviation": "JE" }, { "name": "Jordan", "abbreviation": "JO" }, { "name": "Kazakhstan", "abbreviation": "KZ" }, { "name": "Kenya", "abbreviation": "KE" }, { "name": "Kiribati", "abbreviation": "KI" }, { "name": "Kosovo", "abbreviation": "XK" }, { "name": "Kuwait", "abbreviation": "KW" }, { "name": "Kyrgyzstan", "abbreviation": "KG" }, { "name": "Laos", "abbreviation": "LA" }, { "name": "Latvia", "abbreviation": "LV" }, { "name": "Lebanon", "abbreviation": "LB" }, { "name": "Lesotho", "abbreviation": "LS" }, { "name": "Liberia", "abbreviation": "LR" }, { "name": "Libya", "abbreviation": "LY" }, { "name": "Liechtenstein", "abbreviation": "LI" }, { "name": "Lithuania", "abbreviation": "LT" }, { "name": "Luxembourg", "abbreviation": "LU" }, { "name": "Macau SAR China", "abbreviation": "MO" }, { "name": "Macedonia", "abbreviation": "MK" }, { "name": "Madagascar", "abbreviation": "MG" }, { "name": "Malawi", "abbreviation": "MW" }, { "name": "Malaysia", "abbreviation": "MY" }, { "name": "Maldives", "abbreviation": "MV" }, { "name": "Mali", "abbreviation": "ML" }, { "name": "Malta", "abbreviation": "MT" }, { "name": "Marshall Islands", "abbreviation": "MH" }, { "name": "Martinique", "abbreviation": "MQ" }, { "name": "Mauritania", "abbreviation": "MR" }, { "name": "Mauritius", "abbreviation": "MU" }, { "name": "Mayotte", "abbreviation": "YT" }, { "name": "Mexico", "abbreviation": "MX" }, { "name": "Micronesia", "abbreviation": "FM" }, { "name": "Moldova", "abbreviation": "MD" }, { "name": "Monaco", "abbreviation": "MC" }, { "name": "Mongolia", "abbreviation": "MN" }, { "name": "Montenegro", "abbreviation": "ME" }, { "name": "Montserrat", "abbreviation": "MS" }, { "name": "Morocco", "abbreviation": "MA" }, { "name": "Mozambique", "abbreviation": "MZ" }, { "name": "Myanmar (Burma)", "abbreviation": "MM" }, { "name": "Namibia", "abbreviation": "NA" }, { "name": "Nauru", "abbreviation": "NR" }, { "name": "Nepal", "abbreviation": "NP" }, { "name": "Netherlands", "abbreviation": "NL" }, { "name": "New Caledonia", "abbreviation": "NC" }, { "name": "New Zealand", "abbreviation": "NZ" }, { "name": "Nicaragua", "abbreviation": "NI" }, { "name": "Niger", "abbreviation": "NE" }, { "name": "Nigeria", "abbreviation": "NG" }, { "name": "Niue", "abbreviation": "NU" }, { "name": "Norfolk Island", "abbreviation": "NF" }, { "name": "North Korea", "abbreviation": "KP" }, { "name": "Northern Mariana Islands", "abbreviation": "MP" }, { "name": "Norway", "abbreviation": "NO" }, { "name": "Oman", "abbreviation": "OM" }, { "name": "Pakistan", "abbreviation": "PK" }, { "name": "Palau", "abbreviation": "PW" }, { "name": "Palestinian Territories", "abbreviation": "PS" }, { "name": "Panama", "abbreviation": "PA" }, { "name": "Papua New Guinea", "abbreviation": "PG" }, { "name": "Paraguay", "abbreviation": "PY" }, { "name": "Peru", "abbreviation": "PE" }, { "name": "Philippines", "abbreviation": "PH" }, { "name": "Pitcairn Islands", "abbreviation": "PN" }, { "name": "Poland", "abbreviation": "PL" }, { "name": "Portugal", "abbreviation": "PT" }, { "name": "Puerto Rico", "abbreviation": "PR" }, { "name": "Qatar", "abbreviation": "QA" }, { "name": "Réunion", "abbreviation": "RE" }, { "name": "Romania", "abbreviation": "RO" }, { "name": "Russia", "abbreviation": "RU" }, { "name": "Rwanda", "abbreviation": "RW" }, { "name": "Samoa", "abbreviation": "WS" }, { "name": "San Marino", "abbreviation": "SM" }, { "name": "São Tomé and Príncipe", "abbreviation": "ST" }, { "name": "Saudi Arabia", "abbreviation": "SA" }, { "name": "Senegal", "abbreviation": "SN" }, { "name": "Serbia", "abbreviation": "RS" }, { "name": "Seychelles", "abbreviation": "SC" }, { "name": "Sierra Leone", "abbreviation": "SL" }, { "name": "Singapore", "abbreviation": "SG" }, { "name": "Sint Maarten", "abbreviation": "SX" }, { "name": "Slovakia", "abbreviation": "SK" }, { "name": "Slovenia", "abbreviation": "SI" }, { "name": "Solomon Islands", "abbreviation": "SB" }, { "name": "Somalia", "abbreviation": "SO" }, { "name": "South Africa", "abbreviation": "ZA" }, { "name": "South Georgia & South Sandwich Islands", "abbreviation": "GS" }, { "name": "South Korea", "abbreviation": "KR" }, { "name": "South Sudan", "abbreviation": "SS" }, { "name": "Spain", "abbreviation": "ES" }, { "name": "Sri Lanka", "abbreviation": "LK" }, { "name": "St. Barthélemy", "abbreviation": "BL" }, { "name": "St. Helena", "abbreviation": "SH" }, { "name": "St. Kitts & Nevis", "abbreviation": "KN" }, { "name": "St. Lucia", "abbreviation": "LC" }, { "name": "St. Martin", "abbreviation": "MF" }, { "name": "St. Pierre & Miquelon", "abbreviation": "PM" }, { "name": "St. Vincent & Grenadines", "abbreviation": "VC" }, { "name": "Sudan", "abbreviation": "SD" }, { "name": "Suriname", "abbreviation": "SR" }, { "name": "Svalbard & Jan Mayen", "abbreviation": "SJ" }, { "name": "Swaziland", "abbreviation": "SZ" }, { "name": "Sweden", "abbreviation": "SE" }, { "name": "Switzerland", "abbreviation": "CH" }, { "name": "Syria", "abbreviation": "SY" }, { "name": "Taiwan", "abbreviation": "TW" }, { "name": "Tajikistan", "abbreviation": "TJ" }, { "name": "Tanzania", "abbreviation": "TZ" }, { "name": "Thailand", "abbreviation": "TH" }, { "name": "Timor-Leste", "abbreviation": "TL" }, { "name": "Togo", "abbreviation": "TG" }, { "name": "Tokelau", "abbreviation": "TK" }, { "name": "Tonga", "abbreviation": "TO" }, { "name": "Trinidad & Tobago", "abbreviation": "TT" }, { "name": "Tristan da Cunha", "abbreviation": "TA" }, { "name": "Tunisia", "abbreviation": "TN" }, { "name": "Turkey", "abbreviation": "TR" }, { "name": "Turkmenistan", "abbreviation": "TM" }, { "name": "Turks & Caicos Islands", "abbreviation": "TC" }, { "name": "Tuvalu", "abbreviation": "TV" }, { "name": "U.S. Outlying Islands", "abbreviation": "UM" }, { "name": "U.S. Virgin Islands", "abbreviation": "VI" }, { "name": "Uganda", "abbreviation": "UG" }, { "name": "Ukraine", "abbreviation": "UA" }, { "name": "United Arab Emirates", "abbreviation": "AE" }, { "name": "United Kingdom", "abbreviation": "GB" }, { "name": "United States", "abbreviation": "US" }, { "name": "Uruguay", "abbreviation": "UY" }, { "name": "Uzbekistan", "abbreviation": "UZ" }, { "name": "Vanuatu", "abbreviation": "VU" }, { "name": "Vatican City", "abbreviation": "VA" }, { "name": "Venezuela", "abbreviation": "VE" }, { "name": "Vietnam", "abbreviation": "VN" }, { "name": "Wallis & Futuna", "abbreviation": "WF" }, { "name": "Western Sahara", "abbreviation": "EH" }, { "name": "Yemen", "abbreviation": "YE" }, { "name": "Zambia", "abbreviation": "ZM" }, { "name": "Zimbabwe", "abbreviation": "ZW" }],
        counties: {
          // Data taken from http://www.downloadexcelfiles.com/gb_en/download-excel-file-list-counties-uk
          "uk": [
            { name: "Bath and North East Somerset" },
            { name: "Aberdeenshire" },
            { name: "Anglesey" },
            { name: "Angus" },
            { name: "Bedford" },
            { name: "Blackburn with Darwen" },
            { name: "Blackpool" },
            { name: "Bournemouth" },
            { name: "Bracknell Forest" },
            { name: "Brighton & Hove" },
            { name: "Bristol" },
            { name: "Buckinghamshire" },
            { name: "Cambridgeshire" },
            { name: "Carmarthenshire" },
            { name: "Central Bedfordshire" },
            { name: "Ceredigion" },
            { name: "Cheshire East" },
            { name: "Cheshire West and Chester" },
            { name: "Clackmannanshire" },
            { name: "Conwy" },
            { name: "Cornwall" },
            { name: "County Antrim" },
            { name: "County Armagh" },
            { name: "County Down" },
            { name: "County Durham" },
            { name: "County Fermanagh" },
            { name: "County Londonderry" },
            { name: "County Tyrone" },
            { name: "Cumbria" },
            { name: "Darlington" },
            { name: "Denbighshire" },
            { name: "Derby" },
            { name: "Derbyshire" },
            { name: "Devon" },
            { name: "Dorset" },
            { name: "Dumfries and Galloway" },
            { name: "Dundee" },
            { name: "East Lothian" },
            { name: "East Riding of Yorkshire" },
            { name: "East Sussex" },
            { name: "Edinburgh?" },
            { name: "Essex" },
            { name: "Falkirk" },
            { name: "Fife" },
            { name: "Flintshire" },
            { name: "Gloucestershire" },
            { name: "Greater London" },
            { name: "Greater Manchester" },
            { name: "Gwent" },
            { name: "Gwynedd" },
            { name: "Halton" },
            { name: "Hampshire" },
            { name: "Hartlepool" },
            { name: "Herefordshire" },
            { name: "Hertfordshire" },
            { name: "Highlands" },
            { name: "Hull" },
            { name: "Isle of Wight" },
            { name: "Isles of Scilly" },
            { name: "Kent" },
            { name: "Lancashire" },
            { name: "Leicester" },
            { name: "Leicestershire" },
            { name: "Lincolnshire" },
            { name: "Lothian" },
            { name: "Luton" },
            { name: "Medway" },
            { name: "Merseyside" },
            { name: "Mid Glamorgan" },
            { name: "Middlesbrough" },
            { name: "Milton Keynes" },
            { name: "Monmouthshire" },
            { name: "Moray" },
            { name: "Norfolk" },
            { name: "North East Lincolnshire" },
            { name: "North Lincolnshire" },
            { name: "North Somerset" },
            { name: "North Yorkshire" },
            { name: "Northamptonshire" },
            { name: "Northumberland" },
            { name: "Nottingham" },
            { name: "Nottinghamshire" },
            { name: "Oxfordshire" },
            { name: "Pembrokeshire" },
            { name: "Perth and Kinross" },
            { name: "Peterborough" },
            { name: "Plymouth" },
            { name: "Poole" },
            { name: "Portsmouth" },
            { name: "Powys" },
            { name: "Reading" },
            { name: "Redcar and Cleveland" },
            { name: "Rutland" },
            { name: "Scottish Borders" },
            { name: "Shropshire" },
            { name: "Slough" },
            { name: "Somerset" },
            { name: "South Glamorgan" },
            { name: "South Gloucestershire" },
            { name: "South Yorkshire" },
            { name: "Southampton" },
            { name: "Southend-on-Sea" },
            { name: "Staffordshire" },
            { name: "Stirlingshire" },
            { name: "Stockton-on-Tees" },
            { name: "Stoke-on-Trent" },
            { name: "Strathclyde" },
            { name: "Suffolk" },
            { name: "Surrey" },
            { name: "Swindon" },
            { name: "Telford and Wrekin" },
            { name: "Thurrock" },
            { name: "Torbay" },
            { name: "Tyne and Wear" },
            { name: "Warrington" },
            { name: "Warwickshire" },
            { name: "West Berkshire" },
            { name: "West Glamorgan" },
            { name: "West Lothian" },
            { name: "West Midlands" },
            { name: "West Sussex" },
            { name: "West Yorkshire" },
            { name: "Western Isles" },
            { name: "Wiltshire" },
            { name: "Windsor and Maidenhead" },
            { name: "Wokingham" },
            { name: "Worcestershire" },
            { name: "Wrexham" },
            { name: "York" }
          ]
        },
        provinces: {
          "ca": [
            { name: "Alberta", abbreviation: "AB" },
            { name: "British Columbia", abbreviation: "BC" },
            { name: "Manitoba", abbreviation: "MB" },
            { name: "New Brunswick", abbreviation: "NB" },
            { name: "Newfoundland and Labrador", abbreviation: "NL" },
            { name: "Nova Scotia", abbreviation: "NS" },
            { name: "Ontario", abbreviation: "ON" },
            { name: "Prince Edward Island", abbreviation: "PE" },
            { name: "Quebec", abbreviation: "QC" },
            { name: "Saskatchewan", abbreviation: "SK" },
            // The case could be made that the following are not actually provinces
            // since they are technically considered "territories" however they all
            // look the same on an envelope!
            { name: "Northwest Territories", abbreviation: "NT" },
            { name: "Nunavut", abbreviation: "NU" },
            { name: "Yukon", abbreviation: "YT" }
          ],
          "it": [
            { name: "Agrigento", abbreviation: "AG", code: 84 },
            { name: "Alessandria", abbreviation: "AL", code: 6 },
            { name: "Ancona", abbreviation: "AN", code: 42 },
            { name: "Aosta", abbreviation: "AO", code: 7 },
            { name: "L'Aquila", abbreviation: "AQ", code: 66 },
            { name: "Arezzo", abbreviation: "AR", code: 51 },
            { name: "Ascoli-Piceno", abbreviation: "AP", code: 44 },
            { name: "Asti", abbreviation: "AT", code: 5 },
            { name: "Avellino", abbreviation: "AV", code: 64 },
            { name: "Bari", abbreviation: "BA", code: 72 },
            { name: "Barletta-Andria-Trani", abbreviation: "BT", code: 72 },
            { name: "Belluno", abbreviation: "BL", code: 25 },
            { name: "Benevento", abbreviation: "BN", code: 62 },
            { name: "Bergamo", abbreviation: "BG", code: 16 },
            { name: "Biella", abbreviation: "BI", code: 96 },
            { name: "Bologna", abbreviation: "BO", code: 37 },
            { name: "Bolzano", abbreviation: "BZ", code: 21 },
            { name: "Brescia", abbreviation: "BS", code: 17 },
            { name: "Brindisi", abbreviation: "BR", code: 74 },
            { name: "Cagliari", abbreviation: "CA", code: 92 },
            { name: "Caltanissetta", abbreviation: "CL", code: 85 },
            { name: "Campobasso", abbreviation: "CB", code: 70 },
            { name: "Carbonia Iglesias", abbreviation: "CI", code: 70 },
            { name: "Caserta", abbreviation: "CE", code: 61 },
            { name: "Catania", abbreviation: "CT", code: 87 },
            { name: "Catanzaro", abbreviation: "CZ", code: 79 },
            { name: "Chieti", abbreviation: "CH", code: 69 },
            { name: "Como", abbreviation: "CO", code: 13 },
            { name: "Cosenza", abbreviation: "CS", code: 78 },
            { name: "Cremona", abbreviation: "CR", code: 19 },
            { name: "Crotone", abbreviation: "KR", code: 101 },
            { name: "Cuneo", abbreviation: "CN", code: 4 },
            { name: "Enna", abbreviation: "EN", code: 86 },
            { name: "Fermo", abbreviation: "FM", code: 86 },
            { name: "Ferrara", abbreviation: "FE", code: 38 },
            { name: "Firenze", abbreviation: "FI", code: 48 },
            { name: "Foggia", abbreviation: "FG", code: 71 },
            { name: "Forli-Cesena", abbreviation: "FC", code: 71 },
            { name: "Frosinone", abbreviation: "FR", code: 60 },
            { name: "Genova", abbreviation: "GE", code: 10 },
            { name: "Gorizia", abbreviation: "GO", code: 31 },
            { name: "Grosseto", abbreviation: "GR", code: 53 },
            { name: "Imperia", abbreviation: "IM", code: 8 },
            { name: "Isernia", abbreviation: "IS", code: 94 },
            { name: "La-Spezia", abbreviation: "SP", code: 66 },
            { name: "Latina", abbreviation: "LT", code: 59 },
            { name: "Lecce", abbreviation: "LE", code: 75 },
            { name: "Lecco", abbreviation: "LC", code: 97 },
            { name: "Livorno", abbreviation: "LI", code: 49 },
            { name: "Lodi", abbreviation: "LO", code: 98 },
            { name: "Lucca", abbreviation: "LU", code: 46 },
            { name: "Macerata", abbreviation: "MC", code: 43 },
            { name: "Mantova", abbreviation: "MN", code: 20 },
            { name: "Massa-Carrara", abbreviation: "MS", code: 45 },
            { name: "Matera", abbreviation: "MT", code: 77 },
            { name: "Medio Campidano", abbreviation: "VS", code: 77 },
            { name: "Messina", abbreviation: "ME", code: 83 },
            { name: "Milano", abbreviation: "MI", code: 15 },
            { name: "Modena", abbreviation: "MO", code: 36 },
            { name: "Monza-Brianza", abbreviation: "MB", code: 36 },
            { name: "Napoli", abbreviation: "NA", code: 63 },
            { name: "Novara", abbreviation: "NO", code: 3 },
            { name: "Nuoro", abbreviation: "NU", code: 91 },
            { name: "Ogliastra", abbreviation: "OG", code: 91 },
            { name: "Olbia Tempio", abbreviation: "OT", code: 91 },
            { name: "Oristano", abbreviation: "OR", code: 95 },
            { name: "Padova", abbreviation: "PD", code: 28 },
            { name: "Palermo", abbreviation: "PA", code: 82 },
            { name: "Parma", abbreviation: "PR", code: 34 },
            { name: "Pavia", abbreviation: "PV", code: 18 },
            { name: "Perugia", abbreviation: "PG", code: 54 },
            { name: "Pesaro-Urbino", abbreviation: "PU", code: 41 },
            { name: "Pescara", abbreviation: "PE", code: 68 },
            { name: "Piacenza", abbreviation: "PC", code: 33 },
            { name: "Pisa", abbreviation: "PI", code: 50 },
            { name: "Pistoia", abbreviation: "PT", code: 47 },
            { name: "Pordenone", abbreviation: "PN", code: 93 },
            { name: "Potenza", abbreviation: "PZ", code: 76 },
            { name: "Prato", abbreviation: "PO", code: 100 },
            { name: "Ragusa", abbreviation: "RG", code: 88 },
            { name: "Ravenna", abbreviation: "RA", code: 39 },
            { name: "Reggio-Calabria", abbreviation: "RC", code: 35 },
            { name: "Reggio-Emilia", abbreviation: "RE", code: 35 },
            { name: "Rieti", abbreviation: "RI", code: 57 },
            { name: "Rimini", abbreviation: "RN", code: 99 },
            { name: "Roma", abbreviation: "Roma", code: 58 },
            { name: "Rovigo", abbreviation: "RO", code: 29 },
            { name: "Salerno", abbreviation: "SA", code: 65 },
            { name: "Sassari", abbreviation: "SS", code: 90 },
            { name: "Savona", abbreviation: "SV", code: 9 },
            { name: "Siena", abbreviation: "SI", code: 52 },
            { name: "Siracusa", abbreviation: "SR", code: 89 },
            { name: "Sondrio", abbreviation: "SO", code: 14 },
            { name: "Taranto", abbreviation: "TA", code: 73 },
            { name: "Teramo", abbreviation: "TE", code: 67 },
            { name: "Terni", abbreviation: "TR", code: 55 },
            { name: "Torino", abbreviation: "TO", code: 1 },
            { name: "Trapani", abbreviation: "TP", code: 81 },
            { name: "Trento", abbreviation: "TN", code: 22 },
            { name: "Treviso", abbreviation: "TV", code: 26 },
            { name: "Trieste", abbreviation: "TS", code: 32 },
            { name: "Udine", abbreviation: "UD", code: 30 },
            { name: "Varese", abbreviation: "VA", code: 12 },
            { name: "Venezia", abbreviation: "VE", code: 27 },
            { name: "Verbania", abbreviation: "VB", code: 27 },
            { name: "Vercelli", abbreviation: "VC", code: 2 },
            { name: "Verona", abbreviation: "VR", code: 23 },
            { name: "Vibo-Valentia", abbreviation: "VV", code: 102 },
            { name: "Vicenza", abbreviation: "VI", code: 24 },
            { name: "Viterbo", abbreviation: "VT", code: 56 }
          ]
        },
        // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json
        nationalities: [
          { name: "Afghan" },
          { name: "Albanian" },
          { name: "Algerian" },
          { name: "American" },
          { name: "Andorran" },
          { name: "Angolan" },
          { name: "Antiguans" },
          { name: "Argentinean" },
          { name: "Armenian" },
          { name: "Australian" },
          { name: "Austrian" },
          { name: "Azerbaijani" },
          { name: "Bahami" },
          { name: "Bahraini" },
          { name: "Bangladeshi" },
          { name: "Barbadian" },
          { name: "Barbudans" },
          { name: "Batswana" },
          { name: "Belarusian" },
          { name: "Belgian" },
          { name: "Belizean" },
          { name: "Beninese" },
          { name: "Bhutanese" },
          { name: "Bolivian" },
          { name: "Bosnian" },
          { name: "Brazilian" },
          { name: "British" },
          { name: "Bruneian" },
          { name: "Bulgarian" },
          { name: "Burkinabe" },
          { name: "Burmese" },
          { name: "Burundian" },
          { name: "Cambodian" },
          { name: "Cameroonian" },
          { name: "Canadian" },
          { name: "Cape Verdean" },
          { name: "Central African" },
          { name: "Chadian" },
          { name: "Chilean" },
          { name: "Chinese" },
          { name: "Colombian" },
          { name: "Comoran" },
          { name: "Congolese" },
          { name: "Costa Rican" },
          { name: "Croatian" },
          { name: "Cuban" },
          { name: "Cypriot" },
          { name: "Czech" },
          { name: "Danish" },
          { name: "Djibouti" },
          { name: "Dominican" },
          { name: "Dutch" },
          { name: "East Timorese" },
          { name: "Ecuadorean" },
          { name: "Egyptian" },
          { name: "Emirian" },
          { name: "Equatorial Guinean" },
          { name: "Eritrean" },
          { name: "Estonian" },
          { name: "Ethiopian" },
          { name: "Fijian" },
          { name: "Filipino" },
          { name: "Finnish" },
          { name: "French" },
          { name: "Gabonese" },
          { name: "Gambian" },
          { name: "Georgian" },
          { name: "German" },
          { name: "Ghanaian" },
          { name: "Greek" },
          { name: "Grenadian" },
          { name: "Guatemalan" },
          { name: "Guinea-Bissauan" },
          { name: "Guinean" },
          { name: "Guyanese" },
          { name: "Haitian" },
          { name: "Herzegovinian" },
          { name: "Honduran" },
          { name: "Hungarian" },
          { name: "I-Kiribati" },
          { name: "Icelander" },
          { name: "Indian" },
          { name: "Indonesian" },
          { name: "Iranian" },
          { name: "Iraqi" },
          { name: "Irish" },
          { name: "Israeli" },
          { name: "Italian" },
          { name: "Ivorian" },
          { name: "Jamaican" },
          { name: "Japanese" },
          { name: "Jordanian" },
          { name: "Kazakhstani" },
          { name: "Kenyan" },
          { name: "Kittian and Nevisian" },
          { name: "Kuwaiti" },
          { name: "Kyrgyz" },
          { name: "Laotian" },
          { name: "Latvian" },
          { name: "Lebanese" },
          { name: "Liberian" },
          { name: "Libyan" },
          { name: "Liechtensteiner" },
          { name: "Lithuanian" },
          { name: "Luxembourger" },
          { name: "Macedonian" },
          { name: "Malagasy" },
          { name: "Malawian" },
          { name: "Malaysian" },
          { name: "Maldivan" },
          { name: "Malian" },
          { name: "Maltese" },
          { name: "Marshallese" },
          { name: "Mauritanian" },
          { name: "Mauritian" },
          { name: "Mexican" },
          { name: "Micronesian" },
          { name: "Moldovan" },
          { name: "Monacan" },
          { name: "Mongolian" },
          { name: "Moroccan" },
          { name: "Mosotho" },
          { name: "Motswana" },
          { name: "Mozambican" },
          { name: "Namibian" },
          { name: "Nauruan" },
          { name: "Nepalese" },
          { name: "New Zealander" },
          { name: "Nicaraguan" },
          { name: "Nigerian" },
          { name: "Nigerien" },
          { name: "North Korean" },
          { name: "Northern Irish" },
          { name: "Norwegian" },
          { name: "Omani" },
          { name: "Pakistani" },
          { name: "Palauan" },
          { name: "Panamanian" },
          { name: "Papua New Guinean" },
          { name: "Paraguayan" },
          { name: "Peruvian" },
          { name: "Polish" },
          { name: "Portuguese" },
          { name: "Qatari" },
          { name: "Romani" },
          { name: "Russian" },
          { name: "Rwandan" },
          { name: "Saint Lucian" },
          { name: "Salvadoran" },
          { name: "Samoan" },
          { name: "San Marinese" },
          { name: "Sao Tomean" },
          { name: "Saudi" },
          { name: "Scottish" },
          { name: "Senegalese" },
          { name: "Serbian" },
          { name: "Seychellois" },
          { name: "Sierra Leonean" },
          { name: "Singaporean" },
          { name: "Slovakian" },
          { name: "Slovenian" },
          { name: "Solomon Islander" },
          { name: "Somali" },
          { name: "South African" },
          { name: "South Korean" },
          { name: "Spanish" },
          { name: "Sri Lankan" },
          { name: "Sudanese" },
          { name: "Surinamer" },
          { name: "Swazi" },
          { name: "Swedish" },
          { name: "Swiss" },
          { name: "Syrian" },
          { name: "Taiwanese" },
          { name: "Tajik" },
          { name: "Tanzanian" },
          { name: "Thai" },
          { name: "Togolese" },
          { name: "Tongan" },
          { name: "Trinidadian or Tobagonian" },
          { name: "Tunisian" },
          { name: "Turkish" },
          { name: "Tuvaluan" },
          { name: "Ugandan" },
          { name: "Ukrainian" },
          { name: "Uruguaya" },
          { name: "Uzbekistani" },
          { name: "Venezuela" },
          { name: "Vietnamese" },
          { name: "Wels" },
          { name: "Yemenit" },
          { name: "Zambia" },
          { name: "Zimbabwe" }
        ],
        // http://www.loc.gov/standards/iso639-2/php/code_list.php (ISO-639-1 codes)
        locale_languages: [
          "aa",
          "ab",
          "ae",
          "af",
          "ak",
          "am",
          "an",
          "ar",
          "as",
          "av",
          "ay",
          "az",
          "ba",
          "be",
          "bg",
          "bh",
          "bi",
          "bm",
          "bn",
          "bo",
          "br",
          "bs",
          "ca",
          "ce",
          "ch",
          "co",
          "cr",
          "cs",
          "cu",
          "cv",
          "cy",
          "da",
          "de",
          "dv",
          "dz",
          "ee",
          "el",
          "en",
          "eo",
          "es",
          "et",
          "eu",
          "fa",
          "ff",
          "fi",
          "fj",
          "fo",
          "fr",
          "fy",
          "ga",
          "gd",
          "gl",
          "gn",
          "gu",
          "gv",
          "ha",
          "he",
          "hi",
          "ho",
          "hr",
          "ht",
          "hu",
          "hy",
          "hz",
          "ia",
          "id",
          "ie",
          "ig",
          "ii",
          "ik",
          "io",
          "is",
          "it",
          "iu",
          "ja",
          "jv",
          "ka",
          "kg",
          "ki",
          "kj",
          "kk",
          "kl",
          "km",
          "kn",
          "ko",
          "kr",
          "ks",
          "ku",
          "kv",
          "kw",
          "ky",
          "la",
          "lb",
          "lg",
          "li",
          "ln",
          "lo",
          "lt",
          "lu",
          "lv",
          "mg",
          "mh",
          "mi",
          "mk",
          "ml",
          "mn",
          "mr",
          "ms",
          "mt",
          "my",
          "na",
          "nb",
          "nd",
          "ne",
          "ng",
          "nl",
          "nn",
          "no",
          "nr",
          "nv",
          "ny",
          "oc",
          "oj",
          "om",
          "or",
          "os",
          "pa",
          "pi",
          "pl",
          "ps",
          "pt",
          "qu",
          "rm",
          "rn",
          "ro",
          "ru",
          "rw",
          "sa",
          "sc",
          "sd",
          "se",
          "sg",
          "si",
          "sk",
          "sl",
          "sm",
          "sn",
          "so",
          "sq",
          "sr",
          "ss",
          "st",
          "su",
          "sv",
          "sw",
          "ta",
          "te",
          "tg",
          "th",
          "ti",
          "tk",
          "tl",
          "tn",
          "to",
          "tr",
          "ts",
          "tt",
          "tw",
          "ty",
          "ug",
          "uk",
          "ur",
          "uz",
          "ve",
          "vi",
          "vo",
          "wa",
          "wo",
          "xh",
          "yi",
          "yo",
          "za",
          "zh",
          "zu"
        ],
        // From http://data.okfn.org/data/core/language-codes#resource-language-codes-full (IETF language tags)
        locale_regions: [
          "agq-CM",
          "asa-TZ",
          "ast-ES",
          "bas-CM",
          "bem-ZM",
          "bez-TZ",
          "brx-IN",
          "cgg-UG",
          "chr-US",
          "dav-KE",
          "dje-NE",
          "dsb-DE",
          "dua-CM",
          "dyo-SN",
          "ebu-KE",
          "ewo-CM",
          "fil-PH",
          "fur-IT",
          "gsw-CH",
          "gsw-FR",
          "gsw-LI",
          "guz-KE",
          "haw-US",
          "hsb-DE",
          "jgo-CM",
          "jmc-TZ",
          "kab-DZ",
          "kam-KE",
          "kde-TZ",
          "kea-CV",
          "khq-ML",
          "kkj-CM",
          "kln-KE",
          "kok-IN",
          "ksb-TZ",
          "ksf-CM",
          "ksh-DE",
          "lag-TZ",
          "lkt-US",
          "luo-KE",
          "luy-KE",
          "mas-KE",
          "mas-TZ",
          "mer-KE",
          "mfe-MU",
          "mgh-MZ",
          "mgo-CM",
          "mua-CM",
          "naq-NA",
          "nmg-CM",
          "nnh-CM",
          "nus-SD",
          "nyn-UG",
          "rof-TZ",
          "rwk-TZ",
          "sah-RU",
          "saq-KE",
          "sbp-TZ",
          "seh-MZ",
          "ses-ML",
          "shi-Latn",
          "shi-Latn-MA",
          "shi-Tfng",
          "shi-Tfng-MA",
          "smn-FI",
          "teo-KE",
          "teo-UG",
          "twq-NE",
          "tzm-Latn",
          "tzm-Latn-MA",
          "vai-Latn",
          "vai-Latn-LR",
          "vai-Vaii",
          "vai-Vaii-LR",
          "vun-TZ",
          "wae-CH",
          "xog-UG",
          "yav-CM",
          "zgh-MA",
          "af-NA",
          "af-ZA",
          "ak-GH",
          "am-ET",
          "ar-001",
          "ar-AE",
          "ar-BH",
          "ar-DJ",
          "ar-DZ",
          "ar-EG",
          "ar-EH",
          "ar-ER",
          "ar-IL",
          "ar-IQ",
          "ar-JO",
          "ar-KM",
          "ar-KW",
          "ar-LB",
          "ar-LY",
          "ar-MA",
          "ar-MR",
          "ar-OM",
          "ar-PS",
          "ar-QA",
          "ar-SA",
          "ar-SD",
          "ar-SO",
          "ar-SS",
          "ar-SY",
          "ar-TD",
          "ar-TN",
          "ar-YE",
          "as-IN",
          "az-Cyrl",
          "az-Cyrl-AZ",
          "az-Latn",
          "az-Latn-AZ",
          "be-BY",
          "bg-BG",
          "bm-Latn",
          "bm-Latn-ML",
          "bn-BD",
          "bn-IN",
          "bo-CN",
          "bo-IN",
          "br-FR",
          "bs-Cyrl",
          "bs-Cyrl-BA",
          "bs-Latn",
          "bs-Latn-BA",
          "ca-AD",
          "ca-ES",
          "ca-ES-VALENCIA",
          "ca-FR",
          "ca-IT",
          "cs-CZ",
          "cy-GB",
          "da-DK",
          "da-GL",
          "de-AT",
          "de-BE",
          "de-CH",
          "de-DE",
          "de-LI",
          "de-LU",
          "dz-BT",
          "ee-GH",
          "ee-TG",
          "el-CY",
          "el-GR",
          "en-001",
          "en-150",
          "en-AG",
          "en-AI",
          "en-AS",
          "en-AU",
          "en-BB",
          "en-BE",
          "en-BM",
          "en-BS",
          "en-BW",
          "en-BZ",
          "en-CA",
          "en-CC",
          "en-CK",
          "en-CM",
          "en-CX",
          "en-DG",
          "en-DM",
          "en-ER",
          "en-FJ",
          "en-FK",
          "en-FM",
          "en-GB",
          "en-GD",
          "en-GG",
          "en-GH",
          "en-GI",
          "en-GM",
          "en-GU",
          "en-GY",
          "en-HK",
          "en-IE",
          "en-IM",
          "en-IN",
          "en-IO",
          "en-JE",
          "en-JM",
          "en-KE",
          "en-KI",
          "en-KN",
          "en-KY",
          "en-LC",
          "en-LR",
          "en-LS",
          "en-MG",
          "en-MH",
          "en-MO",
          "en-MP",
          "en-MS",
          "en-MT",
          "en-MU",
          "en-MW",
          "en-MY",
          "en-NA",
          "en-NF",
          "en-NG",
          "en-NR",
          "en-NU",
          "en-NZ",
          "en-PG",
          "en-PH",
          "en-PK",
          "en-PN",
          "en-PR",
          "en-PW",
          "en-RW",
          "en-SB",
          "en-SC",
          "en-SD",
          "en-SG",
          "en-SH",
          "en-SL",
          "en-SS",
          "en-SX",
          "en-SZ",
          "en-TC",
          "en-TK",
          "en-TO",
          "en-TT",
          "en-TV",
          "en-TZ",
          "en-UG",
          "en-UM",
          "en-US",
          "en-US-POSIX",
          "en-VC",
          "en-VG",
          "en-VI",
          "en-VU",
          "en-WS",
          "en-ZA",
          "en-ZM",
          "en-ZW",
          "eo-001",
          "es-419",
          "es-AR",
          "es-BO",
          "es-CL",
          "es-CO",
          "es-CR",
          "es-CU",
          "es-DO",
          "es-EA",
          "es-EC",
          "es-ES",
          "es-GQ",
          "es-GT",
          "es-HN",
          "es-IC",
          "es-MX",
          "es-NI",
          "es-PA",
          "es-PE",
          "es-PH",
          "es-PR",
          "es-PY",
          "es-SV",
          "es-US",
          "es-UY",
          "es-VE",
          "et-EE",
          "eu-ES",
          "fa-AF",
          "fa-IR",
          "ff-CM",
          "ff-GN",
          "ff-MR",
          "ff-SN",
          "fi-FI",
          "fo-FO",
          "fr-BE",
          "fr-BF",
          "fr-BI",
          "fr-BJ",
          "fr-BL",
          "fr-CA",
          "fr-CD",
          "fr-CF",
          "fr-CG",
          "fr-CH",
          "fr-CI",
          "fr-CM",
          "fr-DJ",
          "fr-DZ",
          "fr-FR",
          "fr-GA",
          "fr-GF",
          "fr-GN",
          "fr-GP",
          "fr-GQ",
          "fr-HT",
          "fr-KM",
          "fr-LU",
          "fr-MA",
          "fr-MC",
          "fr-MF",
          "fr-MG",
          "fr-ML",
          "fr-MQ",
          "fr-MR",
          "fr-MU",
          "fr-NC",
          "fr-NE",
          "fr-PF",
          "fr-PM",
          "fr-RE",
          "fr-RW",
          "fr-SC",
          "fr-SN",
          "fr-SY",
          "fr-TD",
          "fr-TG",
          "fr-TN",
          "fr-VU",
          "fr-WF",
          "fr-YT",
          "fy-NL",
          "ga-IE",
          "gd-GB",
          "gl-ES",
          "gu-IN",
          "gv-IM",
          "ha-Latn",
          "ha-Latn-GH",
          "ha-Latn-NE",
          "ha-Latn-NG",
          "he-IL",
          "hi-IN",
          "hr-BA",
          "hr-HR",
          "hu-HU",
          "hy-AM",
          "id-ID",
          "ig-NG",
          "ii-CN",
          "is-IS",
          "it-CH",
          "it-IT",
          "it-SM",
          "ja-JP",
          "ka-GE",
          "ki-KE",
          "kk-Cyrl",
          "kk-Cyrl-KZ",
          "kl-GL",
          "km-KH",
          "kn-IN",
          "ko-KP",
          "ko-KR",
          "ks-Arab",
          "ks-Arab-IN",
          "kw-GB",
          "ky-Cyrl",
          "ky-Cyrl-KG",
          "lb-LU",
          "lg-UG",
          "ln-AO",
          "ln-CD",
          "ln-CF",
          "ln-CG",
          "lo-LA",
          "lt-LT",
          "lu-CD",
          "lv-LV",
          "mg-MG",
          "mk-MK",
          "ml-IN",
          "mn-Cyrl",
          "mn-Cyrl-MN",
          "mr-IN",
          "ms-Latn",
          "ms-Latn-BN",
          "ms-Latn-MY",
          "ms-Latn-SG",
          "mt-MT",
          "my-MM",
          "nb-NO",
          "nb-SJ",
          "nd-ZW",
          "ne-IN",
          "ne-NP",
          "nl-AW",
          "nl-BE",
          "nl-BQ",
          "nl-CW",
          "nl-NL",
          "nl-SR",
          "nl-SX",
          "nn-NO",
          "om-ET",
          "om-KE",
          "or-IN",
          "os-GE",
          "os-RU",
          "pa-Arab",
          "pa-Arab-PK",
          "pa-Guru",
          "pa-Guru-IN",
          "pl-PL",
          "ps-AF",
          "pt-AO",
          "pt-BR",
          "pt-CV",
          "pt-GW",
          "pt-MO",
          "pt-MZ",
          "pt-PT",
          "pt-ST",
          "pt-TL",
          "qu-BO",
          "qu-EC",
          "qu-PE",
          "rm-CH",
          "rn-BI",
          "ro-MD",
          "ro-RO",
          "ru-BY",
          "ru-KG",
          "ru-KZ",
          "ru-MD",
          "ru-RU",
          "ru-UA",
          "rw-RW",
          "se-FI",
          "se-NO",
          "se-SE",
          "sg-CF",
          "si-LK",
          "sk-SK",
          "sl-SI",
          "sn-ZW",
          "so-DJ",
          "so-ET",
          "so-KE",
          "so-SO",
          "sq-AL",
          "sq-MK",
          "sq-XK",
          "sr-Cyrl",
          "sr-Cyrl-BA",
          "sr-Cyrl-ME",
          "sr-Cyrl-RS",
          "sr-Cyrl-XK",
          "sr-Latn",
          "sr-Latn-BA",
          "sr-Latn-ME",
          "sr-Latn-RS",
          "sr-Latn-XK",
          "sv-AX",
          "sv-FI",
          "sv-SE",
          "sw-CD",
          "sw-KE",
          "sw-TZ",
          "sw-UG",
          "ta-IN",
          "ta-LK",
          "ta-MY",
          "ta-SG",
          "te-IN",
          "th-TH",
          "ti-ER",
          "ti-ET",
          "to-TO",
          "tr-CY",
          "tr-TR",
          "ug-Arab",
          "ug-Arab-CN",
          "uk-UA",
          "ur-IN",
          "ur-PK",
          "uz-Arab",
          "uz-Arab-AF",
          "uz-Cyrl",
          "uz-Cyrl-UZ",
          "uz-Latn",
          "uz-Latn-UZ",
          "vi-VN",
          "yi-001",
          "yo-BJ",
          "yo-NG",
          "zh-Hans",
          "zh-Hans-CN",
          "zh-Hans-HK",
          "zh-Hans-MO",
          "zh-Hans-SG",
          "zh-Hant",
          "zh-Hant-HK",
          "zh-Hant-MO",
          "zh-Hant-TW",
          "zu-ZA"
        ],
        us_states_and_dc: [
          { name: "Alabama", abbreviation: "AL" },
          { name: "Alaska", abbreviation: "AK" },
          { name: "Arizona", abbreviation: "AZ" },
          { name: "Arkansas", abbreviation: "AR" },
          { name: "California", abbreviation: "CA" },
          { name: "Colorado", abbreviation: "CO" },
          { name: "Connecticut", abbreviation: "CT" },
          { name: "Delaware", abbreviation: "DE" },
          { name: "District of Columbia", abbreviation: "DC" },
          { name: "Florida", abbreviation: "FL" },
          { name: "Georgia", abbreviation: "GA" },
          { name: "Hawaii", abbreviation: "HI" },
          { name: "Idaho", abbreviation: "ID" },
          { name: "Illinois", abbreviation: "IL" },
          { name: "Indiana", abbreviation: "IN" },
          { name: "Iowa", abbreviation: "IA" },
          { name: "Kansas", abbreviation: "KS" },
          { name: "Kentucky", abbreviation: "KY" },
          { name: "Louisiana", abbreviation: "LA" },
          { name: "Maine", abbreviation: "ME" },
          { name: "Maryland", abbreviation: "MD" },
          { name: "Massachusetts", abbreviation: "MA" },
          { name: "Michigan", abbreviation: "MI" },
          { name: "Minnesota", abbreviation: "MN" },
          { name: "Mississippi", abbreviation: "MS" },
          { name: "Missouri", abbreviation: "MO" },
          { name: "Montana", abbreviation: "MT" },
          { name: "Nebraska", abbreviation: "NE" },
          { name: "Nevada", abbreviation: "NV" },
          { name: "New Hampshire", abbreviation: "NH" },
          { name: "New Jersey", abbreviation: "NJ" },
          { name: "New Mexico", abbreviation: "NM" },
          { name: "New York", abbreviation: "NY" },
          { name: "North Carolina", abbreviation: "NC" },
          { name: "North Dakota", abbreviation: "ND" },
          { name: "Ohio", abbreviation: "OH" },
          { name: "Oklahoma", abbreviation: "OK" },
          { name: "Oregon", abbreviation: "OR" },
          { name: "Pennsylvania", abbreviation: "PA" },
          { name: "Rhode Island", abbreviation: "RI" },
          { name: "South Carolina", abbreviation: "SC" },
          { name: "South Dakota", abbreviation: "SD" },
          { name: "Tennessee", abbreviation: "TN" },
          { name: "Texas", abbreviation: "TX" },
          { name: "Utah", abbreviation: "UT" },
          { name: "Vermont", abbreviation: "VT" },
          { name: "Virginia", abbreviation: "VA" },
          { name: "Washington", abbreviation: "WA" },
          { name: "West Virginia", abbreviation: "WV" },
          { name: "Wisconsin", abbreviation: "WI" },
          { name: "Wyoming", abbreviation: "WY" }
        ],
        territories: [
          { name: "American Samoa", abbreviation: "AS" },
          { name: "Federated States of Micronesia", abbreviation: "FM" },
          { name: "Guam", abbreviation: "GU" },
          { name: "Marshall Islands", abbreviation: "MH" },
          { name: "Northern Mariana Islands", abbreviation: "MP" },
          { name: "Puerto Rico", abbreviation: "PR" },
          { name: "Virgin Islands, U.S.", abbreviation: "VI" }
        ],
        armed_forces: [
          { name: "Armed Forces Europe", abbreviation: "AE" },
          { name: "Armed Forces Pacific", abbreviation: "AP" },
          { name: "Armed Forces the Americas", abbreviation: "AA" }
        ],
        country_regions: {
          it: [
            { name: "Valle d'Aosta", abbreviation: "VDA" },
            { name: "Piemonte", abbreviation: "PIE" },
            { name: "Lombardia", abbreviation: "LOM" },
            { name: "Veneto", abbreviation: "VEN" },
            { name: "Trentino Alto Adige", abbreviation: "TAA" },
            { name: "Friuli Venezia Giulia", abbreviation: "FVG" },
            { name: "Liguria", abbreviation: "LIG" },
            { name: "Emilia Romagna", abbreviation: "EMR" },
            { name: "Toscana", abbreviation: "TOS" },
            { name: "Umbria", abbreviation: "UMB" },
            { name: "Marche", abbreviation: "MAR" },
            { name: "Abruzzo", abbreviation: "ABR" },
            { name: "Lazio", abbreviation: "LAZ" },
            { name: "Campania", abbreviation: "CAM" },
            { name: "Puglia", abbreviation: "PUG" },
            { name: "Basilicata", abbreviation: "BAS" },
            { name: "Molise", abbreviation: "MOL" },
            { name: "Calabria", abbreviation: "CAL" },
            { name: "Sicilia", abbreviation: "SIC" },
            { name: "Sardegna", abbreviation: "SAR" }
          ],
          mx: [
            { name: "Aguascalientes", abbreviation: "AGU" },
            { name: "Baja California", abbreviation: "BCN" },
            { name: "Baja California Sur", abbreviation: "BCS" },
            { name: "Campeche", abbreviation: "CAM" },
            { name: "Chiapas", abbreviation: "CHP" },
            { name: "Chihuahua", abbreviation: "CHH" },
            { name: "Ciudad de México", abbreviation: "DIF" },
            { name: "Coahuila", abbreviation: "COA" },
            { name: "Colima", abbreviation: "COL" },
            { name: "Durango", abbreviation: "DUR" },
            { name: "Guanajuato", abbreviation: "GUA" },
            { name: "Guerrero", abbreviation: "GRO" },
            { name: "Hidalgo", abbreviation: "HID" },
            { name: "Jalisco", abbreviation: "JAL" },
            { name: "México", abbreviation: "MEX" },
            { name: "Michoacán", abbreviation: "MIC" },
            { name: "Morelos", abbreviation: "MOR" },
            { name: "Nayarit", abbreviation: "NAY" },
            { name: "Nuevo León", abbreviation: "NLE" },
            { name: "Oaxaca", abbreviation: "OAX" },
            { name: "Puebla", abbreviation: "PUE" },
            { name: "Querétaro", abbreviation: "QUE" },
            { name: "Quintana Roo", abbreviation: "ROO" },
            { name: "San Luis Potosí", abbreviation: "SLP" },
            { name: "Sinaloa", abbreviation: "SIN" },
            { name: "Sonora", abbreviation: "SON" },
            { name: "Tabasco", abbreviation: "TAB" },
            { name: "Tamaulipas", abbreviation: "TAM" },
            { name: "Tlaxcala", abbreviation: "TLA" },
            { name: "Veracruz", abbreviation: "VER" },
            { name: "Yucatán", abbreviation: "YUC" },
            { name: "Zacatecas", abbreviation: "ZAC" }
          ]
        },
        street_suffixes: {
          "us": [
            { name: "Avenue", abbreviation: "Ave" },
            { name: "Boulevard", abbreviation: "Blvd" },
            { name: "Center", abbreviation: "Ctr" },
            { name: "Circle", abbreviation: "Cir" },
            { name: "Court", abbreviation: "Ct" },
            { name: "Drive", abbreviation: "Dr" },
            { name: "Extension", abbreviation: "Ext" },
            { name: "Glen", abbreviation: "Gln" },
            { name: "Grove", abbreviation: "Grv" },
            { name: "Heights", abbreviation: "Hts" },
            { name: "Highway", abbreviation: "Hwy" },
            { name: "Junction", abbreviation: "Jct" },
            { name: "Key", abbreviation: "Key" },
            { name: "Lane", abbreviation: "Ln" },
            { name: "Loop", abbreviation: "Loop" },
            { name: "Manor", abbreviation: "Mnr" },
            { name: "Mill", abbreviation: "Mill" },
            { name: "Park", abbreviation: "Park" },
            { name: "Parkway", abbreviation: "Pkwy" },
            { name: "Pass", abbreviation: "Pass" },
            { name: "Path", abbreviation: "Path" },
            { name: "Pike", abbreviation: "Pike" },
            { name: "Place", abbreviation: "Pl" },
            { name: "Plaza", abbreviation: "Plz" },
            { name: "Point", abbreviation: "Pt" },
            { name: "Ridge", abbreviation: "Rdg" },
            { name: "River", abbreviation: "Riv" },
            { name: "Road", abbreviation: "Rd" },
            { name: "Square", abbreviation: "Sq" },
            { name: "Street", abbreviation: "St" },
            { name: "Terrace", abbreviation: "Ter" },
            { name: "Trail", abbreviation: "Trl" },
            { name: "Turnpike", abbreviation: "Tpke" },
            { name: "View", abbreviation: "Vw" },
            { name: "Way", abbreviation: "Way" }
          ],
          "it": [
            { name: "Accesso", abbreviation: "Acc." },
            { name: "Alzaia", abbreviation: "Alz." },
            { name: "Arco", abbreviation: "Arco" },
            { name: "Archivolto", abbreviation: "Acv." },
            { name: "Arena", abbreviation: "Arena" },
            { name: "Argine", abbreviation: "Argine" },
            { name: "Bacino", abbreviation: "Bacino" },
            { name: "Banchi", abbreviation: "Banchi" },
            { name: "Banchina", abbreviation: "Ban." },
            { name: "Bastioni", abbreviation: "Bas." },
            { name: "Belvedere", abbreviation: "Belv." },
            { name: "Borgata", abbreviation: "B.ta" },
            { name: "Borgo", abbreviation: "B.go" },
            { name: "Calata", abbreviation: "Cal." },
            { name: "Calle", abbreviation: "Calle" },
            { name: "Campiello", abbreviation: "Cam." },
            { name: "Campo", abbreviation: "Cam." },
            { name: "Canale", abbreviation: "Can." },
            { name: "Carraia", abbreviation: "Carr." },
            { name: "Cascina", abbreviation: "Cascina" },
            { name: "Case sparse", abbreviation: "c.s." },
            { name: "Cavalcavia", abbreviation: "Cv." },
            { name: "Circonvallazione", abbreviation: "Cv." },
            { name: "Complanare", abbreviation: "C.re" },
            { name: "Contrada", abbreviation: "C.da" },
            { name: "Corso", abbreviation: "C.so" },
            { name: "Corte", abbreviation: "C.te" },
            { name: "Cortile", abbreviation: "C.le" },
            { name: "Diramazione", abbreviation: "Dir." },
            { name: "Fondaco", abbreviation: "F.co" },
            { name: "Fondamenta", abbreviation: "F.ta" },
            { name: "Fondo", abbreviation: "F.do" },
            { name: "Frazione", abbreviation: "Fr." },
            { name: "Isola", abbreviation: "Is." },
            { name: "Largo", abbreviation: "L.go" },
            { name: "Litoranea", abbreviation: "Lit." },
            { name: "Lungolago", abbreviation: "L.go lago" },
            { name: "Lungo Po", abbreviation: "l.go Po" },
            { name: "Molo", abbreviation: "Molo" },
            { name: "Mura", abbreviation: "Mura" },
            { name: "Passaggio privato", abbreviation: "pass. priv." },
            { name: "Passeggiata", abbreviation: "Pass." },
            { name: "Piazza", abbreviation: "P.zza" },
            { name: "Piazzale", abbreviation: "P.le" },
            { name: "Ponte", abbreviation: "P.te" },
            { name: "Portico", abbreviation: "P.co" },
            { name: "Rampa", abbreviation: "Rampa" },
            { name: "Regione", abbreviation: "Reg." },
            { name: "Rione", abbreviation: "R.ne" },
            { name: "Rio", abbreviation: "Rio" },
            { name: "Ripa", abbreviation: "Ripa" },
            { name: "Riva", abbreviation: "Riva" },
            { name: "Rondò", abbreviation: "Rondò" },
            { name: "Rotonda", abbreviation: "Rot." },
            { name: "Sagrato", abbreviation: "Sagr." },
            { name: "Salita", abbreviation: "Sal." },
            { name: "Scalinata", abbreviation: "Scal." },
            { name: "Scalone", abbreviation: "Scal." },
            { name: "Slargo", abbreviation: "Sl." },
            { name: "Sottoportico", abbreviation: "Sott." },
            { name: "Strada", abbreviation: "Str." },
            { name: "Stradale", abbreviation: "Str.le" },
            { name: "Strettoia", abbreviation: "Strett." },
            { name: "Traversa", abbreviation: "Trav." },
            { name: "Via", abbreviation: "V." },
            { name: "Viale", abbreviation: "V.le" },
            { name: "Vicinale", abbreviation: "Vic.le" },
            { name: "Vicolo", abbreviation: "Vic." }
          ],
          "uk": [
            { name: "Avenue", abbreviation: "Ave" },
            { name: "Close", abbreviation: "Cl" },
            { name: "Court", abbreviation: "Ct" },
            { name: "Crescent", abbreviation: "Cr" },
            { name: "Drive", abbreviation: "Dr" },
            { name: "Garden", abbreviation: "Gdn" },
            { name: "Gardens", abbreviation: "Gdns" },
            { name: "Green", abbreviation: "Gn" },
            { name: "Grove", abbreviation: "Gr" },
            { name: "Lane", abbreviation: "Ln" },
            { name: "Mount", abbreviation: "Mt" },
            { name: "Place", abbreviation: "Pl" },
            { name: "Park", abbreviation: "Pk" },
            { name: "Ridge", abbreviation: "Rdg" },
            { name: "Road", abbreviation: "Rd" },
            { name: "Square", abbreviation: "Sq" },
            { name: "Street", abbreviation: "St" },
            { name: "Terrace", abbreviation: "Ter" },
            { name: "Valley", abbreviation: "Val" }
          ]
        },
        months: [
          { name: "January", short_name: "Jan", numeric: "01", days: 31 },
          // Not messing with leap years...
          { name: "February", short_name: "Feb", numeric: "02", days: 28 },
          { name: "March", short_name: "Mar", numeric: "03", days: 31 },
          { name: "April", short_name: "Apr", numeric: "04", days: 30 },
          { name: "May", short_name: "May", numeric: "05", days: 31 },
          { name: "June", short_name: "Jun", numeric: "06", days: 30 },
          { name: "July", short_name: "Jul", numeric: "07", days: 31 },
          { name: "August", short_name: "Aug", numeric: "08", days: 31 },
          { name: "September", short_name: "Sep", numeric: "09", days: 30 },
          { name: "October", short_name: "Oct", numeric: "10", days: 31 },
          { name: "November", short_name: "Nov", numeric: "11", days: 30 },
          { name: "December", short_name: "Dec", numeric: "12", days: 31 }
        ],
        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
        cc_types: [
          { name: "American Express", short_name: "amex", prefix: "34", length: 15 },
          { name: "Bankcard", short_name: "bankcard", prefix: "5610", length: 16 },
          { name: "China UnionPay", short_name: "chinaunion", prefix: "62", length: 16 },
          { name: "Diners Club Carte Blanche", short_name: "dccarte", prefix: "300", length: 14 },
          { name: "Diners Club enRoute", short_name: "dcenroute", prefix: "2014", length: 15 },
          { name: "Diners Club International", short_name: "dcintl", prefix: "36", length: 14 },
          { name: "Diners Club United States & Canada", short_name: "dcusc", prefix: "54", length: 16 },
          { name: "Discover Card", short_name: "discover", prefix: "6011", length: 16 },
          { name: "InstaPayment", short_name: "instapay", prefix: "637", length: 16 },
          { name: "JCB", short_name: "jcb", prefix: "3528", length: 16 },
          { name: "Laser", short_name: "laser", prefix: "6304", length: 16 },
          { name: "Maestro", short_name: "maestro", prefix: "5018", length: 16 },
          { name: "Mastercard", short_name: "mc", prefix: "51", length: 16 },
          { name: "Solo", short_name: "solo", prefix: "6334", length: 16 },
          { name: "Switch", short_name: "switch", prefix: "4903", length: 16 },
          { name: "Visa", short_name: "visa", prefix: "4", length: 16 },
          { name: "Visa Electron", short_name: "electron", prefix: "4026", length: 16 }
        ],
        //return all world currency by ISO 4217
        currency_types: [
          { "code": "AED", "name": "United Arab Emirates Dirham" },
          { "code": "AFN", "name": "Afghanistan Afghani" },
          { "code": "ALL", "name": "Albania Lek" },
          { "code": "AMD", "name": "Armenia Dram" },
          { "code": "ANG", "name": "Netherlands Antilles Guilder" },
          { "code": "AOA", "name": "Angola Kwanza" },
          { "code": "ARS", "name": "Argentina Peso" },
          { "code": "AUD", "name": "Australia Dollar" },
          { "code": "AWG", "name": "Aruba Guilder" },
          { "code": "AZN", "name": "Azerbaijan New Manat" },
          { "code": "BAM", "name": "Bosnia and Herzegovina Convertible Marka" },
          { "code": "BBD", "name": "Barbados Dollar" },
          { "code": "BDT", "name": "Bangladesh Taka" },
          { "code": "BGN", "name": "Bulgaria Lev" },
          { "code": "BHD", "name": "Bahrain Dinar" },
          { "code": "BIF", "name": "Burundi Franc" },
          { "code": "BMD", "name": "Bermuda Dollar" },
          { "code": "BND", "name": "Brunei Darussalam Dollar" },
          { "code": "BOB", "name": "Bolivia Boliviano" },
          { "code": "BRL", "name": "Brazil Real" },
          { "code": "BSD", "name": "Bahamas Dollar" },
          { "code": "BTN", "name": "Bhutan Ngultrum" },
          { "code": "BWP", "name": "Botswana Pula" },
          { "code": "BYR", "name": "Belarus Ruble" },
          { "code": "BZD", "name": "Belize Dollar" },
          { "code": "CAD", "name": "Canada Dollar" },
          { "code": "CDF", "name": "Congo/Kinshasa Franc" },
          { "code": "CHF", "name": "Switzerland Franc" },
          { "code": "CLP", "name": "Chile Peso" },
          { "code": "CNY", "name": "China Yuan Renminbi" },
          { "code": "COP", "name": "Colombia Peso" },
          { "code": "CRC", "name": "Costa Rica Colon" },
          { "code": "CUC", "name": "Cuba Convertible Peso" },
          { "code": "CUP", "name": "Cuba Peso" },
          { "code": "CVE", "name": "Cape Verde Escudo" },
          { "code": "CZK", "name": "Czech Republic Koruna" },
          { "code": "DJF", "name": "Djibouti Franc" },
          { "code": "DKK", "name": "Denmark Krone" },
          { "code": "DOP", "name": "Dominican Republic Peso" },
          { "code": "DZD", "name": "Algeria Dinar" },
          { "code": "EGP", "name": "Egypt Pound" },
          { "code": "ERN", "name": "Eritrea Nakfa" },
          { "code": "ETB", "name": "Ethiopia Birr" },
          { "code": "EUR", "name": "Euro Member Countries" },
          { "code": "FJD", "name": "Fiji Dollar" },
          { "code": "FKP", "name": "Falkland Islands (Malvinas) Pound" },
          { "code": "GBP", "name": "United Kingdom Pound" },
          { "code": "GEL", "name": "Georgia Lari" },
          { "code": "GGP", "name": "Guernsey Pound" },
          { "code": "GHS", "name": "Ghana Cedi" },
          { "code": "GIP", "name": "Gibraltar Pound" },
          { "code": "GMD", "name": "Gambia Dalasi" },
          { "code": "GNF", "name": "Guinea Franc" },
          { "code": "GTQ", "name": "Guatemala Quetzal" },
          { "code": "GYD", "name": "Guyana Dollar" },
          { "code": "HKD", "name": "Hong Kong Dollar" },
          { "code": "HNL", "name": "Honduras Lempira" },
          { "code": "HRK", "name": "Croatia Kuna" },
          { "code": "HTG", "name": "Haiti Gourde" },
          { "code": "HUF", "name": "Hungary Forint" },
          { "code": "IDR", "name": "Indonesia Rupiah" },
          { "code": "ILS", "name": "Israel Shekel" },
          { "code": "IMP", "name": "Isle of Man Pound" },
          { "code": "INR", "name": "India Rupee" },
          { "code": "IQD", "name": "Iraq Dinar" },
          { "code": "IRR", "name": "Iran Rial" },
          { "code": "ISK", "name": "Iceland Krona" },
          { "code": "JEP", "name": "Jersey Pound" },
          { "code": "JMD", "name": "Jamaica Dollar" },
          { "code": "JOD", "name": "Jordan Dinar" },
          { "code": "JPY", "name": "Japan Yen" },
          { "code": "KES", "name": "Kenya Shilling" },
          { "code": "KGS", "name": "Kyrgyzstan Som" },
          { "code": "KHR", "name": "Cambodia Riel" },
          { "code": "KMF", "name": "Comoros Franc" },
          { "code": "KPW", "name": "Korea (North) Won" },
          { "code": "KRW", "name": "Korea (South) Won" },
          { "code": "KWD", "name": "Kuwait Dinar" },
          { "code": "KYD", "name": "Cayman Islands Dollar" },
          { "code": "KZT", "name": "Kazakhstan Tenge" },
          { "code": "LAK", "name": "Laos Kip" },
          { "code": "LBP", "name": "Lebanon Pound" },
          { "code": "LKR", "name": "Sri Lanka Rupee" },
          { "code": "LRD", "name": "Liberia Dollar" },
          { "code": "LSL", "name": "Lesotho Loti" },
          { "code": "LTL", "name": "Lithuania Litas" },
          { "code": "LYD", "name": "Libya Dinar" },
          { "code": "MAD", "name": "Morocco Dirham" },
          { "code": "MDL", "name": "Moldova Leu" },
          { "code": "MGA", "name": "Madagascar Ariary" },
          { "code": "MKD", "name": "Macedonia Denar" },
          { "code": "MMK", "name": "Myanmar (Burma) Kyat" },
          { "code": "MNT", "name": "Mongolia Tughrik" },
          { "code": "MOP", "name": "Macau Pataca" },
          { "code": "MRO", "name": "Mauritania Ouguiya" },
          { "code": "MUR", "name": "Mauritius Rupee" },
          { "code": "MVR", "name": "Maldives (Maldive Islands) Rufiyaa" },
          { "code": "MWK", "name": "Malawi Kwacha" },
          { "code": "MXN", "name": "Mexico Peso" },
          { "code": "MYR", "name": "Malaysia Ringgit" },
          { "code": "MZN", "name": "Mozambique Metical" },
          { "code": "NAD", "name": "Namibia Dollar" },
          { "code": "NGN", "name": "Nigeria Naira" },
          { "code": "NIO", "name": "Nicaragua Cordoba" },
          { "code": "NOK", "name": "Norway Krone" },
          { "code": "NPR", "name": "Nepal Rupee" },
          { "code": "NZD", "name": "New Zealand Dollar" },
          { "code": "OMR", "name": "Oman Rial" },
          { "code": "PAB", "name": "Panama Balboa" },
          { "code": "PEN", "name": "Peru Nuevo Sol" },
          { "code": "PGK", "name": "Papua New Guinea Kina" },
          { "code": "PHP", "name": "Philippines Peso" },
          { "code": "PKR", "name": "Pakistan Rupee" },
          { "code": "PLN", "name": "Poland Zloty" },
          { "code": "PYG", "name": "Paraguay Guarani" },
          { "code": "QAR", "name": "Qatar Riyal" },
          { "code": "RON", "name": "Romania New Leu" },
          { "code": "RSD", "name": "Serbia Dinar" },
          { "code": "RUB", "name": "Russia Ruble" },
          { "code": "RWF", "name": "Rwanda Franc" },
          { "code": "SAR", "name": "Saudi Arabia Riyal" },
          { "code": "SBD", "name": "Solomon Islands Dollar" },
          { "code": "SCR", "name": "Seychelles Rupee" },
          { "code": "SDG", "name": "Sudan Pound" },
          { "code": "SEK", "name": "Sweden Krona" },
          { "code": "SGD", "name": "Singapore Dollar" },
          { "code": "SHP", "name": "Saint Helena Pound" },
          { "code": "SLL", "name": "Sierra Leone Leone" },
          { "code": "SOS", "name": "Somalia Shilling" },
          { "code": "SPL", "name": "Seborga Luigino" },
          { "code": "SRD", "name": "Suriname Dollar" },
          { "code": "STD", "name": "São Tomé and Príncipe Dobra" },
          { "code": "SVC", "name": "El Salvador Colon" },
          { "code": "SYP", "name": "Syria Pound" },
          { "code": "SZL", "name": "Swaziland Lilangeni" },
          { "code": "THB", "name": "Thailand Baht" },
          { "code": "TJS", "name": "Tajikistan Somoni" },
          { "code": "TMT", "name": "Turkmenistan Manat" },
          { "code": "TND", "name": "Tunisia Dinar" },
          { "code": "TOP", "name": "Tonga Pa'anga" },
          { "code": "TRY", "name": "Turkey Lira" },
          { "code": "TTD", "name": "Trinidad and Tobago Dollar" },
          { "code": "TVD", "name": "Tuvalu Dollar" },
          { "code": "TWD", "name": "Taiwan New Dollar" },
          { "code": "TZS", "name": "Tanzania Shilling" },
          { "code": "UAH", "name": "Ukraine Hryvnia" },
          { "code": "UGX", "name": "Uganda Shilling" },
          { "code": "USD", "name": "United States Dollar" },
          { "code": "UYU", "name": "Uruguay Peso" },
          { "code": "UZS", "name": "Uzbekistan Som" },
          { "code": "VEF", "name": "Venezuela Bolivar" },
          { "code": "VND", "name": "Viet Nam Dong" },
          { "code": "VUV", "name": "Vanuatu Vatu" },
          { "code": "WST", "name": "Samoa Tala" },
          { "code": "XAF", "name": "Communauté Financière Africaine (BEAC) CFA Franc BEAC" },
          { "code": "XCD", "name": "East Caribbean Dollar" },
          { "code": "XDR", "name": "International Monetary Fund (IMF) Special Drawing Rights" },
          { "code": "XOF", "name": "Communauté Financière Africaine (BCEAO) Franc" },
          { "code": "XPF", "name": "Comptoirs Français du Pacifique (CFP) Franc" },
          { "code": "YER", "name": "Yemen Rial" },
          { "code": "ZAR", "name": "South Africa Rand" },
          { "code": "ZMW", "name": "Zambia Kwacha" },
          { "code": "ZWD", "name": "Zimbabwe Dollar" }
        ],
        // return the names of all valide colors
        colorNames: [
          "AliceBlue",
          "Black",
          "Navy",
          "DarkBlue",
          "MediumBlue",
          "Blue",
          "DarkGreen",
          "Green",
          "Teal",
          "DarkCyan",
          "DeepSkyBlue",
          "DarkTurquoise",
          "MediumSpringGreen",
          "Lime",
          "SpringGreen",
          "Aqua",
          "Cyan",
          "MidnightBlue",
          "DodgerBlue",
          "LightSeaGreen",
          "ForestGreen",
          "SeaGreen",
          "DarkSlateGray",
          "LimeGreen",
          "MediumSeaGreen",
          "Turquoise",
          "RoyalBlue",
          "SteelBlue",
          "DarkSlateBlue",
          "MediumTurquoise",
          "Indigo",
          "DarkOliveGreen",
          "CadetBlue",
          "CornflowerBlue",
          "RebeccaPurple",
          "MediumAquaMarine",
          "DimGray",
          "SlateBlue",
          "OliveDrab",
          "SlateGray",
          "LightSlateGray",
          "MediumSlateBlue",
          "LawnGreen",
          "Chartreuse",
          "Aquamarine",
          "Maroon",
          "Purple",
          "Olive",
          "Gray",
          "SkyBlue",
          "LightSkyBlue",
          "BlueViolet",
          "DarkRed",
          "DarkMagenta",
          "SaddleBrown",
          "Ivory",
          "White",
          "DarkSeaGreen",
          "LightGreen",
          "MediumPurple",
          "DarkViolet",
          "PaleGreen",
          "DarkOrchid",
          "YellowGreen",
          "Sienna",
          "Brown",
          "DarkGray",
          "LightBlue",
          "GreenYellow",
          "PaleTurquoise",
          "LightSteelBlue",
          "PowderBlue",
          "FireBrick",
          "DarkGoldenRod",
          "MediumOrchid",
          "RosyBrown",
          "DarkKhaki",
          "Silver",
          "MediumVioletRed",
          "IndianRed",
          "Peru",
          "Chocolate",
          "Tan",
          "LightGray",
          "Thistle",
          "Orchid",
          "GoldenRod",
          "PaleVioletRed",
          "Crimson",
          "Gainsboro",
          "Plum",
          "BurlyWood",
          "LightCyan",
          "Lavender",
          "DarkSalmon",
          "Violet",
          "PaleGoldenRod",
          "LightCoral",
          "Khaki",
          "AliceBlue",
          "HoneyDew",
          "Azure",
          "SandyBrown",
          "Wheat",
          "Beige",
          "WhiteSmoke",
          "MintCream",
          "GhostWhite",
          "Salmon",
          "AntiqueWhite",
          "Linen",
          "LightGoldenRodYellow",
          "OldLace",
          "Red",
          "Fuchsia",
          "Magenta",
          "DeepPink",
          "OrangeRed",
          "Tomato",
          "HotPink",
          "Coral",
          "DarkOrange",
          "LightSalmon",
          "Orange",
          "LightPink",
          "Pink",
          "Gold",
          "PeachPuff",
          "NavajoWhite",
          "Moccasin",
          "Bisque",
          "MistyRose",
          "BlanchedAlmond",
          "PapayaWhip",
          "LavenderBlush",
          "SeaShell",
          "Cornsilk",
          "LemonChiffon",
          "FloralWhite",
          "Snow",
          "Yellow",
          "LightYellow"
        ],
        // Data taken from https://www.sec.gov/rules/other/4-460list.htm
        company: [
          "3Com Corp",
          "3M Company",
          "A.G. Edwards Inc.",
          "Abbott Laboratories",
          "Abercrombie & Fitch Co.",
          "ABM Industries Incorporated",
          "Ace Hardware Corporation",
          "ACT Manufacturing Inc.",
          "Acterna Corp.",
          "Adams Resources & Energy, Inc.",
          "ADC Telecommunications, Inc.",
          "Adelphia Communications Corporation",
          "Administaff, Inc.",
          "Adobe Systems Incorporated",
          "Adolph Coors Company",
          "Advance Auto Parts, Inc.",
          "Advanced Micro Devices, Inc.",
          "AdvancePCS, Inc.",
          "Advantica Restaurant Group, Inc.",
          "The AES Corporation",
          "Aetna Inc.",
          "Affiliated Computer Services, Inc.",
          "AFLAC Incorporated",
          "AGCO Corporation",
          "Agilent Technologies, Inc.",
          "Agway Inc.",
          "Apartment Investment and Management Company",
          "Air Products and Chemicals, Inc.",
          "Airborne, Inc.",
          "Airgas, Inc.",
          "AK Steel Holding Corporation",
          "Alaska Air Group, Inc.",
          "Alberto-Culver Company",
          "Albertson's, Inc.",
          "Alcoa Inc.",
          "Alleghany Corporation",
          "Allegheny Energy, Inc.",
          "Allegheny Technologies Incorporated",
          "Allergan, Inc.",
          "ALLETE, Inc.",
          "Alliant Energy Corporation",
          "Allied Waste Industries, Inc.",
          "Allmerica Financial Corporation",
          "The Allstate Corporation",
          "ALLTEL Corporation",
          "The Alpine Group, Inc.",
          "Amazon.com, Inc.",
          "AMC Entertainment Inc.",
          "American Power Conversion Corporation",
          "Amerada Hess Corporation",
          "AMERCO",
          "Ameren Corporation",
          "America West Holdings Corporation",
          "American Axle & Manufacturing Holdings, Inc.",
          "American Eagle Outfitters, Inc.",
          "American Electric Power Company, Inc.",
          "American Express Company",
          "American Financial Group, Inc.",
          "American Greetings Corporation",
          "American International Group, Inc.",
          "American Standard Companies Inc.",
          "American Water Works Company, Inc.",
          "AmerisourceBergen Corporation",
          "Ames Department Stores, Inc.",
          "Amgen Inc.",
          "Amkor Technology, Inc.",
          "AMR Corporation",
          "AmSouth Bancorp.",
          "Amtran, Inc.",
          "Anadarko Petroleum Corporation",
          "Analog Devices, Inc.",
          "Anheuser-Busch Companies, Inc.",
          "Anixter International Inc.",
          "AnnTaylor Inc.",
          "Anthem, Inc.",
          "AOL Time Warner Inc.",
          "Aon Corporation",
          "Apache Corporation",
          "Apple Computer, Inc.",
          "Applera Corporation",
          "Applied Industrial Technologies, Inc.",
          "Applied Materials, Inc.",
          "Aquila, Inc.",
          "ARAMARK Corporation",
          "Arch Coal, Inc.",
          "Archer Daniels Midland Company",
          "Arkansas Best Corporation",
          "Armstrong Holdings, Inc.",
          "Arrow Electronics, Inc.",
          "ArvinMeritor, Inc.",
          "Ashland Inc.",
          "Astoria Financial Corporation",
          "AT&T Corp.",
          "Atmel Corporation",
          "Atmos Energy Corporation",
          "Audiovox Corporation",
          "Autoliv, Inc.",
          "Automatic Data Processing, Inc.",
          "AutoNation, Inc.",
          "AutoZone, Inc.",
          "Avaya Inc.",
          "Avery Dennison Corporation",
          "Avista Corporation",
          "Avnet, Inc.",
          "Avon Products, Inc.",
          "Baker Hughes Incorporated",
          "Ball Corporation",
          "Bank of America Corporation",
          "The Bank of New York Company, Inc.",
          "Bank One Corporation",
          "Banknorth Group, Inc.",
          "Banta Corporation",
          "Barnes & Noble, Inc.",
          "Bausch & Lomb Incorporated",
          "Baxter International Inc.",
          "BB&T Corporation",
          "The Bear Stearns Companies Inc.",
          "Beazer Homes USA, Inc.",
          "Beckman Coulter, Inc.",
          "Becton, Dickinson and Company",
          "Bed Bath & Beyond Inc.",
          "Belk, Inc.",
          "Bell Microproducts Inc.",
          "BellSouth Corporation",
          "Belo Corp.",
          "Bemis Company, Inc.",
          "Benchmark Electronics, Inc.",
          "Berkshire Hathaway Inc.",
          "Best Buy Co., Inc.",
          "Bethlehem Steel Corporation",
          "Beverly Enterprises, Inc.",
          "Big Lots, Inc.",
          "BJ Services Company",
          "BJ's Wholesale Club, Inc.",
          "The Black & Decker Corporation",
          "Black Hills Corporation",
          "BMC Software, Inc.",
          "The Boeing Company",
          "Boise Cascade Corporation",
          "Borders Group, Inc.",
          "BorgWarner Inc.",
          "Boston Scientific Corporation",
          "Bowater Incorporated",
          "Briggs & Stratton Corporation",
          "Brightpoint, Inc.",
          "Brinker International, Inc.",
          "Bristol-Myers Squibb Company",
          "Broadwing, Inc.",
          "Brown Shoe Company, Inc.",
          "Brown-Forman Corporation",
          "Brunswick Corporation",
          "Budget Group, Inc.",
          "Burlington Coat Factory Warehouse Corporation",
          "Burlington Industries, Inc.",
          "Burlington Northern Santa Fe Corporation",
          "Burlington Resources Inc.",
          "C. H. Robinson Worldwide Inc.",
          "Cablevision Systems Corp",
          "Cabot Corp",
          "Cadence Design Systems, Inc.",
          "Calpine Corp.",
          "Campbell Soup Co.",
          "Capital One Financial Corp.",
          "Cardinal Health Inc.",
          "Caremark Rx Inc.",
          "Carlisle Cos. Inc.",
          "Carpenter Technology Corp.",
          "Casey's General Stores Inc.",
          "Caterpillar Inc.",
          "CBRL Group Inc.",
          "CDI Corp.",
          "CDW Computer Centers Inc.",
          "CellStar Corp.",
          "Cendant Corp",
          "Cenex Harvest States Cooperatives",
          "Centex Corp.",
          "CenturyTel Inc.",
          "Ceridian Corp.",
          "CH2M Hill Cos. Ltd.",
          "Champion Enterprises Inc.",
          "Charles Schwab Corp.",
          "Charming Shoppes Inc.",
          "Charter Communications Inc.",
          "Charter One Financial Inc.",
          "ChevronTexaco Corp.",
          "Chiquita Brands International Inc.",
          "Chubb Corp",
          "Ciena Corp.",
          "Cigna Corp",
          "Cincinnati Financial Corp.",
          "Cinergy Corp.",
          "Cintas Corp.",
          "Circuit City Stores Inc.",
          "Cisco Systems Inc.",
          "Citigroup, Inc",
          "Citizens Communications Co.",
          "CKE Restaurants Inc.",
          "Clear Channel Communications Inc.",
          "The Clorox Co.",
          "CMGI Inc.",
          "CMS Energy Corp.",
          "CNF Inc.",
          "Coca-Cola Co.",
          "Coca-Cola Enterprises Inc.",
          "Colgate-Palmolive Co.",
          "Collins & Aikman Corp.",
          "Comcast Corp.",
          "Comdisco Inc.",
          "Comerica Inc.",
          "Comfort Systems USA Inc.",
          "Commercial Metals Co.",
          "Community Health Systems Inc.",
          "Compass Bancshares Inc",
          "Computer Associates International Inc.",
          "Computer Sciences Corp.",
          "Compuware Corp.",
          "Comverse Technology Inc.",
          "ConAgra Foods Inc.",
          "Concord EFS Inc.",
          "Conectiv, Inc",
          "Conoco Inc",
          "Conseco Inc.",
          "Consolidated Freightways Corp.",
          "Consolidated Edison Inc.",
          "Constellation Brands Inc.",
          "Constellation Emergy Group Inc.",
          "Continental Airlines Inc.",
          "Convergys Corp.",
          "Cooper Cameron Corp.",
          "Cooper Industries Ltd.",
          "Cooper Tire & Rubber Co.",
          "Corn Products International Inc.",
          "Corning Inc.",
          "Costco Wholesale Corp.",
          "Countrywide Credit Industries Inc.",
          "Coventry Health Care Inc.",
          "Cox Communications Inc.",
          "Crane Co.",
          "Crompton Corp.",
          "Crown Cork & Seal Co. Inc.",
          "CSK Auto Corp.",
          "CSX Corp.",
          "Cummins Inc.",
          "CVS Corp.",
          "Cytec Industries Inc.",
          "D&K Healthcare Resources, Inc.",
          "D.R. Horton Inc.",
          "Dana Corporation",
          "Danaher Corporation",
          "Darden Restaurants Inc.",
          "DaVita Inc.",
          "Dean Foods Company",
          "Deere & Company",
          "Del Monte Foods Co",
          "Dell Computer Corporation",
          "Delphi Corp.",
          "Delta Air Lines Inc.",
          "Deluxe Corporation",
          "Devon Energy Corporation",
          "Di Giorgio Corporation",
          "Dial Corporation",
          "Diebold Incorporated",
          "Dillard's Inc.",
          "DIMON Incorporated",
          "Dole Food Company, Inc.",
          "Dollar General Corporation",
          "Dollar Tree Stores, Inc.",
          "Dominion Resources, Inc.",
          "Domino's Pizza LLC",
          "Dover Corporation, Inc.",
          "Dow Chemical Company",
          "Dow Jones & Company, Inc.",
          "DPL Inc.",
          "DQE Inc.",
          "Dreyer's Grand Ice Cream, Inc.",
          "DST Systems, Inc.",
          "DTE Energy Co.",
          "E.I. Du Pont de Nemours and Company",
          "Duke Energy Corp",
          "Dun & Bradstreet Inc.",
          "DURA Automotive Systems Inc.",
          "DynCorp",
          "Dynegy Inc.",
          "E*Trade Group, Inc.",
          "E.W. Scripps Company",
          "Earthlink, Inc.",
          "Eastman Chemical Company",
          "Eastman Kodak Company",
          "Eaton Corporation",
          "Echostar Communications Corporation",
          "Ecolab Inc.",
          "Edison International",
          "EGL Inc.",
          "El Paso Corporation",
          "Electronic Arts Inc.",
          "Electronic Data Systems Corp.",
          "Eli Lilly and Company",
          "EMC Corporation",
          "Emcor Group Inc.",
          "Emerson Electric Co.",
          "Encompass Services Corporation",
          "Energizer Holdings Inc.",
          "Energy East Corporation",
          "Engelhard Corporation",
          "Enron Corp.",
          "Entergy Corporation",
          "Enterprise Products Partners L.P.",
          "EOG Resources, Inc.",
          "Equifax Inc.",
          "Equitable Resources Inc.",
          "Equity Office Properties Trust",
          "Equity Residential Properties Trust",
          "Estee Lauder Companies Inc.",
          "Exelon Corporation",
          "Exide Technologies",
          "Expeditors International of Washington Inc.",
          "Express Scripts Inc.",
          "ExxonMobil Corporation",
          "Fairchild Semiconductor International Inc.",
          "Family Dollar Stores Inc.",
          "Farmland Industries Inc.",
          "Federal Mogul Corp.",
          "Federated Department Stores Inc.",
          "Federal Express Corp.",
          "Felcor Lodging Trust Inc.",
          "Ferro Corp.",
          "Fidelity National Financial Inc.",
          "Fifth Third Bancorp",
          "First American Financial Corp.",
          "First Data Corp.",
          "First National of Nebraska Inc.",
          "First Tennessee National Corp.",
          "FirstEnergy Corp.",
          "Fiserv Inc.",
          "Fisher Scientific International Inc.",
          "FleetBoston Financial Co.",
          "Fleetwood Enterprises Inc.",
          "Fleming Companies Inc.",
          "Flowers Foods Inc.",
          "Flowserv Corp",
          "Fluor Corp",
          "FMC Corp",
          "Foamex International Inc",
          "Foot Locker Inc",
          "Footstar Inc.",
          "Ford Motor Co",
          "Forest Laboratories Inc.",
          "Fortune Brands Inc.",
          "Foster Wheeler Ltd.",
          "FPL Group Inc.",
          "Franklin Resources Inc.",
          "Freeport McMoran Copper & Gold Inc.",
          "Frontier Oil Corp",
          "Furniture Brands International Inc.",
          "Gannett Co., Inc.",
          "Gap Inc.",
          "Gateway Inc.",
          "GATX Corporation",
          "Gemstar-TV Guide International Inc.",
          "GenCorp Inc.",
          "General Cable Corporation",
          "General Dynamics Corporation",
          "General Electric Company",
          "General Mills Inc",
          "General Motors Corporation",
          "Genesis Health Ventures Inc.",
          "Gentek Inc.",
          "Gentiva Health Services Inc.",
          "Genuine Parts Company",
          "Genuity Inc.",
          "Genzyme Corporation",
          "Georgia Gulf Corporation",
          "Georgia-Pacific Corporation",
          "Gillette Company",
          "Gold Kist Inc.",
          "Golden State Bancorp Inc.",
          "Golden West Financial Corporation",
          "Goldman Sachs Group Inc.",
          "Goodrich Corporation",
          "The Goodyear Tire & Rubber Company",
          "Granite Construction Incorporated",
          "Graybar Electric Company Inc.",
          "Great Lakes Chemical Corporation",
          "Great Plains Energy Inc.",
          "GreenPoint Financial Corp.",
          "Greif Bros. Corporation",
          "Grey Global Group Inc.",
          "Group 1 Automotive Inc.",
          "Guidant Corporation",
          "H&R Block Inc.",
          "H.B. Fuller Company",
          "H.J. Heinz Company",
          "Halliburton Co.",
          "Harley-Davidson Inc.",
          "Harman International Industries Inc.",
          "Harrah's Entertainment Inc.",
          "Harris Corp.",
          "Harsco Corp.",
          "Hartford Financial Services Group Inc.",
          "Hasbro Inc.",
          "Hawaiian Electric Industries Inc.",
          "HCA Inc.",
          "Health Management Associates Inc.",
          "Health Net Inc.",
          "Healthsouth Corp",
          "Henry Schein Inc.",
          "Hercules Inc.",
          "Herman Miller Inc.",
          "Hershey Foods Corp.",
          "Hewlett-Packard Company",
          "Hibernia Corp.",
          "Hillenbrand Industries Inc.",
          "Hilton Hotels Corp.",
          "Hollywood Entertainment Corp.",
          "Home Depot Inc.",
          "Hon Industries Inc.",
          "Honeywell International Inc.",
          "Hormel Foods Corp.",
          "Host Marriott Corp.",
          "Household International Corp.",
          "Hovnanian Enterprises Inc.",
          "Hub Group Inc.",
          "Hubbell Inc.",
          "Hughes Supply Inc.",
          "Humana Inc.",
          "Huntington Bancshares Inc.",
          "Idacorp Inc.",
          "IDT Corporation",
          "IKON Office Solutions Inc.",
          "Illinois Tool Works Inc.",
          "IMC Global Inc.",
          "Imperial Sugar Company",
          "IMS Health Inc.",
          "Ingles Market Inc",
          "Ingram Micro Inc.",
          "Insight Enterprises Inc.",
          "Integrated Electrical Services Inc.",
          "Intel Corporation",
          "International Paper Co.",
          "Interpublic Group of Companies Inc.",
          "Interstate Bakeries Corporation",
          "International Business Machines Corp.",
          "International Flavors & Fragrances Inc.",
          "International Multifoods Corporation",
          "Intuit Inc.",
          "IT Group Inc.",
          "ITT Industries Inc.",
          "Ivax Corp.",
          "J.B. Hunt Transport Services Inc.",
          "J.C. Penny Co.",
          "J.P. Morgan Chase & Co.",
          "Jabil Circuit Inc.",
          "Jack In The Box Inc.",
          "Jacobs Engineering Group Inc.",
          "JDS Uniphase Corp.",
          "Jefferson-Pilot Co.",
          "John Hancock Financial Services Inc.",
          "Johnson & Johnson",
          "Johnson Controls Inc.",
          "Jones Apparel Group Inc.",
          "KB Home",
          "Kellogg Company",
          "Kellwood Company",
          "Kelly Services Inc.",
          "Kemet Corp.",
          "Kennametal Inc.",
          "Kerr-McGee Corporation",
          "KeyCorp",
          "KeySpan Corp.",
          "Kimball International Inc.",
          "Kimberly-Clark Corporation",
          "Kindred Healthcare Inc.",
          "KLA-Tencor Corporation",
          "K-Mart Corp.",
          "Knight-Ridder Inc.",
          "Kohl's Corp.",
          "KPMG Consulting Inc.",
          "Kroger Co.",
          "L-3 Communications Holdings Inc.",
          "Laboratory Corporation of America Holdings",
          "Lam Research Corporation",
          "LandAmerica Financial Group Inc.",
          "Lands' End Inc.",
          "Landstar System Inc.",
          "La-Z-Boy Inc.",
          "Lear Corporation",
          "Legg Mason Inc.",
          "Leggett & Platt Inc.",
          "Lehman Brothers Holdings Inc.",
          "Lennar Corporation",
          "Lennox International Inc.",
          "Level 3 Communications Inc.",
          "Levi Strauss & Co.",
          "Lexmark International Inc.",
          "Limited Inc.",
          "Lincoln National Corporation",
          "Linens 'n Things Inc.",
          "Lithia Motors Inc.",
          "Liz Claiborne Inc.",
          "Lockheed Martin Corporation",
          "Loews Corporation",
          "Longs Drug Stores Corporation",
          "Louisiana-Pacific Corporation",
          "Lowe's Companies Inc.",
          "LSI Logic Corporation",
          "The LTV Corporation",
          "The Lubrizol Corporation",
          "Lucent Technologies Inc.",
          "Lyondell Chemical Company",
          "M & T Bank Corporation",
          "Magellan Health Services Inc.",
          "Mail-Well Inc.",
          "Mandalay Resort Group",
          "Manor Care Inc.",
          "Manpower Inc.",
          "Marathon Oil Corporation",
          "Mariner Health Care Inc.",
          "Markel Corporation",
          "Marriott International Inc.",
          "Marsh & McLennan Companies Inc.",
          "Marsh Supermarkets Inc.",
          "Marshall & Ilsley Corporation",
          "Martin Marietta Materials Inc.",
          "Masco Corporation",
          "Massey Energy Company",
          "MasTec Inc.",
          "Mattel Inc.",
          "Maxim Integrated Products Inc.",
          "Maxtor Corporation",
          "Maxxam Inc.",
          "The May Department Stores Company",
          "Maytag Corporation",
          "MBNA Corporation",
          "McCormick & Company Incorporated",
          "McDonald's Corporation",
          "The McGraw-Hill Companies Inc.",
          "McKesson Corporation",
          "McLeodUSA Incorporated",
          "M.D.C. Holdings Inc.",
          "MDU Resources Group Inc.",
          "MeadWestvaco Corporation",
          "Medtronic Inc.",
          "Mellon Financial Corporation",
          "The Men's Wearhouse Inc.",
          "Merck & Co., Inc.",
          "Mercury General Corporation",
          "Merrill Lynch & Co. Inc.",
          "Metaldyne Corporation",
          "Metals USA Inc.",
          "MetLife Inc.",
          "Metris Companies Inc",
          "MGIC Investment Corporation",
          "MGM Mirage",
          "Michaels Stores Inc.",
          "Micron Technology Inc.",
          "Microsoft Corporation",
          "Milacron Inc.",
          "Millennium Chemicals Inc.",
          "Mirant Corporation",
          "Mohawk Industries Inc.",
          "Molex Incorporated",
          "The MONY Group Inc.",
          "Morgan Stanley Dean Witter & Co.",
          "Motorola Inc.",
          "MPS Group Inc.",
          "Murphy Oil Corporation",
          "Nabors Industries Inc",
          "Nacco Industries Inc",
          "Nash Finch Company",
          "National City Corp.",
          "National Commerce Financial Corporation",
          "National Fuel Gas Company",
          "National Oilwell Inc",
          "National Rural Utilities Cooperative Finance Corporation",
          "National Semiconductor Corporation",
          "National Service Industries Inc",
          "Navistar International Corporation",
          "NCR Corporation",
          "The Neiman Marcus Group Inc.",
          "New Jersey Resources Corporation",
          "New York Times Company",
          "Newell Rubbermaid Inc",
          "Newmont Mining Corporation",
          "Nextel Communications Inc",
          "Nicor Inc",
          "Nike Inc",
          "NiSource Inc",
          "Noble Energy Inc",
          "Nordstrom Inc",
          "Norfolk Southern Corporation",
          "Nortek Inc",
          "North Fork Bancorporation Inc",
          "Northeast Utilities System",
          "Northern Trust Corporation",
          "Northrop Grumman Corporation",
          "NorthWestern Corporation",
          "Novellus Systems Inc",
          "NSTAR",
          "NTL Incorporated",
          "Nucor Corp",
          "Nvidia Corp",
          "NVR Inc",
          "Northwest Airlines Corp",
          "Occidental Petroleum Corp",
          "Ocean Energy Inc",
          "Office Depot Inc.",
          "OfficeMax Inc",
          "OGE Energy Corp",
          "Oglethorpe Power Corp.",
          "Ohio Casualty Corp.",
          "Old Republic International Corp.",
          "Olin Corp.",
          "OM Group Inc",
          "Omnicare Inc",
          "Omnicom Group",
          "On Semiconductor Corp",
          "ONEOK Inc",
          "Oracle Corp",
          "Oshkosh Truck Corp",
          "Outback Steakhouse Inc.",
          "Owens & Minor Inc.",
          "Owens Corning",
          "Owens-Illinois Inc",
          "Oxford Health Plans Inc",
          "Paccar Inc",
          "PacifiCare Health Systems Inc",
          "Packaging Corp. of America",
          "Pactiv Corp",
          "Pall Corp",
          "Pantry Inc",
          "Park Place Entertainment Corp",
          "Parker Hannifin Corp.",
          "Pathmark Stores Inc.",
          "Paychex Inc",
          "Payless Shoesource Inc",
          "Penn Traffic Co.",
          "Pennzoil-Quaker State Company",
          "Pentair Inc",
          "Peoples Energy Corp.",
          "PeopleSoft Inc",
          "Pep Boys Manny, Moe & Jack",
          "Potomac Electric Power Co.",
          "Pepsi Bottling Group Inc.",
          "PepsiAmericas Inc.",
          "PepsiCo Inc.",
          "Performance Food Group Co.",
          "Perini Corp",
          "PerkinElmer Inc",
          "Perot Systems Corp",
          "Petco Animal Supplies Inc.",
          "Peter Kiewit Sons', Inc.",
          "PETsMART Inc",
          "Pfizer Inc",
          "Pacific Gas & Electric Corp.",
          "Pharmacia Corp",
          "Phar Mor Inc.",
          "Phelps Dodge Corp.",
          "Philip Morris Companies Inc.",
          "Phillips Petroleum Co",
          "Phillips Van Heusen Corp.",
          "Phoenix Companies Inc",
          "Pier 1 Imports Inc.",
          "Pilgrim's Pride Corporation",
          "Pinnacle West Capital Corp",
          "Pioneer-Standard Electronics Inc.",
          "Pitney Bowes Inc.",
          "Pittston Brinks Group",
          "Plains All American Pipeline LP",
          "PNC Financial Services Group Inc.",
          "PNM Resources Inc",
          "Polaris Industries Inc.",
          "Polo Ralph Lauren Corp",
          "PolyOne Corp",
          "Popular Inc",
          "Potlatch Corp",
          "PPG Industries Inc",
          "PPL Corp",
          "Praxair Inc",
          "Precision Castparts Corp",
          "Premcor Inc.",
          "Pride International Inc",
          "Primedia Inc",
          "Principal Financial Group Inc.",
          "Procter & Gamble Co.",
          "Pro-Fac Cooperative Inc.",
          "Progress Energy Inc",
          "Progressive Corporation",
          "Protective Life Corp",
          "Provident Financial Group",
          "Providian Financial Corp.",
          "Prudential Financial Inc.",
          "PSS World Medical Inc",
          "Public Service Enterprise Group Inc.",
          "Publix Super Markets Inc.",
          "Puget Energy Inc.",
          "Pulte Homes Inc",
          "Qualcomm Inc",
          "Quanta Services Inc.",
          "Quantum Corp",
          "Quest Diagnostics Inc.",
          "Questar Corp",
          "Quintiles Transnational",
          "Qwest Communications Intl Inc",
          "R.J. Reynolds Tobacco Company",
          "R.R. Donnelley & Sons Company",
          "Radio Shack Corporation",
          "Raymond James Financial Inc.",
          "Raytheon Company",
          "Reader's Digest Association Inc.",
          "Reebok International Ltd.",
          "Regions Financial Corp.",
          "Regis Corporation",
          "Reliance Steel & Aluminum Co.",
          "Reliant Energy Inc.",
          "Rent A Center Inc",
          "Republic Services Inc",
          "Revlon Inc",
          "RGS Energy Group Inc",
          "Rite Aid Corp",
          "Riverwood Holding Inc.",
          "RoadwayCorp",
          "Robert Half International Inc.",
          "Rock-Tenn Co",
          "Rockwell Automation Inc",
          "Rockwell Collins Inc",
          "Rohm & Haas Co.",
          "Ross Stores Inc",
          "RPM Inc.",
          "Ruddick Corp",
          "Ryder System Inc",
          "Ryerson Tull Inc",
          "Ryland Group Inc.",
          "Sabre Holdings Corp",
          "Safeco Corp",
          "Safeguard Scientifics Inc.",
          "Safeway Inc",
          "Saks Inc",
          "Sanmina-SCI Inc",
          "Sara Lee Corp",
          "SBC Communications Inc",
          "Scana Corp.",
          "Schering-Plough Corp",
          "Scholastic Corp",
          "SCI Systems Onc.",
          "Science Applications Intl. Inc.",
          "Scientific-Atlanta Inc",
          "Scotts Company",
          "Seaboard Corp",
          "Sealed Air Corp",
          "Sears Roebuck & Co",
          "Sempra Energy",
          "Sequa Corp",
          "Service Corp. International",
          "ServiceMaster Co",
          "Shaw Group Inc",
          "Sherwin-Williams Company",
          "Shopko Stores Inc",
          "Siebel Systems Inc",
          "Sierra Health Services Inc",
          "Sierra Pacific Resources",
          "Silgan Holdings Inc.",
          "Silicon Graphics Inc",
          "Simon Property Group Inc",
          "SLM Corporation",
          "Smith International Inc",
          "Smithfield Foods Inc",
          "Smurfit-Stone Container Corp",
          "Snap-On Inc",
          "Solectron Corp",
          "Solutia Inc",
          "Sonic Automotive Inc.",
          "Sonoco Products Co.",
          "Southern Company",
          "Southern Union Company",
          "SouthTrust Corp.",
          "Southwest Airlines Co",
          "Southwest Gas Corp",
          "Sovereign Bancorp Inc.",
          "Spartan Stores Inc",
          "Spherion Corp",
          "Sports Authority Inc",
          "Sprint Corp.",
          "SPX Corp",
          "St. Jude Medical Inc",
          "St. Paul Cos.",
          "Staff Leasing Inc.",
          "StanCorp Financial Group Inc",
          "Standard Pacific Corp.",
          "Stanley Works",
          "Staples Inc",
          "Starbucks Corp",
          "Starwood Hotels & Resorts Worldwide Inc",
          "State Street Corp.",
          "Stater Bros. Holdings Inc.",
          "Steelcase Inc",
          "Stein Mart Inc",
          "Stewart & Stevenson Services Inc",
          "Stewart Information Services Corp",
          "Stilwell Financial Inc",
          "Storage Technology Corporation",
          "Stryker Corp",
          "Sun Healthcare Group Inc.",
          "Sun Microsystems Inc.",
          "SunGard Data Systems Inc.",
          "Sunoco Inc.",
          "SunTrust Banks Inc",
          "Supervalu Inc",
          "Swift Transportation, Co., Inc",
          "Symbol Technologies Inc",
          "Synovus Financial Corp.",
          "Sysco Corp",
          "Systemax Inc.",
          "Target Corp.",
          "Tech Data Corporation",
          "TECO Energy Inc",
          "Tecumseh Products Company",
          "Tektronix Inc",
          "Teleflex Incorporated",
          "Telephone & Data Systems Inc",
          "Tellabs Inc.",
          "Temple-Inland Inc",
          "Tenet Healthcare Corporation",
          "Tenneco Automotive Inc.",
          "Teradyne Inc",
          "Terex Corp",
          "Tesoro Petroleum Corp.",
          "Texas Industries Inc.",
          "Texas Instruments Incorporated",
          "Textron Inc",
          "Thermo Electron Corporation",
          "Thomas & Betts Corporation",
          "Tiffany & Co",
          "Timken Company",
          "TJX Companies Inc",
          "TMP Worldwide Inc",
          "Toll Brothers Inc",
          "Torchmark Corporation",
          "Toro Company",
          "Tower Automotive Inc.",
          "Toys 'R' Us Inc",
          "Trans World Entertainment Corp.",
          "TransMontaigne Inc",
          "Transocean Inc",
          "TravelCenters of America Inc.",
          "Triad Hospitals Inc",
          "Tribune Company",
          "Trigon Healthcare Inc.",
          "Trinity Industries Inc",
          "Trump Hotels & Casino Resorts Inc.",
          "TruServ Corporation",
          "TRW Inc",
          "TXU Corp",
          "Tyson Foods Inc",
          "U.S. Bancorp",
          "U.S. Industries Inc.",
          "UAL Corporation",
          "UGI Corporation",
          "Unified Western Grocers Inc",
          "Union Pacific Corporation",
          "Union Planters Corp",
          "Unisource Energy Corp",
          "Unisys Corporation",
          "United Auto Group Inc",
          "United Defense Industries Inc.",
          "United Parcel Service Inc",
          "United Rentals Inc",
          "United Stationers Inc",
          "United Technologies Corporation",
          "UnitedHealth Group Incorporated",
          "Unitrin Inc",
          "Universal Corporation",
          "Universal Forest Products Inc",
          "Universal Health Services Inc",
          "Unocal Corporation",
          "Unova Inc",
          "UnumProvident Corporation",
          "URS Corporation",
          "US Airways Group Inc",
          "US Oncology Inc",
          "USA Interactive",
          "USFreighways Corporation",
          "USG Corporation",
          "UST Inc",
          "Valero Energy Corporation",
          "Valspar Corporation",
          "Value City Department Stores Inc",
          "Varco International Inc",
          "Vectren Corporation",
          "Veritas Software Corporation",
          "Verizon Communications Inc",
          "VF Corporation",
          "Viacom Inc",
          "Viad Corp",
          "Viasystems Group Inc",
          "Vishay Intertechnology Inc",
          "Visteon Corporation",
          "Volt Information Sciences Inc",
          "Vulcan Materials Company",
          "W.R. Berkley Corporation",
          "W.R. Grace & Co",
          "W.W. Grainger Inc",
          "Wachovia Corporation",
          "Wakenhut Corporation",
          "Walgreen Co",
          "Wallace Computer Services Inc",
          "Wal-Mart Stores Inc",
          "Walt Disney Co",
          "Walter Industries Inc",
          "Washington Mutual Inc",
          "Washington Post Co.",
          "Waste Management Inc",
          "Watsco Inc",
          "Weatherford International Inc",
          "Weis Markets Inc.",
          "Wellpoint Health Networks Inc",
          "Wells Fargo & Company",
          "Wendy's International Inc",
          "Werner Enterprises Inc",
          "WESCO International Inc",
          "Western Digital Inc",
          "Western Gas Resources Inc",
          "WestPoint Stevens Inc",
          "Weyerhauser Company",
          "WGL Holdings Inc",
          "Whirlpool Corporation",
          "Whole Foods Market Inc",
          "Willamette Industries Inc.",
          "Williams Companies Inc",
          "Williams Sonoma Inc",
          "Winn Dixie Stores Inc",
          "Wisconsin Energy Corporation",
          "Wm Wrigley Jr Company",
          "World Fuel Services Corporation",
          "WorldCom Inc",
          "Worthington Industries Inc",
          "WPS Resources Corporation",
          "Wyeth",
          "Wyndham International Inc",
          "Xcel Energy Inc",
          "Xerox Corp",
          "Xilinx Inc",
          "XO Communications Inc",
          "Yellow Corporation",
          "York International Corp",
          "Yum Brands Inc.",
          "Zale Corporation",
          "Zions Bancorporation"
        ],
        fileExtension: {
          "raster": ["bmp", "gif", "gpl", "ico", "jpeg", "psd", "png", "psp", "raw", "tiff"],
          "vector": ["3dv", "amf", "awg", "ai", "cgm", "cdr", "cmx", "dxf", "e2d", "egt", "eps", "fs", "odg", "svg", "xar"],
          "3d": ["3dmf", "3dm", "3mf", "3ds", "an8", "aoi", "blend", "cal3d", "cob", "ctm", "iob", "jas", "max", "mb", "mdx", "obj", "x", "x3d"],
          "document": ["doc", "docx", "dot", "html", "xml", "odt", "odm", "ott", "csv", "rtf", "tex", "xhtml", "xps"]
        },
        // Data taken from https://github.com/dmfilipenko/timezones.json/blob/master/timezones.json
        timezones: [
          {
            "name": "Dateline Standard Time",
            "abbr": "DST",
            "offset": -12,
            "isdst": false,
            "text": "(UTC-12:00) International Date Line West",
            "utc": [
              "Etc/GMT+12"
            ]
          },
          {
            "name": "UTC-11",
            "abbr": "U",
            "offset": -11,
            "isdst": false,
            "text": "(UTC-11:00) Coordinated Universal Time-11",
            "utc": [
              "Etc/GMT+11",
              "Pacific/Midway",
              "Pacific/Niue",
              "Pacific/Pago_Pago"
            ]
          },
          {
            "name": "Hawaiian Standard Time",
            "abbr": "HST",
            "offset": -10,
            "isdst": false,
            "text": "(UTC-10:00) Hawaii",
            "utc": [
              "Etc/GMT+10",
              "Pacific/Honolulu",
              "Pacific/Johnston",
              "Pacific/Rarotonga",
              "Pacific/Tahiti"
            ]
          },
          {
            "name": "Alaskan Standard Time",
            "abbr": "AKDT",
            "offset": -8,
            "isdst": true,
            "text": "(UTC-09:00) Alaska",
            "utc": [
              "America/Anchorage",
              "America/Juneau",
              "America/Nome",
              "America/Sitka",
              "America/Yakutat"
            ]
          },
          {
            "name": "Pacific Standard Time (Mexico)",
            "abbr": "PDT",
            "offset": -7,
            "isdst": true,
            "text": "(UTC-08:00) Baja California",
            "utc": [
              "America/Santa_Isabel"
            ]
          },
          {
            "name": "Pacific Daylight Time",
            "abbr": "PDT",
            "offset": -7,
            "isdst": true,
            "text": "(UTC-07:00) Pacific Time (US & Canada)",
            "utc": [
              "America/Dawson",
              "America/Los_Angeles",
              "America/Tijuana",
              "America/Vancouver",
              "America/Whitehorse"
            ]
          },
          {
            "name": "Pacific Standard Time",
            "abbr": "PST",
            "offset": -8,
            "isdst": false,
            "text": "(UTC-08:00) Pacific Time (US & Canada)",
            "utc": [
              "America/Dawson",
              "America/Los_Angeles",
              "America/Tijuana",
              "America/Vancouver",
              "America/Whitehorse",
              "PST8PDT"
            ]
          },
          {
            "name": "US Mountain Standard Time",
            "abbr": "UMST",
            "offset": -7,
            "isdst": false,
            "text": "(UTC-07:00) Arizona",
            "utc": [
              "America/Creston",
              "America/Dawson_Creek",
              "America/Hermosillo",
              "America/Phoenix",
              "Etc/GMT+7"
            ]
          },
          {
            "name": "Mountain Standard Time (Mexico)",
            "abbr": "MDT",
            "offset": -6,
            "isdst": true,
            "text": "(UTC-07:00) Chihuahua, La Paz, Mazatlan",
            "utc": [
              "America/Chihuahua",
              "America/Mazatlan"
            ]
          },
          {
            "name": "Mountain Standard Time",
            "abbr": "MDT",
            "offset": -6,
            "isdst": true,
            "text": "(UTC-07:00) Mountain Time (US & Canada)",
            "utc": [
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Denver",
              "America/Edmonton",
              "America/Inuvik",
              "America/Ojinaga",
              "America/Yellowknife",
              "MST7MDT"
            ]
          },
          {
            "name": "Central America Standard Time",
            "abbr": "CAST",
            "offset": -6,
            "isdst": false,
            "text": "(UTC-06:00) Central America",
            "utc": [
              "America/Belize",
              "America/Costa_Rica",
              "America/El_Salvador",
              "America/Guatemala",
              "America/Managua",
              "America/Tegucigalpa",
              "Etc/GMT+6",
              "Pacific/Galapagos"
            ]
          },
          {
            "name": "Central Standard Time",
            "abbr": "CDT",
            "offset": -5,
            "isdst": true,
            "text": "(UTC-06:00) Central Time (US & Canada)",
            "utc": [
              "America/Chicago",
              "America/Indiana/Knox",
              "America/Indiana/Tell_City",
              "America/Matamoros",
              "America/Menominee",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Resolute",
              "America/Winnipeg",
              "CST6CDT"
            ]
          },
          {
            "name": "Central Standard Time (Mexico)",
            "abbr": "CDT",
            "offset": -5,
            "isdst": true,
            "text": "(UTC-06:00) Guadalajara, Mexico City, Monterrey",
            "utc": [
              "America/Bahia_Banderas",
              "America/Cancun",
              "America/Merida",
              "America/Mexico_City",
              "America/Monterrey"
            ]
          },
          {
            "name": "Canada Central Standard Time",
            "abbr": "CCST",
            "offset": -6,
            "isdst": false,
            "text": "(UTC-06:00) Saskatchewan",
            "utc": [
              "America/Regina",
              "America/Swift_Current"
            ]
          },
          {
            "name": "SA Pacific Standard Time",
            "abbr": "SPST",
            "offset": -5,
            "isdst": false,
            "text": "(UTC-05:00) Bogota, Lima, Quito",
            "utc": [
              "America/Bogota",
              "America/Cayman",
              "America/Coral_Harbour",
              "America/Eirunepe",
              "America/Guayaquil",
              "America/Jamaica",
              "America/Lima",
              "America/Panama",
              "America/Rio_Branco",
              "Etc/GMT+5"
            ]
          },
          {
            "name": "Eastern Standard Time",
            "abbr": "EDT",
            "offset": -4,
            "isdst": true,
            "text": "(UTC-05:00) Eastern Time (US & Canada)",
            "utc": [
              "America/Detroit",
              "America/Havana",
              "America/Indiana/Petersburg",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Iqaluit",
              "America/Kentucky/Monticello",
              "America/Louisville",
              "America/Montreal",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Pangnirtung",
              "America/Port-au-Prince",
              "America/Thunder_Bay",
              "America/Toronto",
              "EST5EDT"
            ]
          },
          {
            "name": "US Eastern Standard Time",
            "abbr": "UEDT",
            "offset": -4,
            "isdst": true,
            "text": "(UTC-05:00) Indiana (East)",
            "utc": [
              "America/Indiana/Marengo",
              "America/Indiana/Vevay",
              "America/Indianapolis"
            ]
          },
          {
            "name": "Venezuela Standard Time",
            "abbr": "VST",
            "offset": -4.5,
            "isdst": false,
            "text": "(UTC-04:30) Caracas",
            "utc": [
              "America/Caracas"
            ]
          },
          {
            "name": "Paraguay Standard Time",
            "abbr": "PYT",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Asuncion",
            "utc": [
              "America/Asuncion"
            ]
          },
          {
            "name": "Atlantic Standard Time",
            "abbr": "ADT",
            "offset": -3,
            "isdst": true,
            "text": "(UTC-04:00) Atlantic Time (Canada)",
            "utc": [
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Halifax",
              "America/Moncton",
              "America/Thule",
              "Atlantic/Bermuda"
            ]
          },
          {
            "name": "Central Brazilian Standard Time",
            "abbr": "CBST",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Cuiaba",
            "utc": [
              "America/Campo_Grande",
              "America/Cuiaba"
            ]
          },
          {
            "name": "SA Western Standard Time",
            "abbr": "SWST",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "utc": [
              "America/Anguilla",
              "America/Antigua",
              "America/Aruba",
              "America/Barbados",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Curacao",
              "America/Dominica",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guyana",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lower_Princes",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Montserrat",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Santo_Domingo",
              "America/St_Barthelemy",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Tortola",
              "Etc/GMT+4"
            ]
          },
          {
            "name": "Pacific SA Standard Time",
            "abbr": "PSST",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Santiago",
            "utc": [
              "America/Santiago",
              "Antarctica/Palmer"
            ]
          },
          {
            "name": "Newfoundland Standard Time",
            "abbr": "NDT",
            "offset": -2.5,
            "isdst": true,
            "text": "(UTC-03:30) Newfoundland",
            "utc": [
              "America/St_Johns"
            ]
          },
          {
            "name": "E. South America Standard Time",
            "abbr": "ESAST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Brasilia",
            "utc": [
              "America/Sao_Paulo"
            ]
          },
          {
            "name": "Argentina Standard Time",
            "abbr": "AST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Buenos Aires",
            "utc": [
              "America/Argentina/La_Rioja",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Buenos_Aires",
              "America/Catamarca",
              "America/Cordoba",
              "America/Jujuy",
              "America/Mendoza"
            ]
          },
          {
            "name": "SA Eastern Standard Time",
            "abbr": "SEST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Cayenne, Fortaleza",
            "utc": [
              "America/Araguaina",
              "America/Belem",
              "America/Cayenne",
              "America/Fortaleza",
              "America/Maceio",
              "America/Paramaribo",
              "America/Recife",
              "America/Santarem",
              "Antarctica/Rothera",
              "Atlantic/Stanley",
              "Etc/GMT+3"
            ]
          },
          {
            "name": "Greenland Standard Time",
            "abbr": "GDT",
            "offset": -3,
            "isdst": true,
            "text": "(UTC-03:00) Greenland",
            "utc": [
              "America/Godthab"
            ]
          },
          {
            "name": "Montevideo Standard Time",
            "abbr": "MST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Montevideo",
            "utc": [
              "America/Montevideo"
            ]
          },
          {
            "name": "Bahia Standard Time",
            "abbr": "BST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Salvador",
            "utc": [
              "America/Bahia"
            ]
          },
          {
            "name": "UTC-02",
            "abbr": "U",
            "offset": -2,
            "isdst": false,
            "text": "(UTC-02:00) Coordinated Universal Time-02",
            "utc": [
              "America/Noronha",
              "Atlantic/South_Georgia",
              "Etc/GMT+2"
            ]
          },
          {
            "name": "Mid-Atlantic Standard Time",
            "abbr": "MDT",
            "offset": -1,
            "isdst": true,
            "text": "(UTC-02:00) Mid-Atlantic - Old",
            "utc": []
          },
          {
            "name": "Azores Standard Time",
            "abbr": "ADT",
            "offset": 0,
            "isdst": true,
            "text": "(UTC-01:00) Azores",
            "utc": [
              "America/Scoresbysund",
              "Atlantic/Azores"
            ]
          },
          {
            "name": "Cape Verde Standard Time",
            "abbr": "CVST",
            "offset": -1,
            "isdst": false,
            "text": "(UTC-01:00) Cape Verde Is.",
            "utc": [
              "Atlantic/Cape_Verde",
              "Etc/GMT+1"
            ]
          },
          {
            "name": "Morocco Standard Time",
            "abbr": "MDT",
            "offset": 1,
            "isdst": true,
            "text": "(UTC) Casablanca",
            "utc": [
              "Africa/Casablanca",
              "Africa/El_Aaiun"
            ]
          },
          {
            "name": "UTC",
            "abbr": "UTC",
            "offset": 0,
            "isdst": false,
            "text": "(UTC) Coordinated Universal Time",
            "utc": [
              "America/Danmarkshavn",
              "Etc/GMT"
            ]
          },
          {
            "name": "GMT Standard Time",
            "abbr": "GMT",
            "offset": 0,
            "isdst": false,
            "text": "(UTC) Edinburgh, London",
            "utc": [
              "Europe/Isle_of_Man",
              "Europe/Guernsey",
              "Europe/Jersey",
              "Europe/London"
            ]
          },
          {
            "name": "British Summer Time",
            "abbr": "BST",
            "offset": 1,
            "isdst": true,
            "text": "(UTC+01:00) Edinburgh, London",
            "utc": [
              "Europe/Isle_of_Man",
              "Europe/Guernsey",
              "Europe/Jersey",
              "Europe/London"
            ]
          },
          {
            "name": "GMT Standard Time",
            "abbr": "GDT",
            "offset": 1,
            "isdst": true,
            "text": "(UTC) Dublin, Lisbon",
            "utc": [
              "Atlantic/Canary",
              "Atlantic/Faeroe",
              "Atlantic/Madeira",
              "Europe/Dublin",
              "Europe/Lisbon"
            ]
          },
          {
            "name": "Greenwich Standard Time",
            "abbr": "GST",
            "offset": 0,
            "isdst": false,
            "text": "(UTC) Monrovia, Reykjavik",
            "utc": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Bamako",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Freetown",
              "Africa/Lome",
              "Africa/Monrovia",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Sao_Tome",
              "Atlantic/Reykjavik",
              "Atlantic/St_Helena"
            ]
          },
          {
            "name": "W. Europe Standard Time",
            "abbr": "WEDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "utc": [
              "Arctic/Longyearbyen",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Berlin",
              "Europe/Busingen",
              "Europe/Gibraltar",
              "Europe/Luxembourg",
              "Europe/Malta",
              "Europe/Monaco",
              "Europe/Oslo",
              "Europe/Rome",
              "Europe/San_Marino",
              "Europe/Stockholm",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Zurich"
            ]
          },
          {
            "name": "Central Europe Standard Time",
            "abbr": "CEDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "utc": [
              "Europe/Belgrade",
              "Europe/Bratislava",
              "Europe/Budapest",
              "Europe/Ljubljana",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Tirane"
            ]
          },
          {
            "name": "Romance Standard Time",
            "abbr": "RDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
            "utc": [
              "Africa/Ceuta",
              "Europe/Brussels",
              "Europe/Copenhagen",
              "Europe/Madrid",
              "Europe/Paris"
            ]
          },
          {
            "name": "Central European Standard Time",
            "abbr": "CEDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "utc": [
              "Europe/Sarajevo",
              "Europe/Skopje",
              "Europe/Warsaw",
              "Europe/Zagreb"
            ]
          },
          {
            "name": "W. Central Africa Standard Time",
            "abbr": "WCAST",
            "offset": 1,
            "isdst": false,
            "text": "(UTC+01:00) West Central Africa",
            "utc": [
              "Africa/Algiers",
              "Africa/Bangui",
              "Africa/Brazzaville",
              "Africa/Douala",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Luanda",
              "Africa/Malabo",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Porto-Novo",
              "Africa/Tunis",
              "Etc/GMT-1"
            ]
          },
          {
            "name": "Namibia Standard Time",
            "abbr": "NST",
            "offset": 1,
            "isdst": false,
            "text": "(UTC+01:00) Windhoek",
            "utc": [
              "Africa/Windhoek"
            ]
          },
          {
            "name": "GTB Standard Time",
            "abbr": "GDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Athens, Bucharest",
            "utc": [
              "Asia/Nicosia",
              "Europe/Athens",
              "Europe/Bucharest",
              "Europe/Chisinau"
            ]
          },
          {
            "name": "Middle East Standard Time",
            "abbr": "MEDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Beirut",
            "utc": [
              "Asia/Beirut"
            ]
          },
          {
            "name": "Egypt Standard Time",
            "abbr": "EST",
            "offset": 2,
            "isdst": false,
            "text": "(UTC+02:00) Cairo",
            "utc": [
              "Africa/Cairo"
            ]
          },
          {
            "name": "Syria Standard Time",
            "abbr": "SDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Damascus",
            "utc": [
              "Asia/Damascus"
            ]
          },
          {
            "name": "E. Europe Standard Time",
            "abbr": "EEDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) E. Europe",
            "utc": [
              "Asia/Nicosia",
              "Europe/Athens",
              "Europe/Bucharest",
              "Europe/Chisinau",
              "Europe/Helsinki",
              "Europe/Kiev",
              "Europe/Mariehamn",
              "Europe/Nicosia",
              "Europe/Riga",
              "Europe/Sofia",
              "Europe/Tallinn",
              "Europe/Uzhgorod",
              "Europe/Vilnius",
              "Europe/Zaporozhye"
            ]
          },
          {
            "name": "South Africa Standard Time",
            "abbr": "SAST",
            "offset": 2,
            "isdst": false,
            "text": "(UTC+02:00) Harare, Pretoria",
            "utc": [
              "Africa/Blantyre",
              "Africa/Bujumbura",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Kigali",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Etc/GMT-2"
            ]
          },
          {
            "name": "FLE Standard Time",
            "abbr": "FDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "utc": [
              "Europe/Helsinki",
              "Europe/Kiev",
              "Europe/Mariehamn",
              "Europe/Riga",
              "Europe/Sofia",
              "Europe/Tallinn",
              "Europe/Uzhgorod",
              "Europe/Vilnius",
              "Europe/Zaporozhye"
            ]
          },
          {
            "name": "Turkey Standard Time",
            "abbr": "TDT",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Istanbul",
            "utc": [
              "Europe/Istanbul"
            ]
          },
          {
            "name": "Israel Standard Time",
            "abbr": "JDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Jerusalem",
            "utc": [
              "Asia/Jerusalem"
            ]
          },
          {
            "name": "Libya Standard Time",
            "abbr": "LST",
            "offset": 2,
            "isdst": false,
            "text": "(UTC+02:00) Tripoli",
            "utc": [
              "Africa/Tripoli"
            ]
          },
          {
            "name": "Jordan Standard Time",
            "abbr": "JST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Amman",
            "utc": [
              "Asia/Amman"
            ]
          },
          {
            "name": "Arabic Standard Time",
            "abbr": "AST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Baghdad",
            "utc": [
              "Asia/Baghdad"
            ]
          },
          {
            "name": "Kaliningrad Standard Time",
            "abbr": "KST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+02:00) Kaliningrad",
            "utc": [
              "Europe/Kaliningrad"
            ]
          },
          {
            "name": "Arab Standard Time",
            "abbr": "AST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Kuwait, Riyadh",
            "utc": [
              "Asia/Aden",
              "Asia/Bahrain",
              "Asia/Kuwait",
              "Asia/Qatar",
              "Asia/Riyadh"
            ]
          },
          {
            "name": "E. Africa Standard Time",
            "abbr": "EAST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Nairobi",
            "utc": [
              "Africa/Addis_Ababa",
              "Africa/Asmera",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Mogadishu",
              "Africa/Nairobi",
              "Antarctica/Syowa",
              "Etc/GMT-3",
              "Indian/Antananarivo",
              "Indian/Comoro",
              "Indian/Mayotte"
            ]
          },
          {
            "name": "Moscow Standard Time",
            "abbr": "MSK",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Moscow, St. Petersburg, Volgograd, Minsk",
            "utc": [
              "Europe/Kirov",
              "Europe/Moscow",
              "Europe/Simferopol",
              "Europe/Volgograd",
              "Europe/Minsk"
            ]
          },
          {
            "name": "Samara Time",
            "abbr": "SAMT",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Samara, Ulyanovsk, Saratov",
            "utc": [
              "Europe/Astrakhan",
              "Europe/Samara",
              "Europe/Ulyanovsk"
            ]
          },
          {
            "name": "Iran Standard Time",
            "abbr": "IDT",
            "offset": 4.5,
            "isdst": true,
            "text": "(UTC+03:30) Tehran",
            "utc": [
              "Asia/Tehran"
            ]
          },
          {
            "name": "Arabian Standard Time",
            "abbr": "AST",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Abu Dhabi, Muscat",
            "utc": [
              "Asia/Dubai",
              "Asia/Muscat",
              "Etc/GMT-4"
            ]
          },
          {
            "name": "Azerbaijan Standard Time",
            "abbr": "ADT",
            "offset": 5,
            "isdst": true,
            "text": "(UTC+04:00) Baku",
            "utc": [
              "Asia/Baku"
            ]
          },
          {
            "name": "Mauritius Standard Time",
            "abbr": "MST",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Port Louis",
            "utc": [
              "Indian/Mahe",
              "Indian/Mauritius",
              "Indian/Reunion"
            ]
          },
          {
            "name": "Georgian Standard Time",
            "abbr": "GET",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Tbilisi",
            "utc": [
              "Asia/Tbilisi"
            ]
          },
          {
            "name": "Caucasus Standard Time",
            "abbr": "CST",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Yerevan",
            "utc": [
              "Asia/Yerevan"
            ]
          },
          {
            "name": "Afghanistan Standard Time",
            "abbr": "AST",
            "offset": 4.5,
            "isdst": false,
            "text": "(UTC+04:30) Kabul",
            "utc": [
              "Asia/Kabul"
            ]
          },
          {
            "name": "West Asia Standard Time",
            "abbr": "WAST",
            "offset": 5,
            "isdst": false,
            "text": "(UTC+05:00) Ashgabat, Tashkent",
            "utc": [
              "Antarctica/Mawson",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Dushanbe",
              "Asia/Oral",
              "Asia/Samarkand",
              "Asia/Tashkent",
              "Etc/GMT-5",
              "Indian/Kerguelen",
              "Indian/Maldives"
            ]
          },
          {
            "name": "Yekaterinburg Time",
            "abbr": "YEKT",
            "offset": 5,
            "isdst": false,
            "text": "(UTC+05:00) Yekaterinburg",
            "utc": [
              "Asia/Yekaterinburg"
            ]
          },
          {
            "name": "Pakistan Standard Time",
            "abbr": "PKT",
            "offset": 5,
            "isdst": false,
            "text": "(UTC+05:00) Islamabad, Karachi",
            "utc": [
              "Asia/Karachi"
            ]
          },
          {
            "name": "India Standard Time",
            "abbr": "IST",
            "offset": 5.5,
            "isdst": false,
            "text": "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "utc": [
              "Asia/Kolkata"
            ]
          },
          {
            "name": "Sri Lanka Standard Time",
            "abbr": "SLST",
            "offset": 5.5,
            "isdst": false,
            "text": "(UTC+05:30) Sri Jayawardenepura",
            "utc": [
              "Asia/Colombo"
            ]
          },
          {
            "name": "Nepal Standard Time",
            "abbr": "NST",
            "offset": 5.75,
            "isdst": false,
            "text": "(UTC+05:45) Kathmandu",
            "utc": [
              "Asia/Kathmandu"
            ]
          },
          {
            "name": "Central Asia Standard Time",
            "abbr": "CAST",
            "offset": 6,
            "isdst": false,
            "text": "(UTC+06:00) Nur-Sultan (Astana)",
            "utc": [
              "Antarctica/Vostok",
              "Asia/Almaty",
              "Asia/Bishkek",
              "Asia/Qyzylorda",
              "Asia/Urumqi",
              "Etc/GMT-6",
              "Indian/Chagos"
            ]
          },
          {
            "name": "Bangladesh Standard Time",
            "abbr": "BST",
            "offset": 6,
            "isdst": false,
            "text": "(UTC+06:00) Dhaka",
            "utc": [
              "Asia/Dhaka",
              "Asia/Thimphu"
            ]
          },
          {
            "name": "Myanmar Standard Time",
            "abbr": "MST",
            "offset": 6.5,
            "isdst": false,
            "text": "(UTC+06:30) Yangon (Rangoon)",
            "utc": [
              "Asia/Rangoon",
              "Indian/Cocos"
            ]
          },
          {
            "name": "SE Asia Standard Time",
            "abbr": "SAST",
            "offset": 7,
            "isdst": false,
            "text": "(UTC+07:00) Bangkok, Hanoi, Jakarta",
            "utc": [
              "Antarctica/Davis",
              "Asia/Bangkok",
              "Asia/Hovd",
              "Asia/Jakarta",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Saigon",
              "Asia/Vientiane",
              "Etc/GMT-7",
              "Indian/Christmas"
            ]
          },
          {
            "name": "N. Central Asia Standard Time",
            "abbr": "NCAST",
            "offset": 7,
            "isdst": false,
            "text": "(UTC+07:00) Novosibirsk",
            "utc": [
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk"
            ]
          },
          {
            "name": "China Standard Time",
            "abbr": "CST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "utc": [
              "Asia/Hong_Kong",
              "Asia/Macau",
              "Asia/Shanghai"
            ]
          },
          {
            "name": "North Asia Standard Time",
            "abbr": "NAST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Krasnoyarsk",
            "utc": [
              "Asia/Krasnoyarsk"
            ]
          },
          {
            "name": "Singapore Standard Time",
            "abbr": "MPST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Kuala Lumpur, Singapore",
            "utc": [
              "Asia/Brunei",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Singapore",
              "Etc/GMT-8"
            ]
          },
          {
            "name": "W. Australia Standard Time",
            "abbr": "WAST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Perth",
            "utc": [
              "Antarctica/Casey",
              "Australia/Perth"
            ]
          },
          {
            "name": "Taipei Standard Time",
            "abbr": "TST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Taipei",
            "utc": [
              "Asia/Taipei"
            ]
          },
          {
            "name": "Ulaanbaatar Standard Time",
            "abbr": "UST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Ulaanbaatar",
            "utc": [
              "Asia/Choibalsan",
              "Asia/Ulaanbaatar"
            ]
          },
          {
            "name": "North Asia East Standard Time",
            "abbr": "NAEST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Irkutsk",
            "utc": [
              "Asia/Irkutsk"
            ]
          },
          {
            "name": "Japan Standard Time",
            "abbr": "JST",
            "offset": 9,
            "isdst": false,
            "text": "(UTC+09:00) Osaka, Sapporo, Tokyo",
            "utc": [
              "Asia/Dili",
              "Asia/Jayapura",
              "Asia/Tokyo",
              "Etc/GMT-9",
              "Pacific/Palau"
            ]
          },
          {
            "name": "Korea Standard Time",
            "abbr": "KST",
            "offset": 9,
            "isdst": false,
            "text": "(UTC+09:00) Seoul",
            "utc": [
              "Asia/Pyongyang",
              "Asia/Seoul"
            ]
          },
          {
            "name": "Cen. Australia Standard Time",
            "abbr": "CAST",
            "offset": 9.5,
            "isdst": false,
            "text": "(UTC+09:30) Adelaide",
            "utc": [
              "Australia/Adelaide",
              "Australia/Broken_Hill"
            ]
          },
          {
            "name": "AUS Central Standard Time",
            "abbr": "ACST",
            "offset": 9.5,
            "isdst": false,
            "text": "(UTC+09:30) Darwin",
            "utc": [
              "Australia/Darwin"
            ]
          },
          {
            "name": "E. Australia Standard Time",
            "abbr": "EAST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Brisbane",
            "utc": [
              "Australia/Brisbane",
              "Australia/Lindeman"
            ]
          },
          {
            "name": "AUS Eastern Standard Time",
            "abbr": "AEST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Canberra, Melbourne, Sydney",
            "utc": [
              "Australia/Melbourne",
              "Australia/Sydney"
            ]
          },
          {
            "name": "West Pacific Standard Time",
            "abbr": "WPST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Guam, Port Moresby",
            "utc": [
              "Antarctica/DumontDUrville",
              "Etc/GMT-10",
              "Pacific/Guam",
              "Pacific/Port_Moresby",
              "Pacific/Saipan",
              "Pacific/Truk"
            ]
          },
          {
            "name": "Tasmania Standard Time",
            "abbr": "TST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Hobart",
            "utc": [
              "Australia/Currie",
              "Australia/Hobart"
            ]
          },
          {
            "name": "Yakutsk Standard Time",
            "abbr": "YST",
            "offset": 9,
            "isdst": false,
            "text": "(UTC+09:00) Yakutsk",
            "utc": [
              "Asia/Chita",
              "Asia/Khandyga",
              "Asia/Yakutsk"
            ]
          },
          {
            "name": "Central Pacific Standard Time",
            "abbr": "CPST",
            "offset": 11,
            "isdst": false,
            "text": "(UTC+11:00) Solomon Is., New Caledonia",
            "utc": [
              "Antarctica/Macquarie",
              "Etc/GMT-11",
              "Pacific/Efate",
              "Pacific/Guadalcanal",
              "Pacific/Kosrae",
              "Pacific/Noumea",
              "Pacific/Ponape"
            ]
          },
          {
            "name": "Vladivostok Standard Time",
            "abbr": "VST",
            "offset": 11,
            "isdst": false,
            "text": "(UTC+11:00) Vladivostok",
            "utc": [
              "Asia/Sakhalin",
              "Asia/Ust-Nera",
              "Asia/Vladivostok"
            ]
          },
          {
            "name": "New Zealand Standard Time",
            "abbr": "NZST",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Auckland, Wellington",
            "utc": [
              "Antarctica/McMurdo",
              "Pacific/Auckland"
            ]
          },
          {
            "name": "UTC+12",
            "abbr": "U",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Coordinated Universal Time+12",
            "utc": [
              "Etc/GMT-12",
              "Pacific/Funafuti",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Nauru",
              "Pacific/Tarawa",
              "Pacific/Wake",
              "Pacific/Wallis"
            ]
          },
          {
            "name": "Fiji Standard Time",
            "abbr": "FST",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Fiji",
            "utc": [
              "Pacific/Fiji"
            ]
          },
          {
            "name": "Magadan Standard Time",
            "abbr": "MST",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Magadan",
            "utc": [
              "Asia/Anadyr",
              "Asia/Kamchatka",
              "Asia/Magadan",
              "Asia/Srednekolymsk"
            ]
          },
          {
            "name": "Kamchatka Standard Time",
            "abbr": "KDT",
            "offset": 13,
            "isdst": true,
            "text": "(UTC+12:00) Petropavlovsk-Kamchatsky - Old",
            "utc": [
              "Asia/Kamchatka"
            ]
          },
          {
            "name": "Tonga Standard Time",
            "abbr": "TST",
            "offset": 13,
            "isdst": false,
            "text": "(UTC+13:00) Nuku'alofa",
            "utc": [
              "Etc/GMT-13",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Tongatapu"
            ]
          },
          {
            "name": "Samoa Standard Time",
            "abbr": "SST",
            "offset": 13,
            "isdst": false,
            "text": "(UTC+13:00) Samoa",
            "utc": [
              "Pacific/Apia"
            ]
          }
        ],
        //List source: http://answers.google.com/answers/threadview/id/589312.html
        profession: [
          "Airline Pilot",
          "Academic Team",
          "Accountant",
          "Account Executive",
          "Actor",
          "Actuary",
          "Acquisition Analyst",
          "Administrative Asst.",
          "Administrative Analyst",
          "Administrator",
          "Advertising Director",
          "Aerospace Engineer",
          "Agent",
          "Agricultural Inspector",
          "Agricultural Scientist",
          "Air Traffic Controller",
          "Animal Trainer",
          "Anthropologist",
          "Appraiser",
          "Architect",
          "Art Director",
          "Artist",
          "Astronomer",
          "Athletic Coach",
          "Auditor",
          "Author",
          "Baker",
          "Banker",
          "Bankruptcy Attorney",
          "Benefits Manager",
          "Biologist",
          "Bio-feedback Specialist",
          "Biomedical Engineer",
          "Biotechnical Researcher",
          "Broadcaster",
          "Broker",
          "Building Manager",
          "Building Contractor",
          "Building Inspector",
          "Business Analyst",
          "Business Planner",
          "Business Manager",
          "Buyer",
          "Call Center Manager",
          "Career Counselor",
          "Cash Manager",
          "Ceramic Engineer",
          "Chief Executive Officer",
          "Chief Operation Officer",
          "Chef",
          "Chemical Engineer",
          "Chemist",
          "Child Care Manager",
          "Chief Medical Officer",
          "Chiropractor",
          "Cinematographer",
          "City Housing Manager",
          "City Manager",
          "Civil Engineer",
          "Claims Manager",
          "Clinical Research Assistant",
          "Collections Manager",
          "Compliance Manager",
          "Comptroller",
          "Computer Manager",
          "Commercial Artist",
          "Communications Affairs Director",
          "Communications Director",
          "Communications Engineer",
          "Compensation Analyst",
          "Computer Programmer",
          "Computer Ops. Manager",
          "Computer Engineer",
          "Computer Operator",
          "Computer Graphics Specialist",
          "Construction Engineer",
          "Construction Manager",
          "Consultant",
          "Consumer Relations Manager",
          "Contract Administrator",
          "Copyright Attorney",
          "Copywriter",
          "Corporate Planner",
          "Corrections Officer",
          "Cosmetologist",
          "Credit Analyst",
          "Cruise Director",
          "Chief Information Officer",
          "Chief Technology Officer",
          "Customer Service Manager",
          "Cryptologist",
          "Dancer",
          "Data Security Manager",
          "Database Manager",
          "Day Care Instructor",
          "Dentist",
          "Designer",
          "Design Engineer",
          "Desktop Publisher",
          "Developer",
          "Development Officer",
          "Diamond Merchant",
          "Dietitian",
          "Direct Marketer",
          "Director",
          "Distribution Manager",
          "Diversity Manager",
          "Economist",
          "EEO Compliance Manager",
          "Editor",
          "Education Adminator",
          "Electrical Engineer",
          "Electro Optical Engineer",
          "Electronics Engineer",
          "Embassy Management",
          "Employment Agent",
          "Engineer Technician",
          "Entrepreneur",
          "Environmental Analyst",
          "Environmental Attorney",
          "Environmental Engineer",
          "Environmental Specialist",
          "Escrow Officer",
          "Estimator",
          "Executive Assistant",
          "Executive Director",
          "Executive Recruiter",
          "Facilities Manager",
          "Family Counselor",
          "Fashion Events Manager",
          "Fashion Merchandiser",
          "Fast Food Manager",
          "Film Producer",
          "Film Production Assistant",
          "Financial Analyst",
          "Financial Planner",
          "Financier",
          "Fine Artist",
          "Wildlife Specialist",
          "Fitness Consultant",
          "Flight Attendant",
          "Flight Engineer",
          "Floral Designer",
          "Food & Beverage Director",
          "Food Service Manager",
          "Forestry Technician",
          "Franchise Management",
          "Franchise Sales",
          "Fraud Investigator",
          "Freelance Writer",
          "Fund Raiser",
          "General Manager",
          "Geologist",
          "General Counsel",
          "Geriatric Specialist",
          "Gerontologist",
          "Glamour Photographer",
          "Golf Club Manager",
          "Gourmet Chef",
          "Graphic Designer",
          "Grounds Keeper",
          "Hazardous Waste Manager",
          "Health Care Manager",
          "Health Therapist",
          "Health Service Administrator",
          "Hearing Officer",
          "Home Economist",
          "Horticulturist",
          "Hospital Administrator",
          "Hotel Manager",
          "Human Resources Manager",
          "Importer",
          "Industrial Designer",
          "Industrial Engineer",
          "Information Director",
          "Inside Sales",
          "Insurance Adjuster",
          "Interior Decorator",
          "Internal Controls Director",
          "International Acct.",
          "International Courier",
          "International Lawyer",
          "Interpreter",
          "Investigator",
          "Investment Banker",
          "Investment Manager",
          "IT Architect",
          "IT Project Manager",
          "IT Systems Analyst",
          "Jeweler",
          "Joint Venture Manager",
          "Journalist",
          "Labor Negotiator",
          "Labor Organizer",
          "Labor Relations Manager",
          "Lab Services Director",
          "Lab Technician",
          "Land Developer",
          "Landscape Architect",
          "Law Enforcement Officer",
          "Lawyer",
          "Lead Software Engineer",
          "Lead Software Test Engineer",
          "Leasing Manager",
          "Legal Secretary",
          "Library Manager",
          "Litigation Attorney",
          "Loan Officer",
          "Lobbyist",
          "Logistics Manager",
          "Maintenance Manager",
          "Management Consultant",
          "Managed Care Director",
          "Managing Partner",
          "Manufacturing Director",
          "Manpower Planner",
          "Marine Biologist",
          "Market Res. Analyst",
          "Marketing Director",
          "Materials Manager",
          "Mathematician",
          "Membership Chairman",
          "Mechanic",
          "Mechanical Engineer",
          "Media Buyer",
          "Medical Investor",
          "Medical Secretary",
          "Medical Technician",
          "Mental Health Counselor",
          "Merchandiser",
          "Metallurgical Engineering",
          "Meteorologist",
          "Microbiologist",
          "MIS Manager",
          "Motion Picture Director",
          "Multimedia Director",
          "Musician",
          "Network Administrator",
          "Network Specialist",
          "Network Operator",
          "New Product Manager",
          "Novelist",
          "Nuclear Engineer",
          "Nuclear Specialist",
          "Nutritionist",
          "Nursing Administrator",
          "Occupational Therapist",
          "Oceanographer",
          "Office Manager",
          "Operations Manager",
          "Operations Research Director",
          "Optical Technician",
          "Optometrist",
          "Organizational Development Manager",
          "Outplacement Specialist",
          "Paralegal",
          "Park Ranger",
          "Patent Attorney",
          "Payroll Specialist",
          "Personnel Specialist",
          "Petroleum Engineer",
          "Pharmacist",
          "Photographer",
          "Physical Therapist",
          "Physician",
          "Physician Assistant",
          "Physicist",
          "Planning Director",
          "Podiatrist",
          "Political Analyst",
          "Political Scientist",
          "Politician",
          "Portfolio Manager",
          "Preschool Management",
          "Preschool Teacher",
          "Principal",
          "Private Banker",
          "Private Investigator",
          "Probation Officer",
          "Process Engineer",
          "Producer",
          "Product Manager",
          "Product Engineer",
          "Production Engineer",
          "Production Planner",
          "Professional Athlete",
          "Professional Coach",
          "Professor",
          "Project Engineer",
          "Project Manager",
          "Program Manager",
          "Property Manager",
          "Public Administrator",
          "Public Safety Director",
          "PR Specialist",
          "Publisher",
          "Purchasing Agent",
          "Publishing Director",
          "Quality Assurance Specialist",
          "Quality Control Engineer",
          "Quality Control Inspector",
          "Radiology Manager",
          "Railroad Engineer",
          "Real Estate Broker",
          "Recreational Director",
          "Recruiter",
          "Redevelopment Specialist",
          "Regulatory Affairs Manager",
          "Registered Nurse",
          "Rehabilitation Counselor",
          "Relocation Manager",
          "Reporter",
          "Research Specialist",
          "Restaurant Manager",
          "Retail Store Manager",
          "Risk Analyst",
          "Safety Engineer",
          "Sales Engineer",
          "Sales Trainer",
          "Sales Promotion Manager",
          "Sales Representative",
          "Sales Manager",
          "Service Manager",
          "Sanitation Engineer",
          "Scientific Programmer",
          "Scientific Writer",
          "Securities Analyst",
          "Security Consultant",
          "Security Director",
          "Seminar Presenter",
          "Ship's Officer",
          "Singer",
          "Social Director",
          "Social Program Planner",
          "Social Research",
          "Social Scientist",
          "Social Worker",
          "Sociologist",
          "Software Developer",
          "Software Engineer",
          "Software Test Engineer",
          "Soil Scientist",
          "Special Events Manager",
          "Special Education Teacher",
          "Special Projects Director",
          "Speech Pathologist",
          "Speech Writer",
          "Sports Event Manager",
          "Statistician",
          "Store Manager",
          "Strategic Alliance Director",
          "Strategic Planning Director",
          "Stress Reduction Specialist",
          "Stockbroker",
          "Surveyor",
          "Structural Engineer",
          "Superintendent",
          "Supply Chain Director",
          "System Engineer",
          "Systems Analyst",
          "Systems Programmer",
          "System Administrator",
          "Tax Specialist",
          "Teacher",
          "Technical Support Specialist",
          "Technical Illustrator",
          "Technical Writer",
          "Technology Director",
          "Telecom Analyst",
          "Telemarketer",
          "Theatrical Director",
          "Title Examiner",
          "Tour Escort",
          "Tour Guide Director",
          "Traffic Manager",
          "Trainer Translator",
          "Transportation Manager",
          "Travel Agent",
          "Treasurer",
          "TV Programmer",
          "Underwriter",
          "Union Representative",
          "University Administrator",
          "University Dean",
          "Urban Planner",
          "Veterinarian",
          "Vendor Relations Director",
          "Viticulturist",
          "Warehouse Manager"
        ],
        animals: {
          //list of ocean animals comes from https://owlcation.com/stem/list-of-ocean-animals
          "ocean": ["Acantharea", "Anemone", "Angelfish King", "Ahi Tuna", "Albacore", "American Oyster", "Anchovy", "Armored Snail", "Arctic Char", "Atlantic Bluefin Tuna", "Atlantic Cod", "Atlantic Goliath Grouper", "Atlantic Trumpetfish", "Atlantic Wolffish", "Baleen Whale", "Banded Butterflyfish", "Banded Coral Shrimp", "Banded Sea Krait", "Barnacle", "Barndoor Skate", "Barracuda", "Basking Shark", "Bass", "Beluga Whale", "Bluebanded Goby", "Bluehead Wrasse", "Bluefish", "Bluestreak Cleaner-Wrasse", "Blue Marlin", "Blue Shark", "Blue Spiny Lobster", "Blue Tang", "Blue Whale", "Broadclub Cuttlefish", "Bull Shark", "Chambered Nautilus", "Chilean Basket Star", "Chilean Jack Mackerel", "Chinook Salmon", "Christmas Tree Worm", "Clam", "Clown Anemonefish", "Clown Triggerfish", "Cod", "Coelacanth", "Cockscomb Cup Coral", "Common Fangtooth", "Conch", "Cookiecutter Shark", "Copepod", "Coral", "Corydoras", "Cownose Ray", "Crab", "Crown-of-Thorns Starfish", "Cushion Star", "Cuttlefish", "California Sea Otters", "Dolphin", "Dolphinfish", "Dory", "Devil Fish", "Dugong", "Dumbo Octopus", "Dungeness Crab", "Eccentric Sand Dollar", "Edible Sea Cucumber", "Eel", "Elephant Seal", "Elkhorn Coral", "Emperor Shrimp", "Estuarine Crocodile", "Fathead Sculpin", "Fiddler Crab", "Fin Whale", "Flameback", "Flamingo Tongue Snail", "Flashlight Fish", "Flatback Turtle", "Flatfish", "Flying Fish", "Flounder", "Fluke", "French Angelfish", "Frilled Shark", "Fugu (also called Pufferfish)", "Gar", "Geoduck", "Giant Barrel Sponge", "Giant Caribbean Sea Anemone", "Giant Clam", "Giant Isopod", "Giant Kingfish", "Giant Oarfish", "Giant Pacific Octopus", "Giant Pyrosome", "Giant Sea Star", "Giant Squid", "Glowing Sucker Octopus", "Giant Tube Worm", "Goblin Shark", "Goosefish", "Great White Shark", "Greenland Shark", "Grey Atlantic Seal", "Grouper", "Grunion", "Guineafowl Puffer", "Haddock", "Hake", "Halibut", "Hammerhead Shark", "Hapuka", "Harbor Porpoise", "Harbor Seal", "Hatchetfish", "Hawaiian Monk Seal", "Hawksbill Turtle", "Hector's Dolphin", "Hermit Crab", "Herring", "Hoki", "Horn Shark", "Horseshoe Crab", "Humpback Anglerfish", "Humpback Whale", "Icefish", "Imperator Angelfish", "Irukandji Jellyfish", "Isopod", "Ivory Bush Coral", "Japanese Spider Crab", "Jellyfish", "John Dory", "Juan Fernandez Fur Seal", "Killer Whale", "Kiwa Hirsuta", "Krill", "Lagoon Triggerfish", "Lamprey", "Leafy Seadragon", "Leopard Seal", "Limpet", "Ling", "Lionfish", "Lions Mane Jellyfish", "Lobe Coral", "Lobster", "Loggerhead Turtle", "Longnose Sawshark", "Longsnout Seahorse", "Lophelia Coral", "Marrus Orthocanna", "Manatee", "Manta Ray", "Marlin", "Megamouth Shark", "Mexican Lookdown", "Mimic Octopus", "Moon Jelly", "Mollusk", "Monkfish", "Moray Eel", "Mullet", "Mussel", "Megaladon", "Napoleon Wrasse", "Nassau Grouper", "Narwhal", "Nautilus", "Needlefish", "Northern Seahorse", "North Atlantic Right Whale", "Northern Red Snapper", "Norway Lobster", "Nudibranch", "Nurse Shark", "Oarfish", "Ocean Sunfish", "Oceanic Whitetip Shark", "Octopus", "Olive Sea Snake", "Orange Roughy", "Ostracod", "Otter", "Oyster", "Pacific Angelshark", "Pacific Blackdragon", "Pacific Halibut", "Pacific Sardine", "Pacific Sea Nettle Jellyfish", "Pacific White Sided Dolphin", "Pantropical Spotted Dolphin", "Patagonian Toothfish", "Peacock Mantis Shrimp", "Pelagic Thresher Shark", "Penguin", "Peruvian Anchoveta", "Pilchard", "Pink Salmon", "Pinniped", "Plankton", "Porpoise", "Polar Bear", "Portuguese Man o' War", "Pycnogonid Sea Spider", "Quahog", "Queen Angelfish", "Queen Conch", "Queen Parrotfish", "Queensland Grouper", "Ragfish", "Ratfish", "Rattail Fish", "Ray", "Red Drum", "Red King Crab", "Ringed Seal", "Risso's Dolphin", "Ross Seals", "Sablefish", "Salmon", "Sand Dollar", "Sandbar Shark", "Sawfish", "Sarcastic Fringehead", "Scalloped Hammerhead Shark", "Seahorse", "Sea Cucumber", "Sea Lion", "Sea Urchin", "Seal", "Shark", "Shortfin Mako Shark", "Shovelnose Guitarfish", "Shrimp", "Silverside Fish", "Skipjack Tuna", "Slender Snipe Eel", "Smalltooth Sawfish", "Smelts", "Sockeye Salmon", "Southern Stingray", "Sponge", "Spotted Porcupinefish", "Spotted Dolphin", "Spotted Eagle Ray", "Spotted Moray", "Squid", "Squidworm", "Starfish", "Stickleback", "Stonefish", "Stoplight Loosejaw", "Sturgeon", "Swordfish", "Tan Bristlemouth", "Tasseled Wobbegong", "Terrible Claw Lobster", "Threespot Damselfish", "Tiger Prawn", "Tiger Shark", "Tilefish", "Toadfish", "Tropical Two-Wing Flyfish", "Tuna", "Umbrella Squid", "Velvet Crab", "Venus Flytrap Sea Anemone", "Vigtorniella Worm", "Viperfish", "Vampire Squid", "Vaquita", "Wahoo", "Walrus", "West Indian Manatee", "Whale", "Whale Shark", "Whiptail Gulper", "White-Beaked Dolphin", "White-Ring Garden Eel", "White Shrimp", "Wobbegong", "Wrasse", "Wreckfish", "Xiphosura", "Yellowtail Damselfish", "Yelloweye Rockfish", "Yellow Cup Black Coral", "Yellow Tube Sponge", "Yellowfin Tuna", "Zebrashark", "Zooplankton"],
          //list of desert, grassland, and forest animals comes from http://www.skyenimals.com/
          "desert": ["Aardwolf", "Addax", "African Wild Ass", "Ant", "Antelope", "Armadillo", "Baboon", "Badger", "Bat", "Bearded Dragon", "Beetle", "Bird", "Black-footed Cat", "Boa", "Brown Bear", "Bustard", "Butterfly", "Camel", "Caracal", "Caracara", "Caterpillar", "Centipede", "Cheetah", "Chipmunk", "Chuckwalla", "Climbing Mouse", "Coati", "Cobra", "Cotton Rat", "Cougar", "Courser", "Crane Fly", "Crow", "Dassie Rat", "Dove", "Dunnart", "Eagle", "Echidna", "Elephant", "Emu", "Falcon", "Fly", "Fox", "Frogmouth", "Gecko", "Geoffroy's Cat", "Gerbil", "Grasshopper", "Guanaco", "Gundi", "Hamster", "Hawk", "Hedgehog", "Hyena", "Hyrax", "Jackal", "Kangaroo", "Kangaroo Rat", "Kestrel", "Kowari", "Kultarr", "Leopard", "Lion", "Macaw", "Meerkat", "Mouse", "Oryx", "Ostrich", "Owl", "Pronghorn", "Python", "Rabbit", "Raccoon", "Rattlesnake", "Rhinoceros", "Sand Cat", "Spectacled Bear", "Spiny Mouse", "Starling", "Stick Bug", "Tarantula", "Tit", "Toad", "Tortoise", "Tyrant Flycatcher", "Viper", "Vulture", "Waxwing", "Xerus", "Zebra"],
          "grassland": ["Aardvark", "Aardwolf", "Accentor", "African Buffalo", "African Wild Dog", "Alpaca", "Anaconda", "Ant", "Anteater", "Antelope", "Armadillo", "Baboon", "Badger", "Bandicoot", "Barbet", "Bat", "Bee", "Bee-eater", "Beetle", "Bird", "Bison", "Black-footed Cat", "Black-footed Ferret", "Bluebird", "Boa", "Bowerbird", "Brown Bear", "Bush Dog", "Bushshrike", "Bustard", "Butterfly", "Buzzard", "Caracal", "Caracara", "Cardinal", "Caterpillar", "Cheetah", "Chipmunk", "Civet", "Climbing Mouse", "Clouded Leopard", "Coati", "Cobra", "Cockatoo", "Cockroach", "Common Genet", "Cotton Rat", "Cougar", "Courser", "Coyote", "Crane", "Crane Fly", "Cricket", "Crow", "Culpeo", "Death Adder", "Deer", "Deer Mouse", "Dingo", "Dinosaur", "Dove", "Drongo", "Duck", "Duiker", "Dunnart", "Eagle", "Echidna", "Elephant", "Elk", "Emu", "Falcon", "Finch", "Flea", "Fly", "Flying Frog", "Fox", "Frog", "Frogmouth", "Garter Snake", "Gazelle", "Gecko", "Geoffroy's Cat", "Gerbil", "Giant Tortoise", "Giraffe", "Grasshopper", "Grison", "Groundhog", "Grouse", "Guanaco", "Guinea Pig", "Hamster", "Harrier", "Hartebeest", "Hawk", "Hedgehog", "Helmetshrike", "Hippopotamus", "Hornbill", "Hyena", "Hyrax", "Impala", "Jackal", "Jaguar", "Jaguarundi", "Kangaroo", "Kangaroo Rat", "Kestrel", "Kultarr", "Ladybug", "Leopard", "Lion", "Macaw", "Meerkat", "Mouse", "Newt", "Oryx", "Ostrich", "Owl", "Pangolin", "Pheasant", "Prairie Dog", "Pronghorn", "Przewalski's Horse", "Python", "Quoll", "Rabbit", "Raven", "Rhinoceros", "Shelduck", "Sloth Bear", "Spectacled Bear", "Squirrel", "Starling", "Stick Bug", "Tamandua", "Tasmanian Devil", "Thornbill", "Thrush", "Toad", "Tortoise"],
          "forest": ["Agouti", "Anaconda", "Anoa", "Ant", "Anteater", "Antelope", "Armadillo", "Asian Black Bear", "Aye-aye", "Babirusa", "Baboon", "Badger", "Bandicoot", "Banteng", "Barbet", "Basilisk", "Bat", "Bearded Dragon", "Bee", "Bee-eater", "Beetle", "Bettong", "Binturong", "Bird-of-paradise", "Bongo", "Bowerbird", "Bulbul", "Bush Dog", "Bushbaby", "Bushshrike", "Butterfly", "Buzzard", "Caecilian", "Cardinal", "Cassowary", "Caterpillar", "Centipede", "Chameleon", "Chimpanzee", "Cicada", "Civet", "Clouded Leopard", "Coati", "Cobra", "Cockatoo", "Cockroach", "Colugo", "Cotinga", "Cotton Rat", "Cougar", "Crane Fly", "Cricket", "Crocodile", "Crow", "Cuckoo", "Cuscus", "Death Adder", "Deer", "Dhole", "Dingo", "Dinosaur", "Drongo", "Duck", "Duiker", "Eagle", "Echidna", "Elephant", "Finch", "Flat-headed Cat", "Flea", "Flowerpecker", "Fly", "Flying Frog", "Fossa", "Frog", "Frogmouth", "Gaur", "Gecko", "Gorilla", "Grison", "Hawaiian Honeycreeper", "Hawk", "Hedgehog", "Helmetshrike", "Hornbill", "Hyrax", "Iguana", "Jackal", "Jaguar", "Jaguarundi", "Kestrel", "Ladybug", "Lemur", "Leopard", "Lion", "Macaw", "Mandrill", "Margay", "Monkey", "Mouse", "Mouse Deer", "Newt", "Okapi", "Old World Flycatcher", "Orangutan", "Owl", "Pangolin", "Peafowl", "Pheasant", "Possum", "Python", "Quokka", "Rabbit", "Raccoon", "Red Panda", "Red River Hog", "Rhinoceros", "Sloth Bear", "Spectacled Bear", "Squirrel", "Starling", "Stick Bug", "Sun Bear", "Tamandua", "Tamarin", "Tapir", "Tarantula", "Thrush", "Tiger", "Tit", "Toad", "Tortoise", "Toucan", "Trogon", "Trumpeter", "Turaco", "Turtle", "Tyrant Flycatcher", "Viper", "Vulture", "Wallaby", "Warbler", "Wasp", "Waxwing", "Weaver", "Weaver-finch", "Whistler", "White-eye", "Whydah", "Woodswallow", "Worm", "Wren", "Xenops", "Yellowjacket", "Accentor", "African Buffalo", "American Black Bear", "Anole", "Bird", "Bison", "Boa", "Brown Bear", "Chipmunk", "Common Genet", "Copperhead", "Coyote", "Deer Mouse", "Dormouse", "Elk", "Emu", "Fisher", "Fox", "Garter Snake", "Giant Panda", "Giant Tortoise", "Groundhog", "Grouse", "Guanaco", "Himalayan Tahr", "Kangaroo", "Koala", "Numbat", "Quoll", "Raccoon dog", "Tasmanian Devil", "Thornbill", "Turkey", "Vole", "Weasel", "Wildcat", "Wolf", "Wombat", "Woodchuck", "Woodpecker"],
          //list of farm animals comes from https://www.buzzle.com/articles/farm-animals-list.html
          "farm": ["Alpaca", "Buffalo", "Banteng", "Cow", "Cat", "Chicken", "Carp", "Camel", "Donkey", "Dog", "Duck", "Emu", "Goat", "Gayal", "Guinea", "Goose", "Horse", "Honey", "Llama", "Pig", "Pigeon", "Rhea", "Rabbit", "Sheep", "Silkworm", "Turkey", "Yak", "Zebu"],
          //list of pet animals comes from https://www.dogbreedinfo.com/pets/pet.htm
          "pet": ["Bearded Dragon", "Birds", "Burro", "Cats", "Chameleons", "Chickens", "Chinchillas", "Chinese Water Dragon", "Cows", "Dogs", "Donkey", "Ducks", "Ferrets", "Fish", "Geckos", "Geese", "Gerbils", "Goats", "Guinea Fowl", "Guinea Pigs", "Hamsters", "Hedgehogs", "Horses", "Iguanas", "Llamas", "Lizards", "Mice", "Mule", "Peafowl", "Pigs and Hogs", "Pigeons", "Ponies", "Pot Bellied Pig", "Rabbits", "Rats", "Sheep", "Skinks", "Snakes", "Stick Insects", "Sugar Gliders", "Tarantula", "Turkeys", "Turtles"],
          //list of zoo animals comes from https://bronxzoo.com/animals
          "zoo": ["Aardvark", "African Wild Dog", "Aldabra Tortoise", "American Alligator", "American Bison", "Amur Tiger", "Anaconda", "Andean Condor", "Asian Elephant", "Baby Doll Sheep", "Bald Eagle", "Barred Owl", "Blue Iguana", "Boer Goat", "California Sea Lion", "Caribbean Flamingo", "Chinchilla", "Collared Lemur", "Coquerel's Sifaka", "Cuban Amazon Parrot", "Ebony Langur", "Fennec Fox", "Fossa", "Gelada", "Giant Anteater", "Giraffe", "Gorilla", "Grizzly Bear", "Henkel's Leaf-tailed Gecko", "Indian Gharial", "Indian Rhinoceros", "King Cobra", "King Vulture", "Komodo Dragon", "Linne's Two-toed Sloth", "Lion", "Little Penguin", "Madagascar Tree Boa", "Magellanic Penguin", "Malayan Tapir", "Malayan Tiger", "Matschies Tree Kangaroo", "Mini Donkey", "Monarch Butterfly", "Nile crocodile", "North American Porcupine", "Nubian Ibex", "Okapi", "Poison Dart Frog", "Polar Bear", "Pygmy Marmoset", "Radiated Tortoise", "Red Panda", "Red Ruffed Lemur", "Ring-tailed Lemur", "Ring-tailed Mongoose", "Rock Hyrax", "Small Clawed Asian Otter", "Snow Leopard", "Snowy Owl", "Southern White-faced Owl", "Southern White Rhinocerous", "Squirrel Monkey", "Tufted Puffin", "White Cheeked Gibbon", "White-throated Bee Eater", "Zebra"]
        },
        primes: [
          // 1230 first primes, i.e. all primes up to the first one greater than 10000, inclusive.
          2,
          3,
          5,
          7,
          11,
          13,
          17,
          19,
          23,
          29,
          31,
          37,
          41,
          43,
          47,
          53,
          59,
          61,
          67,
          71,
          73,
          79,
          83,
          89,
          97,
          101,
          103,
          107,
          109,
          113,
          127,
          131,
          137,
          139,
          149,
          151,
          157,
          163,
          167,
          173,
          179,
          181,
          191,
          193,
          197,
          199,
          211,
          223,
          227,
          229,
          233,
          239,
          241,
          251,
          257,
          263,
          269,
          271,
          277,
          281,
          283,
          293,
          307,
          311,
          313,
          317,
          331,
          337,
          347,
          349,
          353,
          359,
          367,
          373,
          379,
          383,
          389,
          397,
          401,
          409,
          419,
          421,
          431,
          433,
          439,
          443,
          449,
          457,
          461,
          463,
          467,
          479,
          487,
          491,
          499,
          503,
          509,
          521,
          523,
          541,
          547,
          557,
          563,
          569,
          571,
          577,
          587,
          593,
          599,
          601,
          607,
          613,
          617,
          619,
          631,
          641,
          643,
          647,
          653,
          659,
          661,
          673,
          677,
          683,
          691,
          701,
          709,
          719,
          727,
          733,
          739,
          743,
          751,
          757,
          761,
          769,
          773,
          787,
          797,
          809,
          811,
          821,
          823,
          827,
          829,
          839,
          853,
          857,
          859,
          863,
          877,
          881,
          883,
          887,
          907,
          911,
          919,
          929,
          937,
          941,
          947,
          953,
          967,
          971,
          977,
          983,
          991,
          997,
          1009,
          1013,
          1019,
          1021,
          1031,
          1033,
          1039,
          1049,
          1051,
          1061,
          1063,
          1069,
          1087,
          1091,
          1093,
          1097,
          1103,
          1109,
          1117,
          1123,
          1129,
          1151,
          1153,
          1163,
          1171,
          1181,
          1187,
          1193,
          1201,
          1213,
          1217,
          1223,
          1229,
          1231,
          1237,
          1249,
          1259,
          1277,
          1279,
          1283,
          1289,
          1291,
          1297,
          1301,
          1303,
          1307,
          1319,
          1321,
          1327,
          1361,
          1367,
          1373,
          1381,
          1399,
          1409,
          1423,
          1427,
          1429,
          1433,
          1439,
          1447,
          1451,
          1453,
          1459,
          1471,
          1481,
          1483,
          1487,
          1489,
          1493,
          1499,
          1511,
          1523,
          1531,
          1543,
          1549,
          1553,
          1559,
          1567,
          1571,
          1579,
          1583,
          1597,
          1601,
          1607,
          1609,
          1613,
          1619,
          1621,
          1627,
          1637,
          1657,
          1663,
          1667,
          1669,
          1693,
          1697,
          1699,
          1709,
          1721,
          1723,
          1733,
          1741,
          1747,
          1753,
          1759,
          1777,
          1783,
          1787,
          1789,
          1801,
          1811,
          1823,
          1831,
          1847,
          1861,
          1867,
          1871,
          1873,
          1877,
          1879,
          1889,
          1901,
          1907,
          1913,
          1931,
          1933,
          1949,
          1951,
          1973,
          1979,
          1987,
          1993,
          1997,
          1999,
          2003,
          2011,
          2017,
          2027,
          2029,
          2039,
          2053,
          2063,
          2069,
          2081,
          2083,
          2087,
          2089,
          2099,
          2111,
          2113,
          2129,
          2131,
          2137,
          2141,
          2143,
          2153,
          2161,
          2179,
          2203,
          2207,
          2213,
          2221,
          2237,
          2239,
          2243,
          2251,
          2267,
          2269,
          2273,
          2281,
          2287,
          2293,
          2297,
          2309,
          2311,
          2333,
          2339,
          2341,
          2347,
          2351,
          2357,
          2371,
          2377,
          2381,
          2383,
          2389,
          2393,
          2399,
          2411,
          2417,
          2423,
          2437,
          2441,
          2447,
          2459,
          2467,
          2473,
          2477,
          2503,
          2521,
          2531,
          2539,
          2543,
          2549,
          2551,
          2557,
          2579,
          2591,
          2593,
          2609,
          2617,
          2621,
          2633,
          2647,
          2657,
          2659,
          2663,
          2671,
          2677,
          2683,
          2687,
          2689,
          2693,
          2699,
          2707,
          2711,
          2713,
          2719,
          2729,
          2731,
          2741,
          2749,
          2753,
          2767,
          2777,
          2789,
          2791,
          2797,
          2801,
          2803,
          2819,
          2833,
          2837,
          2843,
          2851,
          2857,
          2861,
          2879,
          2887,
          2897,
          2903,
          2909,
          2917,
          2927,
          2939,
          2953,
          2957,
          2963,
          2969,
          2971,
          2999,
          3001,
          3011,
          3019,
          3023,
          3037,
          3041,
          3049,
          3061,
          3067,
          3079,
          3083,
          3089,
          3109,
          3119,
          3121,
          3137,
          3163,
          3167,
          3169,
          3181,
          3187,
          3191,
          3203,
          3209,
          3217,
          3221,
          3229,
          3251,
          3253,
          3257,
          3259,
          3271,
          3299,
          3301,
          3307,
          3313,
          3319,
          3323,
          3329,
          3331,
          3343,
          3347,
          3359,
          3361,
          3371,
          3373,
          3389,
          3391,
          3407,
          3413,
          3433,
          3449,
          3457,
          3461,
          3463,
          3467,
          3469,
          3491,
          3499,
          3511,
          3517,
          3527,
          3529,
          3533,
          3539,
          3541,
          3547,
          3557,
          3559,
          3571,
          3581,
          3583,
          3593,
          3607,
          3613,
          3617,
          3623,
          3631,
          3637,
          3643,
          3659,
          3671,
          3673,
          3677,
          3691,
          3697,
          3701,
          3709,
          3719,
          3727,
          3733,
          3739,
          3761,
          3767,
          3769,
          3779,
          3793,
          3797,
          3803,
          3821,
          3823,
          3833,
          3847,
          3851,
          3853,
          3863,
          3877,
          3881,
          3889,
          3907,
          3911,
          3917,
          3919,
          3923,
          3929,
          3931,
          3943,
          3947,
          3967,
          3989,
          4001,
          4003,
          4007,
          4013,
          4019,
          4021,
          4027,
          4049,
          4051,
          4057,
          4073,
          4079,
          4091,
          4093,
          4099,
          4111,
          4127,
          4129,
          4133,
          4139,
          4153,
          4157,
          4159,
          4177,
          4201,
          4211,
          4217,
          4219,
          4229,
          4231,
          4241,
          4243,
          4253,
          4259,
          4261,
          4271,
          4273,
          4283,
          4289,
          4297,
          4327,
          4337,
          4339,
          4349,
          4357,
          4363,
          4373,
          4391,
          4397,
          4409,
          4421,
          4423,
          4441,
          4447,
          4451,
          4457,
          4463,
          4481,
          4483,
          4493,
          4507,
          4513,
          4517,
          4519,
          4523,
          4547,
          4549,
          4561,
          4567,
          4583,
          4591,
          4597,
          4603,
          4621,
          4637,
          4639,
          4643,
          4649,
          4651,
          4657,
          4663,
          4673,
          4679,
          4691,
          4703,
          4721,
          4723,
          4729,
          4733,
          4751,
          4759,
          4783,
          4787,
          4789,
          4793,
          4799,
          4801,
          4813,
          4817,
          4831,
          4861,
          4871,
          4877,
          4889,
          4903,
          4909,
          4919,
          4931,
          4933,
          4937,
          4943,
          4951,
          4957,
          4967,
          4969,
          4973,
          4987,
          4993,
          4999,
          5003,
          5009,
          5011,
          5021,
          5023,
          5039,
          5051,
          5059,
          5077,
          5081,
          5087,
          5099,
          5101,
          5107,
          5113,
          5119,
          5147,
          5153,
          5167,
          5171,
          5179,
          5189,
          5197,
          5209,
          5227,
          5231,
          5233,
          5237,
          5261,
          5273,
          5279,
          5281,
          5297,
          5303,
          5309,
          5323,
          5333,
          5347,
          5351,
          5381,
          5387,
          5393,
          5399,
          5407,
          5413,
          5417,
          5419,
          5431,
          5437,
          5441,
          5443,
          5449,
          5471,
          5477,
          5479,
          5483,
          5501,
          5503,
          5507,
          5519,
          5521,
          5527,
          5531,
          5557,
          5563,
          5569,
          5573,
          5581,
          5591,
          5623,
          5639,
          5641,
          5647,
          5651,
          5653,
          5657,
          5659,
          5669,
          5683,
          5689,
          5693,
          5701,
          5711,
          5717,
          5737,
          5741,
          5743,
          5749,
          5779,
          5783,
          5791,
          5801,
          5807,
          5813,
          5821,
          5827,
          5839,
          5843,
          5849,
          5851,
          5857,
          5861,
          5867,
          5869,
          5879,
          5881,
          5897,
          5903,
          5923,
          5927,
          5939,
          5953,
          5981,
          5987,
          6007,
          6011,
          6029,
          6037,
          6043,
          6047,
          6053,
          6067,
          6073,
          6079,
          6089,
          6091,
          6101,
          6113,
          6121,
          6131,
          6133,
          6143,
          6151,
          6163,
          6173,
          6197,
          6199,
          6203,
          6211,
          6217,
          6221,
          6229,
          6247,
          6257,
          6263,
          6269,
          6271,
          6277,
          6287,
          6299,
          6301,
          6311,
          6317,
          6323,
          6329,
          6337,
          6343,
          6353,
          6359,
          6361,
          6367,
          6373,
          6379,
          6389,
          6397,
          6421,
          6427,
          6449,
          6451,
          6469,
          6473,
          6481,
          6491,
          6521,
          6529,
          6547,
          6551,
          6553,
          6563,
          6569,
          6571,
          6577,
          6581,
          6599,
          6607,
          6619,
          6637,
          6653,
          6659,
          6661,
          6673,
          6679,
          6689,
          6691,
          6701,
          6703,
          6709,
          6719,
          6733,
          6737,
          6761,
          6763,
          6779,
          6781,
          6791,
          6793,
          6803,
          6823,
          6827,
          6829,
          6833,
          6841,
          6857,
          6863,
          6869,
          6871,
          6883,
          6899,
          6907,
          6911,
          6917,
          6947,
          6949,
          6959,
          6961,
          6967,
          6971,
          6977,
          6983,
          6991,
          6997,
          7001,
          7013,
          7019,
          7027,
          7039,
          7043,
          7057,
          7069,
          7079,
          7103,
          7109,
          7121,
          7127,
          7129,
          7151,
          7159,
          7177,
          7187,
          7193,
          7207,
          7211,
          7213,
          7219,
          7229,
          7237,
          7243,
          7247,
          7253,
          7283,
          7297,
          7307,
          7309,
          7321,
          7331,
          7333,
          7349,
          7351,
          7369,
          7393,
          7411,
          7417,
          7433,
          7451,
          7457,
          7459,
          7477,
          7481,
          7487,
          7489,
          7499,
          7507,
          7517,
          7523,
          7529,
          7537,
          7541,
          7547,
          7549,
          7559,
          7561,
          7573,
          7577,
          7583,
          7589,
          7591,
          7603,
          7607,
          7621,
          7639,
          7643,
          7649,
          7669,
          7673,
          7681,
          7687,
          7691,
          7699,
          7703,
          7717,
          7723,
          7727,
          7741,
          7753,
          7757,
          7759,
          7789,
          7793,
          7817,
          7823,
          7829,
          7841,
          7853,
          7867,
          7873,
          7877,
          7879,
          7883,
          7901,
          7907,
          7919,
          7927,
          7933,
          7937,
          7949,
          7951,
          7963,
          7993,
          8009,
          8011,
          8017,
          8039,
          8053,
          8059,
          8069,
          8081,
          8087,
          8089,
          8093,
          8101,
          8111,
          8117,
          8123,
          8147,
          8161,
          8167,
          8171,
          8179,
          8191,
          8209,
          8219,
          8221,
          8231,
          8233,
          8237,
          8243,
          8263,
          8269,
          8273,
          8287,
          8291,
          8293,
          8297,
          8311,
          8317,
          8329,
          8353,
          8363,
          8369,
          8377,
          8387,
          8389,
          8419,
          8423,
          8429,
          8431,
          8443,
          8447,
          8461,
          8467,
          8501,
          8513,
          8521,
          8527,
          8537,
          8539,
          8543,
          8563,
          8573,
          8581,
          8597,
          8599,
          8609,
          8623,
          8627,
          8629,
          8641,
          8647,
          8663,
          8669,
          8677,
          8681,
          8689,
          8693,
          8699,
          8707,
          8713,
          8719,
          8731,
          8737,
          8741,
          8747,
          8753,
          8761,
          8779,
          8783,
          8803,
          8807,
          8819,
          8821,
          8831,
          8837,
          8839,
          8849,
          8861,
          8863,
          8867,
          8887,
          8893,
          8923,
          8929,
          8933,
          8941,
          8951,
          8963,
          8969,
          8971,
          8999,
          9001,
          9007,
          9011,
          9013,
          9029,
          9041,
          9043,
          9049,
          9059,
          9067,
          9091,
          9103,
          9109,
          9127,
          9133,
          9137,
          9151,
          9157,
          9161,
          9173,
          9181,
          9187,
          9199,
          9203,
          9209,
          9221,
          9227,
          9239,
          9241,
          9257,
          9277,
          9281,
          9283,
          9293,
          9311,
          9319,
          9323,
          9337,
          9341,
          9343,
          9349,
          9371,
          9377,
          9391,
          9397,
          9403,
          9413,
          9419,
          9421,
          9431,
          9433,
          9437,
          9439,
          9461,
          9463,
          9467,
          9473,
          9479,
          9491,
          9497,
          9511,
          9521,
          9533,
          9539,
          9547,
          9551,
          9587,
          9601,
          9613,
          9619,
          9623,
          9629,
          9631,
          9643,
          9649,
          9661,
          9677,
          9679,
          9689,
          9697,
          9719,
          9721,
          9733,
          9739,
          9743,
          9749,
          9767,
          9769,
          9781,
          9787,
          9791,
          9803,
          9811,
          9817,
          9829,
          9833,
          9839,
          9851,
          9857,
          9859,
          9871,
          9883,
          9887,
          9901,
          9907,
          9923,
          9929,
          9931,
          9941,
          9949,
          9967,
          9973,
          10007
        ],
        emotions: [
          "love",
          "joy",
          "surprise",
          "anger",
          "sadness",
          "fear"
        ]
      };
      var o_hasOwnProperty = Object.prototype.hasOwnProperty;
      var o_keys = Object.keys || function(obj) {
        var result = [];
        for (var key in obj) {
          if (o_hasOwnProperty.call(obj, key)) {
            result.push(key);
          }
        }
        return result;
      };
      function _copyObject(source, target) {
        var keys = o_keys(source);
        var key;
        for (var i2 = 0, l = keys.length; i2 < l; i2++) {
          key = keys[i2];
          target[key] = source[key] || target[key];
        }
      }
      function _copyArray(source, target) {
        for (var i2 = 0, l = source.length; i2 < l; i2++) {
          target[i2] = source[i2];
        }
      }
      function copyObject(source, _target) {
        var isArray = Array.isArray(source);
        var target = _target || (isArray ? new Array(source.length) : {});
        if (isArray) {
          _copyArray(source, target);
        } else {
          _copyObject(source, target);
        }
        return target;
      }
      Chance2.prototype.get = function(name) {
        return copyObject(data[name]);
      };
      Chance2.prototype.mac_address = function(options) {
        options = initOptions(options);
        if (!options.separator) {
          options.separator = options.networkVersion ? "." : ":";
        }
        var mac_pool = "ABCDEF1234567890", mac = "";
        if (!options.networkVersion) {
          mac = this.n(this.string, 6, { pool: mac_pool, length: 2 }).join(options.separator);
        } else {
          mac = this.n(this.string, 3, { pool: mac_pool, length: 4 }).join(options.separator);
        }
        return mac;
      };
      Chance2.prototype.normal = function(options) {
        options = initOptions(options, { mean: 0, dev: 1, pool: [] });
        testRange(
          options.pool.constructor !== Array,
          "Chance: The pool option must be a valid array."
        );
        testRange(
          typeof options.mean !== "number",
          "Chance: Mean (mean) must be a number"
        );
        testRange(
          typeof options.dev !== "number",
          "Chance: Standard deviation (dev) must be a number"
        );
        if (options.pool.length > 0) {
          return this.normal_pool(options);
        }
        var s, u, v, norm, mean = options.mean, dev = options.dev;
        do {
          u = this.random() * 2 - 1;
          v = this.random() * 2 - 1;
          s = u * u + v * v;
        } while (s >= 1);
        norm = u * Math.sqrt(-2 * Math.log(s) / s);
        return dev * norm + mean;
      };
      Chance2.prototype.normal_pool = function(options) {
        var performanceCounter = 0;
        do {
          var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));
          if (idx < options.pool.length && idx >= 0) {
            return options.pool[idx];
          } else {
            performanceCounter++;
          }
        } while (performanceCounter < 100);
        throw new RangeError("Chance: Your pool is too small for the given mean and standard deviation. Please adjust.");
      };
      Chance2.prototype.radio = function(options) {
        options = initOptions(options, { side: "?" });
        var fl = "";
        switch (options.side.toLowerCase()) {
          case "east":
          case "e":
            fl = "W";
            break;
          case "west":
          case "w":
            fl = "K";
            break;
          default:
            fl = this.character({ pool: "KW" });
            break;
        }
        return fl + this.character({ alpha: true, casing: "upper" }) + this.character({ alpha: true, casing: "upper" }) + this.character({ alpha: true, casing: "upper" });
      };
      Chance2.prototype.set = function(name, values) {
        if (typeof name === "string") {
          data[name] = values;
        } else {
          data = copyObject(name, data);
        }
      };
      Chance2.prototype.tv = function(options) {
        return this.radio(options);
      };
      Chance2.prototype.cnpj = function() {
        var n = this.n(this.natural, 8, { max: 9 });
        var d1 = 2 + n[7] * 6 + n[6] * 7 + n[5] * 8 + n[4] * 9 + n[3] * 2 + n[2] * 3 + n[1] * 4 + n[0] * 5;
        d1 = 11 - d1 % 11;
        if (d1 >= 10) {
          d1 = 0;
        }
        var d2 = d1 * 2 + 3 + n[7] * 7 + n[6] * 8 + n[5] * 9 + n[4] * 2 + n[3] * 3 + n[2] * 4 + n[1] * 5 + n[0] * 6;
        d2 = 11 - d2 % 11;
        if (d2 >= 10) {
          d2 = 0;
        }
        return "" + n[0] + n[1] + "." + n[2] + n[3] + n[4] + "." + n[5] + n[6] + n[7] + "/0001-" + d1 + d2;
      };
      Chance2.prototype.emotion = function() {
        return this.pick(this.get("emotions"));
      };
      Chance2.prototype.mersenne_twister = function(seed) {
        return new MersenneTwister(seed);
      };
      Chance2.prototype.blueimp_md5 = function() {
        return new BlueImpMD5();
      };
      var MersenneTwister = function(seed) {
        if (seed === void 0) {
          seed = Math.floor(Math.random() * Math.pow(10, 13));
        }
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 2567483615;
        this.UPPER_MASK = 2147483648;
        this.LOWER_MASK = 2147483647;
        this.mt = new Array(this.N);
        this.mti = this.N + 1;
        this.init_genrand(seed);
      };
      MersenneTwister.prototype.init_genrand = function(s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
          s = this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30;
          this.mt[this.mti] = (((s & 4294901760) >>> 16) * 1812433253 << 16) + (s & 65535) * 1812433253 + this.mti;
          this.mt[this.mti] >>>= 0;
        }
      };
      MersenneTwister.prototype.init_by_array = function(init_key, key_length) {
        var i2 = 1, j = 0, k2, s;
        this.init_genrand(19650218);
        k2 = this.N > key_length ? this.N : key_length;
        for (; k2; k2--) {
          s = this.mt[i2 - 1] ^ this.mt[i2 - 1] >>> 30;
          this.mt[i2] = (this.mt[i2] ^ (((s & 4294901760) >>> 16) * 1664525 << 16) + (s & 65535) * 1664525) + init_key[j] + j;
          this.mt[i2] >>>= 0;
          i2++;
          j++;
          if (i2 >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i2 = 1;
          }
          if (j >= key_length) {
            j = 0;
          }
        }
        for (k2 = this.N - 1; k2; k2--) {
          s = this.mt[i2 - 1] ^ this.mt[i2 - 1] >>> 30;
          this.mt[i2] = (this.mt[i2] ^ (((s & 4294901760) >>> 16) * 1566083941 << 16) + (s & 65535) * 1566083941) - i2;
          this.mt[i2] >>>= 0;
          i2++;
          if (i2 >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i2 = 1;
          }
        }
        this.mt[0] = 2147483648;
      };
      MersenneTwister.prototype.genrand_int32 = function() {
        var y;
        var mag01 = new Array(0, this.MATRIX_A);
        if (this.mti >= this.N) {
          var kk;
          if (this.mti === this.N + 1) {
            this.init_genrand(5489);
          }
          for (kk = 0; kk < this.N - this.M; kk++) {
            y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
            this.mt[kk] = this.mt[kk + this.M] ^ y >>> 1 ^ mag01[y & 1];
          }
          for (; kk < this.N - 1; kk++) {
            y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
            this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ y >>> 1 ^ mag01[y & 1];
          }
          y = this.mt[this.N - 1] & this.UPPER_MASK | this.mt[0] & this.LOWER_MASK;
          this.mt[this.N - 1] = this.mt[this.M - 1] ^ y >>> 1 ^ mag01[y & 1];
          this.mti = 0;
        }
        y = this.mt[this.mti++];
        y ^= y >>> 11;
        y ^= y << 7 & 2636928640;
        y ^= y << 15 & 4022730752;
        y ^= y >>> 18;
        return y >>> 0;
      };
      MersenneTwister.prototype.genrand_int31 = function() {
        return this.genrand_int32() >>> 1;
      };
      MersenneTwister.prototype.genrand_real1 = function() {
        return this.genrand_int32() * (1 / 4294967295);
      };
      MersenneTwister.prototype.random = function() {
        return this.genrand_int32() * (1 / 4294967296);
      };
      MersenneTwister.prototype.genrand_real3 = function() {
        return (this.genrand_int32() + 0.5) * (1 / 4294967296);
      };
      MersenneTwister.prototype.genrand_res53 = function() {
        var a = this.genrand_int32() >>> 5, b = this.genrand_int32() >>> 6;
        return (a * 67108864 + b) * (1 / 9007199254740992);
      };
      var BlueImpMD5 = function() {
      };
      BlueImpMD5.prototype.VERSION = "1.0.1";
      BlueImpMD5.prototype.safe_add = function safe_add(x, y) {
        var lsw = (x & 65535) + (y & 65535), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      };
      BlueImpMD5.prototype.bit_roll = function(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      };
      BlueImpMD5.prototype.md5_cmn = function(q, a, b, x, s, t) {
        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
      };
      BlueImpMD5.prototype.md5_ff = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(b & c | ~b & d, a, b, x, s, t);
      };
      BlueImpMD5.prototype.md5_gg = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(b & d | c & ~d, a, b, x, s, t);
      };
      BlueImpMD5.prototype.md5_hh = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
      };
      BlueImpMD5.prototype.md5_ii = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(c ^ (b | ~d), a, b, x, s, t);
      };
      BlueImpMD5.prototype.binl_md5 = function(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[(len + 64 >>> 9 << 4) + 14] = len;
        var i2, olda, oldb, oldc, oldd, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
        for (i2 = 0; i2 < x.length; i2 += 16) {
          olda = a;
          oldb = b;
          oldc = c;
          oldd = d;
          a = this.md5_ff(a, b, c, d, x[i2], 7, -680876936);
          d = this.md5_ff(d, a, b, c, x[i2 + 1], 12, -389564586);
          c = this.md5_ff(c, d, a, b, x[i2 + 2], 17, 606105819);
          b = this.md5_ff(b, c, d, a, x[i2 + 3], 22, -1044525330);
          a = this.md5_ff(a, b, c, d, x[i2 + 4], 7, -176418897);
          d = this.md5_ff(d, a, b, c, x[i2 + 5], 12, 1200080426);
          c = this.md5_ff(c, d, a, b, x[i2 + 6], 17, -1473231341);
          b = this.md5_ff(b, c, d, a, x[i2 + 7], 22, -45705983);
          a = this.md5_ff(a, b, c, d, x[i2 + 8], 7, 1770035416);
          d = this.md5_ff(d, a, b, c, x[i2 + 9], 12, -1958414417);
          c = this.md5_ff(c, d, a, b, x[i2 + 10], 17, -42063);
          b = this.md5_ff(b, c, d, a, x[i2 + 11], 22, -1990404162);
          a = this.md5_ff(a, b, c, d, x[i2 + 12], 7, 1804603682);
          d = this.md5_ff(d, a, b, c, x[i2 + 13], 12, -40341101);
          c = this.md5_ff(c, d, a, b, x[i2 + 14], 17, -1502002290);
          b = this.md5_ff(b, c, d, a, x[i2 + 15], 22, 1236535329);
          a = this.md5_gg(a, b, c, d, x[i2 + 1], 5, -165796510);
          d = this.md5_gg(d, a, b, c, x[i2 + 6], 9, -1069501632);
          c = this.md5_gg(c, d, a, b, x[i2 + 11], 14, 643717713);
          b = this.md5_gg(b, c, d, a, x[i2], 20, -373897302);
          a = this.md5_gg(a, b, c, d, x[i2 + 5], 5, -701558691);
          d = this.md5_gg(d, a, b, c, x[i2 + 10], 9, 38016083);
          c = this.md5_gg(c, d, a, b, x[i2 + 15], 14, -660478335);
          b = this.md5_gg(b, c, d, a, x[i2 + 4], 20, -405537848);
          a = this.md5_gg(a, b, c, d, x[i2 + 9], 5, 568446438);
          d = this.md5_gg(d, a, b, c, x[i2 + 14], 9, -1019803690);
          c = this.md5_gg(c, d, a, b, x[i2 + 3], 14, -187363961);
          b = this.md5_gg(b, c, d, a, x[i2 + 8], 20, 1163531501);
          a = this.md5_gg(a, b, c, d, x[i2 + 13], 5, -1444681467);
          d = this.md5_gg(d, a, b, c, x[i2 + 2], 9, -51403784);
          c = this.md5_gg(c, d, a, b, x[i2 + 7], 14, 1735328473);
          b = this.md5_gg(b, c, d, a, x[i2 + 12], 20, -1926607734);
          a = this.md5_hh(a, b, c, d, x[i2 + 5], 4, -378558);
          d = this.md5_hh(d, a, b, c, x[i2 + 8], 11, -2022574463);
          c = this.md5_hh(c, d, a, b, x[i2 + 11], 16, 1839030562);
          b = this.md5_hh(b, c, d, a, x[i2 + 14], 23, -35309556);
          a = this.md5_hh(a, b, c, d, x[i2 + 1], 4, -1530992060);
          d = this.md5_hh(d, a, b, c, x[i2 + 4], 11, 1272893353);
          c = this.md5_hh(c, d, a, b, x[i2 + 7], 16, -155497632);
          b = this.md5_hh(b, c, d, a, x[i2 + 10], 23, -1094730640);
          a = this.md5_hh(a, b, c, d, x[i2 + 13], 4, 681279174);
          d = this.md5_hh(d, a, b, c, x[i2], 11, -358537222);
          c = this.md5_hh(c, d, a, b, x[i2 + 3], 16, -722521979);
          b = this.md5_hh(b, c, d, a, x[i2 + 6], 23, 76029189);
          a = this.md5_hh(a, b, c, d, x[i2 + 9], 4, -640364487);
          d = this.md5_hh(d, a, b, c, x[i2 + 12], 11, -421815835);
          c = this.md5_hh(c, d, a, b, x[i2 + 15], 16, 530742520);
          b = this.md5_hh(b, c, d, a, x[i2 + 2], 23, -995338651);
          a = this.md5_ii(a, b, c, d, x[i2], 6, -198630844);
          d = this.md5_ii(d, a, b, c, x[i2 + 7], 10, 1126891415);
          c = this.md5_ii(c, d, a, b, x[i2 + 14], 15, -1416354905);
          b = this.md5_ii(b, c, d, a, x[i2 + 5], 21, -57434055);
          a = this.md5_ii(a, b, c, d, x[i2 + 12], 6, 1700485571);
          d = this.md5_ii(d, a, b, c, x[i2 + 3], 10, -1894986606);
          c = this.md5_ii(c, d, a, b, x[i2 + 10], 15, -1051523);
          b = this.md5_ii(b, c, d, a, x[i2 + 1], 21, -2054922799);
          a = this.md5_ii(a, b, c, d, x[i2 + 8], 6, 1873313359);
          d = this.md5_ii(d, a, b, c, x[i2 + 15], 10, -30611744);
          c = this.md5_ii(c, d, a, b, x[i2 + 6], 15, -1560198380);
          b = this.md5_ii(b, c, d, a, x[i2 + 13], 21, 1309151649);
          a = this.md5_ii(a, b, c, d, x[i2 + 4], 6, -145523070);
          d = this.md5_ii(d, a, b, c, x[i2 + 11], 10, -1120210379);
          c = this.md5_ii(c, d, a, b, x[i2 + 2], 15, 718787259);
          b = this.md5_ii(b, c, d, a, x[i2 + 9], 21, -343485551);
          a = this.safe_add(a, olda);
          b = this.safe_add(b, oldb);
          c = this.safe_add(c, oldc);
          d = this.safe_add(d, oldd);
        }
        return [a, b, c, d];
      };
      BlueImpMD5.prototype.binl2rstr = function(input) {
        var i2, output = "";
        for (i2 = 0; i2 < input.length * 32; i2 += 8) {
          output += String.fromCharCode(input[i2 >> 5] >>> i2 % 32 & 255);
        }
        return output;
      };
      BlueImpMD5.prototype.rstr2binl = function(input) {
        var i2, output = [];
        output[(input.length >> 2) - 1] = void 0;
        for (i2 = 0; i2 < output.length; i2 += 1) {
          output[i2] = 0;
        }
        for (i2 = 0; i2 < input.length * 8; i2 += 8) {
          output[i2 >> 5] |= (input.charCodeAt(i2 / 8) & 255) << i2 % 32;
        }
        return output;
      };
      BlueImpMD5.prototype.rstr_md5 = function(s) {
        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));
      };
      BlueImpMD5.prototype.rstr_hmac_md5 = function(key, data2) {
        var i2, bkey = this.rstr2binl(key), ipad = [], opad = [], hash;
        ipad[15] = opad[15] = void 0;
        if (bkey.length > 16) {
          bkey = this.binl_md5(bkey, key.length * 8);
        }
        for (i2 = 0; i2 < 16; i2 += 1) {
          ipad[i2] = bkey[i2] ^ 909522486;
          opad[i2] = bkey[i2] ^ 1549556828;
        }
        hash = this.binl_md5(ipad.concat(this.rstr2binl(data2)), 512 + data2.length * 8);
        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));
      };
      BlueImpMD5.prototype.rstr2hex = function(input) {
        var hex_tab = "0123456789abcdef", output = "", x, i2;
        for (i2 = 0; i2 < input.length; i2 += 1) {
          x = input.charCodeAt(i2);
          output += hex_tab.charAt(x >>> 4 & 15) + hex_tab.charAt(x & 15);
        }
        return output;
      };
      BlueImpMD5.prototype.str2rstr_utf8 = function(input) {
        return unescape(encodeURIComponent(input));
      };
      BlueImpMD5.prototype.raw_md5 = function(s) {
        return this.rstr_md5(this.str2rstr_utf8(s));
      };
      BlueImpMD5.prototype.hex_md5 = function(s) {
        return this.rstr2hex(this.raw_md5(s));
      };
      BlueImpMD5.prototype.raw_hmac_md5 = function(k2, d) {
        return this.rstr_hmac_md5(this.str2rstr_utf8(k2), this.str2rstr_utf8(d));
      };
      BlueImpMD5.prototype.hex_hmac_md5 = function(k2, d) {
        return this.rstr2hex(this.raw_hmac_md5(k2, d));
      };
      BlueImpMD5.prototype.md5 = function(string, key, raw) {
        if (!key) {
          if (!raw) {
            return this.hex_md5(string);
          }
          return this.raw_md5(string);
        }
        if (!raw) {
          return this.hex_hmac_md5(key, string);
        }
        return this.raw_hmac_md5(key, string);
      };
      if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
          exports = module.exports = Chance2;
        }
        exports.Chance = Chance2;
      }
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return Chance2;
        });
      }
      if (typeof importScripts !== "undefined") {
        chance = new Chance2();
        self.Chance = Chance2;
      }
      if (typeof window === "object" && typeof window.document === "object") {
        window.Chance = Chance2;
        window.chance = new Chance2();
      }
    })();
  }
});

// node_modules/@mui/x-data-grid-generator/renderer/renderAvatar.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function renderAvatar(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime.jsx)(Avatar_default, {
    style: {
      backgroundColor: params.value.color
    },
    children: params.value.name.toUpperCase().substring(0, 1)
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderCountry.js
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var Country = React2.memo(function Country2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime2.jsxs)(Box_default, {
    sx: {
      width: "100%",
      display: "flex",
      alignItems: "center",
      "&  > img": {
        mr: 0.5,
        flexShrink: 0,
        width: "20px"
      }
    },
    children: [(0, import_jsx_runtime2.jsx)("img", {
      loading: "lazy",
      width: "20",
      src: `https://flagcdn.com/w20/${value.code.toLowerCase()}.png`,
      srcSet: `https://flagcdn.com/w40/${value.code.toLowerCase()}.png 2x`,
      alt: ""
    }), (0, import_jsx_runtime2.jsx)(Box_default, {
      component: "span",
      sx: {
        overflow: "hidden",
        textOverflow: "ellipsis"
      },
      children: value.label
    })]
  });
});
function renderCountry(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(Country, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEmail.js
var React4 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/renderer/renderLink.js
var React3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var Link = styled_default("a")({
  textOverflow: "ellipsis",
  whiteSpace: "nowrap",
  overflow: "hidden",
  color: "inherit"
});
var DemoLink = React3.memo(function DemoLink2(props) {
  const handleClick = (event) => {
    event.preventDefault();
    event.stopPropagation();
  };
  return (0, import_jsx_runtime3.jsx)(Link, {
    tabIndex: props.tabIndex,
    onClick: handleClick,
    href: props.href,
    children: props.children
  });
});
function renderLink(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime3.jsx)(DemoLink, {
    href: params.value,
    tabIndex: params.tabIndex,
    children: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEmail.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
function renderEmail(params) {
  const email = params.value ?? "";
  return (0, import_jsx_runtime4.jsx)(DemoLink, {
    href: `mailto:${email}`,
    tabIndex: params.tabIndex,
    children: email
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderIncoterm.js
var React5 = __toESM(require_react());
var import_Info = __toESM(require_Info());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var Incoterm = React5.memo(function Incoterm2(props) {
  const {
    value
  } = props;
  if (!value) {
    return null;
  }
  const valueStr = value.toString();
  const tooltip = valueStr.slice(valueStr.indexOf("(") + 1, valueStr.indexOf(")"));
  const code = valueStr.slice(0, valueStr.indexOf("(")).trim();
  return (0, import_jsx_runtime5.jsxs)(Box_default, {
    sx: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between"
    },
    children: [(0, import_jsx_runtime5.jsx)("span", {
      children: code
    }), (0, import_jsx_runtime5.jsx)(Tooltip_default, {
      title: tooltip,
      children: (0, import_jsx_runtime5.jsx)(import_Info.default, {
        sx: {
          color: "#2196f3",
          alignSelf: "center",
          ml: "8px"
        }
      })
    })]
  });
});
function renderIncoterm(params) {
  return (0, import_jsx_runtime5.jsx)(Incoterm, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderPnl.js
var React6 = __toESM(require_react());
init_clsx();
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var Value = styled_default("div")(({
  theme
}) => ({
  width: "100%",
  fontVariantNumeric: "tabular-nums",
  "&.positive": {
    color: theme.palette.mode === "light" ? theme.palette.success.dark : theme.palette.success.light
  },
  "&.negative": {
    color: theme.palette.mode === "light" ? theme.palette.error.dark : theme.palette.error.light
  }
}));
function pnlFormatter(value) {
  return value < 0 ? `(${Math.abs(value).toLocaleString()})` : value.toLocaleString();
}
var Pnl = React6.memo(function Pnl2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime6.jsx)(Value, {
    className: clsx_default(value > 0 && "positive", value < 0 && "negative"),
    children: pnlFormatter(value)
  });
});
function renderPnl(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime6.jsx)(Pnl, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderProgress.js
var React7 = __toESM(require_react());
init_clsx();
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var Center = styled_default("div")({
  height: "100%",
  display: "flex",
  alignItems: "center"
});
var Element = styled_default("div")(({
  theme
}) => ({
  border: `1px solid ${(theme.vars || theme).palette.divider}`,
  position: "relative",
  overflow: "hidden",
  width: "100%",
  height: 26,
  borderRadius: 2
}));
var Value2 = styled_default("div")({
  position: "absolute",
  lineHeight: "24px",
  width: "100%",
  display: "flex",
  justifyContent: "center"
});
var Bar = styled_default("div")({
  height: "100%",
  "&.low": {
    backgroundColor: "#f44336"
  },
  "&.medium": {
    backgroundColor: "#efbb5aa3"
  },
  "&.high": {
    backgroundColor: "#088208a3"
  }
});
var ProgressBar = React7.memo(function ProgressBar2(props) {
  const {
    value
  } = props;
  const valueInPercent = value * 100;
  return (0, import_jsx_runtime7.jsxs)(Element, {
    children: [(0, import_jsx_runtime7.jsx)(Value2, {
      children: `${valueInPercent.toLocaleString()} %`
    }), (0, import_jsx_runtime7.jsx)(Bar, {
      className: clsx_default(valueInPercent < 30 && "low", valueInPercent >= 30 && valueInPercent <= 70 && "medium", valueInPercent > 70 && "high"),
      style: {
        maxWidth: `${valueInPercent}%`
      }
    })]
  });
});
function renderProgress(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime7.jsx)(Center, {
    children: (0, import_jsx_runtime7.jsx)(ProgressBar, {
      value: params.value
    })
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderRating.js
var React8 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var RatingValue = React8.memo(function RatingValue2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime8.jsxs)(Box_default, {
    sx: {
      display: "flex",
      alignItems: "center",
      lineHeight: "24px",
      color: "text.secondary"
    },
    children: [(0, import_jsx_runtime8.jsx)(Rating_default, {
      value,
      sx: {
        mr: 1
      },
      readOnly: true
    }), " ", Math.round(Number(value) * 10) / 10]
  });
});
function renderRating(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime8.jsx)(RatingValue, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderStatus.js
var React9 = __toESM(require_react());
var import_ReportProblem = __toESM(require_ReportProblem());
var import_Info2 = __toESM(require_Info());
var import_Autorenew = __toESM(require_Autorenew());
var import_Done = __toESM(require_Done());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var StyledChip = styled_default(Chip_default)(({
  theme
}) => ({
  justifyContent: "left",
  "& .icon": {
    color: "inherit"
  },
  "&.Open": {
    color: (theme.vars || theme).palette.info.dark,
    border: `1px solid ${(theme.vars || theme).palette.info.main}`
  },
  "&.Filled": {
    color: (theme.vars || theme).palette.success.dark,
    border: `1px solid ${(theme.vars || theme).palette.success.main}`
  },
  "&.PartiallyFilled": {
    color: (theme.vars || theme).palette.warning.dark,
    border: `1px solid ${(theme.vars || theme).palette.warning.main}`
  },
  "&.Rejected": {
    color: (theme.vars || theme).palette.error.dark,
    border: `1px solid ${(theme.vars || theme).palette.error.main}`
  }
}));
var Status = React9.memo((props) => {
  const {
    status
  } = props;
  let icon = null;
  if (status === "Rejected") {
    icon = (0, import_jsx_runtime9.jsx)(import_ReportProblem.default, {
      className: "icon"
    });
  } else if (status === "Open") {
    icon = (0, import_jsx_runtime9.jsx)(import_Info2.default, {
      className: "icon"
    });
  } else if (status === "PartiallyFilled") {
    icon = (0, import_jsx_runtime9.jsx)(import_Autorenew.default, {
      className: "icon"
    });
  } else if (status === "Filled") {
    icon = (0, import_jsx_runtime9.jsx)(import_Done.default, {
      className: "icon"
    });
  }
  let label = status;
  if (status === "PartiallyFilled") {
    label = "Partially Filled";
  }
  return (0, import_jsx_runtime9.jsx)(StyledChip, {
    className: status,
    icon,
    size: "small",
    label,
    variant: "outlined"
  });
});
function renderStatus(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime9.jsx)(Status, {
    status: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderTotalPrice.js
var React10 = __toESM(require_react());
init_clsx();
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var Value3 = styled_default("div")(({
  theme
}) => ({
  width: "100%",
  height: "100%",
  lineHeight: "100%",
  paddingRight: 8,
  fontVariantNumeric: "tabular-nums",
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  "&.good": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.success.mainChannel} /  0.3)` : alpha(theme.palette.success.main, 0.3)
  },
  "&.bad": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.error.mainChannel} /  0.3)` : alpha(theme.palette.error.main, 0.3)
  }
}));
var currencyFormatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD"
});
var TotalPrice = React10.memo(function TotalPrice2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime10.jsx)(Value3, {
    className: clsx_default(value > 1e6 && "good", value < 1e6 && "bad"),
    children: currencyFormatter.format(value)
  });
});
function renderTotalPrice(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime10.jsx)(TotalPrice, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditCurrency.js
init_extends();
var React187 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/encoding/md5.js
var k = [];
var i = 0;
for (; i < 64; ) {
  k[i] = 0 | Math.sin(++i % Math.PI) * 4294967296;
}
function md5(s) {
  const words = [];
  let b, c, d, j = unescape(encodeURI(s)) + "", a = j.length;
  const h = [b = 1732584193, c = 4023233417, ~b, ~c];
  s = --a / 4 + 2 | 15;
  words[--s] = a * 8;
  for (; ~a; ) {
    words[a >> 2] |= j.charCodeAt(a) << 8 * a--;
  }
  for (i = j = 0; i < s; i += 16) {
    a = h;
    for (; j < 64; a = [d = a[3], b + ((d = a[0] + [b & c | ~b & d, d & b | ~d & c, b ^ c ^ d, c ^ (b | ~d)][a = j >> 4] + k[j] + ~~words[i | [j, 5 * j + 1, 3 * j + 5, 7 * j][a] & 15]) << (a = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][4 * a + j++ % 4]) | d >>> -a), b, c]) {
      b = a[1] | 0;
      c = a[2];
    }
    for (j = 4; j; )
      h[--j] += a[j];
  }
  for (s = ""; j < 32; ) {
    s += (h[j >> 3] >> (1 ^ j++) * 4 & 15).toString(16);
  }
  return s;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/encoding/base64.js
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var base64Decode = (input) => {
  let output = "";
  let chr1, chr2, chr3;
  let enc1, enc2, enc3, enc4;
  let i2 = 0;
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  while (i2 < input.length) {
    enc1 = _keyStr.indexOf(input.charAt(i2++));
    enc2 = _keyStr.indexOf(input.charAt(i2++));
    enc3 = _keyStr.indexOf(input.charAt(i2++));
    enc4 = _keyStr.indexOf(input.charAt(i2++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    output = output + String.fromCharCode(chr1);
    if (enc3 != 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 != 64) {
      output = output + String.fromCharCode(chr3);
    }
  }
  return output;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/utils/licenseScope.js
var LICENSE_SCOPES = ["pro", "premium"];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/utils/licensingModel.js
var LICENSING_MODELS = [
  /**
   * A license is outdated if the current version of the software was released after the expiry date of the license.
   * But the license can be used indefinitely with an older version of the software.
   */
  "perpetual",
  /**
   * On development, a license is outdated if the expiry date has been reached
   * On production, a license is outdated if the current version of the software was released after the expiry date of the license (see "perpetual")
   */
  "annual",
  /**
   * TODO 2025 remove, legacy name of annual.
   */
  "subscription"
];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/utils/licenseErrorMessageUtils.js
function showError(message) {
  console.error(["*************************************************************", "", ...message, "", "*************************************************************"].join("\n"));
}
function showInvalidLicenseKeyError() {
  showError(["MUI X: Invalid license key.", "", "Your MUI X license key format isn't valid. It could be because the license key is missing a character or has a typo.", "", "To solve the issue, you need to double check that `setLicenseKey()` is called with the right argument", "Please check the license key installation https://mui.com/r/x-license-key-installation."]);
}
function showLicenseKeyPlanMismatchError() {
  showError(["MUI X: License key plan mismatch.", "", "Your use of MUI X is not compatible with the plan of your license key. The feature you are trying to use is not included in the plan of your license key. This happens if you try to use `DataGridPremium` with a license key for the Pro plan.", "", "To solve the issue, you can upgrade your plan from Pro to Premium at https://mui.com/r/x-get-license?scope=premium.", "Of if you didn't intend to use Premium features, you can replace the import of `@mui/x-data-grid-premium` with `@mui/x-data-grid-pro`."]);
}
function showMissingLicenseKeyError({
  plan,
  packageName
}) {
  showError(["MUI X: Missing license key.", "", `The license key is missing. You might not be allowed to use \`${packageName}\` which is part of MUI X ${plan}.`, "", "To solve the issue, you can check the free trial conditions: https://mui.com/r/x-license-trial.", "If you are eligible no actions are required. If you are not eligible to the free trial, you need to purchase a license https://mui.com/r/x-get-license or stop using the software immediately."]);
}
function showExpiredPackageVersionError({
  packageName
}) {
  showError(["MUI X: Expired package version.", "", `You have installed a version of \`${packageName}\` that is outside of the maintenance plan of your license key. By default, commercial licenses provide access to new versions released during the first year after the purchase.`, "", "To solve the issue, you can renew your license https://mui.com/r/x-get-license or install an older version of the npm package that is compatible with your license key."]);
}
function showExpiredAnnualGraceLicenseKeyError({
  plan,
  licenseKey,
  expiryTimestamp
}) {
  showError(["MUI X: Expired license key.", "", `Your annual license key to use MUI X ${plan} in non-production environments has expired. If you are seeing this development console message, you might be close to breach the license terms by making direct or indirect changes to the frontend of an app that render a MUI X ${plan} component (more details in https://mui.com/r/x-license-annual).`, "", "To solve the problem you can either:", "", "- Renew your license https://mui.com/r/x-get-license and use the new key", `- Stop making changes to code depending directly or indirectly on MUI X ${plan}'s APIs`, "", "Note that your license is perpetual in production environments with any version released before your license term ends.", "", `- License key expiry timestamp: ${new Date(expiryTimestamp)}`, `- Installed license key: ${licenseKey}`, ""]);
}
function showExpiredAnnualLicenseKeyError({
  plan,
  licenseKey,
  expiryTimestamp
}) {
  throw new Error(["MUI X: Expired license key.", "", `Your annual license key to use MUI X ${plan} in non-production environments has expired. If you are seeing this development console message, you might be close to breach the license terms by making direct or indirect changes to the frontend of an app that render a MUI X ${plan} component (more details in https://mui.com/r/x-license-annual).`, "", "To solve the problem you can either:", "", "- Renew your license https://mui.com/r/x-get-license and use the new key", `- Stop making changes to code depending directly or indirectly on MUI X ${plan}'s APIs`, "", "Note that your license is perpetual in production environments with any version released before your license term ends.", "", `- License key expiry timestamp: ${new Date(expiryTimestamp)}`, `- Installed license key: ${licenseKey}`, ""].join("\n"));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/utils/licenseInfo.js
init_utils();
ponyfillGlobal_default.__MUI_LICENSE_INFO__ = ponyfillGlobal_default.__MUI_LICENSE_INFO__ || {
  key: void 0
};
var LicenseInfo = class _LicenseInfo {
  static getLicenseInfo() {
    return ponyfillGlobal_default.__MUI_LICENSE_INFO__;
  }
  static getLicenseKey() {
    return _LicenseInfo.getLicenseInfo().key;
  }
  static setLicenseKey(key) {
    const licenseInfo = _LicenseInfo.getLicenseInfo();
    licenseInfo.key = key;
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/utils/licenseStatus.js
var LICENSE_STATUS = function(LICENSE_STATUS2) {
  LICENSE_STATUS2["NotFound"] = "NotFound";
  LICENSE_STATUS2["Invalid"] = "Invalid";
  LICENSE_STATUS2["ExpiredAnnual"] = "ExpiredAnnual";
  LICENSE_STATUS2["ExpiredAnnualGrace"] = "ExpiredAnnualGrace";
  LICENSE_STATUS2["ExpiredVersion"] = "ExpiredVersion";
  LICENSE_STATUS2["Valid"] = "Valid";
  LICENSE_STATUS2["OutOfScope"] = "OutOfScope";
  return LICENSE_STATUS2;
}({});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/verifyLicense/verifyLicense.js
var expiryReg = /^.*EXPIRY=([0-9]+),.*$/;
var decodeLicenseVersion1 = (license) => {
  let expiryTimestamp;
  try {
    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);
    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {
      expiryTimestamp = null;
    }
  } catch (err) {
    expiryTimestamp = null;
  }
  return {
    scope: "pro",
    licensingModel: "perpetual",
    expiryTimestamp
  };
};
var decodeLicenseVersion2 = (license) => {
  const licenseInfo = {
    scope: null,
    licensingModel: null,
    expiryTimestamp: null
  };
  license.split(",").map((token) => token.split("=")).filter((el) => el.length === 2).forEach(([key, value]) => {
    if (key === "S") {
      licenseInfo.scope = value;
    }
    if (key === "LM") {
      licenseInfo.licensingModel = value;
    }
    if (key === "E") {
      const expiryTimestamp = parseInt(value, 10);
      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {
        licenseInfo.expiryTimestamp = expiryTimestamp;
      }
    }
  });
  return licenseInfo;
};
var decodeLicense = (encodedLicense) => {
  const license = base64Decode(encodedLicense);
  if (license.includes("KEYVERSION=1")) {
    return decodeLicenseVersion1(license);
  }
  if (license.includes("KV=2")) {
    return decodeLicenseVersion2(license);
  }
  return null;
};
function verifyLicense({
  releaseInfo: releaseInfo2,
  licenseKey,
  acceptedScopes
}) {
  if (!releaseInfo2) {
    throw new Error("MUI X: The release information is missing. Not able to validate license.");
  }
  if (!licenseKey) {
    return {
      status: LICENSE_STATUS.NotFound
    };
  }
  const hash = licenseKey.substr(0, 32);
  const encoded = licenseKey.substr(32);
  if (hash !== md5(encoded)) {
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  const license = decodeLicense(encoded);
  if (license == null) {
    console.error("MUI X: Error checking license. Key version not found!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {
    console.error("MUI X: Error checking license. Licensing model not found or invalid!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (license.expiryTimestamp == null) {
    console.error("MUI X: Error checking license. Expiry timestamp not found or invalid!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (license.licensingModel === "perpetual" || false) {
    const pkgTimestamp = parseInt(base64Decode(releaseInfo2), 10);
    if (Number.isNaN(pkgTimestamp)) {
      throw new Error("MUI X: The release information is invalid. Not able to validate license.");
    }
    if (license.expiryTimestamp < pkgTimestamp) {
      return {
        status: LICENSE_STATUS.ExpiredVersion
      };
    }
  } else if (license.licensingModel === "subscription" || license.licensingModel === "annual") {
    if ((/* @__PURE__ */ new Date()).getTime() > license.expiryTimestamp) {
      if (
        // 30 days grace
        (/* @__PURE__ */ new Date()).getTime() < license.expiryTimestamp + 1e3 * 3600 * 24 * 30 || false
      ) {
        return {
          status: LICENSE_STATUS.ExpiredAnnualGrace,
          meta: {
            expiryTimestamp: license.expiryTimestamp,
            licenseKey
          }
        };
      }
      return {
        status: LICENSE_STATUS.ExpiredAnnual,
        meta: {
          expiryTimestamp: license.expiryTimestamp,
          licenseKey
        }
      };
    }
  }
  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {
    console.error("Error checking license. scope not found or invalid!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (!acceptedScopes.includes(license.scope)) {
    return {
      status: LICENSE_STATUS.OutOfScope
    };
  }
  return {
    status: LICENSE_STATUS.Valid
  };
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/useLicenseVerifier/useLicenseVerifier.js
init_extends();
var React12 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/Unstable_LicenseInfoProvider/MuiLicenseInfoContext.js
var React11 = __toESM(require_react());
var MuiLicenseInfoContext = React11.createContext({
  key: void 0
});
if (true) {
  MuiLicenseInfoContext.displayName = "MuiLicenseInfoContext";
}
var MuiLicenseInfoContext_default = MuiLicenseInfoContext;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/useLicenseVerifier/useLicenseVerifier.js
var sharedLicenseStatuses = {};
function useLicenseVerifier(packageName, releaseInfo2) {
  const {
    key: contextKey
  } = React12.useContext(MuiLicenseInfoContext_default);
  return React12.useMemo(() => {
    const licenseKey = contextKey ?? LicenseInfo.getLicenseKey();
    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {
      return sharedLicenseStatuses[packageName].licenseVerifier;
    }
    const acceptedScopes = packageName.includes("premium") ? ["premium"] : ["pro", "premium"];
    const plan = packageName.includes("premium") ? "Premium" : "Pro";
    const licenseStatus = verifyLicense({
      releaseInfo: releaseInfo2,
      licenseKey,
      acceptedScopes
    });
    const fullPackageName = `@mui/${packageName}`;
    if (licenseStatus.status === LICENSE_STATUS.Valid) {
    } else if (licenseStatus.status === LICENSE_STATUS.Invalid) {
      showInvalidLicenseKeyError();
    } else if (licenseStatus.status === LICENSE_STATUS.OutOfScope) {
      showLicenseKeyPlanMismatchError();
    } else if (licenseStatus.status === LICENSE_STATUS.NotFound) {
      showMissingLicenseKeyError({
        plan,
        packageName: fullPackageName
      });
    } else if (licenseStatus.status === LICENSE_STATUS.ExpiredAnnualGrace) {
      showExpiredAnnualGraceLicenseKeyError(_extends({
        plan
      }, licenseStatus.meta));
    } else if (licenseStatus.status === LICENSE_STATUS.ExpiredAnnual) {
      showExpiredAnnualLicenseKeyError(_extends({
        plan
      }, licenseStatus.meta));
    } else if (licenseStatus.status === LICENSE_STATUS.ExpiredVersion) {
      showExpiredPackageVersionError({
        packageName: fullPackageName
      });
    } else if (true) {
      throw new Error("missing status handler");
    }
    sharedLicenseStatuses[packageName] = {
      key: licenseKey,
      licenseVerifier: licenseStatus
    };
    return licenseStatus;
  }, [packageName, releaseInfo2, contextKey]);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/Watermark/Watermark.js
var React13 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
function getLicenseErrorMessage(licenseStatus) {
  switch (licenseStatus) {
    case LICENSE_STATUS.ExpiredAnnualGrace:
    case LICENSE_STATUS.ExpiredAnnual:
      return "MUI X Expired license key";
    case LICENSE_STATUS.ExpiredVersion:
      return "MUI X Expired package version";
    case LICENSE_STATUS.Invalid:
      return "MUI X Invalid license key";
    case LICENSE_STATUS.OutOfScope:
      return "MUI X License key plan mismatch";
    case LICENSE_STATUS.NotFound:
      return "MUI X Missing license key";
    default:
      throw new Error("Unhandled MUI X license status.");
  }
}
function Watermark(props) {
  const {
    packageName,
    releaseInfo: releaseInfo2
  } = props;
  const licenseStatus = useLicenseVerifier(packageName, releaseInfo2);
  if (licenseStatus.status === LICENSE_STATUS.Valid) {
    return null;
  }
  return (0, import_jsx_runtime11.jsx)("div", {
    style: {
      position: "absolute",
      pointerEvents: "none",
      color: "#8282829e",
      zIndex: 1e5,
      width: "100%",
      textAlign: "center",
      bottom: "50%",
      right: 0,
      letterSpacing: 5,
      fontSize: 24
    },
    children: getLicenseErrorMessage(licenseStatus.status)
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-license/Unstable_LicenseInfoProvider/LicenseInfoProvider.js
var React14 = __toESM(require_react());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScroller.js
init_extends();
var React58 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridScrollArea.js
init_extends();
var React44 = __toESM(require_react());
init_clsx();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
var React16 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/context/GridRootPropsContext.js
var React15 = __toESM(require_react());
var GridRootPropsContext = React15.createContext(void 0);
if (true) {
  GridRootPropsContext.displayName = "GridRootPropsContext";
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
var useGridRootProps2 = () => {
  const contextValue = React16.useContext(GridRootPropsContext);
  if (!contextValue) {
    throw new Error("MUI X: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");
  }
  return contextValue;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/constants/localeTextConstants.js
var GRID_DEFAULT_LOCALE_TEXT2 = {
  // Root
  noRowsLabel: "No rows",
  noResultsOverlayLabel: "No results found.",
  // Density selector toolbar button text
  toolbarDensity: "Density",
  toolbarDensityLabel: "Density",
  toolbarDensityCompact: "Compact",
  toolbarDensityStandard: "Standard",
  toolbarDensityComfortable: "Comfortable",
  // Columns selector toolbar button text
  toolbarColumns: "Columns",
  toolbarColumnsLabel: "Select columns",
  // Filters toolbar button text
  toolbarFilters: "Filters",
  toolbarFiltersLabel: "Show filters",
  toolbarFiltersTooltipHide: "Hide filters",
  toolbarFiltersTooltipShow: "Show filters",
  toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
  // Quick filter toolbar field
  toolbarQuickFilterPlaceholder: "Search…",
  toolbarQuickFilterLabel: "Search",
  toolbarQuickFilterDeleteIconLabel: "Clear",
  // Export selector toolbar button text
  toolbarExport: "Export",
  toolbarExportLabel: "Export",
  toolbarExportCSV: "Download as CSV",
  toolbarExportPrint: "Print",
  toolbarExportExcel: "Download as Excel",
  // Columns management text
  columnsManagementSearchTitle: "Search",
  columnsManagementNoColumns: "No columns",
  columnsManagementShowHideAllText: "Show/Hide All",
  columnsManagementReset: "Reset",
  // Filter panel text
  filterPanelAddFilter: "Add filter",
  filterPanelRemoveAll: "Remove all",
  filterPanelDeleteIconLabel: "Delete",
  filterPanelLogicOperator: "Logic operator",
  filterPanelOperator: "Operator",
  filterPanelOperatorAnd: "And",
  filterPanelOperatorOr: "Or",
  filterPanelColumns: "Columns",
  filterPanelInputLabel: "Value",
  filterPanelInputPlaceholder: "Filter value",
  // Filter operators text
  filterOperatorContains: "contains",
  filterOperatorEquals: "equals",
  filterOperatorStartsWith: "starts with",
  filterOperatorEndsWith: "ends with",
  filterOperatorIs: "is",
  filterOperatorNot: "is not",
  filterOperatorAfter: "is after",
  filterOperatorOnOrAfter: "is on or after",
  filterOperatorBefore: "is before",
  filterOperatorOnOrBefore: "is on or before",
  filterOperatorIsEmpty: "is empty",
  filterOperatorIsNotEmpty: "is not empty",
  filterOperatorIsAnyOf: "is any of",
  "filterOperator=": "=",
  "filterOperator!=": "!=",
  "filterOperator>": ">",
  "filterOperator>=": ">=",
  "filterOperator<": "<",
  "filterOperator<=": "<=",
  // Header filter operators text
  headerFilterOperatorContains: "Contains",
  headerFilterOperatorEquals: "Equals",
  headerFilterOperatorStartsWith: "Starts with",
  headerFilterOperatorEndsWith: "Ends with",
  headerFilterOperatorIs: "Is",
  headerFilterOperatorNot: "Is not",
  headerFilterOperatorAfter: "Is after",
  headerFilterOperatorOnOrAfter: "Is on or after",
  headerFilterOperatorBefore: "Is before",
  headerFilterOperatorOnOrBefore: "Is on or before",
  headerFilterOperatorIsEmpty: "Is empty",
  headerFilterOperatorIsNotEmpty: "Is not empty",
  headerFilterOperatorIsAnyOf: "Is any of",
  "headerFilterOperator=": "Equals",
  "headerFilterOperator!=": "Not equals",
  "headerFilterOperator>": "Greater than",
  "headerFilterOperator>=": "Greater than or equal to",
  "headerFilterOperator<": "Less than",
  "headerFilterOperator<=": "Less than or equal to",
  // Filter values text
  filterValueAny: "any",
  filterValueTrue: "true",
  filterValueFalse: "false",
  // Column menu text
  columnMenuLabel: "Menu",
  columnMenuShowColumns: "Show columns",
  columnMenuManageColumns: "Manage columns",
  columnMenuFilter: "Filter",
  columnMenuHideColumn: "Hide column",
  columnMenuUnsort: "Unsort",
  columnMenuSortAsc: "Sort by ASC",
  columnMenuSortDesc: "Sort by DESC",
  // Column header text
  columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
  columnHeaderFiltersLabel: "Show filters",
  columnHeaderSortIconLabel: "Sort",
  // Rows selected footer text
  footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rows selected` : `${count.toLocaleString()} row selected`,
  // Total row amount footer text
  footerTotalRows: "Total Rows:",
  // Total visible row amount footer text
  footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,
  // Checkbox selection text
  checkboxSelectionHeaderName: "Checkbox selection",
  checkboxSelectionSelectAllRows: "Select all rows",
  checkboxSelectionUnselectAllRows: "Unselect all rows",
  checkboxSelectionSelectRow: "Select row",
  checkboxSelectionUnselectRow: "Unselect row",
  // Boolean cell text
  booleanCellTrueLabel: "yes",
  booleanCellFalseLabel: "no",
  // Actions cell more text
  actionsCellMore: "more",
  // Column pinning text
  pinToLeft: "Pin to left",
  pinToRight: "Pin to right",
  unpin: "Unpin",
  // Tree Data
  treeDataGroupingHeaderName: "Group",
  treeDataExpand: "see children",
  treeDataCollapse: "hide children",
  // Grouping columns
  groupingColumnHeaderName: "Group",
  groupColumn: (name) => `Group by ${name}`,
  unGroupColumn: (name) => `Stop grouping by ${name}`,
  // Master/detail
  detailPanelToggle: "Detail panel toggle",
  expandDetailPanel: "Expand",
  collapseDetailPanel: "Collapse",
  // Used core components translation keys
  MuiTablePagination: {},
  // Row reordering text
  rowReorderingHeaderName: "Row reordering",
  // Aggregation
  aggregationMenuItemHeader: "Aggregation",
  aggregationFunctionLabelSum: "sum",
  aggregationFunctionLabelAvg: "avg",
  aggregationFunctionLabelMin: "min",
  aggregationFunctionLabelMax: "max",
  aggregationFunctionLabelSize: "size"
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/constants/gridClasses.js
init_utils();
function getDataGridUtilityClass2(slot) {
  return generateUtilityClass("MuiDataGrid", slot);
}
var gridClasses2 = generateUtilityClasses("MuiDataGrid", ["actionsCell", "aggregationColumnHeader", "aggregationColumnHeader--alignLeft", "aggregationColumnHeader--alignCenter", "aggregationColumnHeader--alignRight", "aggregationColumnHeaderLabel", "autoHeight", "autosizing", "booleanCell", "cell--editable", "cell--editing", "cell--flex", "cell--textCenter", "cell--textLeft", "cell--textRight", "cell--rangeTop", "cell--rangeBottom", "cell--rangeLeft", "cell--rangeRight", "cell--pinnedLeft", "cell--pinnedRight", "cell--selectionMode", "cell", "cellCheckbox", "cellEmpty", "cellSkeleton", "cellOffsetLeft", "checkboxInput", "columnHeader", "columnHeader--alignCenter", "columnHeader--alignLeft", "columnHeader--alignRight", "columnHeader--dragging", "columnHeader--moving", "columnHeader--numeric", "columnHeader--sortable", "columnHeader--sorted", "columnHeader--filtered", "columnHeader--pinnedLeft", "columnHeader--pinnedRight", "columnHeader--last", "columnHeaderCheckbox", "columnHeaderDraggableContainer", "columnHeaderTitle", "columnHeaderTitleContainer", "columnHeaderTitleContainerContent", "columnHeader--filledGroup", "columnHeader--emptyGroup", "columnHeaders", "columnSeparator--resizable", "columnSeparator--resizing", "columnSeparator--sideLeft", "columnSeparator--sideRight", "columnSeparator", "columnsManagement", "columnsManagementRow", "columnsManagementHeader", "columnsManagementFooter", "container--top", "container--bottom", "detailPanel", "detailPanels", "detailPanelToggleCell", "detailPanelToggleCell--expanded", "footerCell", "panel", "panelHeader", "panelWrapper", "panelContent", "panelFooter", "paper", "editBooleanCell", "editInputCell", "filler", "filler--borderTop", "filler--pinnedLeft", "filler--pinnedRight", "filterForm", "filterFormDeleteIcon", "filterFormLogicOperatorInput", "filterFormColumnInput", "filterFormOperatorInput", "filterFormValueInput", "filterIcon", "footerContainer", "headerFilterRow", "iconButtonContainer", "iconSeparator", "main", "main--hasPinnedRight", "menu", "menuIcon", "menuIconButton", "menuOpen", "menuList", "overlay", "overlayWrapper", "overlayWrapperInner", "root", "root--densityStandard", "root--densityComfortable", "root--densityCompact", "root--disableUserSelection", "row", "row--editable", "row--editing", "row--firstVisible", "row--lastVisible", "row--dragging", "row--dynamicHeight", "row--detailPanelExpanded", "rowReorderCellPlaceholder", "rowCount", "rowReorderCellContainer", "rowReorderCell", "rowReorderCell--draggable", "scrollArea--left", "scrollArea--right", "scrollArea", "scrollbar", "scrollbar--vertical", "scrollbar--horizontal", "scrollbarFiller", "scrollbarFiller--header", "scrollbarFiller--borderTop", "scrollbarFiller--pinnedRight", "selectedRowCount", "sortIcon", "toolbarContainer", "toolbarFilterList", "virtualScroller", "virtualScrollerContent", "virtualScrollerContent--overflowed", "virtualScrollerRenderZone", "pinnedColumns", "withVerticalBorder", "withBorderColor", "cell--withRightBorder", "cell--withLeftBorder", "columnHeader--withRightBorder", "columnHeader--withLeftBorder", "treeDataGroupingCell", "treeDataGroupingCellToggle", "groupingCriteriaCell", "groupingCriteriaCellToggle", "pinnedRows", "pinnedRows--top", "pinnedRows--bottom", "pinnedRowsRenderZone"]);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
var React18 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridApiContext.js
var React17 = __toESM(require_react());
var GridApiContext = React17.createContext(void 0);
if (true) {
  GridApiContext.displayName = "GridApiContext";
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
function useGridApiContext() {
  const apiRef2 = React18.useContext(GridApiContext);
  if (apiRef2 === void 0) {
    throw new Error(["MUI X: Could not find the data grid context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
  }
  return apiRef2;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
var React19 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js
var CLEANUP_TIMER_LOOP_MILLIS = 1e3;
var TimerBasedCleanupTracking = class {
  constructor(timeout = CLEANUP_TIMER_LOOP_MILLIS) {
    this.timeouts = /* @__PURE__ */ new Map();
    this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;
    this.cleanupTimeout = timeout;
  }
  register(object, unsubscribe, unregisterToken) {
    if (!this.timeouts) {
      this.timeouts = /* @__PURE__ */ new Map();
    }
    const timeout = setTimeout(() => {
      if (typeof unsubscribe === "function") {
        unsubscribe();
      }
      this.timeouts.delete(unregisterToken.cleanupToken);
    }, this.cleanupTimeout);
    this.timeouts.set(unregisterToken.cleanupToken, timeout);
  }
  unregister(unregisterToken) {
    const timeout = this.timeouts.get(unregisterToken.cleanupToken);
    if (timeout) {
      this.timeouts.delete(unregisterToken.cleanupToken);
      clearTimeout(timeout);
    }
  }
  reset() {
    if (this.timeouts) {
      this.timeouts.forEach((value, key) => {
        this.unregister({
          cleanupToken: key
        });
      });
      this.timeouts = void 0;
    }
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js
var FinalizationRegistryBasedCleanupTracking = class {
  constructor() {
    this.registry = new FinalizationRegistry((unsubscribe) => {
      if (typeof unsubscribe === "function") {
        unsubscribe();
      }
    });
  }
  register(object, unsubscribe, unregisterToken) {
    this.registry.register(object, unsubscribe, unregisterToken);
  }
  unregister(unregisterToken) {
    this.registry.unregister(unregisterToken);
  }
  // eslint-disable-next-line class-methods-use-this
  reset() {
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
var GridSignature = function(GridSignature2) {
  GridSignature2["DataGrid"] = "DataGrid";
  GridSignature2["DataGridPro"] = "DataGridPro";
  return GridSignature2;
}(GridSignature || {});
var ObjectToBeRetainedByReact = class {
};
function createUseGridApiEventHandler(registryContainer2) {
  let cleanupTokensCounter = 0;
  return function useGridApiEventHandler3(apiRef2, eventName, handler, options) {
    if (registryContainer2.registry === null) {
      registryContainer2.registry = typeof FinalizationRegistry !== "undefined" ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();
    }
    const [objectRetainedByReact] = React19.useState(new ObjectToBeRetainedByReact());
    const subscription = React19.useRef(null);
    const handlerRef = React19.useRef();
    handlerRef.current = handler;
    const cleanupTokenRef = React19.useRef(null);
    if (!subscription.current && handlerRef.current) {
      const enhancedHandler = (params, event, details) => {
        var _a;
        if (!event.defaultMuiPrevented) {
          (_a = handlerRef.current) == null ? void 0 : _a.call(handlerRef, params, event, details);
        }
      };
      subscription.current = apiRef2.current.subscribeEvent(eventName, enhancedHandler, options);
      cleanupTokensCounter += 1;
      cleanupTokenRef.current = {
        cleanupToken: cleanupTokensCounter
      };
      registryContainer2.registry.register(
        objectRetainedByReact,
        // The callback below will be called once this reference stops being retained
        () => {
          var _a;
          (_a = subscription.current) == null ? void 0 : _a.call(subscription);
          subscription.current = null;
          cleanupTokenRef.current = null;
        },
        cleanupTokenRef.current
      );
    } else if (!handlerRef.current && subscription.current) {
      subscription.current();
      subscription.current = null;
      if (cleanupTokenRef.current) {
        registryContainer2.registry.unregister(cleanupTokenRef.current);
        cleanupTokenRef.current = null;
      }
    }
    React19.useEffect(() => {
      if (!subscription.current && handlerRef.current) {
        const enhancedHandler = (params, event, details) => {
          var _a;
          if (!event.defaultMuiPrevented) {
            (_a = handlerRef.current) == null ? void 0 : _a.call(handlerRef, params, event, details);
          }
        };
        subscription.current = apiRef2.current.subscribeEvent(eventName, enhancedHandler, options);
      }
      if (cleanupTokenRef.current && registryContainer2.registry) {
        registryContainer2.registry.unregister(cleanupTokenRef.current);
        cleanupTokenRef.current = null;
      }
      return () => {
        var _a;
        (_a = subscription.current) == null ? void 0 : _a.call(subscription);
        subscription.current = null;
      };
    }, [apiRef2, eventName, options]);
  };
}
var registryContainer = {
  registry: null
};
var useGridApiEventHandler2 = createUseGridApiEventHandler(registryContainer);
var optionsSubscriberOptions = {
  isFirst: true
};
function useGridApiOptionHandler(apiRef2, eventName, handler) {
  useGridApiEventHandler2(apiRef2, eventName, handler, optionsSubscriberOptions);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js
var React20 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useLazyRef.js
init_useLazyRef();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useOnMount.js
init_useOnMount();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/warning.js
var buildWarning = (message, gravity = "warning") => {
  let alreadyWarned = false;
  const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
  return () => {
    if (!alreadyWarned) {
      alreadyWarned = true;
      if (gravity === "error") {
        console.error(cleanMessage);
      } else {
        console.warn(cleanMessage);
      }
    }
  };
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/fastObjectShallowCompare.js
var is = Object.is;
function fastObjectShallowCompare(a, b) {
  if (a === b) {
    return true;
  }
  if (!(a instanceof Object) || !(b instanceof Object)) {
    return false;
  }
  let aLength = 0;
  let bLength = 0;
  for (const key in a) {
    aLength += 1;
    if (!is(a[key], b[key])) {
      return false;
    }
    if (!(key in b)) {
      return false;
    }
  }
  for (const _ in b) {
    bLength += 1;
  }
  return aLength === bLength;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js
var stateNotInitializedWarning = buildWarning(["MUI X: `useGridSelector` has been called before the initialization of the state.", "This hook can only be used inside the context of the grid."]);
function isOutputSelector(selector) {
  return selector.acceptsApiRef;
}
function applySelector(apiRef2, selector) {
  if (isOutputSelector(selector)) {
    return selector(apiRef2);
  }
  return selector(apiRef2.current.state);
}
var defaultCompare = Object.is;
var objectShallowCompare = fastObjectShallowCompare;
var createRefs = () => ({
  state: null,
  equals: null,
  selector: null
});
var useGridSelector2 = (apiRef2, selector, equals = defaultCompare) => {
  if (true) {
    if (!apiRef2.current.state) {
      stateNotInitializedWarning();
    }
  }
  const refs = useLazyRef(createRefs);
  const didInit = refs.current.selector !== null;
  const [state, setState] = React20.useState(
    // We don't use an initialization function to avoid allocations
    didInit ? null : applySelector(apiRef2, selector)
  );
  refs.current.state = state;
  refs.current.equals = equals;
  refs.current.selector = selector;
  useOnMount(() => {
    return apiRef2.current.store.subscribe(() => {
      const newState = applySelector(apiRef2, refs.current.selector);
      if (!refs.current.equals(refs.current.state, newState)) {
        refs.current.state = newState;
        setState(newState);
      }
    });
  });
  return state;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js
var gridDimensionsSelector2 = (state) => state.dimensions;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/createSelector.js
var cache = /* @__PURE__ */ new WeakMap();
var missingInstanceIdWarning = buildWarning(["MUI X: A selector was called without passing the instance ID, which may impact the performance of the grid.", "To fix, call it with `apiRef`, for example `mySelector(apiRef)`, or pass the instance ID explicitly, for example `mySelector(state, apiRef.current.instanceId)`."]);
function checkIsAPIRef(value) {
  return "current" in value && "instanceId" in value.current;
}
var DEFAULT_INSTANCE_ID = {
  id: "default"
};
var createSelector3 = (a, b, c, d, e, f, ...rest) => {
  if (rest.length > 0) {
    throw new Error("Unsupported number of selectors");
  }
  let selector;
  if (a && b && c && d && e && f) {
    selector = (stateOrApiRef, instanceIdParam) => {
      const isAPIRef = checkIsAPIRef(stateOrApiRef);
      const instanceId = instanceIdParam ?? (isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID);
      const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
      const va = a(state, instanceId);
      const vb = b(state, instanceId);
      const vc = c(state, instanceId);
      const vd = d(state, instanceId);
      const ve = e(state, instanceId);
      return f(va, vb, vc, vd, ve);
    };
  } else if (a && b && c && d && e) {
    selector = (stateOrApiRef, instanceIdParam) => {
      const isAPIRef = checkIsAPIRef(stateOrApiRef);
      const instanceId = instanceIdParam ?? (isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID);
      const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
      const va = a(state, instanceId);
      const vb = b(state, instanceId);
      const vc = c(state, instanceId);
      const vd = d(state, instanceId);
      return e(va, vb, vc, vd);
    };
  } else if (a && b && c && d) {
    selector = (stateOrApiRef, instanceIdParam) => {
      const isAPIRef = checkIsAPIRef(stateOrApiRef);
      const instanceId = instanceIdParam ?? (isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID);
      const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
      const va = a(state, instanceId);
      const vb = b(state, instanceId);
      const vc = c(state, instanceId);
      return d(va, vb, vc);
    };
  } else if (a && b && c) {
    selector = (stateOrApiRef, instanceIdParam) => {
      const isAPIRef = checkIsAPIRef(stateOrApiRef);
      const instanceId = instanceIdParam ?? (isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID);
      const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
      const va = a(state, instanceId);
      const vb = b(state, instanceId);
      return c(va, vb);
    };
  } else if (a && b) {
    selector = (stateOrApiRef, instanceIdParam) => {
      const isAPIRef = checkIsAPIRef(stateOrApiRef);
      const instanceId = instanceIdParam ?? (isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID);
      const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
      const va = a(state, instanceId);
      return b(va);
    };
  } else {
    throw new Error("Missing arguments");
  }
  selector.acceptsApiRef = true;
  return selector;
};
var createSelectorMemoized = (...args) => {
  const selector = (stateOrApiRef, instanceId) => {
    const isAPIRef = checkIsAPIRef(stateOrApiRef);
    const cacheKey = isAPIRef ? stateOrApiRef.current.instanceId : instanceId ?? DEFAULT_INSTANCE_ID;
    const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
    if (true) {
      if (cacheKey.id === "default") {
        missingInstanceIdWarning();
      }
    }
    const cacheArgsInit = cache.get(cacheKey);
    const cacheArgs = cacheArgsInit ?? /* @__PURE__ */ new Map();
    const cacheFn = cacheArgs == null ? void 0 : cacheArgs.get(args);
    if (cacheArgs && cacheFn) {
      return cacheFn(state, cacheKey);
    }
    const fn = createSelector(...args);
    if (!cacheArgsInit) {
      cache.set(cacheKey, cacheArgs);
    }
    cacheArgs.set(args, fn);
    return fn(state, cacheKey);
  };
  selector.acceptsApiRef = true;
  return selector;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js
var COMPACT_DENSITY_FACTOR = 0.7;
var COMFORTABLE_DENSITY_FACTOR = 1.3;
var DENSITY_FACTORS = {
  compact: COMPACT_DENSITY_FACTOR,
  comfortable: COMFORTABLE_DENSITY_FACTOR,
  standard: 1
};
var gridDensitySelector = (state) => state.density;
var gridDensityFactorSelector = createSelector3(gridDensitySelector, (density) => DENSITY_FACTORS[density]);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.js
var GridPinnedColumnPosition = function(GridPinnedColumnPosition2) {
  GridPinnedColumnPosition2["LEFT"] = "left";
  GridPinnedColumnPosition2["RIGHT"] = "right";
  return GridPinnedColumnPosition2;
}({});
var EMPTY_PINNED_COLUMN_FIELDS = {
  left: [],
  right: []
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/gridCoreSelector.js
var gridThemeSelector = (state) => state.theme;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js
var gridColumnsStateSelector = (state) => state.columns;
var gridColumnFieldsSelector = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.orderedFields);
var gridColumnLookupSelector2 = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.lookup);
var gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector2, (allFields, lookup) => allFields.map((field) => lookup[field]));
var gridColumnVisibilityModelSelector = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.columnVisibilityModel);
var gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter((column) => columnVisibilityModel[column.field] !== false));
var gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, (visibleColumns) => visibleColumns.map((column) => column.field));
var gridPinnedColumnsSelector = (state) => state.pinnedColumns;
var gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridThemeSelector, (columnsState, model, visibleColumnFields, theme) => {
  const visiblePinnedFields = filterVisibleColumns(model, visibleColumnFields, theme.direction === "rtl");
  const visiblePinnedColumns = {
    left: visiblePinnedFields.left.map((field) => columnsState.lookup[field]),
    right: visiblePinnedFields.right.map((field) => columnsState.lookup[field])
  };
  return visiblePinnedColumns;
});
function filterVisibleColumns(pinnedColumns, columns, invert) {
  var _a, _b;
  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {
    return EMPTY_PINNED_COLUMN_FIELDS;
  }
  if (((_a = pinnedColumns.left) == null ? void 0 : _a.length) === 0 && ((_b = pinnedColumns.right) == null ? void 0 : _b.length) === 0) {
    return EMPTY_PINNED_COLUMN_FIELDS;
  }
  const filter2 = (newPinnedColumns, remainingColumns) => {
    if (!Array.isArray(newPinnedColumns)) {
      return [];
    }
    return newPinnedColumns.filter((field) => remainingColumns.includes(field));
  };
  const leftPinnedColumns = filter2(pinnedColumns.left, columns);
  const columnsWithoutLeftPinnedColumns = columns.filter(
    // Filter out from the remaining columns those columns already pinned to the left
    (field) => !leftPinnedColumns.includes(field)
  );
  const rightPinnedColumns = filter2(pinnedColumns.right, columnsWithoutLeftPinnedColumns);
  if (invert) {
    return {
      left: rightPinnedColumns,
      right: leftPinnedColumns
    };
  }
  return {
    left: leftPinnedColumns,
    right: rightPinnedColumns
  };
}
var gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, (visibleColumns) => {
  const positions = [];
  let currentPosition = 0;
  for (let i2 = 0; i2 < visibleColumns.length; i2 += 1) {
    positions.push(currentPosition);
    currentPosition += visibleColumns[i2].computedWidth;
  }
  return positions;
});
var gridColumnsTotalWidthSelector = createSelector3(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {
  const colCount = visibleColumns.length;
  if (colCount === 0) {
    return 0;
  }
  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;
});
var gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, (columns) => columns.filter((col) => col.filterable));
var gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, (columns) => columns.reduce((acc, col) => {
  if (col.filterable) {
    acc[col.field] = col;
  }
  return acc;
}, {}));
var gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, (columns) => columns.some((column) => column.colSpan !== void 0));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useTimeout.js
init_useTimeout();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.js
init_objectWithoutPropertiesLoose();
init_extends();
var React21 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _excluded = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "isValidating", "debounceMs", "isProcessingProps", "onValueChange"];
var useUtilityClasses = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["editInputCell"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridEditInputCellRoot = styled_default(InputBase_default, {
  name: "MuiDataGrid",
  slot: "EditInputCell",
  overridesResolver: (props, styles) => styles.editInputCell
})(({
  theme
}) => _extends({}, theme.typography.body2, {
  padding: "1px 0",
  "& input": {
    padding: "0 16px",
    height: "100%"
  }
}));
var GridEditInputCell = React21.forwardRef((props, ref) => {
  const rootProps = useGridRootProps2();
  const {
    id,
    value,
    field,
    colDef,
    hasFocus,
    debounceMs = 200,
    isProcessingProps,
    onValueChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const apiRef2 = useGridApiContext();
  const inputRef = React21.useRef();
  const [valueState, setValueState] = React21.useState(value);
  const classes2 = useUtilityClasses(rootProps);
  const handleChange = React21.useCallback(async (event) => {
    const newValue = event.target.value;
    if (onValueChange) {
      await onValueChange(event, newValue);
    }
    const column = apiRef2.current.getColumn(field);
    let parsedValue = newValue;
    if (column.valueParser) {
      parsedValue = column.valueParser(newValue, apiRef2.current.getRow(id), column, apiRef2);
    }
    setValueState(parsedValue);
    apiRef2.current.setEditCellValue({
      id,
      field,
      value: parsedValue,
      debounceMs,
      unstable_skipValueParser: true
    }, event);
  }, [apiRef2, debounceMs, field, id, onValueChange]);
  const meta = apiRef2.current.unstable_getEditCellMeta(id, field);
  React21.useEffect(() => {
    if ((meta == null ? void 0 : meta.changeReason) !== "debouncedSetEditCellValue") {
      setValueState(value);
    }
  }, [meta, value]);
  useEnhancedEffect_default(() => {
    if (hasFocus) {
      inputRef.current.focus();
    }
  }, [hasFocus]);
  return (0, import_jsx_runtime13.jsx)(GridEditInputCellRoot, _extends({
    ref,
    inputRef,
    className: classes2.root,
    ownerState: rootProps,
    fullWidth: true,
    type: colDef.type === "number" ? colDef.type : "text",
    value: valueState ?? "",
    onChange: handleChange,
    endAdornment: isProcessingProps ? (0, import_jsx_runtime13.jsx)(rootProps.slots.loadIcon, {
      fontSize: "small",
      color: "action"
    }) : void 0
  }, other));
});
true ? GridEditInputCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types.default.object.isRequired,
  debounceMs: import_prop_types.default.number,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types.default.bool,
  isProcessingProps: import_prop_types.default.bool,
  isValidating: import_prop_types.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types.default.any
} : void 0;
var renderEditInputCell = (params) => (0, import_jsx_runtime13.jsx)(GridEditInputCell, _extends({}, params));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js
init_extends();
var sortModelDisableMultiColumnsSortingWarning = buildWarning(["MUI X: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
var sanitizeSortModel = (model, disableMultipleColumnsSorting) => {
  if (disableMultipleColumnsSorting && model.length > 1) {
    if (true) {
      sortModelDisableMultiColumnsSortingWarning();
    }
    return [model[0]];
  }
  return model;
};
var mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => (state) => _extends({}, state, {
  sorting: _extends({}, state.sorting, {
    sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
  })
});
var isDesc = (direction) => direction === "desc";
var parseSortItem = (sortItem, apiRef2) => {
  const column = apiRef2.current.getColumn(sortItem.field);
  if (!column || sortItem.sort === null) {
    return null;
  }
  let comparator;
  if (column.getSortComparator) {
    comparator = column.getSortComparator(sortItem.sort);
  } else {
    comparator = isDesc(sortItem.sort) ? (...args) => -1 * column.sortComparator(...args) : column.sortComparator;
  }
  if (!comparator) {
    return null;
  }
  const getSortCellParams = (id) => ({
    id,
    field: column.field,
    rowNode: apiRef2.current.getRowNode(id),
    value: apiRef2.current.getCellValue(id, column.field),
    api: apiRef2.current
  });
  return {
    getSortCellParams,
    comparator
  };
};
var compareRows = (parsedSortItems, row1, row2) => {
  return parsedSortItems.reduce((res, item, index) => {
    if (res !== 0) {
      return res;
    }
    const sortCellParams1 = row1.params[index];
    const sortCellParams2 = row2.params[index];
    res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
    return res;
  }, 0);
};
var buildAggregatedSortingApplier = (sortModel, apiRef2) => {
  const comparatorList = sortModel.map((item) => parseSortItem(item, apiRef2)).filter((comparator) => !!comparator);
  if (comparatorList.length === 0) {
    return null;
  }
  return (rowList) => rowList.map((node) => ({
    node,
    params: comparatorList.map((el) => el.getSortCellParams(node.id))
  })).sort((a, b) => compareRows(comparatorList, a, b)).map((row) => row.node.id);
};
var getNextGridSortDirection = (sortingOrder, current) => {
  const currentIdx = sortingOrder.indexOf(current);
  if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
    return sortingOrder[0];
  }
  return sortingOrder[currentIdx + 1];
};
var gridNillComparator = (v1, v2) => {
  if (v1 == null && v2 != null) {
    return -1;
  }
  if (v2 == null && v1 != null) {
    return 1;
  }
  if (v1 == null && v2 == null) {
    return 0;
  }
  return null;
};
var collator = new Intl.Collator();
var gridStringOrNumberComparator = (value1, value2) => {
  const nillResult = gridNillComparator(value1, value2);
  if (nillResult !== null) {
    return nillResult;
  }
  if (typeof value1 === "string") {
    return collator.compare(value1.toString(), value2.toString());
  }
  return value1 - value2;
};
var gridNumberComparator = (value1, value2) => {
  const nillResult = gridNillComparator(value1, value2);
  if (nillResult !== null) {
    return nillResult;
  }
  return Number(value1) - Number(value2);
};
var gridDateComparator = (value1, value2) => {
  const nillResult = gridNillComparator(value1, value2);
  if (nillResult !== null) {
    return nillResult;
  }
  if (value1 > value2) {
    return 1;
  }
  if (value1 < value2) {
    return -1;
  }
  return 0;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.js
init_extends();
init_objectWithoutPropertiesLoose();
var React22 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var _excluded2 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "tabIndex", "disabled", "isFilterActive", "clearButton", "InputProps", "variant"];
function GridFilterInputValue(props) {
  var _a;
  const {
    item,
    applyValue,
    type,
    apiRef: apiRef2,
    focusElementRef,
    tabIndex,
    disabled,
    clearButton,
    InputProps,
    variant = "standard"
  } = props, others = _objectWithoutPropertiesLoose(props, _excluded2);
  const filterTimeout = useTimeout();
  const [filterValueState, setFilterValueState] = React22.useState(item.value ?? "");
  const [applying, setIsApplying] = React22.useState(false);
  const id = useId();
  const rootProps = useGridRootProps2();
  const onFilterChange = React22.useCallback((event) => {
    const {
      value
    } = event.target;
    setFilterValueState(String(value));
    setIsApplying(true);
    filterTimeout.start(rootProps.filterDebounceMs, () => {
      const newItem = _extends({}, item, {
        value,
        fromInput: id
      });
      applyValue(newItem);
      setIsApplying(false);
    });
  }, [id, applyValue, item, rootProps.filterDebounceMs, filterTimeout]);
  React22.useEffect(() => {
    const itemPlusTag = item;
    if (itemPlusTag.fromInput !== id || item.value === void 0) {
      setFilterValueState(String(item.value ?? ""));
    }
  }, [id, item]);
  return (0, import_jsx_runtime14.jsx)(rootProps.slots.baseTextField, _extends({
    id,
    label: apiRef2.current.getLocaleText("filterPanelInputLabel"),
    placeholder: apiRef2.current.getLocaleText("filterPanelInputPlaceholder"),
    value: filterValueState,
    onChange: onFilterChange,
    variant,
    type: type || "text",
    InputProps: _extends({}, applying || clearButton ? {
      endAdornment: applying ? (0, import_jsx_runtime14.jsx)(rootProps.slots.loadIcon, {
        fontSize: "small",
        color: "action"
      }) : clearButton
    } : {}, {
      disabled
    }, InputProps, {
      inputProps: _extends({
        tabIndex
      }, InputProps == null ? void 0 : InputProps.inputProps)
    }),
    InputLabelProps: {
      shrink: true
    },
    inputRef: focusElementRef
  }, others, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField));
}
true ? GridFilterInputValue.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types2.default.shape({
    current: import_prop_types2.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types2.default.func.isRequired,
  clearButton: import_prop_types2.default.node,
  focusElementRef: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types2.default.bool,
  item: import_prop_types2.default.shape({
    field: import_prop_types2.default.string.isRequired,
    id: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
    operator: import_prop_types2.default.string.isRequired,
    value: import_prop_types2.default.any
  }).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/utils.js
function isNumber2(value) {
  return typeof value === "number" && !Number.isNaN(value);
}
function isFunction(value) {
  return typeof value === "function";
}
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function localStorageAvailable() {
  try {
    const key = "__some_random_key_you_are_not_going_to_use__";
    window.localStorage.setItem(key, key);
    window.localStorage.removeItem(key);
    return true;
  } catch (err) {
    return false;
  }
}
function escapeRegExp(value) {
  return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
var clamp = (value, min, max) => Math.max(min, Math.min(max, value));
function range(from, to) {
  return Array.from({
    length: to - from
  }).map((_, i2) => from + i2);
}
function isDeepEqual3(a, b) {
  if (a === b) {
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    if (a.constructor !== b.constructor) {
      return false;
    }
    if (Array.isArray(a)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i2 = 0; i2 < length2; i2 += 1) {
        if (!isDeepEqual3(a[i2], b[i2])) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Map && b instanceof Map) {
      if (a.size !== b.size) {
        return false;
      }
      const entriesA = Array.from(a.entries());
      for (let i2 = 0; i2 < entriesA.length; i2 += 1) {
        if (!b.has(entriesA[i2][0])) {
          return false;
        }
      }
      for (let i2 = 0; i2 < entriesA.length; i2 += 1) {
        const entryA = entriesA[i2];
        if (!isDeepEqual3(entryA[1], b.get(entryA[0]))) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Set && b instanceof Set) {
      if (a.size !== b.size) {
        return false;
      }
      const entries = Array.from(a.entries());
      for (let i2 = 0; i2 < entries.length; i2 += 1) {
        if (!b.has(entries[i2][0])) {
          return false;
        }
      }
      return true;
    }
    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i2 = 0; i2 < length2; i2 += 1) {
        if (a[i2] !== b[i2]) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === RegExp) {
      return a.source === b.source && a.flags === b.flags;
    }
    if (a.valueOf !== Object.prototype.valueOf) {
      return a.valueOf() === b.valueOf();
    }
    if (a.toString !== Object.prototype.toString) {
      return a.toString() === b.toString();
    }
    const keys = Object.keys(a);
    const length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (let i2 = 0; i2 < length; i2 += 1) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i2])) {
        return false;
      }
    }
    for (let i2 = 0; i2 < length; i2 += 1) {
      const key = keys[i2];
      if (!isDeepEqual3(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function mulberry32(a) {
  return () => {
    let t = a += 1831565813;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  };
}
function randomNumberBetween(seed, min, max) {
  const random2 = mulberry32(seed);
  return () => min + (max - min) * random2();
}
function deepClone(obj) {
  if (typeof structuredClone === "function") {
    return structuredClone(obj);
  }
  return JSON.parse(JSON.stringify(obj));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleValue.js
init_extends();
init_objectWithoutPropertiesLoose();
var React23 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var _excluded3 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant"];
function GridFilterInputMultipleValue(props) {
  const {
    item,
    applyValue,
    type,
    apiRef: apiRef2,
    focusElementRef,
    color,
    error,
    helperText,
    size,
    variant
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const TextFieldProps = {
    color,
    error,
    helperText,
    size,
    variant
  };
  const [filterValueState, setFilterValueState] = React23.useState(item.value || []);
  const id = useId();
  const rootProps = useGridRootProps2();
  React23.useEffect(() => {
    const itemValue = item.value ?? [];
    setFilterValueState(itemValue.map(String));
  }, [item.value]);
  const handleChange = React23.useCallback((event, value) => {
    setFilterValueState(value.map(String));
    applyValue(_extends({}, item, {
      value: [...value]
    }));
  }, [applyValue, item]);
  return (0, import_jsx_runtime15.jsx)(Autocomplete_default, _extends({
    multiple: true,
    freeSolo: true,
    options: [],
    filterOptions: (options, params) => {
      const {
        inputValue
      } = params;
      return inputValue == null || inputValue === "" ? [] : [inputValue];
    },
    id,
    value: filterValueState,
    onChange: handleChange,
    renderTags: (value, getTagProps) => value.map((option, index) => (0, import_jsx_runtime15.jsx)(rootProps.slots.baseChip, _extends({
      variant: "outlined",
      size: "small",
      label: option
    }, getTagProps({
      index
    })))),
    renderInput: (params) => {
      var _a;
      return (0, import_jsx_runtime15.jsx)(rootProps.slots.baseTextField, _extends({}, params, {
        label: apiRef2.current.getLocaleText("filterPanelInputLabel"),
        placeholder: apiRef2.current.getLocaleText("filterPanelInputPlaceholder"),
        InputLabelProps: _extends({}, params.InputLabelProps, {
          shrink: true
        }),
        inputRef: focusElementRef,
        type: type || "text"
      }, TextFieldProps, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField));
    }
  }, other));
}
true ? GridFilterInputMultipleValue.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types3.default.shape({
    current: import_prop_types3.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types3.default.func.isRequired,
  focusElementRef: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]),
  item: import_prop_types3.default.shape({
    field: import_prop_types3.default.string.isRequired,
    id: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
    operator: import_prop_types3.default.string.isRequired,
    value: import_prop_types3.default.any
  }).isRequired,
  type: import_prop_types3.default.oneOf(["number", "text"])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/models/gridEditRowModel.js
var GridEditModes = function(GridEditModes2) {
  GridEditModes2["Cell"] = "cell";
  GridEditModes2["Row"] = "row";
  return GridEditModes2;
}(GridEditModes || {});
var GridCellModes = function(GridCellModes2) {
  GridCellModes2["Edit"] = "edit";
  GridCellModes2["View"] = "view";
  return GridCellModes2;
}(GridCellModes || {});
var GridRowModes = function(GridRowModes2) {
  GridRowModes2["Edit"] = "edit";
  GridRowModes2["View"] = "view";
  return GridRowModes2;
}(GridRowModes || {});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/models/gridFilterItem.js
var GridLogicOperator2 = function(GridLogicOperator3) {
  GridLogicOperator3["And"] = "and";
  GridLogicOperator3["Or"] = "or";
  return GridLogicOperator3;
}(GridLogicOperator2 || {});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/models/params/gridEditCellParams.js
var GridCellEditStartReasons = function(GridCellEditStartReasons2) {
  GridCellEditStartReasons2["enterKeyDown"] = "enterKeyDown";
  GridCellEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
  GridCellEditStartReasons2["printableKeyDown"] = "printableKeyDown";
  GridCellEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
  GridCellEditStartReasons2["pasteKeyDown"] = "pasteKeyDown";
  return GridCellEditStartReasons2;
}(GridCellEditStartReasons || {});
var GridCellEditStopReasons = function(GridCellEditStopReasons2) {
  GridCellEditStopReasons2["cellFocusOut"] = "cellFocusOut";
  GridCellEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
  GridCellEditStopReasons2["enterKeyDown"] = "enterKeyDown";
  GridCellEditStopReasons2["tabKeyDown"] = "tabKeyDown";
  GridCellEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
  return GridCellEditStopReasons2;
}(GridCellEditStopReasons || {});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/models/params/gridRowParams.js
var GridRowEditStartReasons = function(GridRowEditStartReasons2) {
  GridRowEditStartReasons2["enterKeyDown"] = "enterKeyDown";
  GridRowEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
  GridRowEditStartReasons2["printableKeyDown"] = "printableKeyDown";
  GridRowEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
  return GridRowEditStartReasons2;
}(GridRowEditStartReasons || {});
var GridRowEditStopReasons = function(GridRowEditStopReasons2) {
  GridRowEditStopReasons2["rowFocusOut"] = "rowFocusOut";
  GridRowEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
  GridRowEditStopReasons2["enterKeyDown"] = "enterKeyDown";
  GridRowEditStopReasons2["tabKeyDown"] = "tabKeyDown";
  GridRowEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
  return GridRowEditStopReasons2;
}(GridRowEditStopReasons || {});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/models/gridColumnGrouping.js
function isLeaf(node) {
  return node.field !== void 0;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js
var getDefaultGridFilterModel = () => ({
  items: [],
  logicOperator: GridLogicOperator2.And,
  quickFilterValues: [],
  quickFilterLogicOperator: GridLogicOperator2.And
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/getPublicApiRef.js
function getPublicApiRef(apiRef2) {
  return {
    current: apiRef2.current.getPublicApi()
  };
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js
var hasEval;
function getHasEval() {
  if (hasEval !== void 0) {
    return hasEval;
  }
  try {
    hasEval = new Function("return true")();
  } catch (_) {
    hasEval = false;
  }
  return hasEval;
}
var cleanFilterItem = (item, apiRef2) => {
  const cleanItem = _extends({}, item);
  if (cleanItem.id == null) {
    cleanItem.id = Math.round(Math.random() * 1e5);
  }
  if (cleanItem.operator == null) {
    const column = gridColumnLookupSelector2(apiRef2)[cleanItem.field];
    cleanItem.operator = column && column.filterOperators[0].value;
  }
  return cleanItem;
};
var filterModelDisableMultiColumnsFilteringWarning = buildWarning(["MUI X: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
var filterModelMissingItemIdWarning = buildWarning("MUI X: The `id` field is required on `filterModel.items` when you use multiple filters.", "error");
var filterModelMissingItemOperatorWarning = buildWarning("MUI X: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.", "error");
var sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef2) => {
  const hasSeveralItems = model.items.length > 1;
  let items;
  if (hasSeveralItems && disableMultipleColumnsFiltering) {
    filterModelDisableMultiColumnsFilteringWarning();
    items = [model.items[0]];
  } else {
    items = model.items;
  }
  const hasItemsWithoutIds = hasSeveralItems && items.some((item) => item.id == null);
  const hasItemWithoutOperator = items.some((item) => item.operator == null);
  if (hasItemsWithoutIds) {
    filterModelMissingItemIdWarning();
  }
  if (hasItemWithoutOperator) {
    filterModelMissingItemOperatorWarning();
  }
  if (hasItemWithoutOperator || hasItemsWithoutIds) {
    return _extends({}, model, {
      items: items.map((item) => cleanFilterItem(item, apiRef2))
    });
  }
  if (model.items !== items) {
    return _extends({}, model, {
      items
    });
  }
  return model;
};
var mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef2) => (filteringState) => _extends({}, filteringState, {
  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef2)
});
var removeDiacritics = (value) => {
  if (typeof value === "string") {
    return value.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }
  return value;
};
var getFilterCallbackFromItem = (filterItem, apiRef2) => {
  var _a;
  if (!filterItem.field || !filterItem.operator) {
    return null;
  }
  const column = apiRef2.current.getColumn(filterItem.field);
  if (!column) {
    return null;
  }
  let parsedValue;
  if (column.valueParser) {
    const parser = column.valueParser;
    parsedValue = Array.isArray(filterItem.value) ? (_a = filterItem.value) == null ? void 0 : _a.map((x) => parser(x, void 0, column, apiRef2)) : parser(filterItem.value, void 0, column, apiRef2);
  } else {
    parsedValue = filterItem.value;
  }
  const {
    ignoreDiacritics
  } = apiRef2.current.rootProps;
  if (ignoreDiacritics) {
    parsedValue = removeDiacritics(parsedValue);
  }
  const newFilterItem = _extends({}, filterItem, {
    value: parsedValue
  });
  const filterOperators = column.filterOperators;
  if (!(filterOperators == null ? void 0 : filterOperators.length)) {
    throw new Error(`MUI X: No filter operators found for column '${column.field}'.`);
  }
  const filterOperator = filterOperators.find((operator) => operator.value === newFilterItem.operator);
  if (!filterOperator) {
    throw new Error(`MUI X: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);
  }
  const publicApiRef = getPublicApiRef(apiRef2);
  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);
  if (typeof applyFilterOnRow !== "function") {
    return null;
  }
  return {
    item: newFilterItem,
    fn: (row) => {
      let value = apiRef2.current.getRowValue(row, column);
      if (ignoreDiacritics) {
        value = removeDiacritics(value);
      }
      return applyFilterOnRow(value, row, column, publicApiRef);
    }
  };
};
var filterItemsApplierId = 1;
var buildAggregatedFilterItemsApplier = (filterModel, apiRef2, disableEval) => {
  const {
    items
  } = filterModel;
  const appliers = items.map((item) => getFilterCallbackFromItem(item, apiRef2)).filter((callback) => !!callback);
  if (appliers.length === 0) {
    return null;
  }
  if (disableEval || !getHasEval()) {
    return (row, shouldApplyFilter) => {
      const resultPerItemId = {};
      for (let i2 = 0; i2 < appliers.length; i2 += 1) {
        const applier = appliers[i2];
        if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {
          resultPerItemId[applier.item.id] = applier.fn(row);
        }
      }
      return resultPerItemId;
    };
  }
  const filterItemCore = new Function("appliers", "row", "shouldApplyFilter", `"use strict";
${appliers.map((applier, i2) => `const shouldApply${i2} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join("\n")}

const result$$ = {
${appliers.map((applier, i2) => `  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i2} ? false : appliers[${i2}].fn(row),`).join("\n")}
};

return result$$;`.replaceAll("$$", String(filterItemsApplierId)));
  filterItemsApplierId += 1;
  const filterItem = (row, shouldApplyItem) => filterItemCore(appliers, row, shouldApplyItem);
  return filterItem;
};
var shouldQuickFilterExcludeHiddenColumns = (filterModel) => {
  return filterModel.quickFilterExcludeHiddenColumns ?? true;
};
var buildAggregatedQuickFilterApplier = (filterModel, apiRef2) => {
  var _a;
  const quickFilterValues = ((_a = filterModel.quickFilterValues) == null ? void 0 : _a.filter(Boolean)) ?? [];
  if (quickFilterValues.length === 0) {
    return null;
  }
  const columnFields = shouldQuickFilterExcludeHiddenColumns(filterModel) ? gridVisibleColumnFieldsSelector(apiRef2) : gridColumnFieldsSelector(apiRef2);
  const appliersPerField = [];
  const {
    ignoreDiacritics
  } = apiRef2.current.rootProps;
  const publicApiRef = getPublicApiRef(apiRef2);
  columnFields.forEach((field) => {
    const column = apiRef2.current.getColumn(field);
    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;
    if (getApplyQuickFilterFn) {
      appliersPerField.push({
        column,
        appliers: quickFilterValues.map((quickFilterValue) => {
          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;
          return {
            fn: getApplyQuickFilterFn(value, column, publicApiRef)
          };
        })
      });
    }
  });
  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {
    const result = {};
    outer:
      for (let v = 0; v < quickFilterValues.length; v += 1) {
        const filterValue = quickFilterValues[v];
        for (let i2 = 0; i2 < appliersPerField.length; i2 += 1) {
          const {
            column,
            appliers
          } = appliersPerField[i2];
          const {
            field
          } = column;
          if (shouldApplyFilter && !shouldApplyFilter(field)) {
            continue;
          }
          const applier = appliers[v];
          let value = apiRef2.current.getRowValue(row, column);
          if (applier.fn === null) {
            continue;
          }
          if (ignoreDiacritics) {
            value = removeDiacritics(value);
          }
          const isMatching = applier.fn(value, row, column, publicApiRef);
          if (isMatching) {
            result[filterValue] = true;
            continue outer;
          }
        }
        result[filterValue] = false;
      }
    return result;
  };
};
var buildAggregatedFilterApplier = (filterModel, apiRef2, disableEval) => {
  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef2, disableEval);
  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef2);
  return function isRowMatchingFilters(row, shouldApplyFilter, result) {
    result.passingFilterItems = (isRowMatchingFilterItems == null ? void 0 : isRowMatchingFilterItems(row, shouldApplyFilter)) ?? null;
    result.passingQuickFilterValues = (isRowMatchingQuickFilter == null ? void 0 : isRowMatchingQuickFilter(row, shouldApplyFilter)) ?? null;
  };
};
var isNotNull = (result) => result != null;
var filterModelItems = (cache2, apiRef2, items) => {
  if (!cache2.cleanedFilterItems) {
    cache2.cleanedFilterItems = items.filter((item) => getFilterCallbackFromItem(item, apiRef2) !== null);
  }
  return cache2.cleanedFilterItems;
};
var passFilterLogic2 = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef2, cache2) => {
  const cleanedFilterItems = filterModelItems(cache2, apiRef2, filterModel.items);
  const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);
  const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);
  if (cleanedFilterItemResults.length > 0) {
    const filterItemPredicate = (item) => {
      return cleanedFilterItemResults.some((filterItemResult) => filterItemResult[item.id]);
    };
    const logicOperator = filterModel.logicOperator ?? getDefaultGridFilterModel().logicOperator;
    if (logicOperator === GridLogicOperator2.And) {
      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);
      if (!passesAllFilters) {
        return false;
      }
    } else {
      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);
      if (!passesSomeFilters) {
        return false;
      }
    }
  }
  if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {
    const quickFilterValuePredicate = (value) => {
      return cleanedQuickFilterResults.some((quickFilterValueResult) => quickFilterValueResult[value]);
    };
    const quickFilterLogicOperator = filterModel.quickFilterLogicOperator ?? getDefaultGridFilterModel().quickFilterLogicOperator;
    if (quickFilterLogicOperator === GridLogicOperator2.And) {
      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);
      if (!passesAllQuickFilterValues) {
        return false;
      }
    } else {
      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);
      if (!passesSomeQuickFilterValues) {
        return false;
      }
    }
  }
  return true;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridStringOperators.js
var getGridStringQuickFilterFn = (value) => {
  if (!value) {
    return null;
  }
  const filterRegex = new RegExp(escapeRegExp(value), "i");
  return (_, row, column, apiRef2) => {
    let columnValue = apiRef2.current.getRowFormattedValue(row, column);
    if (apiRef2.current.ignoreDiacritics) {
      columnValue = removeDiacritics(columnValue);
    }
    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;
  };
};
var getGridStringOperators = (disableTrim = false) => [{
  value: "contains",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
    const filterRegex = new RegExp(escapeRegExp(filterItemValue), "i");
    return (value) => {
      return value != null ? filterRegex.test(String(value)) : false;
    };
  },
  InputComponent: GridFilterInputValue
}, {
  value: "equals",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
    const collator4 = new Intl.Collator(void 0, {
      sensitivity: "base",
      usage: "search"
    });
    return (value) => {
      return value != null ? collator4.compare(filterItemValue, value.toString()) === 0 : false;
    };
  },
  InputComponent: GridFilterInputValue
}, {
  value: "startsWith",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, "i");
    return (value) => {
      return value != null ? filterRegex.test(value.toString()) : false;
    };
  },
  InputComponent: GridFilterInputValue
}, {
  value: "endsWith",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, "i");
    return (value) => {
      return value != null ? filterRegex.test(value.toString()) : false;
    };
  },
  InputComponent: GridFilterInputValue
}, {
  value: "isEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value === "" || value == null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value !== "" && value != null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isAnyOf",
  getApplyFilterFn: (filterItem) => {
    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map((val) => val.trim());
    const collator4 = new Intl.Collator(void 0, {
      sensitivity: "base",
      usage: "search"
    });
    return (value) => value != null ? filterItemValue.some((filterValue) => {
      return collator4.compare(filterValue, value.toString() || "") === 0;
    }) : false;
  },
  InputComponent: GridFilterInputMultipleValue
}];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridStringColDef.js
var GRID_STRING_COL_DEF2 = {
  width: 100,
  minWidth: 50,
  maxWidth: Infinity,
  hideable: true,
  sortable: true,
  resizable: true,
  filterable: true,
  groupable: true,
  pinnable: true,
  // @ts-ignore
  aggregable: true,
  editable: false,
  sortComparator: gridStringOrNumberComparator,
  type: "string",
  align: "left",
  filterOperators: getGridStringOperators(),
  renderEditCell: renderEditInputCell,
  getApplyQuickFilterFn: getGridStringQuickFilterFn
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React25 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/GridMenu.js
init_extends();
init_objectWithoutPropertiesLoose();
var React24 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var _excluded4 = ["open", "target", "onClose", "children", "position", "className", "onExited"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["menu"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridMenuRoot = styled_default(Popper_default, {
  name: "MuiDataGrid",
  slot: "Menu",
  overridesResolver: (_, styles) => styles.menu
})(({
  theme
}) => ({
  zIndex: theme.zIndex.modal,
  [`& .${gridClasses2.menuList}`]: {
    outline: 0
  }
}));
var transformOrigin = {
  "bottom-start": "top left",
  "bottom-end": "top right"
};
function GridMenu(props) {
  var _a;
  const {
    open,
    target,
    onClose,
    children,
    position,
    className,
    onExited
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses2(rootProps);
  const savedFocusRef = React24.useRef(null);
  useEnhancedEffect_default(() => {
    var _a2, _b;
    if (open) {
      savedFocusRef.current = document.activeElement instanceof HTMLElement ? document.activeElement : null;
    } else {
      (_b = (_a2 = savedFocusRef.current) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
      savedFocusRef.current = null;
    }
  }, [open]);
  React24.useEffect(() => {
    const eventName = open ? "menuOpen" : "menuClose";
    apiRef2.current.publishEvent(eventName, {
      target
    });
  }, [apiRef2, open, target]);
  const handleExited = (popperOnExited) => (node) => {
    if (popperOnExited) {
      popperOnExited();
    }
    if (onExited) {
      onExited(node);
    }
  };
  const handleClickAway = (event) => {
    if (event.target && (target === event.target || (target == null ? void 0 : target.contains(event.target)))) {
      return;
    }
    onClose(event);
  };
  return (0, import_jsx_runtime16.jsx)(GridMenuRoot, _extends({
    as: rootProps.slots.basePopper,
    className: clsx_default(className, classes2.root),
    ownerState: rootProps,
    open,
    anchorEl: target,
    transition: true,
    placement: position
  }, other, (_a = rootProps.slotProps) == null ? void 0 : _a.basePopper, {
    children: ({
      TransitionProps,
      placement
    }) => (0, import_jsx_runtime16.jsx)(ClickAwayListener, {
      onClickAway: handleClickAway,
      mouseEvent: "onMouseDown",
      children: (0, import_jsx_runtime16.jsx)(Grow_default, _extends({}, TransitionProps, {
        style: {
          transformOrigin: transformOrigin[placement]
        },
        onExited: handleExited(TransitionProps == null ? void 0 : TransitionProps.onExited),
        children: (0, import_jsx_runtime16.jsx)(Paper_default, {
          children
        })
      }))
    })
  }));
}
true ? GridMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types4.default.node,
  onClose: import_prop_types4.default.func.isRequired,
  onExited: import_prop_types4.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types4.default.bool.isRequired,
  position: import_prop_types4.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  target: HTMLElementType
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var _excluded5 = ["api", "colDef", "id", "hasFocus", "isEditable", "field", "value", "formattedValue", "row", "rowNode", "cellMode", "tabIndex", "position", "focusElementRef"];
var hasActions = (colDef) => typeof colDef.getActions === "function";
function GridActionsCell(props) {
  var _a;
  const {
    colDef,
    id,
    hasFocus,
    tabIndex,
    position = "bottom-end",
    focusElementRef
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const [focusedButtonIndex, setFocusedButtonIndex] = React25.useState(-1);
  const [open, setOpen] = React25.useState(false);
  const apiRef2 = useGridApiContext();
  const rootRef = React25.useRef(null);
  const buttonRef = React25.useRef(null);
  const ignoreCallToFocus = React25.useRef(false);
  const touchRippleRefs = React25.useRef({});
  const theme = useTheme();
  const menuId = useId();
  const buttonId = useId();
  const rootProps = useGridRootProps2();
  if (!hasActions(colDef)) {
    throw new Error("MUI X: Missing the `getActions` property in the `GridColDef`.");
  }
  const options = colDef.getActions(apiRef2.current.getRowParams(id));
  const iconButtons = options.filter((option) => !option.props.showInMenu);
  const menuButtons = options.filter((option) => option.props.showInMenu);
  const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);
  React25.useLayoutEffect(() => {
    if (!hasFocus) {
      Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {
        ref == null ? void 0 : ref.stop({}, () => {
          delete touchRippleRefs.current[index];
        });
      });
    }
  }, [hasFocus]);
  React25.useEffect(() => {
    if (focusedButtonIndex < 0 || !rootRef.current) {
      return;
    }
    if (focusedButtonIndex >= rootRef.current.children.length) {
      return;
    }
    const child = rootRef.current.children[focusedButtonIndex];
    child.focus({
      preventScroll: true
    });
  }, [focusedButtonIndex]);
  React25.useEffect(() => {
    if (!hasFocus) {
      setFocusedButtonIndex(-1);
      ignoreCallToFocus.current = false;
    }
  }, [hasFocus]);
  React25.useImperativeHandle(focusElementRef, () => ({
    focus() {
      if (!ignoreCallToFocus.current) {
        const focusableButtonIndex = options.findIndex((o) => !o.props.disabled);
        setFocusedButtonIndex(focusableButtonIndex);
      }
    }
  }), [options]);
  React25.useEffect(() => {
    if (focusedButtonIndex >= numberOfButtons) {
      setFocusedButtonIndex(numberOfButtons - 1);
    }
  }, [focusedButtonIndex, numberOfButtons]);
  const showMenu = () => {
    setOpen(true);
    setFocusedButtonIndex(numberOfButtons - 1);
    ignoreCallToFocus.current = true;
  };
  const hideMenu = () => {
    setOpen(false);
  };
  const handleTouchRippleRef = (index) => (instance) => {
    touchRippleRefs.current[index] = instance;
  };
  const handleButtonClick = (index, onClick) => (event) => {
    setFocusedButtonIndex(index);
    ignoreCallToFocus.current = true;
    if (onClick) {
      onClick(event);
    }
  };
  const handleRootKeyDown = (event) => {
    if (numberOfButtons <= 1) {
      return;
    }
    const getNewIndex = (index, direction) => {
      var _a2;
      if (index < 0 || index > options.length) {
        return index;
      }
      const rtlMod = theme.direction === "rtl" ? -1 : 1;
      const indexMod = (direction === "left" ? -1 : 1) * rtlMod;
      return ((_a2 = options[index + indexMod]) == null ? void 0 : _a2.props.disabled) ? getNewIndex(index + indexMod, direction) : index + indexMod;
    };
    let newIndex = focusedButtonIndex;
    if (event.key === "ArrowRight") {
      newIndex = getNewIndex(focusedButtonIndex, "right");
    } else if (event.key === "ArrowLeft") {
      newIndex = getNewIndex(focusedButtonIndex, "left");
    }
    if (newIndex < 0 || newIndex >= numberOfButtons) {
      return;
    }
    if (newIndex !== focusedButtonIndex) {
      event.preventDefault();
      event.stopPropagation();
      setFocusedButtonIndex(newIndex);
    }
  };
  const handleListKeyDown = (event) => {
    if (event.key === "Tab") {
      event.preventDefault();
    }
    if (["Tab", "Escape"].includes(event.key)) {
      hideMenu();
    }
  };
  return (0, import_jsx_runtime17.jsxs)("div", _extends({
    role: "menu",
    ref: rootRef,
    tabIndex: -1,
    className: gridClasses2.actionsCell,
    onKeyDown: handleRootKeyDown
  }, other, {
    children: [iconButtons.map((button, index) => React25.cloneElement(button, {
      key: index,
      touchRippleRef: handleTouchRippleRef(index),
      onClick: handleButtonClick(index, button.props.onClick),
      tabIndex: focusedButtonIndex === index ? tabIndex : -1
    })), menuButtons.length > 0 && buttonId && (0, import_jsx_runtime17.jsx)(rootProps.slots.baseIconButton, _extends({
      ref: buttonRef,
      id: buttonId,
      "aria-label": apiRef2.current.getLocaleText("actionsCellMore"),
      "aria-haspopup": "menu",
      "aria-expanded": open,
      "aria-controls": open ? menuId : void 0,
      role: "menuitem",
      size: "small",
      onClick: showMenu,
      touchRippleRef: handleTouchRippleRef(buttonId),
      tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
      children: (0, import_jsx_runtime17.jsx)(rootProps.slots.moreActionsIcon, {
        fontSize: "small"
      })
    })), menuButtons.length > 0 && (0, import_jsx_runtime17.jsx)(GridMenu, {
      open,
      target: buttonRef.current,
      position,
      onClose: hideMenu,
      children: (0, import_jsx_runtime17.jsx)(MenuList_default, {
        id: menuId,
        className: gridClasses2.menuList,
        onKeyDown: handleListKeyDown,
        "aria-labelledby": buttonId,
        variant: "menu",
        autoFocusItem: true,
        children: menuButtons.map((button, index) => React25.cloneElement(button, {
          key: index,
          closeMenu: hideMenu
        }))
      })
    })]
  }));
}
true ? GridActionsCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  api: import_prop_types5.default.object,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types5.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types5.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types5.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.shape({
    current: import_prop_types5.default.shape({
      focus: import_prop_types5.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types5.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types5.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types5.default.bool,
  position: import_prop_types5.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types5.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types5.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types5.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types5.default.any
} : void 0;
var renderActionsCell = (params) => (0, import_jsx_runtime17.jsx)(GridActionsCell, _extends({}, params));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js
var GRID_ACTIONS_COLUMN_TYPE2 = "actions";
var GRID_ACTIONS_COL_DEF = _extends({}, GRID_STRING_COL_DEF2, {
  sortable: false,
  filterable: false,
  // @ts-ignore
  aggregable: false,
  width: 100,
  display: "flex",
  align: "center",
  headerAlign: "center",
  headerName: "",
  disableColumnMenu: true,
  disableExport: true,
  renderCell: renderActionsCell,
  getApplyQuickFilterFn: void 0
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridBooleanCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React26 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js
var gridRowsStateSelector = (state) => state.rows;
var gridRowCountSelector = createSelector3(gridRowsStateSelector, (rows) => rows.totalRowCount);
var gridRowsLoadingSelector = createSelector3(gridRowsStateSelector, (rows) => rows.loading);
var gridTopLevelRowCountSelector = createSelector3(gridRowsStateSelector, (rows) => rows.totalTopLevelRowCount);
var gridRowsLookupSelector = createSelector3(gridRowsStateSelector, (rows) => rows.dataRowIdToModelLookup);
var gridRowsDataRowIdToIdLookupSelector2 = createSelector3(gridRowsStateSelector, (rows) => rows.dataRowIdToIdLookup);
var gridRowTreeSelector2 = createSelector3(gridRowsStateSelector, (rows) => rows.tree);
var gridRowGroupingNameSelector = createSelector3(gridRowsStateSelector, (rows) => rows.groupingName);
var gridRowTreeDepthsSelector = createSelector3(gridRowsStateSelector, (rows) => rows.treeDepths);
var gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, (rows) => {
  const entries = Object.entries(rows.treeDepths);
  if (entries.length === 0) {
    return 1;
  }
  return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] + 1;
});
var gridDataRowIdsSelector = createSelector3(gridRowsStateSelector, (rows) => rows.dataRowIds);
var gridAdditionalRowGroupsSelector = createSelector3(gridRowsStateSelector, (rows) => rows == null ? void 0 : rows.additionalRowGroups);
var gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, (additionalRowGroups) => {
  var _a, _b;
  const rawPinnedRows = additionalRowGroups == null ? void 0 : additionalRowGroups.pinnedRows;
  return {
    bottom: ((_a = rawPinnedRows == null ? void 0 : rawPinnedRows.bottom) == null ? void 0 : _a.map((rowEntry) => ({
      id: rowEntry.id,
      model: rowEntry.model ?? {}
    }))) ?? [],
    top: ((_b = rawPinnedRows == null ? void 0 : rawPinnedRows.top) == null ? void 0 : _b.map((rowEntry) => ({
      id: rowEntry.id,
      model: rowEntry.model ?? {}
    }))) ?? []
  };
});
var gridPinnedRowsCountSelector = createSelector3(gridPinnedRowsSelector, (pinnedRows) => {
  var _a, _b;
  return (((_a = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a.length) || 0) + (((_b = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b.length) || 0);
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js
var GRID_ROOT_GROUP_ID2 = `auto-generated-group-node-root`;
var GRID_ID_AUTOGENERATED = Symbol("mui.id_autogenerated");
var buildRootGroup = () => ({
  type: "group",
  id: GRID_ROOT_GROUP_ID2,
  depth: -1,
  groupingField: null,
  groupingKey: null,
  isAutoGenerated: true,
  children: [],
  childrenFromPath: {},
  childrenExpanded: true,
  parent: null
});
function checkGridRowIdIsValid(id, row, detailErrorMessage = "A row was provided without id in the rows prop:") {
  if (id == null) {
    throw new Error(["MUI X: The data grid component requires all rows to have a unique `id` property.", "Alternatively, you can use the `getRowId` prop to specify a custom id for each row.", detailErrorMessage, JSON.stringify(row)].join("\n"));
  }
}
var getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {
  const id = getRowId ? getRowId(rowModel) : rowModel.id;
  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
  return id;
};
var createRowsInternalCache = ({
  rows,
  getRowId,
  loading,
  rowCount
}) => {
  const updates = {
    type: "full",
    rows: []
  };
  const dataRowIdToModelLookup = {};
  const dataRowIdToIdLookup = {};
  for (let i2 = 0; i2 < rows.length; i2 += 1) {
    const model = rows[i2];
    const id = getRowIdFromRowModel(model, getRowId);
    dataRowIdToModelLookup[id] = model;
    dataRowIdToIdLookup[id] = id;
    updates.rows.push(id);
  }
  return {
    rowsBeforePartialUpdates: rows,
    loadingPropBeforePartialUpdates: loading,
    rowCountPropBeforePartialUpdates: rowCount,
    updates,
    dataRowIdToIdLookup,
    dataRowIdToModelLookup
  };
};
var getTopLevelRowCount = ({
  tree,
  rowCountProp = 0
}) => {
  const rootGroupNode = tree[GRID_ROOT_GROUP_ID2];
  return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));
};
var getRowsStateFromCache = ({
  apiRef: apiRef2,
  rowCountProp = 0,
  loadingProp,
  previousTree,
  previousTreeDepths
}) => {
  const cache2 = apiRef2.current.caches.rows;
  const {
    tree: unProcessedTree,
    treeDepths: unProcessedTreeDepths,
    dataRowIds: unProcessedDataRowIds,
    groupingName
  } = apiRef2.current.applyStrategyProcessor("rowTreeCreation", {
    previousTree,
    previousTreeDepths,
    updates: cache2.updates,
    dataRowIdToIdLookup: cache2.dataRowIdToIdLookup,
    dataRowIdToModelLookup: cache2.dataRowIdToModelLookup
  });
  const groupingParamsWithHydrateRows = apiRef2.current.unstable_applyPipeProcessors("hydrateRows", {
    tree: unProcessedTree,
    treeDepths: unProcessedTreeDepths,
    dataRowIdToIdLookup: cache2.dataRowIdToIdLookup,
    dataRowIds: unProcessedDataRowIds,
    dataRowIdToModelLookup: cache2.dataRowIdToModelLookup
  });
  apiRef2.current.caches.rows.updates = {
    type: "partial",
    actions: {
      insert: [],
      modify: [],
      remove: []
    },
    idToActionLookup: {}
  };
  return _extends({}, groupingParamsWithHydrateRows, {
    totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),
    totalTopLevelRowCount: getTopLevelRowCount({
      tree: groupingParamsWithHydrateRows.tree,
      rowCountProp
    }),
    groupingName,
    loading: loadingProp
  });
};
var isAutoGeneratedRow = (rowNode) => rowNode.type === "skeletonRow" || rowNode.type === "footer" || rowNode.type === "group" && rowNode.isAutoGenerated || rowNode.type === "pinnedRow" && rowNode.isAutoGenerated;
var getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {
  const node = tree[parentId];
  if (node.type !== "group") {
    return [];
  }
  const validDescendants = [];
  for (let i2 = 0; i2 < node.children.length; i2 += 1) {
    const child = node.children[i2];
    if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {
      validDescendants.push(child);
    }
    const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows);
    for (let j = 0; j < childDescendants.length; j += 1) {
      validDescendants.push(childDescendants[j]);
    }
  }
  if (!skipAutoGeneratedRows && node.footerId != null) {
    validDescendants.push(node.footerId);
  }
  return validDescendants;
};
var updateCacheWithNewRows = ({
  previousCache,
  getRowId,
  updates
}) => {
  if (previousCache.updates.type === "full") {
    throw new Error("MUI X: Unable to prepare a partial update if a full update is not applied yet.");
  }
  const uniqueUpdates = /* @__PURE__ */ new Map();
  updates.forEach((update) => {
    const id = getRowIdFromRowModel(update, getRowId, "A row was provided without id when calling updateRows():");
    if (uniqueUpdates.has(id)) {
      uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));
    } else {
      uniqueUpdates.set(id, update);
    }
  });
  const partialUpdates = {
    type: "partial",
    actions: {
      insert: [...previousCache.updates.actions.insert ?? []],
      modify: [...previousCache.updates.actions.modify ?? []],
      remove: [...previousCache.updates.actions.remove ?? []]
    },
    idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)
  };
  const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);
  const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);
  const alreadyAppliedActionsToRemove = {
    insert: {},
    modify: {},
    remove: {}
  };
  uniqueUpdates.forEach((partialRow, id) => {
    const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];
    if (partialRow._action === "delete") {
      if (actionAlreadyAppliedToRow === "remove" || !dataRowIdToModelLookup[id]) {
        return;
      }
      if (actionAlreadyAppliedToRow != null) {
        alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;
      }
      partialUpdates.actions.remove.push(id);
      delete dataRowIdToModelLookup[id];
      delete dataRowIdToIdLookup[id];
      return;
    }
    const oldRow = dataRowIdToModelLookup[id];
    if (oldRow) {
      if (actionAlreadyAppliedToRow === "remove") {
        alreadyAppliedActionsToRemove.remove[id] = true;
        partialUpdates.actions.modify.push(id);
      } else if (actionAlreadyAppliedToRow == null) {
        partialUpdates.actions.modify.push(id);
      }
      dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);
      return;
    }
    if (actionAlreadyAppliedToRow === "remove") {
      alreadyAppliedActionsToRemove.remove[id] = true;
      partialUpdates.actions.insert.push(id);
    } else if (actionAlreadyAppliedToRow == null) {
      partialUpdates.actions.insert.push(id);
    }
    dataRowIdToModelLookup[id] = partialRow;
    dataRowIdToIdLookup[id] = id;
  });
  const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);
  for (let i2 = 0; i2 < actionTypeWithActionsToRemove.length; i2 += 1) {
    const actionType = actionTypeWithActionsToRemove[i2];
    const idsToRemove = alreadyAppliedActionsToRemove[actionType];
    if (Object.keys(idsToRemove).length > 0) {
      partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter((id) => !idsToRemove[id]);
    }
  }
  return {
    dataRowIdToModelLookup,
    dataRowIdToIdLookup,
    updates: partialUpdates,
    rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,
    loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,
    rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates
  };
};
function calculatePinnedRowsHeight(apiRef2) {
  var _a, _b;
  const pinnedRows = gridPinnedRowsSelector(apiRef2);
  const topPinnedRowsHeight = ((_a = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a.reduce((acc, value) => {
    acc += apiRef2.current.unstable_getRowHeight(value.id);
    return acc;
  }, 0)) || 0;
  const bottomPinnedRowsHeight = ((_b = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b.reduce((acc, value) => {
    acc += apiRef2.current.unstable_getRowHeight(value.id);
    return acc;
  }, 0)) || 0;
  return {
    top: topPinnedRowsHeight,
    bottom: bottomPinnedRowsHeight
  };
}
function getMinimalContentHeight(apiRef2) {
  const dimensions = gridDimensionsSelector2(apiRef2.current.state);
  return `var(--DataGrid-overlayHeight, ${2 * dimensions.rowHeight}px)`;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridBooleanCell.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _excluded6 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "hasFocus", "tabIndex", "hideDescendantCount"];
var useUtilityClasses3 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["booleanCell"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridBooleanCellRaw(props) {
  const {
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses3(ownerState);
  const Icon = React26.useMemo(() => value ? rootProps.slots.booleanCellTrueIcon : rootProps.slots.booleanCellFalseIcon, [rootProps.slots.booleanCellFalseIcon, rootProps.slots.booleanCellTrueIcon, value]);
  return (0, import_jsx_runtime18.jsx)(Icon, _extends({
    fontSize: "small",
    className: classes2.root,
    titleAccess: apiRef2.current.getLocaleText(value ? "booleanCellTrueLabel" : "booleanCellFalseLabel"),
    "data-value": Boolean(value)
  }, other));
}
true ? GridBooleanCellRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types6.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types6.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types6.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types6.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.shape({
    current: import_prop_types6.default.shape({
      focus: import_prop_types6.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types6.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types6.default.bool.isRequired,
  hideDescendantCount: import_prop_types6.default.bool,
  /**
   * The grid row id.
   */
  id: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types6.default.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types6.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types6.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types6.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types6.default.any
} : void 0;
var GridBooleanCell = React26.memo(GridBooleanCellRaw);
var renderBooleanCell = (params) => {
  if (params.field !== "__row_group_by_columns_group__" && isAutoGeneratedRow(params.rowNode)) {
    return "";
  }
  return (0, import_jsx_runtime18.jsx)(GridBooleanCell, _extends({}, params));
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React27 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var _excluded7 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange"];
var useUtilityClasses4 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["editBooleanCell"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridEditBooleanCell(props) {
  var _a;
  const {
    id: idProp,
    value,
    field,
    className,
    hasFocus,
    onValueChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const apiRef2 = useGridApiContext();
  const inputRef = React27.useRef(null);
  const id = useId();
  const [valueState, setValueState] = React27.useState(value);
  const rootProps = useGridRootProps2();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses4(ownerState);
  const handleChange = React27.useCallback(async (event) => {
    const newValue = event.target.checked;
    if (onValueChange) {
      await onValueChange(event, newValue);
    }
    setValueState(newValue);
    await apiRef2.current.setEditCellValue({
      id: idProp,
      field,
      value: newValue
    }, event);
  }, [apiRef2, field, idProp, onValueChange]);
  React27.useEffect(() => {
    setValueState(value);
  }, [value]);
  useEnhancedEffect_default(() => {
    if (hasFocus) {
      inputRef.current.focus();
    }
  }, [hasFocus]);
  return (0, import_jsx_runtime19.jsx)("label", _extends({
    htmlFor: id,
    className: clsx_default(classes2.root, className)
  }, other, {
    children: (0, import_jsx_runtime19.jsx)(rootProps.slots.baseCheckbox, _extends({
      id,
      inputRef,
      checked: Boolean(valueState),
      onChange: handleChange,
      size: "small"
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseCheckbox))
  }));
}
true ? GridEditBooleanCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types7.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types7.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types7.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types7.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types7.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types7.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types7.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types7.default.bool,
  isProcessingProps: import_prop_types7.default.bool,
  isValidating: import_prop_types7.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types7.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types7.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types7.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types7.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types7.default.any
} : void 0;
var renderEditBooleanCell = (params) => (0, import_jsx_runtime19.jsx)(GridEditBooleanCell, _extends({}, params));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputBoolean.js
init_extends();
init_objectWithoutPropertiesLoose();
var React28 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _excluded8 = ["item", "applyValue", "apiRef", "focusElementRef", "isFilterActive", "clearButton", "tabIndex", "label", "variant", "InputLabelProps"];
var BooleanOperatorContainer = styled_default("div")({
  display: "flex",
  alignItems: "center",
  width: "100%",
  [`& button`]: {
    margin: "auto 0px 5px 5px"
  }
});
function GridFilterInputBoolean(props) {
  var _a, _b, _c;
  const {
    item,
    applyValue,
    apiRef: apiRef2,
    focusElementRef,
    clearButton,
    tabIndex,
    label: labelProp,
    variant = "standard"
  } = props, others = _objectWithoutPropertiesLoose(props, _excluded8);
  const [filterValueState, setFilterValueState] = React28.useState(item.value || "");
  const rootProps = useGridRootProps2();
  const labelId = useId();
  const selectId = useId();
  const baseSelectProps = ((_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) || {};
  const isSelectNative = baseSelectProps.native ?? false;
  const baseSelectOptionProps = ((_b = rootProps.slotProps) == null ? void 0 : _b.baseSelectOption) || {};
  const onFilterChange = React28.useCallback((event) => {
    const value = event.target.value;
    setFilterValueState(value);
    applyValue(_extends({}, item, {
      value
    }));
  }, [applyValue, item]);
  React28.useEffect(() => {
    setFilterValueState(item.value || "");
  }, [item.value]);
  const label = labelProp ?? apiRef2.current.getLocaleText("filterPanelInputLabel");
  return (0, import_jsx_runtime20.jsxs)(BooleanOperatorContainer, {
    children: [(0, import_jsx_runtime20.jsxs)(rootProps.slots.baseFormControl, {
      fullWidth: true,
      children: [(0, import_jsx_runtime20.jsx)(rootProps.slots.baseInputLabel, _extends({}, (_c = rootProps.slotProps) == null ? void 0 : _c.baseInputLabel, {
        id: labelId,
        shrink: true,
        variant,
        children: label
      })), (0, import_jsx_runtime20.jsxs)(rootProps.slots.baseSelect, _extends({
        labelId,
        id: selectId,
        label,
        value: filterValueState,
        onChange: onFilterChange,
        variant,
        notched: variant === "outlined" ? true : void 0,
        native: isSelectNative,
        displayEmpty: true,
        inputProps: {
          ref: focusElementRef,
          tabIndex
        }
      }, others, baseSelectProps, {
        children: [(0, import_jsx_runtime20.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isSelectNative,
          value: "",
          children: apiRef2.current.getLocaleText("filterValueAny")
        })), (0, import_jsx_runtime20.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isSelectNative,
          value: "true",
          children: apiRef2.current.getLocaleText("filterValueTrue")
        })), (0, import_jsx_runtime20.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isSelectNative,
          value: "false",
          children: apiRef2.current.getLocaleText("filterValueFalse")
        }))]
      }))]
    }), clearButton]
  });
}
true ? GridFilterInputBoolean.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types8.default.shape({
    current: import_prop_types8.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types8.default.func.isRequired,
  clearButton: import_prop_types8.default.node,
  focusElementRef: refType_default,
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types8.default.bool,
  item: import_prop_types8.default.shape({
    field: import_prop_types8.default.string.isRequired,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    operator: import_prop_types8.default.string.isRequired,
    value: import_prop_types8.default.any
  }).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridBooleanOperators.js
var getGridBooleanOperators = () => [{
  value: "is",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const valueAsBoolean = String(filterItem.value) === "true";
    return (value) => {
      return Boolean(value) === valueAsBoolean;
    };
  },
  InputComponent: GridFilterInputBoolean
}];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.js
var gridBooleanFormatter = (value, row, column, apiRef2) => {
  return value ? apiRef2.current.getLocaleText("booleanCellTrueLabel") : apiRef2.current.getLocaleText("booleanCellFalseLabel");
};
var stringToBoolean = (value) => {
  switch (value.toLowerCase().trim()) {
    case "true":
    case "yes":
    case "1":
      return true;
    case "false":
    case "no":
    case "0":
    case "null":
    case "undefined":
      return false;
    default:
      return void 0;
  }
};
var GRID_BOOLEAN_COL_DEF = _extends({}, GRID_STRING_COL_DEF2, {
  type: "boolean",
  display: "flex",
  align: "center",
  headerAlign: "center",
  renderCell: renderBooleanCell,
  renderEditCell: renderEditBooleanCell,
  sortComparator: gridNumberComparator,
  valueFormatter: gridBooleanFormatter,
  filterOperators: getGridBooleanOperators(),
  getApplyQuickFilterFn: void 0,
  // @ts-ignore
  aggregable: false,
  // @ts-ignore
  pastedValueParser: (value) => stringToBoolean(value)
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js
init_extends();
var React37 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React29 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var _excluded9 = ["field", "id", "value", "formattedValue", "row", "rowNode", "colDef", "isEditable", "cellMode", "hasFocus", "tabIndex", "api"];
var useUtilityClasses5 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["checkboxInput"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridCellCheckboxForwardRef = React29.forwardRef(function GridCellCheckboxRenderer(props, ref) {
  var _a;
  const {
    field,
    id,
    value: isChecked,
    rowNode,
    hasFocus,
    tabIndex
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses5(ownerState);
  const checkboxElement = React29.useRef(null);
  const rippleRef = React29.useRef(null);
  const handleRef = useForkRef(checkboxElement, ref);
  const handleChange = (event) => {
    const params = {
      value: event.target.checked,
      id
    };
    apiRef2.current.publishEvent("rowSelectionCheckboxChange", params, event);
  };
  React29.useLayoutEffect(() => {
    if (tabIndex === 0) {
      const element = apiRef2.current.getCellElement(id, field);
      if (element) {
        element.tabIndex = -1;
      }
    }
  }, [apiRef2, tabIndex, id, field]);
  React29.useEffect(() => {
    var _a2;
    if (hasFocus) {
      const input = (_a2 = checkboxElement.current) == null ? void 0 : _a2.querySelector("input");
      input == null ? void 0 : input.focus({
        preventScroll: true
      });
    } else if (rippleRef.current) {
      rippleRef.current.stop({});
    }
  }, [hasFocus]);
  const handleKeyDown = React29.useCallback((event) => {
    if (event.key === " ") {
      event.stopPropagation();
    }
  }, []);
  if (rowNode.type === "footer" || rowNode.type === "pinnedRow") {
    return null;
  }
  const isSelectable = apiRef2.current.isRowSelectable(id);
  const label = apiRef2.current.getLocaleText(isChecked ? "checkboxSelectionUnselectRow" : "checkboxSelectionSelectRow");
  return (0, import_jsx_runtime21.jsx)(rootProps.slots.baseCheckbox, _extends({
    ref: handleRef,
    tabIndex,
    checked: isChecked,
    onChange: handleChange,
    className: classes2.root,
    inputProps: {
      "aria-label": label
    },
    onKeyDown: handleKeyDown,
    disabled: !isSelectable,
    touchRippleRef: rippleRef
    /* FIXME: typing error */
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseCheckbox, other));
});
true ? GridCellCheckboxForwardRef.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types9.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types9.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types9.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types9.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.shape({
    current: import_prop_types9.default.shape({
      focus: import_prop_types9.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types9.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types9.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types9.default.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types9.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types9.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types9.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types9.default.any
} : void 0;
var GridCellCheckboxRenderer2 = GridCellCheckboxForwardRef;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js
init_extends();
init_objectWithoutPropertiesLoose();
var React36 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rowSelection/utils.js
function isMultipleRowSelectionEnabled(props) {
  if (props.signature === GridSignature.DataGrid) {
    return props.checkboxSelection && props.disableMultipleRowSelection !== true;
  }
  return !props.disableMultipleRowSelection;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js
var gridFocusStateSelector = (state) => state.focus;
var gridFocusCellSelector2 = createSelector3(gridFocusStateSelector, (focusState) => focusState.cell);
var gridFocusColumnHeaderSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.columnHeader);
var gridFocusColumnHeaderFilterSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.columnHeaderFilter);
var gridFocusColumnGroupHeaderSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.columnGroupHeader);
var gridTabIndexStateSelector = (state) => state.tabIndex;
var gridTabIndexCellSelector = createSelector3(gridTabIndexStateSelector, (state) => state.cell);
var gridTabIndexColumnHeaderSelector = createSelector3(gridTabIndexStateSelector, (state) => state.columnHeader);
var gridTabIndexColumnHeaderFilterSelector = createSelector3(gridTabIndexStateSelector, (state) => state.columnHeaderFilter);
var gridTabIndexColumnGroupHeaderSelector = createSelector3(gridTabIndexStateSelector, (state) => state.columnGroupHeader);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js
var gridRowSelectionStateSelector = (state) => state.rowSelection;
var selectedGridRowsCountSelector = createSelector3(gridRowSelectionStateSelector, (selection) => selection.length);
var selectedGridRowsSelector = createSelectorMemoized(gridRowSelectionStateSelector, gridRowsLookupSelector, (selectedRows, rowsLookup) => new Map(selectedRows.map((id) => [id, rowsLookup[id]])));
var selectedIdsLookupSelector = createSelectorMemoized(gridRowSelectionStateSelector, (selection) => selection.reduce((lookup, rowId) => {
  lookup[rowId] = rowId;
  return lookup;
}, {}));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js
var gridSortingStateSelector = (state) => state.sorting;
var gridSortedRowIdsSelector2 = createSelector3(gridSortingStateSelector, (sortingState) => sortingState.sortedRows);
var gridSortedRowEntriesSelector = createSelectorMemoized(gridSortedRowIdsSelector2, gridRowsLookupSelector, gridRowTreeSelector2, (sortedIds, idRowsLookup, rowTree) => sortedIds.reduce((acc, id) => {
  const model = idRowsLookup[id];
  if (model) {
    acc.push({
      id,
      model
    });
  }
  const rowNode = rowTree[id];
  if (rowNode && isAutoGeneratedRow(rowNode)) {
    acc.push({
      id,
      model: {
        [GRID_ID_AUTOGENERATED]: id
      }
    });
  }
  return acc;
}, []));
var gridSortModelSelector = createSelector3(gridSortingStateSelector, (sorting) => sorting.sortModel);
var gridSortColumnLookupSelector = createSelectorMemoized(gridSortModelSelector, (sortModel) => {
  const result = sortModel.reduce((res, sortItem, index) => {
    res[sortItem.field] = {
      sortDirection: sortItem.sort,
      sortIndex: sortModel.length > 1 ? index + 1 : void 0
    };
    return res;
  }, {});
  return result;
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js
var gridFilterStateSelector = (state) => state.filter;
var gridFilterModelSelector = createSelector3(gridFilterStateSelector, (filterState) => filterState.filterModel);
var gridQuickFilterValuesSelector = createSelector3(gridFilterModelSelector, (filterModel) => filterModel.quickFilterValues);
var gridVisibleRowsLookupSelector = (state) => state.visibleRowsLookup;
var gridFilteredRowsLookupSelector2 = createSelector3(gridFilterStateSelector, (filterState) => filterState.filteredRowsLookup);
var gridFilteredDescendantCountLookupSelector2 = createSelector3(gridFilterStateSelector, (filterState) => filterState.filteredDescendantCountLookup);
var gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter((row) => visibleRowsLookup[row.id] !== false));
var gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, (visibleSortedRowEntries) => visibleSortedRowEntries.map((row) => row.id));
var gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector2, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter((row) => filteredRowsLookup[row.id] !== false));
var gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries) => filteredSortedRowEntries.map((row) => row.id));
var gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector2, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {
  if (rowTreeDepth < 2) {
    return visibleSortedRows;
  }
  return visibleSortedRows.filter((row) => {
    var _a;
    return ((_a = rowTree[row.id]) == null ? void 0 : _a.depth) === 0;
  });
});
var gridExpandedRowCountSelector = createSelector3(gridExpandedSortedRowEntriesSelector, (visibleSortedRows) => visibleSortedRows.length);
var gridFilteredTopLevelRowCountSelector = createSelector3(gridFilteredSortedTopLevelRowEntriesSelector, (visibleSortedTopLevelRows) => visibleSortedTopLevelRows.length);
var gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector2, (filterModel, columnLookup) => {
  var _a;
  return (_a = filterModel.items) == null ? void 0 : _a.filter((item) => {
    var _a2, _b;
    if (!item.field) {
      return false;
    }
    const column = columnLookup[item.field];
    if (!(column == null ? void 0 : column.filterOperators) || ((_a2 = column == null ? void 0 : column.filterOperators) == null ? void 0 : _a2.length) === 0) {
      return false;
    }
    const filterOperator = column.filterOperators.find((operator) => operator.value === item.operator);
    if (!filterOperator) {
      return false;
    }
    return !filterOperator.InputComponent || item.value != null && ((_b = item.value) == null ? void 0 : _b.toString()) !== "";
  });
});
var gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, (activeFilters) => {
  const result = activeFilters.reduce((res, filterItem) => {
    if (!res[filterItem.field]) {
      res[filterItem.field] = [filterItem];
    } else {
      res[filterItem.field].push(filterItem);
    }
    return res;
  }, {});
  return result;
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js
var React30 = __toESM(require_react());
function useGridApiMethod2(privateApiRef, apiMethods, visibility) {
  const isFirstRender = React30.useRef(true);
  React30.useEffect(() => {
    isFirstRender.current = false;
    privateApiRef.current.register(visibility, apiMethods);
  }, [privateApiRef, visibility, apiMethods]);
  if (isFirstRender.current) {
    privateApiRef.current.register(visibility, apiMethods);
  }
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js
var React31 = __toESM(require_react());
function useGridLogger(privateApiRef, name) {
  const logger = React31.useRef(null);
  if (logger.current) {
    return logger.current;
  }
  const newLogger = privateApiRef.current.getLogger(name);
  logger.current = newLogger;
  return newLogger;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js
var React32 = __toESM(require_react());
var useGridNativeEventListener = (apiRef2, ref, eventName, handler, options) => {
  const logger = useGridLogger(apiRef2, "useNativeEventListener");
  const [added, setAdded] = React32.useState(false);
  const handlerRef = React32.useRef(handler);
  const targetElement = isFunction(ref) ? ref() : (ref == null ? void 0 : ref.current) ?? null;
  const wrapHandler = React32.useCallback((event) => {
    return handlerRef.current && handlerRef.current(event);
  }, []);
  React32.useEffect(() => {
    handlerRef.current = handler;
  }, [handler]);
  React32.useEffect(() => {
    if (targetElement && eventName && !added) {
      logger.debug(`Binding native ${eventName} event`);
      targetElement.addEventListener(eventName, wrapHandler, options);
      setAdded(true);
      const unsubscribe = () => {
        logger.debug(`Clearing native ${eventName} event`);
        targetElement.removeEventListener(eventName, wrapHandler, options);
      };
      apiRef2.current.subscribeEvent("unmount", unsubscribe);
    }
  }, [targetElement, wrapHandler, eventName, added, logger, options, apiRef2]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js
var React33 = __toESM(require_react());
var useFirstRender2 = (callback) => {
  const isFirstRender = React33.useRef(true);
  if (isFirstRender.current) {
    isFirstRender.current = false;
    callback();
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useResizeObserver.js
var React34 = __toESM(require_react());
init_utils();
var isDevEnvironment = true;
var noop = () => {
};
function useResizeObserver(ref, fn, enabled) {
  const fnRef = React34.useRef(null);
  fnRef.current = fn;
  useEnhancedEffect_default(() => {
    if (enabled === false || typeof ResizeObserver === "undefined") {
      return noop;
    }
    let frameID = 0;
    const target = ref.current;
    const observer = new ResizeObserver((entries) => {
      if (isDevEnvironment) {
        frameID = requestAnimationFrame(() => {
          fnRef.current(entries);
        });
      } else {
        fnRef.current(entries);
      }
    });
    if (target) {
      observer.observe(target);
    }
    return () => {
      if (frameID) {
        cancelAnimationFrame(frameID);
      }
      observer.disconnect();
    };
  }, [ref, enabled]);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useRunOnce.js
var React35 = __toESM(require_react());
init_utils();
var noop2 = () => {
};
var useRunOnce = (condition, effect) => {
  const didRun = React35.useRef(false);
  useEnhancedEffect_default(() => {
    if (didRun.current || !condition) {
      return noop2;
    }
    didRun.current = true;
    return effect();
  }, [didRun.current || condition]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js
var MAX_PAGE_SIZE = 100;
var defaultPageSize = (autoPageSize) => autoPageSize ? 0 : 100;
var getPageCount = (rowCount, pageSize, page) => {
  if (pageSize > 0 && rowCount > 0) {
    return Math.ceil(rowCount / pageSize);
  }
  if (rowCount === -1) {
    return page + 2;
  }
  return 0;
};
var getDefaultGridPaginationModel = (autoPageSize) => ({
  page: 0,
  pageSize: autoPageSize ? 0 : 100
});
var getValidPage = (page, pageCount = 0) => {
  if (pageCount === 0) {
    return page;
  }
  return Math.max(Math.min(page, pageCount - 1), 0);
};
var throwIfPageSizeExceedsTheLimit = (pageSize, signatureProp) => {
  if (signatureProp === GridSignature.DataGrid && pageSize > MAX_PAGE_SIZE) {
    throw new Error(["MUI X: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
var gridPaginationSelector = (state) => state.pagination;
var gridPaginationModelSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.paginationModel);
var gridPaginationRowCountSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.rowCount);
var gridPaginationMetaSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.meta);
var gridPageSelector = createSelector3(gridPaginationModelSelector, (paginationModel) => paginationModel.page);
var gridPageSizeSelector = createSelector3(gridPaginationModelSelector, (paginationModel) => paginationModel.pageSize);
var gridPageCountSelector = createSelector3(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount) => getPageCount(rowCount, paginationModel.pageSize, paginationModel.page));
var gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector2, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
  var _a;
  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);
  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);
  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
    return null;
  }
  if (rowTreeDepth < 2) {
    return {
      firstRowIndex: topLevelFirstRowIndex,
      lastRowIndex: topLevelLastRowIndex
    };
  }
  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
  const firstRowIndex = visibleSortedRowEntries.findIndex((row) => row.id === topLevelFirstRow.id);
  let lastRowIndex = firstRowIndex;
  let topLevelRowAdded = 0;
  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {
    const row = visibleSortedRowEntries[lastRowIndex];
    const depth = (_a = rowTree[row.id]) == null ? void 0 : _a.depth;
    if (depth === void 0) {
      lastRowIndex += 1;
    } else {
      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
        lastRowIndex += 1;
      }
      if (depth === 0) {
        topLevelRowAdded += 1;
      }
    }
  }
  return {
    firstRowIndex,
    lastRowIndex: lastRowIndex - 1
  };
});
var gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {
  if (!paginationRange) {
    return [];
  }
  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
});
var gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {
  if (!paginationRange) {
    return [];
  }
  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var _excluded10 = ["field", "colDef"];
var useUtilityClasses6 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["checkboxInput"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridHeaderCheckbox = React36.forwardRef(function GridHeaderCheckbox2(props, ref) {
  var _a;
  const other = _objectWithoutPropertiesLoose(props, _excluded10);
  const [, forceUpdate] = React36.useState(false);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses6(ownerState);
  const tabIndexState = useGridSelector2(apiRef2, gridTabIndexColumnHeaderSelector);
  const selection = useGridSelector2(apiRef2, gridRowSelectionStateSelector);
  const visibleRowIds = useGridSelector2(apiRef2, gridExpandedSortedRowIdsSelector);
  const paginatedVisibleRowIds = useGridSelector2(apiRef2, gridPaginatedVisibleSortedGridRowIdsSelector);
  const filteredSelection = React36.useMemo(() => {
    if (typeof rootProps.isRowSelectable !== "function") {
      return selection;
    }
    return selection.filter((id) => {
      if (!apiRef2.current.getRow(id)) {
        return false;
      }
      return rootProps.isRowSelectable(apiRef2.current.getRowParams(id));
    });
  }, [apiRef2, rootProps.isRowSelectable, selection]);
  const selectionCandidates = React36.useMemo(() => {
    const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds;
    return rowIds.reduce((acc, id) => {
      acc[id] = true;
      return acc;
    }, {});
  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]);
  const currentSelectionSize = React36.useMemo(() => filteredSelection.filter((id) => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);
  const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;
  const isChecked = currentSelectionSize > 0;
  const handleChange = (event) => {
    const params = {
      value: event.target.checked
    };
    apiRef2.current.publishEvent("headerSelectionCheckboxChange", params);
  };
  const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;
  React36.useLayoutEffect(() => {
    const element = apiRef2.current.getColumnHeaderElement(props.field);
    if (tabIndex === 0 && element) {
      element.tabIndex = -1;
    }
  }, [tabIndex, apiRef2, props.field]);
  const handleKeyDown = React36.useCallback((event) => {
    if (event.key === " ") {
      apiRef2.current.publishEvent("headerSelectionCheckboxChange", {
        value: !isChecked
      });
    }
  }, [apiRef2, isChecked]);
  const handleSelectionChange = React36.useCallback(() => {
    forceUpdate((p) => !p);
  }, []);
  React36.useEffect(() => {
    return apiRef2.current.subscribeEvent("rowSelectionChange", handleSelectionChange);
  }, [apiRef2, handleSelectionChange]);
  const label = apiRef2.current.getLocaleText(isChecked ? "checkboxSelectionUnselectAllRows" : "checkboxSelectionSelectAllRows");
  return (0, import_jsx_runtime22.jsx)(rootProps.slots.baseCheckbox, _extends({
    ref,
    indeterminate: isIndeterminate,
    checked: isChecked,
    onChange: handleChange,
    className: classes2.root,
    inputProps: {
      "aria-label": label
    },
    tabIndex,
    onKeyDown: handleKeyDown,
    disabled: !isMultipleRowSelectionEnabled(rootProps)
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseCheckbox, other));
});
true ? GridHeaderCheckbox.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The column of the current header component.
   */
  colDef: import_prop_types10.default.object.isRequired,
  /**
   * The column field of the column that triggered the event
   */
  field: import_prop_types10.default.string.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var GRID_CHECKBOX_SELECTION_FIELD2 = "__check__";
var GRID_CHECKBOX_SELECTION_COL_DEF2 = _extends({}, GRID_BOOLEAN_COL_DEF, {
  type: "custom",
  field: GRID_CHECKBOX_SELECTION_FIELD2,
  width: 50,
  resizable: false,
  sortable: false,
  filterable: false,
  // @ts-ignore
  aggregable: false,
  disableColumnMenu: true,
  disableReorder: true,
  disableExport: true,
  getApplyQuickFilterFn: void 0,
  display: "flex",
  valueGetter: (value, row, column, apiRef2) => {
    const selectionLookup = selectedIdsLookupSelector(apiRef2);
    const rowId = apiRef2.current.getRowId(row);
    return selectionLookup[rowId] !== void 0;
  },
  renderHeader: (params) => (0, import_jsx_runtime23.jsx)(GridHeaderCheckbox, _extends({}, params)),
  renderCell: (params) => (0, import_jsx_runtime23.jsx)(GridCellCheckboxRenderer2, _extends({}, params))
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridDateColDef.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputDate.js
init_extends();
init_objectWithoutPropertiesLoose();
var React38 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var _excluded11 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "InputProps", "isFilterActive", "clearButton", "tabIndex", "disabled"];
function convertFilterItemValueToInputValue(itemValue, inputType) {
  if (itemValue == null) {
    return "";
  }
  const dateCopy = new Date(itemValue);
  if (Number.isNaN(dateCopy.getTime())) {
    return "";
  }
  if (inputType === "date") {
    return dateCopy.toISOString().substring(0, 10);
  }
  if (inputType === "datetime-local") {
    dateCopy.setMinutes(dateCopy.getMinutes() - dateCopy.getTimezoneOffset());
    return dateCopy.toISOString().substring(0, 19);
  }
  return dateCopy.toISOString().substring(0, 10);
}
function GridFilterInputDate(props) {
  var _a;
  const {
    item,
    applyValue,
    type,
    apiRef: apiRef2,
    focusElementRef,
    InputProps,
    clearButton,
    tabIndex,
    disabled
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const filterTimeout = useTimeout();
  const [filterValueState, setFilterValueState] = React38.useState(() => convertFilterItemValueToInputValue(item.value, type));
  const [applying, setIsApplying] = React38.useState(false);
  const id = useId();
  const rootProps = useGridRootProps2();
  const onFilterChange = React38.useCallback((event) => {
    filterTimeout.clear();
    const value = event.target.value;
    setFilterValueState(value);
    setIsApplying(true);
    filterTimeout.start(rootProps.filterDebounceMs, () => {
      const date = new Date(value);
      applyValue(_extends({}, item, {
        value: Number.isNaN(date.getTime()) ? void 0 : date
      }));
      setIsApplying(false);
    });
  }, [applyValue, item, rootProps.filterDebounceMs, filterTimeout]);
  React38.useEffect(() => {
    const value = convertFilterItemValueToInputValue(item.value, type);
    setFilterValueState(value);
  }, [item.value, type]);
  return (0, import_jsx_runtime24.jsx)(rootProps.slots.baseTextField, _extends({
    fullWidth: true,
    id,
    label: apiRef2.current.getLocaleText("filterPanelInputLabel"),
    placeholder: apiRef2.current.getLocaleText("filterPanelInputPlaceholder"),
    value: filterValueState,
    onChange: onFilterChange,
    variant: "standard",
    type: type || "text",
    InputLabelProps: {
      shrink: true
    },
    inputRef: focusElementRef,
    InputProps: _extends({}, applying || clearButton ? {
      endAdornment: applying ? (0, import_jsx_runtime24.jsx)(rootProps.slots.loadIcon, {
        fontSize: "small",
        color: "action"
      }) : clearButton
    } : {}, {
      disabled
    }, InputProps, {
      inputProps: _extends({
        max: type === "datetime-local" ? "9999-12-31T23:59" : "9999-12-31",
        tabIndex
      }, InputProps == null ? void 0 : InputProps.inputProps)
    })
  }, other, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField));
}
true ? GridFilterInputDate.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types11.default.shape({
    current: import_prop_types11.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types11.default.func.isRequired,
  clearButton: import_prop_types11.default.node,
  focusElementRef: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types11.default.bool,
  item: import_prop_types11.default.shape({
    field: import_prop_types11.default.string.isRequired,
    id: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]),
    operator: import_prop_types11.default.string.isRequired,
    value: import_prop_types11.default.any
  }).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridDateOperators.js
function buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {
  if (!filterItem.value) {
    return null;
  }
  const date = new Date(filterItem.value);
  if (showTime) {
    date.setSeconds(0, 0);
  } else {
    date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
    date.setHours(0, 0, 0, 0);
  }
  const time = date.getTime();
  return (value) => {
    if (!value) {
      return false;
    }
    if (keepHours) {
      return compareFn(value.getTime(), time);
    }
    const dateCopy = new Date(value);
    if (showTime) {
      dateCopy.setSeconds(0, 0);
    } else {
      dateCopy.setHours(0, 0, 0, 0);
    }
    return compareFn(dateCopy.getTime(), time);
  };
}
var getGridDateOperators = (showTime) => [{
  value: "is",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "not",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "after",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "onOrAfter",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "before",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "onOrBefore",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "isEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value == null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value != null;
    };
  },
  requiresFilterValue: false
}];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridEditDateCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React39 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var _excluded12 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "inputProps", "isValidating", "isProcessingProps", "onValueChange"];
var StyledInputBase = styled_default(InputBase_default)({
  fontSize: "inherit"
});
var useUtilityClasses7 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["editInputCell"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridEditDateCell(props) {
  const {
    id,
    value: valueProp,
    field,
    colDef,
    hasFocus,
    inputProps,
    onValueChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const isDateTime = colDef.type === "dateTime";
  const apiRef2 = useGridApiContext();
  const inputRef = React39.useRef();
  const valueTransformed = React39.useMemo(() => {
    let parsedDate;
    if (valueProp == null) {
      parsedDate = null;
    } else if (valueProp instanceof Date) {
      parsedDate = valueProp;
    } else {
      parsedDate = new Date((valueProp ?? "").toString());
    }
    let formattedDate;
    if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {
      formattedDate = "";
    } else {
      const localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1e3);
      formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);
    }
    return {
      parsed: parsedDate,
      formatted: formattedDate
    };
  }, [valueProp, isDateTime]);
  const [valueState, setValueState] = React39.useState(valueTransformed);
  const rootProps = useGridRootProps2();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses7(ownerState);
  const parseValueToDate = React39.useCallback((value) => {
    if (value === "") {
      return null;
    }
    const [date, time] = value.split("T");
    const [year, month, day] = date.split("-");
    const parsedDate = /* @__PURE__ */ new Date();
    parsedDate.setFullYear(Number(year), Number(month) - 1, Number(day));
    parsedDate.setHours(0, 0, 0, 0);
    if (time) {
      const [hours, minutes] = time.split(":");
      parsedDate.setHours(Number(hours), Number(minutes), 0, 0);
    }
    return parsedDate;
  }, []);
  const handleChange = React39.useCallback(async (event) => {
    const newFormattedDate = event.target.value;
    const newParsedDate = parseValueToDate(newFormattedDate);
    if (onValueChange) {
      await onValueChange(event, newParsedDate);
    }
    setValueState({
      parsed: newParsedDate,
      formatted: newFormattedDate
    });
    apiRef2.current.setEditCellValue({
      id,
      field,
      value: newParsedDate
    }, event);
  }, [apiRef2, field, id, onValueChange, parseValueToDate]);
  React39.useEffect(() => {
    setValueState((state) => {
      var _a, _b;
      if (valueTransformed.parsed !== state.parsed && ((_a = valueTransformed.parsed) == null ? void 0 : _a.getTime()) !== ((_b = state.parsed) == null ? void 0 : _b.getTime())) {
        return valueTransformed;
      }
      return state;
    });
  }, [valueTransformed]);
  useEnhancedEffect_default(() => {
    if (hasFocus) {
      inputRef.current.focus();
    }
  }, [hasFocus]);
  return (0, import_jsx_runtime25.jsx)(StyledInputBase, _extends({
    inputRef,
    fullWidth: true,
    className: classes2.root,
    type: isDateTime ? "datetime-local" : "date",
    inputProps: _extends({
      max: isDateTime ? "9999-12-31T23:59" : "9999-12-31"
    }, inputProps),
    value: valueState.formatted,
    onChange: handleChange
  }, other));
}
true ? GridEditDateCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types12.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types12.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types12.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types12.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types12.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types12.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types12.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types12.default.bool,
  isProcessingProps: import_prop_types12.default.bool,
  isValidating: import_prop_types12.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types12.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types12.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types12.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types12.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types12.default.any
} : void 0;
var renderEditDateCell = (params) => (0, import_jsx_runtime25.jsx)(GridEditDateCell, _extends({}, params));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridDateColDef.js
function throwIfNotDateObject({
  value,
  columnType,
  rowId,
  field
}) {
  if (!(value instanceof Date)) {
    throw new Error([`MUI X: \`${columnType}\` column type only accepts \`Date\` objects as values.`, "Use `valueGetter` to transform the value into a `Date` object.", `Row ID: ${rowId}, field: "${field}".`].join("\n"));
  }
}
var gridDateFormatter = (value, row, column, apiRef2) => {
  if (!value) {
    return "";
  }
  const rowId = apiRef2.current.getRowId(row);
  throwIfNotDateObject({
    value,
    columnType: "date",
    rowId,
    field: column.field
  });
  return value.toLocaleDateString();
};
var gridDateTimeFormatter = (value, row, column, apiRef2) => {
  if (!value) {
    return "";
  }
  const rowId = apiRef2.current.getRowId(row);
  throwIfNotDateObject({
    value,
    columnType: "dateTime",
    rowId,
    field: column.field
  });
  return value.toLocaleString();
};
var GRID_DATE_COL_DEF2 = _extends({}, GRID_STRING_COL_DEF2, {
  type: "date",
  sortComparator: gridDateComparator,
  valueFormatter: gridDateFormatter,
  filterOperators: getGridDateOperators(),
  renderEditCell: renderEditDateCell,
  // @ts-ignore
  pastedValueParser: (value) => new Date(value)
});
var GRID_DATETIME_COL_DEF2 = _extends({}, GRID_STRING_COL_DEF2, {
  type: "dateTime",
  sortComparator: gridDateComparator,
  valueFormatter: gridDateTimeFormatter,
  filterOperators: getGridDateOperators(true),
  renderEditCell: renderEditDateCell,
  // @ts-ignore
  pastedValueParser: (value) => new Date(value)
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridNumericColDef.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridNumericOperators.js
var parseNumericValue = (value) => {
  if (value == null) {
    return null;
  }
  return Number(value);
};
var getGridNumericQuickFilterFn = (value) => {
  if (value == null || Number.isNaN(value) || value === "") {
    return null;
  }
  return (columnValue) => {
    return parseNumericValue(columnValue) === parseNumericValue(value);
  };
};
var getGridNumericOperators = () => [{
  value: "=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      return parseNumericValue(value) === filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "!=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      return parseNumericValue(value) !== filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: ">",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) > filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: ">=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) >= filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "<",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) < filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "<=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) <= filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "isEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value == null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value != null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isAnyOf",
  getApplyFilterFn: (filterItem) => {
    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
      return null;
    }
    return (value) => {
      return value != null && filterItem.value.includes(Number(value));
    };
  },
  InputComponent: GridFilterInputMultipleValue,
  InputComponentProps: {
    type: "number"
  }
}];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridNumericColDef.js
var GRID_NUMERIC_COL_DEF = _extends({}, GRID_STRING_COL_DEF2, {
  type: "number",
  align: "right",
  headerAlign: "right",
  sortComparator: gridNumberComparator,
  valueParser: (value) => value === "" ? null : Number(value),
  valueFormatter: (value) => isNumber2(value) ? value.toLocaleString() : value || "",
  filterOperators: getGridNumericOperators(),
  getApplyQuickFilterFn: getGridNumericQuickFilterFn
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React40 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/keyboardUtils.js
var isEscapeKey = (key) => key === "Escape";
var isTabKey = (key) => key === "Tab";
function isPrintableKey(event) {
  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
}
var isNavigationKey2 = (key) => key.indexOf("Arrow") === 0 || key.indexOf("Page") === 0 || key === " " || key === "Home" || key === "End";
var isKeyboardEvent = (event) => !!event.key;
var isHideMenuKey = (key) => isTabKey(key) || isEscapeKey(key);
function isPasteShortcut(event) {
  if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === "v" && !event.shiftKey && !event.altKey) {
    return true;
  }
  return false;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/filterPanelUtils.js
init_extends();
function isSingleSelectColDef2(colDef) {
  return (colDef == null ? void 0 : colDef.type) === "singleSelect";
}
function getValueOptions(column, additionalParams) {
  if (!column) {
    return void 0;
  }
  return typeof column.valueOptions === "function" ? column.valueOptions(_extends({
    field: column.field
  }, additionalParams)) : column.valueOptions;
}
function getValueFromValueOptions(value, valueOptions, getOptionValue) {
  if (valueOptions === void 0) {
    return void 0;
  }
  const result = valueOptions.find((option) => {
    const optionValue = getOptionValue(option);
    return String(optionValue) === String(value);
  });
  return getOptionValue(result);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
var import_react = __toESM(require_react());
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var _excluded13 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange", "initialOpen"];
var _excluded22 = ["MenuProps"];
function isKeyboardEvent2(event) {
  return !!event.key;
}
function GridEditSingleSelectCell(props) {
  var _a, _b;
  const rootProps = useGridRootProps2();
  const {
    id,
    value: valueProp,
    field,
    row,
    colDef,
    hasFocus,
    error,
    onValueChange,
    initialOpen = rootProps.editMode === GridEditModes.Cell
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const apiRef2 = useGridApiContext();
  const ref = React40.useRef();
  const inputRef = React40.useRef();
  const [open, setOpen] = React40.useState(initialOpen);
  const baseSelectProps = ((_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) || {};
  const isSelectNative = baseSelectProps.native ?? false;
  const _ref = ((_b = rootProps.slotProps) == null ? void 0 : _b.baseSelect) || {}, {
    MenuProps
  } = _ref, otherBaseSelectProps = _objectWithoutPropertiesLoose(_ref, _excluded22);
  useEnhancedEffect_default(() => {
    var _a2;
    if (hasFocus) {
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    }
  }, [hasFocus]);
  if (!isSingleSelectColDef2(colDef)) {
    return null;
  }
  const valueOptions = getValueOptions(colDef, {
    id,
    row
  });
  if (!valueOptions) {
    return null;
  }
  const getOptionValue = colDef.getOptionValue;
  const getOptionLabel = colDef.getOptionLabel;
  const handleChange = async (event) => {
    if (!isSingleSelectColDef2(colDef) || !valueOptions) {
      return;
    }
    setOpen(false);
    const target = event.target;
    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptions, getOptionValue);
    if (onValueChange) {
      await onValueChange(event, formattedTargetValue);
    }
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: formattedTargetValue
    }, event);
  };
  const handleClose = (event, reason) => {
    if (rootProps.editMode === GridEditModes.Row) {
      setOpen(false);
      return;
    }
    if (reason === "backdropClick" || isEscapeKey(event.key)) {
      const params = apiRef2.current.getCellParams(id, field);
      apiRef2.current.publishEvent("cellEditStop", _extends({}, params, {
        reason: isEscapeKey(event.key) ? GridCellEditStopReasons.escapeKeyDown : GridCellEditStopReasons.cellFocusOut
      }));
    }
  };
  const handleOpen = (event) => {
    if (isKeyboardEvent2(event) && event.key === "Enter") {
      return;
    }
    setOpen(true);
  };
  if (!valueOptions || !colDef) {
    return null;
  }
  return (0, import_jsx_runtime26.jsx)(rootProps.slots.baseSelect, _extends({
    ref,
    inputRef,
    value: valueProp,
    onChange: handleChange,
    open,
    onOpen: handleOpen,
    MenuProps: _extends({
      onClose: handleClose
    }, MenuProps),
    error,
    native: isSelectNative,
    fullWidth: true
  }, other, otherBaseSelectProps, {
    children: valueOptions.map((valueOption) => {
      var _a2;
      const value = getOptionValue(valueOption);
      return (0, import_react.createElement)(rootProps.slots.baseSelectOption, _extends({}, ((_a2 = rootProps.slotProps) == null ? void 0 : _a2.baseSelectOption) || {}, {
        native: isSelectNative,
        key: value,
        value
      }), getOptionLabel(valueOption));
    })
  }));
}
true ? GridEditSingleSelectCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types13.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types13.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types13.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types13.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types13.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types13.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types13.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]).isRequired,
  /**
   * If true, the select opens by default.
   */
  initialOpen: import_prop_types13.default.bool,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types13.default.bool,
  isProcessingProps: import_prop_types13.default.bool,
  isValidating: import_prop_types13.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {SelectChangeEvent<any>} event The event source of the callback.
   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types13.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types13.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types13.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types13.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types13.default.any
} : void 0;
var renderEditSingleSelectCell = (params) => (0, import_jsx_runtime26.jsx)(GridEditSingleSelectCell, _extends({}, params));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputSingleSelect.js
init_objectWithoutPropertiesLoose();
init_extends();
var React41 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());
init_utils();
var import_react2 = __toESM(require_react());
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var _excluded14 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "placeholder", "tabIndex", "label", "variant", "isFilterActive", "clearButton", "InputLabelProps"];
var renderSingleSelectOptions = ({
  column,
  OptionComponent,
  getOptionLabel,
  getOptionValue,
  isSelectNative,
  baseSelectOptionProps
}) => {
  const iterableColumnValues = ["", ...getValueOptions(column) || []];
  return iterableColumnValues.map((option) => {
    const value = getOptionValue(option);
    let label = getOptionLabel(option);
    if (label === "") {
      label = " ";
    }
    return (0, import_react2.createElement)(OptionComponent, _extends({}, baseSelectOptionProps, {
      native: isSelectNative,
      key: value,
      value
    }), label);
  });
};
var SingleSelectOperatorContainer = styled_default("div")({
  display: "flex",
  alignItems: "flex-end",
  width: "100%",
  [`& button`]: {
    margin: "auto 0px 5px 5px"
  }
});
function GridFilterInputSingleSelect(props) {
  var _a, _b, _c, _d, _e;
  const {
    item,
    applyValue,
    type,
    apiRef: apiRef2,
    focusElementRef,
    placeholder,
    tabIndex,
    label: labelProp,
    variant = "standard",
    clearButton
  } = props, others = _objectWithoutPropertiesLoose(props, _excluded14);
  const filterValue = item.value ?? "";
  const id = useId();
  const labelId = useId();
  const rootProps = useGridRootProps2();
  const isSelectNative = ((_b = (_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) == null ? void 0 : _b.native) ?? false;
  let resolvedColumn = null;
  if (item.field) {
    const column = apiRef2.current.getColumn(item.field);
    if (isSingleSelectColDef2(column)) {
      resolvedColumn = column;
    }
  }
  const getOptionValue = resolvedColumn == null ? void 0 : resolvedColumn.getOptionValue;
  const getOptionLabel = resolvedColumn == null ? void 0 : resolvedColumn.getOptionLabel;
  const currentValueOptions = React41.useMemo(() => {
    return getValueOptions(resolvedColumn);
  }, [resolvedColumn]);
  const onFilterChange = React41.useCallback((event) => {
    let value = event.target.value;
    value = getValueFromValueOptions(value, currentValueOptions, getOptionValue);
    applyValue(_extends({}, item, {
      value
    }));
  }, [currentValueOptions, getOptionValue, applyValue, item]);
  if (!isSingleSelectColDef2(resolvedColumn)) {
    return null;
  }
  const label = labelProp ?? apiRef2.current.getLocaleText("filterPanelInputLabel");
  return (0, import_jsx_runtime27.jsxs)(SingleSelectOperatorContainer, {
    children: [(0, import_jsx_runtime27.jsxs)(rootProps.slots.baseFormControl, {
      fullWidth: true,
      children: [(0, import_jsx_runtime27.jsx)(rootProps.slots.baseInputLabel, _extends({}, (_c = rootProps.slotProps) == null ? void 0 : _c.baseInputLabel, {
        id: labelId,
        htmlFor: id,
        shrink: true,
        variant,
        children: label
      })), (0, import_jsx_runtime27.jsx)(rootProps.slots.baseSelect, _extends({
        id,
        label,
        labelId,
        value: filterValue,
        onChange: onFilterChange,
        variant,
        type: type || "text",
        inputProps: {
          tabIndex,
          ref: focusElementRef,
          placeholder: placeholder ?? apiRef2.current.getLocaleText("filterPanelInputPlaceholder")
        },
        native: isSelectNative,
        notched: variant === "outlined" ? true : void 0
      }, others, (_d = rootProps.slotProps) == null ? void 0 : _d.baseSelect, {
        children: renderSingleSelectOptions({
          column: resolvedColumn,
          OptionComponent: rootProps.slots.baseSelectOption,
          getOptionLabel,
          getOptionValue,
          isSelectNative,
          baseSelectOptionProps: (_e = rootProps.slotProps) == null ? void 0 : _e.baseSelectOption
        })
      }))]
    }), clearButton]
  });
}
true ? GridFilterInputSingleSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types14.default.shape({
    current: import_prop_types14.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types14.default.func.isRequired,
  clearButton: import_prop_types14.default.node,
  focusElementRef: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types14.default.bool,
  item: import_prop_types14.default.shape({
    field: import_prop_types14.default.string.isRequired,
    id: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    operator: import_prop_types14.default.string.isRequired,
    value: import_prop_types14.default.any
  }).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js
init_extends();
init_objectWithoutPropertiesLoose();
var React42 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded15 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant"];
var filter = createFilterOptions();
function GridFilterInputMultipleSingleSelect(props) {
  const {
    item,
    applyValue,
    apiRef: apiRef2,
    focusElementRef,
    color,
    error,
    helperText,
    size,
    variant = "standard"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const TextFieldProps = {
    color,
    error,
    helperText,
    size,
    variant
  };
  const id = useId();
  const rootProps = useGridRootProps2();
  let resolvedColumn = null;
  if (item.field) {
    const column = apiRef2.current.getColumn(item.field);
    if (isSingleSelectColDef2(column)) {
      resolvedColumn = column;
    }
  }
  const getOptionValue = resolvedColumn == null ? void 0 : resolvedColumn.getOptionValue;
  const getOptionLabel = resolvedColumn == null ? void 0 : resolvedColumn.getOptionLabel;
  const isOptionEqualToValue = React42.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);
  const resolvedValueOptions = React42.useMemo(() => {
    return getValueOptions(resolvedColumn) || [];
  }, [resolvedColumn]);
  const filteredValues = React42.useMemo(() => {
    if (!Array.isArray(item.value)) {
      return [];
    }
    return item.value.reduce((acc, value) => {
      const resolvedValue = resolvedValueOptions.find((v) => getOptionValue(v) === value);
      if (resolvedValue != null) {
        acc.push(resolvedValue);
      }
      return acc;
    }, []);
  }, [getOptionValue, item.value, resolvedValueOptions]);
  const handleChange = React42.useCallback((event, value) => {
    applyValue(_extends({}, item, {
      value: value.map(getOptionValue)
    }));
  }, [applyValue, item, getOptionValue]);
  return (0, import_jsx_runtime28.jsx)(Autocomplete_default, _extends({
    multiple: true,
    options: resolvedValueOptions,
    isOptionEqualToValue,
    filterOptions: filter,
    id,
    value: filteredValues,
    onChange: handleChange,
    getOptionLabel,
    renderTags: (value, getTagProps) => value.map((option, index) => (0, import_jsx_runtime28.jsx)(rootProps.slots.baseChip, _extends({
      variant: "outlined",
      size: "small",
      label: getOptionLabel(option)
    }, getTagProps({
      index
    })))),
    renderInput: (params) => {
      var _a;
      return (0, import_jsx_runtime28.jsx)(rootProps.slots.baseTextField, _extends({}, params, {
        label: apiRef2.current.getLocaleText("filterPanelInputLabel"),
        placeholder: apiRef2.current.getLocaleText("filterPanelInputPlaceholder"),
        InputLabelProps: _extends({}, params.InputLabelProps, {
          shrink: true
        }),
        inputRef: focusElementRef,
        type: "singleSelect"
      }, TextFieldProps, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField));
    }
  }, other));
}
true ? GridFilterInputMultipleSingleSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types15.default.shape({
    current: import_prop_types15.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types15.default.func.isRequired,
  focusElementRef: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object]),
  item: import_prop_types15.default.shape({
    field: import_prop_types15.default.string.isRequired,
    id: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    operator: import_prop_types15.default.string.isRequired,
    value: import_prop_types15.default.any
  }).isRequired,
  type: import_prop_types15.default.oneOf(["singleSelect"])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.js
var parseObjectValue = (value) => {
  if (value == null || !isObject(value)) {
    return value;
  }
  return value.value;
};
var getGridSingleSelectOperators = () => [{
  value: "is",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || filterItem.value === "") {
      return null;
    }
    return (value) => parseObjectValue(value) === parseObjectValue(filterItem.value);
  },
  InputComponent: GridFilterInputSingleSelect
}, {
  value: "not",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || filterItem.value === "") {
      return null;
    }
    return (value) => parseObjectValue(value) !== parseObjectValue(filterItem.value);
  },
  InputComponent: GridFilterInputSingleSelect
}, {
  value: "isAnyOf",
  getApplyFilterFn: (filterItem) => {
    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
      return null;
    }
    const filterItemValues = filterItem.value.map(parseObjectValue);
    return (value) => filterItemValues.includes(parseObjectValue(value));
  },
  InputComponent: GridFilterInputMultipleSingleSelect
}];

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js
var isArrayOfObjects = (options) => {
  return typeof options[0] === "object";
};
var defaultGetOptionValue = (value) => {
  return isObject(value) ? value.value : value;
};
var defaultGetOptionLabel = (value) => {
  return isObject(value) ? value.label : String(value);
};
var GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF2, {
  type: "singleSelect",
  getOptionLabel: defaultGetOptionLabel,
  getOptionValue: defaultGetOptionValue,
  valueFormatter(value, row, colDef, apiRef2) {
    const rowId = apiRef2.current.getRowId(row);
    if (!isSingleSelectColDef2(colDef)) {
      return "";
    }
    const valueOptions = getValueOptions(colDef, {
      id: rowId,
      row
    });
    if (value == null) {
      return "";
    }
    if (!valueOptions) {
      return value;
    }
    if (!isArrayOfObjects(valueOptions)) {
      return colDef.getOptionLabel(value);
    }
    const valueOption = valueOptions.find((option) => colDef.getOptionValue(option) === value);
    return valueOption ? colDef.getOptionLabel(valueOption) : "";
  },
  renderEditCell: renderEditSingleSelectCell,
  filterOperators: getGridSingleSelectOperators(),
  // @ts-ignore
  pastedValueParser: (value, row, column) => {
    const colDef = column;
    const valueOptions = getValueOptions(colDef) || [];
    const getOptionValue = colDef.getOptionValue;
    const valueOption = valueOptions.find((option) => {
      if (getOptionValue(option) === value) {
        return true;
      }
      return false;
    });
    if (valueOption) {
      return value;
    }
    return void 0;
  }
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/colDef/gridDefaultColumnTypes.js
var DEFAULT_GRID_COL_TYPE_KEY = "string";
var getGridDefaultColumnTypes2 = () => {
  const nativeColumnTypes = {
    string: GRID_STRING_COL_DEF2,
    number: GRID_NUMERIC_COL_DEF,
    date: GRID_DATE_COL_DEF2,
    dateTime: GRID_DATETIME_COL_DEF2,
    boolean: GRID_BOOLEAN_COL_DEF,
    singleSelect: GRID_SINGLE_SELECT_COL_DEF,
    [GRID_ACTIONS_COLUMN_TYPE2]: GRID_ACTIONS_COL_DEF,
    custom: GRID_STRING_COL_DEF2
  };
  return nativeColumnTypes;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/headerFiltering/gridHeaderFilteringSelectors.js
var gridHeaderFilteringStateSelector = (state) => state.headerFiltering;
var gridHeaderFilteringEnabledSelector = createSelector3(
  gridHeaderFilteringStateSelector,
  // No initialization in MIT, so we need to default to false to be used by `getTotalHeaderHeight`
  (headerFilteringState) => (headerFilteringState == null ? void 0 : headerFilteringState.enabled) ?? false
);
var gridHeaderFilteringEditFieldSelector = createSelector3(gridHeaderFilteringStateSelector, (headerFilteringState) => headerFilteringState.editing);
var gridHeaderFilteringMenuSelector = createSelector3(gridHeaderFilteringStateSelector, (headerFilteringState) => headerFilteringState.menuOpen);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js
var gridColumnGroupingSelector = (state) => state.columnGrouping;
var gridColumnGroupsUnwrappedModelSelector = createSelectorMemoized(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.unwrappedGroupingModel) ?? {});
var gridColumnGroupsLookupSelector = createSelectorMemoized(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.lookup) ?? {});
var gridColumnGroupsHeaderStructureSelector = createSelectorMemoized(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.headerStructure) ?? []);
var gridColumnGroupsHeaderMaxDepthSelector = createSelector3(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.maxDepth) ?? 0);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js
var COLUMNS_DIMENSION_PROPERTIES = ["maxWidth", "minWidth", "width", "flex"];
var COLUMN_TYPES = getGridDefaultColumnTypes2();
function computeFlexColumnsWidth({
  initialFreeSpace,
  totalFlexUnits,
  flexColumns
}) {
  const uniqueFlexColumns = new Set(flexColumns.map((col) => col.field));
  const flexColumnsLookup = {
    all: {},
    frozenFields: [],
    freeze: (field) => {
      const value = flexColumnsLookup.all[field];
      if (value && value.frozen !== true) {
        flexColumnsLookup.all[field].frozen = true;
        flexColumnsLookup.frozenFields.push(field);
      }
    }
  };
  function loopOverFlexItems() {
    if (flexColumnsLookup.frozenFields.length === uniqueFlexColumns.size) {
      return;
    }
    const violationsLookup = {
      min: {},
      max: {}
    };
    let remainingFreeSpace = initialFreeSpace;
    let flexUnits = totalFlexUnits;
    let totalViolation = 0;
    flexColumnsLookup.frozenFields.forEach((field) => {
      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
      flexUnits -= flexColumnsLookup.all[field].flex;
    });
    for (let i2 = 0; i2 < flexColumns.length; i2 += 1) {
      const column = flexColumns[i2];
      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {
        continue;
      }
      const widthPerFlexUnit = remainingFreeSpace / flexUnits;
      let computedWidth = widthPerFlexUnit * column.flex;
      if (computedWidth < column.minWidth) {
        totalViolation += column.minWidth - computedWidth;
        computedWidth = column.minWidth;
        violationsLookup.min[column.field] = true;
      } else if (computedWidth > column.maxWidth) {
        totalViolation += column.maxWidth - computedWidth;
        computedWidth = column.maxWidth;
        violationsLookup.max[column.field] = true;
      }
      flexColumnsLookup.all[column.field] = {
        frozen: false,
        computedWidth,
        flex: column.flex
      };
    }
    if (totalViolation < 0) {
      Object.keys(violationsLookup.max).forEach((field) => {
        flexColumnsLookup.freeze(field);
      });
    } else if (totalViolation > 0) {
      Object.keys(violationsLookup.min).forEach((field) => {
        flexColumnsLookup.freeze(field);
      });
    } else {
      flexColumns.forEach(({
        field
      }) => {
        flexColumnsLookup.freeze(field);
      });
    }
    loopOverFlexItems();
  }
  loopOverFlexItems();
  return flexColumnsLookup.all;
}
var hydrateColumnsWidth = (rawState, dimensions) => {
  const columnsLookup = {};
  let totalFlexUnits = 0;
  let widthAllocatedBeforeFlex = 0;
  const flexColumns = [];
  rawState.orderedFields.forEach((columnField) => {
    const newColumn = _extends({}, rawState.lookup[columnField]);
    if (rawState.columnVisibilityModel[columnField] === false) {
      newColumn.computedWidth = 0;
    } else {
      let computedWidth;
      if (newColumn.flex && newColumn.flex > 0) {
        totalFlexUnits += newColumn.flex;
        computedWidth = 0;
        flexColumns.push(newColumn);
      } else {
        computedWidth = clamp(newColumn.width || GRID_STRING_COL_DEF2.width, newColumn.minWidth || GRID_STRING_COL_DEF2.minWidth, newColumn.maxWidth || GRID_STRING_COL_DEF2.maxWidth);
      }
      widthAllocatedBeforeFlex += computedWidth;
      newColumn.computedWidth = computedWidth;
    }
    columnsLookup[columnField] = newColumn;
  });
  const availableWidth = dimensions === void 0 ? 0 : dimensions.viewportOuterSize.width - (dimensions.hasScrollY ? dimensions.scrollbarSize : 0);
  const initialFreeSpace = Math.max(availableWidth - widthAllocatedBeforeFlex, 0);
  if (totalFlexUnits > 0 && availableWidth > 0) {
    const computedColumnWidths = computeFlexColumnsWidth({
      initialFreeSpace,
      totalFlexUnits,
      flexColumns
    });
    Object.keys(computedColumnWidths).forEach((field) => {
      columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;
    });
  }
  return _extends({}, rawState, {
    lookup: columnsLookup
  });
};
var applyInitialState = (columnsState, initialState) => {
  if (!initialState) {
    return columnsState;
  }
  const {
    orderedFields = [],
    dimensions = {}
  } = initialState;
  const columnsWithUpdatedDimensions = Object.keys(dimensions);
  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
    return columnsState;
  }
  const orderedFieldsLookup = {};
  const cleanOrderedFields = [];
  for (let i2 = 0; i2 < orderedFields.length; i2 += 1) {
    const field = orderedFields[i2];
    if (columnsState.lookup[field]) {
      orderedFieldsLookup[field] = true;
      cleanOrderedFields.push(field);
    }
  }
  const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [...cleanOrderedFields, ...columnsState.orderedFields.filter((field) => !orderedFieldsLookup[field])];
  const newColumnLookup = _extends({}, columnsState.lookup);
  for (let i2 = 0; i2 < columnsWithUpdatedDimensions.length; i2 += 1) {
    const field = columnsWithUpdatedDimensions[i2];
    const newColDef = _extends({}, newColumnLookup[field], {
      hasBeenResized: true
    });
    Object.entries(dimensions[field]).forEach(([key, value]) => {
      newColDef[key] = value === -1 ? Infinity : value;
    });
    newColumnLookup[field] = newColDef;
  }
  const newColumnsState = _extends({}, columnsState, {
    orderedFields: newOrderedFields,
    lookup: newColumnLookup
  });
  return newColumnsState;
};
function getDefaultColTypeDef(type) {
  let colDef = COLUMN_TYPES[DEFAULT_GRID_COL_TYPE_KEY];
  if (type && COLUMN_TYPES[type]) {
    colDef = COLUMN_TYPES[type];
  }
  return colDef;
}
var createColumnsState = ({
  apiRef: apiRef2,
  columnsToUpsert,
  initialState,
  columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef2),
  keepOnlyColumnsToUpsert = false
}) => {
  var _a, _b;
  const isInsideStateInitializer = !apiRef2.current.state.columns;
  let columnsState;
  if (isInsideStateInitializer) {
    columnsState = {
      orderedFields: [],
      lookup: {},
      columnVisibilityModel
    };
  } else {
    const currentState = gridColumnsStateSelector(apiRef2.current.state);
    columnsState = {
      orderedFields: keepOnlyColumnsToUpsert ? [] : [...currentState.orderedFields],
      lookup: _extends({}, currentState.lookup),
      // Will be cleaned later if keepOnlyColumnsToUpsert=true
      columnVisibilityModel
    };
  }
  let columnsToKeep = {};
  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
    columnsToKeep = Object.keys(columnsState.lookup).reduce((acc, key) => _extends({}, acc, {
      [key]: false
    }), {});
  }
  const columnsToUpsertLookup = {};
  columnsToUpsert.forEach((newColumn) => {
    const {
      field
    } = newColumn;
    columnsToUpsertLookup[field] = true;
    columnsToKeep[field] = true;
    let existingState = columnsState.lookup[field];
    if (existingState == null) {
      existingState = _extends({}, getDefaultColTypeDef(newColumn.type), {
        field,
        hasBeenResized: false
      });
      columnsState.orderedFields.push(field);
    } else if (keepOnlyColumnsToUpsert) {
      columnsState.orderedFields.push(field);
    }
    if (existingState && existingState.type !== newColumn.type) {
      existingState = _extends({}, getDefaultColTypeDef(newColumn.type), {
        field
      });
    }
    let hasBeenResized = existingState.hasBeenResized;
    COLUMNS_DIMENSION_PROPERTIES.forEach((key) => {
      if (newColumn[key] !== void 0) {
        hasBeenResized = true;
        if (newColumn[key] === -1) {
          newColumn[key] = Infinity;
        }
      }
    });
    columnsState.lookup[field] = _extends({}, existingState, newColumn, {
      hasBeenResized
    });
  });
  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
    Object.keys(columnsState.lookup).forEach((field) => {
      if (!columnsToKeep[field]) {
        delete columnsState.lookup[field];
      }
    });
  }
  const columnsStateWithPreProcessing = apiRef2.current.unstable_applyPipeProcessors("hydrateColumns", columnsState);
  const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);
  return hydrateColumnsWidth(columnsStateWithPortableColumns, ((_b = (_a = apiRef2.current).getRootDimensions) == null ? void 0 : _b.call(_a)) ?? void 0);
};
function getFirstNonSpannedColumnToRender({
  firstColumnToRender,
  apiRef: apiRef2,
  firstRowToRender,
  lastRowToRender,
  visibleRows
}) {
  let firstNonSpannedColumnToRender = firstColumnToRender;
  for (let i2 = firstRowToRender; i2 < lastRowToRender; i2 += 1) {
    const row = visibleRows[i2];
    if (row) {
      const rowId = visibleRows[i2].id;
      const cellColSpanInfo = apiRef2.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);
      if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
        firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
      }
    }
  }
  return firstNonSpannedColumnToRender;
}
function getTotalHeaderHeight2(apiRef2, props) {
  const densityFactor = gridDensityFactorSelector(apiRef2);
  const maxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef2);
  const isHeaderFilteringEnabled = gridHeaderFilteringEnabledSelector(apiRef2);
  const columnHeadersHeight = Math.floor(props.columnHeaderHeight * densityFactor);
  const filterHeadersHeight = isHeaderFilteringEnabled ? Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor) : 0;
  return columnHeadersHeight * (1 + (maxDepth ?? 0)) + filterHeadersHeight;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/fastMemo.js
var React43 = __toESM(require_react());
function fastMemo(component) {
  return React43.memo(component, fastObjectShallowCompare);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridScrollArea.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var CLIFF = 1;
var SLOP = 1.5;
var useUtilityClasses8 = (ownerState) => {
  const {
    scrollDirection,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["scrollArea", `scrollArea--${scrollDirection}`]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridScrollAreaRawRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ScrollArea",
  overridesResolver: (props, styles) => [{
    [`&.${gridClasses2["scrollArea--left"]}`]: styles["scrollArea--left"]
  }, {
    [`&.${gridClasses2["scrollArea--right"]}`]: styles["scrollArea--right"]
  }, styles.scrollArea]
})(() => ({
  position: "absolute",
  top: 0,
  zIndex: 101,
  width: 20,
  bottom: 0,
  [`&.${gridClasses2["scrollArea--left"]}`]: {
    left: 0
  },
  [`&.${gridClasses2["scrollArea--right"]}`]: {
    right: 0
  }
}));
function GridScrollAreaRaw(props) {
  const {
    scrollDirection
  } = props;
  const rootRef = React44.useRef(null);
  const apiRef2 = useGridApiContext();
  const timeout = useTimeout();
  const densityFactor = useGridSelector2(apiRef2, gridDensityFactorSelector);
  const columnsTotalWidth = useGridSelector2(apiRef2, gridColumnsTotalWidthSelector);
  const dimensions = useGridSelector2(apiRef2, gridDimensionsSelector2);
  const scrollPosition = React44.useRef({
    left: 0,
    top: 0
  });
  const getCanScrollMore = () => {
    if (scrollDirection === "left") {
      return scrollPosition.current.left > 0;
    }
    if (scrollDirection === "right") {
      const maxScrollLeft = columnsTotalWidth - dimensions.viewportInnerSize.width;
      return scrollPosition.current.left < maxScrollLeft;
    }
    return false;
  };
  const [dragging, setDragging] = React44.useState(false);
  const [canScrollMore, setCanScrollMore] = React44.useState(getCanScrollMore);
  const rootProps = useGridRootProps2();
  const ownerState = _extends({}, rootProps, {
    scrollDirection
  });
  const classes2 = useUtilityClasses8(ownerState);
  const totalHeaderHeight = getTotalHeaderHeight2(apiRef2, rootProps);
  const headerHeight = Math.floor(rootProps.columnHeaderHeight * densityFactor);
  const style = {
    height: headerHeight,
    top: totalHeaderHeight - headerHeight
  };
  if (scrollDirection === "left") {
    style.left = dimensions.leftPinnedWidth;
  } else if (scrollDirection === "right") {
    style.right = dimensions.rightPinnedWidth + (dimensions.hasScrollX ? dimensions.scrollbarSize : 0);
  }
  const handleScrolling = (newScrollPosition) => {
    scrollPosition.current = newScrollPosition;
    setCanScrollMore(getCanScrollMore);
  };
  const handleDragOver = useEventCallback_default((event) => {
    let offset;
    event.preventDefault();
    if (scrollDirection === "left") {
      offset = event.clientX - rootRef.current.getBoundingClientRect().right;
    } else if (scrollDirection === "right") {
      offset = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);
    } else {
      throw new Error("MUI X: Wrong drag direction");
    }
    offset = (offset - CLIFF) * SLOP + CLIFF;
    timeout.start(0, () => {
      apiRef2.current.scroll({
        left: scrollPosition.current.left + offset,
        top: scrollPosition.current.top
      });
    });
  });
  const handleColumnHeaderDragStart = useEventCallback_default(() => {
    setDragging(true);
  });
  const handleColumnHeaderDragEnd = useEventCallback_default(() => {
    setDragging(false);
  });
  useGridApiEventHandler2(apiRef2, "scrollPositionChange", handleScrolling);
  useGridApiEventHandler2(apiRef2, "columnHeaderDragStart", handleColumnHeaderDragStart);
  useGridApiEventHandler2(apiRef2, "columnHeaderDragEnd", handleColumnHeaderDragEnd);
  if (!dragging || !canScrollMore) {
    return null;
  }
  return (0, import_jsx_runtime29.jsx)(GridScrollAreaRawRoot, {
    ref: rootRef,
    className: clsx_default(classes2.root),
    ownerState,
    onDragOver: handleDragOver,
    style
  });
}
var GridScrollArea = fastMemo(GridScrollAreaRaw);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js
init_extends();
var React48 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
init_utils();
init_useLazyRef();
init_useTimeout();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js
var React45 = __toESM(require_react());
var GridPrivateApiContext = React45.createContext(void 0);
if (true) {
  GridPrivateApiContext.displayName = "GridPrivateApiContext";
}
function useGridPrivateApiContext() {
  const privateApiRef = React45.useContext(GridPrivateApiContext);
  if (privateApiRef === void 0) {
    throw new Error(["MUI X: Could not find the data grid private context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
  }
  return privateApiRef;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js
var React46 = __toESM(require_react());
var getVisibleRows = (apiRef2, props) => {
  let rows;
  let range2;
  if (props.pagination && props.paginationMode === "client") {
    range2 = gridPaginationRowRangeSelector(apiRef2);
    rows = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef2);
  } else {
    rows = gridExpandedSortedRowEntriesSelector(apiRef2);
    if (rows.length === 0) {
      range2 = null;
    } else {
      range2 = {
        firstRowIndex: 0,
        lastRowIndex: rows.length - 1
      };
    }
  }
  return {
    rows,
    range: range2
  };
};
var useGridVisibleRows2 = (apiRef2, props) => {
  const response = getVisibleRows(apiRef2, props);
  return React46.useMemo(() => ({
    rows: response.rows,
    range: response.range
  }), [response.rows, response.range]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js
var gridRowsMetaSelector = (state) => state.rowsMeta;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js
var gridVirtualizationSelector = (state) => state.virtualization;
var gridVirtualizationEnabledSelector = createSelector3(gridVirtualizationSelector, (state) => state.enabled);
var gridVirtualizationColumnEnabledSelector = createSelector3(gridVirtualizationSelector, (state) => state.enabledForColumns);
var gridRenderContextSelector = createSelector3(gridVirtualizationSelector, (state) => state.renderContext);
var gridRenderContextColumnsSelector = createSelectorMemoized((state) => state.virtualization.renderContext.firstColumnIndex, (state) => state.virtualization.renderContext.lastColumnIndex, (firstColumnIndex, lastColumnIndex) => ({
  firstColumnIndex,
  lastColumnIndex
}));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualization.js
init_extends();
var React47 = __toESM(require_react());
var EMPTY_RENDER_CONTEXT = {
  firstRowIndex: 0,
  lastRowIndex: 0,
  firstColumnIndex: 0,
  lastColumnIndex: 0
};
var virtualizationStateInitializer2 = (state, props) => {
  const virtualization = {
    enabled: !props.disableVirtualization,
    enabledForColumns: true,
    renderContext: EMPTY_RENDER_CONTEXT
  };
  return _extends({}, state, {
    virtualization
  });
};
function useGridVirtualization2(apiRef2, props) {
  const setVirtualization = (enabled) => {
    apiRef2.current.setState((state) => _extends({}, state, {
      virtualization: _extends({}, state.virtualization, {
        enabled
      })
    }));
  };
  const setColumnVirtualization = (enabled) => {
    apiRef2.current.setState((state) => _extends({}, state, {
      virtualization: _extends({}, state.virtualization, {
        enabledForColumns: enabled
      })
    }));
  };
  const api = {
    unstable_setVirtualization: setVirtualization,
    unstable_setColumnVirtualization: setColumnVirtualization
  };
  useGridApiMethod2(apiRef2, api, "public");
  React47.useEffect(() => {
    setVirtualization(!props.disableVirtualization);
  }, [props.disableVirtualization]);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var MINIMUM_COLUMN_WIDTH = 50;
var ScrollDirection = function(ScrollDirection2) {
  ScrollDirection2[ScrollDirection2["NONE"] = 0] = "NONE";
  ScrollDirection2[ScrollDirection2["UP"] = 1] = "UP";
  ScrollDirection2[ScrollDirection2["DOWN"] = 2] = "DOWN";
  ScrollDirection2[ScrollDirection2["LEFT"] = 3] = "LEFT";
  ScrollDirection2[ScrollDirection2["RIGHT"] = 4] = "RIGHT";
  return ScrollDirection2;
}(ScrollDirection || {});
var EMPTY_SCROLL_POSITION = {
  top: 0,
  left: 0
};
var EMPTY_DETAIL_PANELS = Object.freeze(/* @__PURE__ */ new Map());
var createScrollCache = (mode, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) => ({
  direction: ScrollDirection.NONE,
  buffer: bufferForDirection(mode, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)
});
var isJSDOM = typeof window !== "undefined" ? /jsdom/.test(window.navigator.userAgent) : false;
var useGridVirtualScroller = () => {
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps2();
  const visibleColumns = useGridSelector2(apiRef2, gridVisibleColumnDefinitionsSelector);
  const enabled = useGridSelector2(apiRef2, gridVirtualizationEnabledSelector) && !isJSDOM;
  const enabledForColumns = useGridSelector2(apiRef2, gridVirtualizationColumnEnabledSelector) && !isJSDOM;
  const dimensions = useGridSelector2(apiRef2, gridDimensionsSelector2);
  const outerSize = dimensions.viewportOuterSize;
  const pinnedRows = useGridSelector2(apiRef2, gridPinnedRowsSelector);
  const pinnedColumns = useGridSelector2(apiRef2, gridVisiblePinnedColumnDefinitionsSelector);
  const hasBottomPinnedRows = pinnedRows.bottom.length > 0;
  const [panels, setPanels] = React48.useState(EMPTY_DETAIL_PANELS);
  const theme = useTheme();
  const cellFocus = useGridSelector2(apiRef2, gridFocusCellSelector2);
  const cellTabIndex = useGridSelector2(apiRef2, gridTabIndexCellSelector);
  const rowsMeta = useGridSelector2(apiRef2, gridRowsMetaSelector);
  const selectedRowsLookup = useGridSelector2(apiRef2, selectedIdsLookupSelector);
  const currentPage = useGridVisibleRows2(apiRef2, rootProps);
  const gridRootRef = apiRef2.current.rootElementRef;
  const mainRef = apiRef2.current.mainElementRef;
  const scrollerRef = apiRef2.current.virtualScrollerRef;
  const scrollbarVerticalRef = React48.useRef(null);
  const scrollbarHorizontalRef = React48.useRef(null);
  const contentHeight = dimensions.contentSize.height;
  const columnsTotalWidth = dimensions.columnsTotalWidth;
  const hasColSpan = useGridSelector2(apiRef2, gridHasColSpanSelector);
  useResizeObserver(mainRef, () => apiRef2.current.resize());
  const scrollPosition = React48.useRef(EMPTY_SCROLL_POSITION);
  const previousContextScrollPosition = React48.useRef(EMPTY_SCROLL_POSITION);
  const previousRowContext = React48.useRef(EMPTY_RENDER_CONTEXT);
  const renderContext = useGridSelector2(apiRef2, gridRenderContextSelector);
  const scrollTimeout = useTimeout();
  const frozenContext = React48.useRef(void 0);
  const scrollCache = useLazyRef(() => createScrollCache(theme.direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)).current;
  const focusedCell = {
    rowIndex: React48.useMemo(() => cellFocus ? currentPage.rows.findIndex((row) => row.id === cellFocus.id) : -1, [cellFocus, currentPage.rows]),
    columnIndex: React48.useMemo(() => cellFocus ? visibleColumns.findIndex((column) => column.field === cellFocus.field) : -1, [cellFocus, visibleColumns])
  };
  const updateRenderContext = React48.useCallback((nextRenderContext) => {
    if (areRenderContextsEqual(nextRenderContext, apiRef2.current.state.virtualization.renderContext)) {
      return;
    }
    const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        virtualization: _extends({}, state.virtualization, {
          renderContext: nextRenderContext
        })
      });
    });
    if (dimensions.isReady && didRowsIntervalChange) {
      previousRowContext.current = nextRenderContext;
      apiRef2.current.publishEvent("renderedRowsIntervalChange", nextRenderContext);
    }
    previousContextScrollPosition.current = scrollPosition.current;
  }, [apiRef2, dimensions.isReady]);
  const triggerUpdateRenderContext = () => {
    const newScroll = {
      top: scrollerRef.current.scrollTop,
      left: scrollerRef.current.scrollLeft
    };
    const dx = newScroll.left - scrollPosition.current.left;
    const dy = newScroll.top - scrollPosition.current.top;
    const isScrolling = dx !== 0 || dy !== 0;
    scrollPosition.current = newScroll;
    const direction = isScrolling ? directionForDelta(dx, dy) : ScrollDirection.NONE;
    const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);
    const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);
    const didCrossThreshold = rowScroll >= dimensions.rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;
    const didChangeDirection = scrollCache.direction !== direction;
    const shouldUpdate = didCrossThreshold || didChangeDirection;
    if (!shouldUpdate) {
      return renderContext;
    }
    if (didChangeDirection) {
      switch (direction) {
        case ScrollDirection.NONE:
        case ScrollDirection.LEFT:
        case ScrollDirection.RIGHT:
          frozenContext.current = void 0;
          break;
        default:
          frozenContext.current = renderContext;
          break;
      }
    }
    scrollCache.direction = direction;
    scrollCache.buffer = bufferForDirection(theme.direction, direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);
    const inputs = inputsSelector(apiRef2, rootProps, enabled, enabledForColumns);
    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
    ReactDOM.flushSync(() => {
      updateRenderContext(nextRenderContext);
    });
    scrollTimeout.start(1e3, triggerUpdateRenderContext);
    return nextRenderContext;
  };
  const forceUpdateRenderContext = () => {
    const inputs = inputsSelector(apiRef2, rootProps, enabled, enabledForColumns);
    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
    updateRenderContext(nextRenderContext);
  };
  const handleScroll = useEventCallback_default((event) => {
    const {
      scrollTop,
      scrollLeft
    } = event.currentTarget;
    if (scrollTop < 0) {
      return;
    }
    if (theme.direction === "ltr") {
      if (scrollLeft < 0) {
        return;
      }
    }
    if (theme.direction === "rtl") {
      if (scrollLeft > 0) {
        return;
      }
    }
    const nextRenderContext = triggerUpdateRenderContext();
    apiRef2.current.publishEvent("scrollPositionChange", {
      top: scrollTop,
      left: scrollLeft,
      renderContext: nextRenderContext
    });
  });
  const handleWheel = useEventCallback_default((event) => {
    apiRef2.current.publishEvent("virtualScrollerWheel", {}, event);
  });
  const handleTouchMove = useEventCallback_default((event) => {
    apiRef2.current.publishEvent("virtualScrollerTouchMove", {}, event);
  });
  const getRows = (params = {}) => {
    var _a;
    if (!params.rows && !currentPage.range) {
      return [];
    }
    const baseRenderContext = params.renderContext ?? renderContext;
    const isLastSection = !hasBottomPinnedRows && params.position === void 0 || hasBottomPinnedRows && params.position === "bottom";
    const isPinnedSection = params.position !== void 0;
    let rowIndexOffset;
    switch (params.position) {
      case "top":
        rowIndexOffset = 0;
        break;
      case "bottom":
        rowIndexOffset = pinnedRows.top.length + currentPage.rows.length;
        break;
      case void 0:
        rowIndexOffset = pinnedRows.top.length;
        break;
    }
    const rowModels = params.rows ?? currentPage.rows;
    const firstRowToRender = baseRenderContext.firstRowIndex;
    const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);
    const rowIndexes = params.rows ? range(0, params.rows.length) : range(firstRowToRender, lastRowToRender);
    let virtualRowIndex = -1;
    if (!isPinnedSection && focusedCell.rowIndex !== -1) {
      if (focusedCell.rowIndex < firstRowToRender) {
        virtualRowIndex = focusedCell.rowIndex;
        rowIndexes.unshift(virtualRowIndex);
      }
      if (focusedCell.rowIndex >= lastRowToRender) {
        virtualRowIndex = focusedCell.rowIndex;
        rowIndexes.push(virtualRowIndex);
      }
    }
    const rows = [];
    const rowProps = (_a = rootProps.slotProps) == null ? void 0 : _a.row;
    const columnPositions = gridColumnPositionsSelector(apiRef2);
    rowIndexes.forEach((rowIndexInPage) => {
      var _a2, _b, _c;
      const {
        id,
        model
      } = rowModels[rowIndexInPage];
      if (hasColSpan) {
        const minFirstColumn = pinnedColumns.left.length;
        const maxLastColumn = visibleColumns.length - pinnedColumns.right.length;
        apiRef2.current.calculateColSpan({
          rowId: id,
          minFirstColumn,
          maxLastColumn,
          columns: visibleColumns
        });
        if (pinnedColumns.left.length > 0) {
          apiRef2.current.calculateColSpan({
            rowId: id,
            minFirstColumn: 0,
            maxLastColumn: pinnedColumns.left.length,
            columns: visibleColumns
          });
        }
        if (pinnedColumns.right.length > 0) {
          apiRef2.current.calculateColSpan({
            rowId: id,
            minFirstColumn: visibleColumns.length - pinnedColumns.right.length,
            maxLastColumn: visibleColumns.length,
            columns: visibleColumns
          });
        }
      }
      const hasFocus = (cellFocus == null ? void 0 : cellFocus.id) === id;
      const baseRowHeight = !apiRef2.current.rowHasAutoHeight(id) ? apiRef2.current.unstable_getRowHeight(id) : "auto";
      let isSelected;
      if (selectedRowsLookup[id] == null) {
        isSelected = false;
      } else {
        isSelected = apiRef2.current.isRowSelectable(id);
      }
      let isFirstVisible = false;
      if (params.position === void 0) {
        isFirstVisible = rowIndexInPage === 0;
      }
      let isLastVisible = false;
      if (isLastSection) {
        if (!isPinnedSection) {
          const lastIndex = currentPage.rows.length - 1;
          const isLastVisibleRowIndex = rowIndexInPage === lastIndex;
          if (isLastVisibleRowIndex) {
            isLastVisible = true;
          }
        } else {
          isLastVisible = rowIndexInPage === rowModels.length - 1;
        }
      }
      const isVirtualRow = rowIndexInPage === virtualRowIndex;
      const isNotVisible = isVirtualRow;
      let tabbableCell = null;
      if (cellTabIndex !== null && cellTabIndex.id === id) {
        const cellParams = apiRef2.current.getCellParams(id, cellTabIndex.field);
        tabbableCell = cellParams.cellMode === "view" ? cellTabIndex.field : null;
      }
      let currentRenderContext = baseRenderContext;
      if (!isPinnedSection && frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {
        currentRenderContext = frozenContext.current;
      }
      const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, theme.direction, pinnedColumns.left.length);
      const rowIndex = (((_a2 = currentPage == null ? void 0 : currentPage.range) == null ? void 0 : _a2.firstRowIndex) || 0) + rowIndexOffset + rowIndexInPage;
      rows.push((0, import_jsx_runtime30.jsx)(rootProps.slots.row, _extends({
        row: model,
        rowId: id,
        index: rowIndex,
        selected: isSelected,
        offsetTop: params.rows ? void 0 : rowsMeta.positions[rowIndexInPage],
        offsetLeft,
        dimensions,
        rowHeight: baseRowHeight,
        tabbableCell,
        pinnedColumns,
        visibleColumns,
        renderContext: currentRenderContext,
        focusedColumnIndex: hasFocus ? focusedCell.columnIndex : void 0,
        isFirstVisible,
        isLastVisible,
        isNotVisible
      }, rowProps), id));
      const panel = panels.get(id);
      if (panel) {
        rows.push(panel);
      }
      if (isLastVisible) {
        rows.push((_c = (_b = apiRef2.current).getInfiniteLoadingTriggerElement) == null ? void 0 : _c.call(_b, {
          lastRowId: id
        }));
      }
    });
    return rows;
  };
  const needsHorizontalScrollbar = outerSize.width && columnsTotalWidth >= outerSize.width;
  const scrollerStyle = React48.useMemo(() => ({
    overflowX: !needsHorizontalScrollbar ? "hidden" : void 0,
    overflowY: rootProps.autoHeight ? "hidden" : void 0
  }), [needsHorizontalScrollbar, rootProps.autoHeight]);
  const contentSize = React48.useMemo(() => {
    const height = Math.max(contentHeight, 1);
    const size = {
      width: needsHorizontalScrollbar ? columnsTotalWidth : "auto",
      height
    };
    if (rootProps.autoHeight) {
      if (currentPage.rows.length === 0) {
        size.height = getMinimalContentHeight(apiRef2);
      } else {
        size.height = contentHeight;
      }
    }
    return size;
  }, [apiRef2, columnsTotalWidth, contentHeight, needsHorizontalScrollbar, rootProps.autoHeight, currentPage.rows.length]);
  React48.useEffect(() => {
    apiRef2.current.publishEvent("virtualScrollerContentSizeChange");
  }, [apiRef2, contentSize]);
  useEnhancedEffect_default(() => {
    apiRef2.current.resize();
  }, [apiRef2, rowsMeta.currentPageTotalHeight]);
  useEnhancedEffect_default(() => {
    if (enabled) {
      scrollerRef.current.scrollLeft = 0;
      scrollerRef.current.scrollTop = 0;
    }
  }, [enabled, gridRootRef, scrollerRef]);
  useRunOnce(outerSize.width !== 0, () => {
    const inputs = inputsSelector(apiRef2, rootProps, enabled, enabledForColumns);
    const initialRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
    updateRenderContext(initialRenderContext);
    apiRef2.current.publishEvent("scrollPositionChange", {
      top: scrollPosition.current.top,
      left: scrollPosition.current.left,
      renderContext: initialRenderContext
    });
  });
  apiRef2.current.register("private", {
    updateRenderContext: forceUpdateRenderContext
  });
  useGridApiEventHandler2(apiRef2, "columnsChange", forceUpdateRenderContext);
  useGridApiEventHandler2(apiRef2, "filteredRowsSet", forceUpdateRenderContext);
  useGridApiEventHandler2(apiRef2, "rowExpansionChange", forceUpdateRenderContext);
  return {
    renderContext,
    setPanels,
    getRows,
    getContainerProps: () => ({
      ref: mainRef
    }),
    getScrollerProps: () => ({
      ref: scrollerRef,
      tabIndex: -1,
      onScroll: handleScroll,
      onWheel: handleWheel,
      onTouchMove: handleTouchMove,
      style: scrollerStyle,
      role: "presentation"
    }),
    getContentProps: () => ({
      style: contentSize,
      role: "presentation"
    }),
    getRenderZoneProps: () => ({
      role: "rowgroup"
    }),
    getScrollbarVerticalProps: () => ({
      ref: scrollbarVerticalRef,
      role: "presentation"
    }),
    getScrollbarHorizontalProps: () => ({
      ref: scrollbarHorizontalRef,
      role: "presentation"
    })
  };
};
function inputsSelector(apiRef2, rootProps, enabled, enabledForColumns) {
  const dimensions = gridDimensionsSelector2(apiRef2.current.state);
  const currentPage = getVisibleRows(apiRef2, rootProps);
  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
  const lastRowId = apiRef2.current.state.rows.dataRowIds.at(-1);
  const lastColumn = visibleColumns.at(-1);
  return {
    enabled,
    enabledForColumns,
    apiRef: apiRef2,
    autoHeight: rootProps.autoHeight,
    rowBufferPx: rootProps.rowBufferPx,
    columnBufferPx: rootProps.columnBufferPx,
    leftPinnedWidth: dimensions.leftPinnedWidth,
    columnsTotalWidth: dimensions.columnsTotalWidth,
    viewportInnerWidth: dimensions.viewportInnerSize.width,
    viewportInnerHeight: dimensions.viewportInnerSize.height,
    lastRowHeight: lastRowId !== void 0 ? apiRef2.current.unstable_getRowHeight(lastRowId) : 0,
    lastColumnWidth: (lastColumn == null ? void 0 : lastColumn.computedWidth) ?? 0,
    rowsMeta: gridRowsMetaSelector(apiRef2.current.state),
    columnPositions: gridColumnPositionsSelector(apiRef2),
    rows: currentPage.rows,
    range: currentPage.range,
    pinnedColumns: gridVisiblePinnedColumnDefinitionsSelector(apiRef2),
    visibleColumns
  };
}
function computeRenderContext(inputs, scrollPosition, scrollCache) {
  let renderContext;
  if (!inputs.enabled) {
    renderContext = {
      firstRowIndex: 0,
      lastRowIndex: inputs.rows.length,
      firstColumnIndex: 0,
      lastColumnIndex: inputs.visibleColumns.length
    };
  } else {
    const {
      top,
      left
    } = scrollPosition;
    const realLeft = Math.abs(left) + inputs.leftPinnedWidth;
    const firstRowIndex = Math.min(getNearestIndexToRender(inputs, top, {
      atStart: true,
      lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight
    }), inputs.rowsMeta.positions.length - 1);
    const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top + inputs.viewportInnerHeight);
    let firstColumnIndex = 0;
    let lastColumnIndex = inputs.columnPositions.length;
    if (inputs.enabledForColumns) {
      let hasRowWithAutoHeight = false;
      const [firstRowToRender, lastRowToRender] = getIndexesToRender({
        firstIndex: firstRowIndex,
        lastIndex: lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: inputs.rows.length,
        bufferBefore: scrollCache.buffer.rowBefore,
        bufferAfter: scrollCache.buffer.rowAfter,
        positions: inputs.rowsMeta.positions,
        lastSize: inputs.lastRowHeight
      });
      for (let i2 = firstRowToRender; i2 < lastRowToRender && !hasRowWithAutoHeight; i2 += 1) {
        const row = inputs.rows[i2];
        hasRowWithAutoHeight = inputs.apiRef.current.rowHasAutoHeight(row.id);
      }
      if (!hasRowWithAutoHeight) {
        firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {
          atStart: true,
          lastPosition: inputs.columnsTotalWidth
        });
        lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);
      }
    }
    renderContext = {
      firstRowIndex,
      lastRowIndex,
      firstColumnIndex,
      lastColumnIndex
    };
  }
  const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);
  return actualRenderContext;
}
function getNearestIndexToRender(inputs, offset, options) {
  var _a, _b;
  const lastMeasuredIndexRelativeToAllRows = inputs.apiRef.current.getLastMeasuredRowIndex();
  let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;
  if (((_a = inputs.range) == null ? void 0 : _a.lastRowIndex) && !allRowsMeasured) {
    allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;
  }
  const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_b = inputs.range) == null ? void 0 : _b.firstRowIndex) || 0), 0, inputs.rowsMeta.positions.length);
  if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {
    return binarySearch(offset, inputs.rowsMeta.positions, options);
  }
  return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);
}
function deriveRenderContext(inputs, nextRenderContext, scrollCache) {
  const [firstRowToRender, lastRowToRender] = getIndexesToRender({
    firstIndex: nextRenderContext.firstRowIndex,
    lastIndex: nextRenderContext.lastRowIndex,
    minFirstIndex: 0,
    maxLastIndex: inputs.rows.length,
    bufferBefore: scrollCache.buffer.rowBefore,
    bufferAfter: scrollCache.buffer.rowAfter,
    positions: inputs.rowsMeta.positions,
    lastSize: inputs.lastRowHeight
  });
  const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({
    firstIndex: nextRenderContext.firstColumnIndex,
    lastIndex: nextRenderContext.lastColumnIndex,
    minFirstIndex: inputs.pinnedColumns.left.length,
    maxLastIndex: inputs.visibleColumns.length - inputs.pinnedColumns.right.length,
    bufferBefore: scrollCache.buffer.columnBefore,
    bufferAfter: scrollCache.buffer.columnAfter,
    positions: inputs.columnPositions,
    lastSize: inputs.lastColumnWidth
  });
  const firstColumnToRender = getFirstNonSpannedColumnToRender({
    firstColumnToRender: initialFirstColumnToRender,
    apiRef: inputs.apiRef,
    firstRowToRender,
    lastRowToRender,
    visibleRows: inputs.rows
  });
  return {
    firstRowIndex: firstRowToRender,
    lastRowIndex: lastRowToRender,
    firstColumnIndex: firstColumnToRender,
    lastColumnIndex: lastColumnToRender
  };
}
function binarySearch(offset, positions, options = void 0, sliceStart = 0, sliceEnd = positions.length) {
  if (positions.length <= 0) {
    return -1;
  }
  if (sliceStart >= sliceEnd) {
    return sliceStart;
  }
  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
  const position = positions[pivot];
  let isBefore;
  if (options == null ? void 0 : options.atStart) {
    const width = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position;
    isBefore = offset - width < position;
  } else {
    isBefore = offset <= position;
  }
  return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);
}
function exponentialSearch(offset, positions, index, options = void 0) {
  let interval = 1;
  while (index < positions.length && Math.abs(positions[index]) < offset) {
    index += interval;
    interval *= 2;
  }
  return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));
}
function getIndexesToRender({
  firstIndex,
  lastIndex,
  bufferBefore,
  bufferAfter,
  minFirstIndex,
  maxLastIndex,
  positions,
  lastSize
}) {
  const firstPosition = positions[firstIndex] - bufferBefore;
  const lastPosition = positions[lastIndex] + bufferAfter;
  const firstIndexPadded = binarySearch(firstPosition, positions, {
    atStart: true,
    lastPosition: positions[positions.length - 1] + lastSize
  });
  const lastIndexPadded = binarySearch(lastPosition, positions);
  return [clamp(firstIndexPadded, minFirstIndex, maxLastIndex), clamp(lastIndexPadded, minFirstIndex, maxLastIndex)];
}
function areRenderContextsEqual(context1, context2) {
  if (context1 === context2) {
    return true;
  }
  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;
}
function computeOffsetLeft(columnPositions, renderContext, direction, pinnedLeftLength) {
  const factor = direction === "ltr" ? 1 : -1;
  const left = factor * (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);
  return Math.abs(left);
}
function directionForDelta(dx, dy) {
  if (dx === 0 && dy === 0) {
    return ScrollDirection.NONE;
  }
  if (Math.abs(dy) >= Math.abs(dx)) {
    if (dy > 0) {
      return ScrollDirection.DOWN;
    } else {
      return ScrollDirection.UP;
    }
  } else {
    if (dx > 0) {
      return ScrollDirection.RIGHT;
    } else {
      return ScrollDirection.LEFT;
    }
  }
}
function bufferForDirection(mode, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {
  if (mode === "rtl") {
    switch (direction) {
      case ScrollDirection.LEFT:
        direction = ScrollDirection.RIGHT;
        break;
      case ScrollDirection.RIGHT:
        direction = ScrollDirection.LEFT;
        break;
      default:
    }
  }
  switch (direction) {
    case ScrollDirection.NONE:
      return {
        rowAfter: rowBufferPx,
        rowBefore: rowBufferPx,
        columnAfter: columnBufferPx,
        columnBefore: columnBufferPx
      };
    case ScrollDirection.LEFT:
      return {
        rowAfter: 0,
        rowBefore: 0,
        columnAfter: 0,
        columnBefore: horizontalBuffer
      };
    case ScrollDirection.RIGHT:
      return {
        rowAfter: 0,
        rowBefore: 0,
        columnAfter: horizontalBuffer,
        columnBefore: 0
      };
    case ScrollDirection.UP:
      return {
        rowAfter: 0,
        rowBefore: verticalBuffer,
        columnAfter: 0,
        columnBefore: 0
      };
    case ScrollDirection.DOWN:
      return {
        rowAfter: verticalBuffer,
        rowBefore: 0,
        columnAfter: 0,
        columnBefore: 0
      };
    default:
      throw new Error("unreachable");
  }
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/base/GridOverlays.js
init_extends();
var React49 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());
init_utils();
init_clsx();
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var GridOverlayWrapperRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "OverlayWrapper",
  shouldForwardProp: (prop) => prop !== "overlayType",
  overridesResolver: (props, styles) => styles.overlayWrapper
})(({
  overlayType
}) => ({
  position: "sticky",
  // To stay in place while scrolling
  top: "var(--DataGrid-headersTotalHeight)",
  left: 0,
  width: 0,
  // To stay above the content instead of shifting it down
  height: 0,
  // To stay above the content instead of shifting it down
  zIndex: overlayType === "loadingOverlay" ? 5 : 4
  // Should be above pinned columns and detail panel
}));
var GridOverlayWrapperInner = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "OverlayWrapperInner",
  shouldForwardProp: (prop) => prop !== "overlayType",
  overridesResolver: (props, styles) => styles.overlayWrapperInner
})({});
var useUtilityClasses9 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["overlayWrapper"],
    inner: ["overlayWrapperInner"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridOverlayWrapper(props) {
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const currentPage = useGridVisibleRows2(apiRef2, rootProps);
  const dimensions = useGridSelector2(apiRef2, gridDimensionsSelector2);
  let height = dimensions.viewportOuterSize.height - dimensions.headersTotalHeight - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0);
  if (rootProps.autoHeight && currentPage.rows.length === 0 || height === 0) {
    height = getMinimalContentHeight(apiRef2);
  }
  const classes2 = useUtilityClasses9(_extends({}, props, {
    classes: rootProps.classes
  }));
  return (0, import_jsx_runtime31.jsx)(GridOverlayWrapperRoot, {
    className: clsx_default(classes2.root),
    overlayType: props.overlayType,
    children: (0, import_jsx_runtime31.jsx)(GridOverlayWrapperInner, _extends({
      className: clsx_default(classes2.inner),
      style: {
        height,
        width: dimensions.viewportOuterSize.width
      }
    }, props))
  });
}
true ? GridOverlayWrapper.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  overlayType: import_prop_types16.default.string.isRequired
} : void 0;
function GridOverlays() {
  var _a, _b, _c;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const totalRowCount = useGridSelector2(apiRef2, gridRowCountSelector);
  const visibleRowCount = useGridSelector2(apiRef2, gridExpandedRowCountSelector);
  const loading = useGridSelector2(apiRef2, gridRowsLoadingSelector);
  const showNoRowsOverlay = !loading && totalRowCount === 0;
  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
  let overlay = null;
  let overlayType = "";
  if (showNoRowsOverlay) {
    overlay = (0, import_jsx_runtime31.jsx)(rootProps.slots.noRowsOverlay, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.noRowsOverlay));
    overlayType = "noRowsOverlay";
  }
  if (showNoResultsOverlay) {
    overlay = (0, import_jsx_runtime31.jsx)(rootProps.slots.noResultsOverlay, _extends({}, (_b = rootProps.slotProps) == null ? void 0 : _b.noResultsOverlay));
    overlayType = "noResultsOverlay";
  }
  if (loading) {
    overlay = (0, import_jsx_runtime31.jsx)(rootProps.slots.loadingOverlay, _extends({}, (_c = rootProps.slotProps) == null ? void 0 : _c.loadingOverlay));
    overlayType = "loadingOverlay";
  }
  if (overlay === null) {
    return null;
  }
  return (0, import_jsx_runtime31.jsx)(GridOverlayWrapper, {
    overlayType,
    children: overlay
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridHeaders.js
init_extends();
var React50 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.js
var gridColumnMenuSelector = (state) => state.columnMenu;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridHeaders.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
function GridHeaders() {
  var _a;
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps2();
  const visibleColumns = useGridSelector2(apiRef2, gridVisibleColumnDefinitionsSelector);
  const filterColumnLookup = useGridSelector2(apiRef2, gridFilterActiveItemsLookupSelector);
  const sortColumnLookup = useGridSelector2(apiRef2, gridSortColumnLookupSelector);
  const columnHeaderTabIndexState = useGridSelector2(apiRef2, gridTabIndexColumnHeaderSelector);
  const cellTabIndexState = useGridSelector2(apiRef2, gridTabIndexCellSelector);
  const columnGroupHeaderTabIndexState = useGridSelector2(apiRef2, gridTabIndexColumnGroupHeaderSelector);
  const columnHeaderFocus = useGridSelector2(apiRef2, gridFocusColumnHeaderSelector);
  const columnGroupHeaderFocus = useGridSelector2(apiRef2, gridFocusColumnGroupHeaderSelector);
  const headerGroupingMaxDepth = useGridSelector2(apiRef2, gridColumnGroupsHeaderMaxDepthSelector);
  const columnMenuState = useGridSelector2(apiRef2, gridColumnMenuSelector);
  const columnVisibility = useGridSelector2(apiRef2, gridColumnVisibilityModelSelector);
  const columnGroupsHeaderStructure = useGridSelector2(apiRef2, gridColumnGroupsHeaderStructureSelector);
  const hasOtherElementInTabSequence = !(columnGroupHeaderTabIndexState === null && columnHeaderTabIndexState === null && cellTabIndexState === null);
  const columnsContainerRef = React50.useRef(null);
  apiRef2.current.register("private", {
    columnHeadersContainerRef: columnsContainerRef
  });
  return (0, import_jsx_runtime32.jsx)(rootProps.slots.columnHeaders, _extends({
    ref: columnsContainerRef,
    visibleColumns,
    filterColumnLookup,
    sortColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.columnHeaders));
}
var MemoizedGridHeaders = fastMemo(GridHeaders);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridMainContainer.js
init_extends();
var React51 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridAriaAttributes.js
var useGridAriaAttributes = () => {
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps2();
  const visibleColumns = useGridSelector2(apiRef2, gridVisibleColumnDefinitionsSelector);
  const totalRowCount = useGridSelector2(apiRef2, gridRowCountSelector);
  const headerGroupingMaxDepth = useGridSelector2(apiRef2, gridColumnGroupsHeaderMaxDepthSelector);
  const pinnedRowsCount = useGridSelector2(apiRef2, gridPinnedRowsCountSelector);
  let role = "grid";
  if (rootProps.treeData) {
    role = "treegrid";
  }
  return {
    role,
    "aria-colcount": visibleColumns.length,
    "aria-rowcount": headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,
    "aria-multiselectable": isMultipleRowSelectionEnabled(rootProps)
  };
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridMainContainer.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var Element2 = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "Main",
  overridesResolver: (props, styles) => styles.main
})({
  flexGrow: 1,
  position: "relative",
  overflow: "hidden"
});
var GridMainContainer = React51.forwardRef((props, ref) => {
  const ariaAttributes = useGridAriaAttributes();
  const rootProps = useGridRootProps2();
  return (0, import_jsx_runtime33.jsx)(Element2, _extends({
    ref,
    ownerState: rootProps,
    className: props.className,
    tabIndex: -1
  }, ariaAttributes, {
    children: props.children
  }));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridTopContainer.js
init_extends();
var React52 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var useUtilityClasses10 = () => {
  const slots = {
    root: ["topContainer"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, {});
};
var Element3 = styled_default2("div")({
  position: "sticky",
  zIndex: 4,
  top: 0,
  "&::after": {
    content: '" "',
    position: "absolute",
    zIndex: 5,
    bottom: 0,
    left: 0,
    right: 0,
    height: 1,
    width: "var(--DataGrid-rowWidth)",
    backgroundColor: "var(--DataGrid-rowBorderColor)"
  }
});
function GridTopContainer(props) {
  const classes2 = useUtilityClasses10();
  return (0, import_jsx_runtime34.jsx)(Element3, _extends({}, props, {
    className: clsx_default(classes2.root, props.className, gridClasses2["container--top"]),
    role: "presentation"
  }));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridBottomContainer.js
init_extends();
var React53 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var useUtilityClasses11 = () => {
  const slots = {
    root: ["bottomContainer"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, {});
};
var Element4 = styled_default2("div")({
  position: "sticky",
  zIndex: 4,
  bottom: "calc(var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))"
});
function GridBottomContainer(props) {
  const classes2 = useUtilityClasses11();
  return (0, import_jsx_runtime35.jsx)(Element4, _extends({}, props, {
    className: clsx_default(classes2.root, props.className, gridClasses2["container--bottom"]),
    role: "presentation"
  }));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerContent.js
init_extends();
var React54 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var useUtilityClasses12 = (props, overflowedContent) => {
  const {
    classes: classes2
  } = props;
  const slots = {
    root: ["virtualScrollerContent", overflowedContent && "virtualScrollerContent--overflowed"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var VirtualScrollerContentRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "VirtualScrollerContent",
  overridesResolver: (props, styles) => styles.virtualScrollerContent
})({});
var GridVirtualScrollerContent = React54.forwardRef(function GridVirtualScrollerContent2(props, ref) {
  var _a;
  const rootProps = useGridRootProps2();
  const overflowedContent = !rootProps.autoHeight && ((_a = props.style) == null ? void 0 : _a.minHeight) === "auto";
  const classes2 = useUtilityClasses12(rootProps, overflowedContent);
  return (0, import_jsx_runtime36.jsx)(VirtualScrollerContentRoot, _extends({
    ref
  }, props, {
    ownerState: rootProps,
    className: clsx_default(classes2.root, props.className)
  }));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerFiller.js
var React55 = __toESM(require_react());
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var Filler = styled_default2("div")({
  display: "flex",
  flexDirection: "row",
  width: "var(--DataGrid-rowWidth)",
  boxSizing: "border-box"
});
var Pinned = styled_default2("div")({
  position: "sticky",
  height: "100%",
  boxSizing: "border-box",
  borderTop: "1px solid var(--DataGrid-rowBorderColor)",
  backgroundColor: "var(--DataGrid-pinnedBackground)"
});
var PinnedLeft = styled_default2(Pinned)({
  left: 0,
  borderRight: "1px solid var(--DataGrid-rowBorderColor)"
});
var PinnedRight = styled_default2(Pinned)({
  right: 0,
  borderLeft: "1px solid var(--DataGrid-rowBorderColor)"
});
var Main = styled_default2("div")({
  flexGrow: 1,
  borderTop: "1px solid var(--DataGrid-rowBorderColor)"
});
function GridVirtualScrollerFiller() {
  const apiRef2 = useGridApiContext();
  const {
    viewportOuterSize,
    minimumSize,
    hasScrollX,
    hasScrollY,
    scrollbarSize,
    leftPinnedWidth,
    rightPinnedWidth
  } = useGridSelector2(apiRef2, gridDimensionsSelector2);
  const scrollbarHeight = hasScrollX ? scrollbarSize : 0;
  const expandedHeight = viewportOuterSize.height - minimumSize.height - scrollbarHeight;
  const height = Math.max(scrollbarHeight, expandedHeight);
  if (height === 0) {
    return null;
  }
  return (0, import_jsx_runtime37.jsxs)(Filler, {
    className: gridClasses2.filler,
    role: "presentation",
    style: {
      height
    },
    children: [leftPinnedWidth > 0 && (0, import_jsx_runtime37.jsx)(PinnedLeft, {
      className: gridClasses2["filler--pinnedLeft"],
      style: {
        width: leftPinnedWidth
      }
    }), (0, import_jsx_runtime37.jsx)(Main, {}), rightPinnedWidth > 0 && (0, import_jsx_runtime37.jsx)(PinnedRight, {
      className: gridClasses2["filler--pinnedRight"],
      style: {
        width: rightPinnedWidth + (hasScrollY ? scrollbarSize : 0)
      }
    })]
  });
}
var Memoized = fastMemo(GridVirtualScrollerFiller);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerRenderZone.js
init_extends();
init_objectWithoutPropertiesLoose();
var React56 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var _excluded16 = ["className"];
var useUtilityClasses13 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["virtualScrollerRenderZone"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var VirtualScrollerRenderZoneRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "VirtualScrollerRenderZone",
  overridesResolver: (props, styles) => styles.virtualScrollerRenderZone
})({
  position: "absolute",
  display: "flex",
  // Prevents margin collapsing when using `getRowSpacing`
  flexDirection: "column"
});
var GridVirtualScrollerRenderZone = React56.forwardRef(function GridVirtualScrollerRenderZone2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses13(rootProps);
  const offsetTop = useGridSelector2(apiRef2, () => {
    const renderContext = gridRenderContextSelector(apiRef2);
    const rowsMeta = gridRowsMetaSelector(apiRef2.current.state);
    return rowsMeta.positions[renderContext.firstRowIndex] ?? 0;
  });
  return (0, import_jsx_runtime38.jsx)(VirtualScrollerRenderZoneRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState: rootProps,
    style: {
      transform: `translate3d(0, ${offsetTop}px, 0)`
    }
  }, other));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollbar.js
var React57 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnResize/columnResizeSelector.js
var gridColumnResizeSelector = (state) => state.columnResize;
var gridResizingColumnFieldSelector = createSelector3(gridColumnResizeSelector, (columnResize) => columnResize.resizingColumnField);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnResize/gridColumnResizeApi.js
var DEFAULT_GRID_AUTOSIZE_OPTIONS = {
  includeHeaders: true,
  includeOutliers: false,
  outliersFactor: 1.5,
  expand: false
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.js
var gridPreferencePanelStateSelector = (state) => state.preferencePanel;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js
var GridPreferencePanelsValue = function(GridPreferencePanelsValue2) {
  GridPreferencePanelsValue2["filters"] = "filters";
  GridPreferencePanelsValue2["columns"] = "columns";
  return GridPreferencePanelsValue2;
}(GridPreferencePanelsValue || {});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollbar.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var useUtilityClasses14 = (ownerState, position) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["scrollbar", `scrollbar--${position}`],
    content: ["scrollbarContent"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var Scrollbar = styled_default2("div")({
  position: "absolute",
  display: "inline-block",
  zIndex: 6,
  "& > div": {
    display: "inline-block"
  },
  // In macOS Safari and Gnome Web, scrollbars are overlaid and don't affect the layout. So we consider
  // their size to be 0px throughout all the calculations, but the floating scrollbar container does need
  // to appear and have a real size. We set it to 14px because it seems like an acceptable value and we
  // don't have a method to find the required size for scrollbars on those platforms.
  "--size": "calc(max(var(--DataGrid-scrollbarSize), 14px))"
});
var ScrollbarVertical = styled_default2(Scrollbar)({
  width: "var(--size)",
  height: "calc(var(--DataGrid-hasScrollY) * (100% - var(--DataGrid-topContainerHeight) - var(--DataGrid-bottomContainerHeight) - var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize)))",
  overflowY: "auto",
  overflowX: "hidden",
  // Disable focus-visible style, it's a scrollbar.
  outline: 0,
  "& > div": {
    width: "var(--size)"
  },
  top: "var(--DataGrid-topContainerHeight)",
  right: "0px"
});
var ScrollbarHorizontal = styled_default2(Scrollbar)({
  width: "100%",
  height: "var(--size)",
  overflowY: "hidden",
  overflowX: "auto",
  // Disable focus-visible style, it's a scrollbar.
  outline: 0,
  "& > div": {
    height: "var(--size)"
  },
  bottom: "0px"
});
var Content = styled_default2("div")({
  display: "inline-block"
});
var GridVirtualScrollbar = React57.forwardRef(function GridVirtualScrollbar2(props, ref) {
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps2();
  const isLocked = React57.useRef(false);
  const lastPosition = React57.useRef(0);
  const scrollbarRef = React57.useRef(null);
  const contentRef = React57.useRef(null);
  const classes2 = useUtilityClasses14(rootProps, props.position);
  const dimensions = useGridSelector2(apiRef2, gridDimensionsSelector2);
  const propertyDimension = props.position === "vertical" ? "height" : "width";
  const propertyScroll = props.position === "vertical" ? "scrollTop" : "scrollLeft";
  const hasScroll = props.position === "vertical" ? dimensions.hasScrollX : dimensions.hasScrollY;
  const contentSize = dimensions.minimumSize[propertyDimension] + (hasScroll ? dimensions.scrollbarSize : 0);
  const scrollbarSize = props.position === "vertical" ? dimensions.viewportInnerSize.height : dimensions.viewportOuterSize.width;
  const scrollbarInnerSize = scrollbarSize * (contentSize / dimensions.viewportOuterSize[propertyDimension]);
  const onScrollerScroll = useEventCallback_default(() => {
    const scroller = apiRef2.current.virtualScrollerRef.current;
    const scrollbar = scrollbarRef.current;
    if (scroller[propertyScroll] === lastPosition.current) {
      return;
    }
    if (isLocked.current) {
      isLocked.current = false;
      return;
    }
    isLocked.current = true;
    const value = scroller[propertyScroll] / contentSize;
    scrollbar[propertyScroll] = value * scrollbarInnerSize;
    lastPosition.current = scroller[propertyScroll];
  });
  const onScrollbarScroll = useEventCallback_default(() => {
    const scroller = apiRef2.current.virtualScrollerRef.current;
    const scrollbar = scrollbarRef.current;
    if (isLocked.current) {
      isLocked.current = false;
      return;
    }
    isLocked.current = true;
    const value = scrollbar[propertyScroll] / scrollbarInnerSize;
    scroller[propertyScroll] = value * contentSize;
  });
  useOnMount(() => {
    const scroller = apiRef2.current.virtualScrollerRef.current;
    const scrollbar = scrollbarRef.current;
    scroller.addEventListener("scroll", onScrollerScroll, {
      capture: true
    });
    scrollbar.addEventListener("scroll", onScrollbarScroll, {
      capture: true
    });
    return () => {
      scroller.removeEventListener("scroll", onScrollerScroll, {
        capture: true
      });
      scrollbar.removeEventListener("scroll", onScrollbarScroll, {
        capture: true
      });
    };
  });
  React57.useEffect(() => {
    const content = contentRef.current;
    content.style.setProperty(propertyDimension, `${scrollbarInnerSize}px`);
  }, [scrollbarInnerSize, propertyDimension]);
  const Container = props.position === "vertical" ? ScrollbarVertical : ScrollbarHorizontal;
  return (0, import_jsx_runtime39.jsx)(Container, {
    ref: useForkRef(ref, scrollbarRef),
    className: classes2.root,
    tabIndex: -1,
    children: (0, import_jsx_runtime39.jsx)(Content, {
      ref: contentRef,
      className: classes2.content
    })
  });
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScroller.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var useUtilityClasses15 = (ownerState, dimensions) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["main", dimensions.rightPinnedWidth > 0 && "main--hasPinnedRight"],
    scroller: ["virtualScroller"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var Scroller = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "VirtualScroller",
  overridesResolver: (props, styles) => styles.virtualScroller
})({
  position: "relative",
  height: "100%",
  overflow: "scroll",
  scrollbarWidth: "none",
  "&::-webkit-scrollbar": {
    display: "none"
    /* Safari and Chrome */
  },
  "@media print": {
    overflow: "hidden"
  },
  // See https://github.com/mui/mui-x/issues/10547
  zIndex: 0
});
function GridVirtualScroller2(props) {
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const dimensions = useGridSelector2(apiRef2, gridDimensionsSelector2);
  const classes2 = useUtilityClasses15(rootProps, dimensions);
  const virtualScroller = useGridVirtualScroller();
  const {
    getContainerProps,
    getScrollerProps,
    getContentProps,
    getRenderZoneProps,
    getScrollbarVerticalProps,
    getScrollbarHorizontalProps,
    getRows
  } = virtualScroller;
  const rows = getRows();
  return (0, import_jsx_runtime40.jsxs)(GridMainContainer, _extends({
    className: classes2.root
  }, getContainerProps(), {
    children: [(0, import_jsx_runtime40.jsx)(GridScrollArea, {
      scrollDirection: "left"
    }), (0, import_jsx_runtime40.jsx)(GridScrollArea, {
      scrollDirection: "right"
    }), (0, import_jsx_runtime40.jsxs)(Scroller, _extends({
      className: classes2.scroller
    }, getScrollerProps(), {
      ownerState: rootProps,
      children: [(0, import_jsx_runtime40.jsxs)(GridTopContainer, {
        children: [(0, import_jsx_runtime40.jsx)(MemoizedGridHeaders, {}), (0, import_jsx_runtime40.jsx)(rootProps.slots.pinnedRows, {
          position: "top",
          virtualScroller
        })]
      }), (0, import_jsx_runtime40.jsx)(GridOverlays, {}), (0, import_jsx_runtime40.jsx)(GridVirtualScrollerContent, _extends({}, getContentProps(), {
        children: (0, import_jsx_runtime40.jsxs)(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {
          children: [rows, (0, import_jsx_runtime40.jsx)(rootProps.slots.detailPanels, {
            virtualScroller
          })]
        }))
      })), rows.length > 0 && (0, import_jsx_runtime40.jsx)(Memoized, {}), (0, import_jsx_runtime40.jsx)(GridBottomContainer, {
        children: (0, import_jsx_runtime40.jsx)(rootProps.slots.pinnedRows, {
          position: "bottom",
          virtualScroller
        })
      })]
    })), dimensions.hasScrollY && (0, import_jsx_runtime40.jsx)(GridVirtualScrollbar, _extends({
      position: "vertical"
    }, getScrollbarVerticalProps())), dimensions.hasScrollX && (0, import_jsx_runtime40.jsx)(GridVirtualScrollbar, _extends({
      position: "horizontal"
    }, getScrollbarHorizontalProps())), props.children]
  }));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/base/GridFooterPlaceholder.js
init_extends();
var React59 = __toESM(require_react());
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
function GridFooterPlaceholder2() {
  var _a;
  const rootProps = useGridRootProps2();
  if (rootProps.hideFooter) {
    return null;
  }
  return (0, import_jsx_runtime41.jsx)(rootProps.slots.footer, _extends(
    {},
    (_a = rootProps.slotProps) == null ? void 0 : _a.footer
    /* FIXME: typing error */
  ));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React61 = __toESM(require_react());
var import_prop_types17 = __toESM(require_prop_types());
init_clsx();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/doesSupportPreventScroll.js
var cachedSupportsPreventScroll;
function doesSupportPreventScroll() {
  if (cachedSupportsPreventScroll === void 0) {
    document.createElement("div").focus({
      get preventScroll() {
        cachedSupportsPreventScroll = true;
        return false;
      }
    });
  }
  return cachedSupportsPreventScroll;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js
var React60 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/domUtils.js
function isOverflown(element) {
  return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}
function findParentElementFromClassName(elem, className) {
  return elem.closest(`.${className}`);
}
function escapeOperandAttributeSelector(operand) {
  return operand.replace(/["\\]/g, "\\$&");
}
function getGridColumnHeaderElement(root, field) {
  return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`);
}
function getGridRowElementSelector(id) {
  return `.${gridClasses2.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`;
}
function getGridRowElement(root, id) {
  return root.querySelector(getGridRowElementSelector(id));
}
function getGridCellElement(root, {
  id,
  field
}) {
  const rowSelector = getGridRowElementSelector(id);
  const cellSelector = `.${gridClasses2.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`;
  const selector = `${rowSelector} ${cellSelector}`;
  return root.querySelector(selector);
}
var getActiveElement = (root = document) => {
  const activeEl = root.activeElement;
  if (!activeEl) {
    return null;
  }
  if (activeEl.shadowRoot) {
    return getActiveElement(activeEl.shadowRoot);
  }
  return activeEl;
};
function isEventTargetInPortal(event) {
  if (
    // The target is not an element when triggered by a Select inside the cell
    // See https://github.com/mui/material-ui/issues/10534
    event.target.nodeType === 1 && !event.currentTarget.contains(event.target)
  ) {
    return true;
  }
  return false;
}
function getFieldFromHeaderElem(colCellEl) {
  return colCellEl.getAttribute("data-field");
}
function findHeaderElementFromField(elem, field) {
  return elem.querySelector(`[data-field="${field}"]`);
}
function getFieldsFromGroupHeaderElem(colCellEl) {
  const fieldsString = colCellEl.getAttribute("data-fields");
  return (fieldsString == null ? void 0 : fieldsString.startsWith("|-")) ? fieldsString.slice(2, -2).split("-|-") : [];
}
function findGroupHeaderElementsFromField(elem, field) {
  return Array.from(elem.querySelectorAll(`[data-fields*="|-${field}-|"]`) ?? []);
}
function findGridCellElementsFromCol(col, api) {
  var _a;
  const root = findParentElementFromClassName(col, gridClasses2.root);
  if (!root) {
    throw new Error("MUI X: The root element is not found.");
  }
  const ariaColIndex = col.getAttribute("aria-colindex");
  if (!ariaColIndex) {
    return [];
  }
  const colIndex = Number(ariaColIndex) - 1;
  const cells = [];
  if (!((_a = api.virtualScrollerRef) == null ? void 0 : _a.current)) {
    return [];
  }
  queryRows(api).forEach((rowElement) => {
    const rowId = rowElement.getAttribute("data-id");
    if (!rowId) {
      return;
    }
    let columnIndex = colIndex;
    const cellColSpanInfo = api.unstable_getCellColSpanInfo(rowId, colIndex);
    if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
      columnIndex = cellColSpanInfo.leftVisibleCellIndex;
    }
    const cell = rowElement.querySelector(`[data-colindex="${columnIndex}"]`);
    if (cell) {
      cells.push(cell);
    }
  });
  return cells;
}
function findGridElement(api, klass) {
  return api.rootElementRef.current.querySelector(`.${gridClasses2[klass]}`);
}
var findPinnedCells = ({
  api,
  colIndex,
  position,
  filterFn
}) => {
  if (colIndex === null) {
    return [];
  }
  const cells = [];
  queryRows(api).forEach((rowElement) => {
    const rowId = rowElement.getAttribute("data-id");
    if (!rowId) {
      return;
    }
    rowElement.querySelectorAll(`.${gridClasses2[position === "left" ? "cell--pinnedLeft" : "cell--pinnedRight"]}`).forEach((cell) => {
      const currentColIndex = parseCellColIndex(cell);
      if (currentColIndex !== null && filterFn(currentColIndex)) {
        cells.push(cell);
      }
    });
  });
  return cells;
};
function findLeftPinnedCellsAfterCol(api, col) {
  const colIndex = parseCellColIndex(col);
  return findPinnedCells({
    api,
    colIndex,
    position: "left",
    filterFn: (index) => index > colIndex
  });
}
function findRightPinnedCellsBeforeCol(api, col) {
  const colIndex = parseCellColIndex(col);
  return findPinnedCells({
    api,
    colIndex,
    position: "right",
    filterFn: (index) => index < colIndex
  });
}
var findPinnedHeaders = ({
  api,
  colIndex,
  position,
  filterFn
}) => {
  var _a;
  if (!((_a = api.columnHeadersContainerRef) == null ? void 0 : _a.current)) {
    return [];
  }
  if (colIndex === null) {
    return [];
  }
  const elements = [];
  api.columnHeadersContainerRef.current.querySelectorAll(`.${gridClasses2[position === "left" ? "columnHeader--pinnedLeft" : "columnHeader--pinnedRight"]}`).forEach((element) => {
    const currentColIndex = parseCellColIndex(element);
    if (currentColIndex !== null && filterFn(currentColIndex)) {
      elements.push(element);
    }
  });
  return elements;
};
function findLeftPinnedHeadersAfterCol(api, col) {
  const colIndex = parseCellColIndex(col);
  return findPinnedHeaders({
    api,
    position: "left",
    colIndex,
    filterFn: (index) => index > colIndex
  });
}
function findRightPinnedHeadersBeforeCol(api, col) {
  const colIndex = parseCellColIndex(col);
  return findPinnedHeaders({
    api,
    position: "right",
    colIndex,
    filterFn: (index) => index < colIndex
  });
}
function findGridHeader(api, field) {
  const headers = api.columnHeadersContainerRef.current;
  return headers.querySelector(`:scope > div > [data-field="${field}"][role="columnheader"]`);
}
function findGridCells(api, field) {
  const container = api.virtualScrollerRef.current;
  return Array.from(container.querySelectorAll(`:scope > div > div > div > [data-field="${field}"][role="gridcell"]`));
}
function queryRows(api) {
  return api.virtualScrollerRef.current.querySelectorAll(
    // Use > to ignore rows from nested data grids (for example in detail panel)
    `:scope > div > div > .${gridClasses2.row}`
  );
}
function parseCellColIndex(col) {
  const ariaColIndex = col.getAttribute("aria-colindex");
  if (!ariaColIndex) {
    return null;
  }
  return Number(ariaColIndex) - 1;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js
var MissingRowIdError = class extends Error {
};
function useGridParamsApi2(apiRef2) {
  const getColumnHeaderParams = React60.useCallback((field) => ({
    field,
    colDef: apiRef2.current.getColumn(field)
  }), [apiRef2]);
  const getRowParams = React60.useCallback((id) => {
    const row = apiRef2.current.getRow(id);
    if (!row) {
      throw new MissingRowIdError(`No row with id #${id} found`);
    }
    const params = {
      id,
      columns: apiRef2.current.getAllColumns(),
      row
    };
    return params;
  }, [apiRef2]);
  const getCellParams = React60.useCallback((id, field) => {
    const colDef = apiRef2.current.getColumn(field);
    const row = apiRef2.current.getRow(id);
    const rowNode = apiRef2.current.getRowNode(id);
    if (!row || !rowNode) {
      throw new MissingRowIdError(`No row with id #${id} found`);
    }
    const rawValue = row[field];
    const value = (colDef == null ? void 0 : colDef.valueGetter) ? colDef.valueGetter(rawValue, row, colDef, apiRef2) : rawValue;
    const cellFocus = gridFocusCellSelector2(apiRef2);
    const cellTabIndex = gridTabIndexCellSelector(apiRef2);
    const params = {
      id,
      field,
      row,
      rowNode,
      colDef,
      cellMode: apiRef2.current.getCellMode(id, field),
      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
      value,
      formattedValue: value,
      isEditable: false
    };
    if (colDef && colDef.valueFormatter) {
      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef2);
    }
    params.isEditable = colDef && apiRef2.current.isCellEditable(params);
    return params;
  }, [apiRef2]);
  const getCellValue = React60.useCallback((id, field) => {
    const colDef = apiRef2.current.getColumn(field);
    const row = apiRef2.current.getRow(id);
    if (!row) {
      throw new MissingRowIdError(`No row with id #${id} found`);
    }
    if (!colDef || !colDef.valueGetter) {
      return row[field];
    }
    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef2);
  }, [apiRef2]);
  const getRowValue = React60.useCallback((row, colDef) => {
    const field = colDef.field;
    if (!colDef || !colDef.valueGetter) {
      return row[field];
    }
    const value = row[colDef.field];
    return colDef.valueGetter(value, row, colDef, apiRef2);
  }, [apiRef2]);
  const getRowFormattedValue = React60.useCallback((row, colDef) => {
    const value = getRowValue(row, colDef);
    if (!colDef || !colDef.valueFormatter) {
      return value;
    }
    return colDef.valueFormatter(value, row, colDef, apiRef2);
  }, [apiRef2, getRowValue]);
  const getColumnHeaderElement = React60.useCallback((field) => {
    if (!apiRef2.current.rootElementRef.current) {
      return null;
    }
    return getGridColumnHeaderElement(apiRef2.current.rootElementRef.current, field);
  }, [apiRef2]);
  const getRowElement = React60.useCallback((id) => {
    if (!apiRef2.current.rootElementRef.current) {
      return null;
    }
    return getGridRowElement(apiRef2.current.rootElementRef.current, id);
  }, [apiRef2]);
  const getCellElement = React60.useCallback((id, field) => {
    if (!apiRef2.current.rootElementRef.current) {
      return null;
    }
    return getGridCellElement(apiRef2.current.rootElementRef.current, {
      id,
      field
    });
  }, [apiRef2]);
  const paramsApi = {
    getCellValue,
    getCellParams,
    getCellElement,
    getRowValue,
    getRowFormattedValue,
    getRowParams,
    getRowElement,
    getColumnHeaderParams,
    getColumnHeaderElement
  };
  useGridApiMethod2(apiRef2, paramsApi, "public");
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/cellBorderUtils.js
var shouldCellShowRightBorder = (pinnedPosition, indexInSection, sectionLength, showCellVerticalBorderRootProp, gridHasFiller) => {
  const isSectionLastCell = indexInSection === sectionLength - 1;
  if (pinnedPosition === GridPinnedColumnPosition.LEFT && isSectionLastCell) {
    return true;
  }
  if (showCellVerticalBorderRootProp) {
    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {
      return true;
    }
    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {
      return !isSectionLastCell;
    }
    return !isSectionLastCell || gridHasFiller;
  }
  return false;
};
var shouldCellShowLeftBorder = (pinnedPosition, indexInSection) => {
  return pinnedPosition === GridPinnedColumnPosition.RIGHT && indexInSection === 0;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridCell.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var _excluded17 = ["column", "rowId", "editCellState", "align", "children", "colIndex", "width", "className", "style", "gridHasScrollX", "colSpan", "disableDragEvents", "isNotVisible", "pinnedOffset", "pinnedPosition", "sectionIndex", "sectionLength", "gridHasFiller", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onMouseOver", "onKeyDown", "onKeyUp", "onDragEnter", "onDragOver"];
var _excluded23 = ["changeReason", "unstable_updateValueOnRender"];
var PinnedPosition = function(PinnedPosition2) {
  PinnedPosition2[PinnedPosition2["NONE"] = 0] = "NONE";
  PinnedPosition2[PinnedPosition2["LEFT"] = 1] = "LEFT";
  PinnedPosition2[PinnedPosition2["RIGHT"] = 2] = "RIGHT";
  PinnedPosition2[PinnedPosition2["VIRTUAL"] = 3] = "VIRTUAL";
  return PinnedPosition2;
}({});
var gridPinnedColumnPositionLookup = {
  [PinnedPosition.LEFT]: GridPinnedColumnPosition.LEFT,
  [PinnedPosition.RIGHT]: GridPinnedColumnPosition.RIGHT,
  [PinnedPosition.NONE]: void 0,
  [PinnedPosition.VIRTUAL]: void 0
};
var EMPTY_CELL_PARAMS = {
  id: -1,
  field: "__unset__",
  row: {},
  rowNode: {
    id: -1,
    depth: 0,
    type: "leaf",
    parent: -1,
    groupingKey: null
  },
  colDef: {
    type: "string",
    field: "__unset__",
    computedWidth: 0
  },
  cellMode: GridCellModes.View,
  hasFocus: false,
  tabIndex: -1,
  value: null,
  formattedValue: "__unset__",
  isEditable: false,
  api: {}
};
var useUtilityClasses16 = (ownerState) => {
  const {
    align,
    showLeftBorder,
    showRightBorder,
    pinnedPosition,
    isEditable,
    isSelected,
    isSelectionMode,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["cell", `cell--text${capitalize(align)}`, isSelected && "selected", isEditable && "cell--editable", showLeftBorder && "cell--withLeftBorder", showRightBorder && "cell--withRightBorder", pinnedPosition === PinnedPosition.LEFT && "cell--pinnedLeft", pinnedPosition === PinnedPosition.RIGHT && "cell--pinnedRight", isSelectionMode && !isEditable && "cell--selectionMode"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridCell = React61.forwardRef((props, ref) => {
  var _a;
  const {
    column,
    rowId,
    editCellState,
    align,
    colIndex,
    width,
    className,
    style: styleProp,
    colSpan,
    disableDragEvents,
    isNotVisible,
    pinnedOffset,
    pinnedPosition,
    sectionIndex,
    sectionLength,
    gridHasFiller,
    onClick,
    onDoubleClick,
    onMouseDown,
    onMouseUp,
    onMouseOver,
    onKeyDown,
    onKeyUp,
    onDragEnter,
    onDragOver
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const field = column.field;
  const cellParamsWithAPI = useGridSelector2(apiRef2, () => {
    try {
      const cellParams = apiRef2.current.getCellParams(rowId, field);
      const result = cellParams;
      result.api = apiRef2.current;
      return result;
    } catch (e) {
      if (e instanceof MissingRowIdError) {
        return EMPTY_CELL_PARAMS;
      }
      throw e;
    }
  }, objectShallowCompare);
  const isSelected = useGridSelector2(apiRef2, () => apiRef2.current.unstable_applyPipeProcessors("isCellSelected", false, {
    id: rowId,
    field
  }));
  const {
    cellMode,
    hasFocus,
    isEditable = false,
    value
  } = cellParamsWithAPI;
  const canManageOwnFocus = column.type === "actions" && ((_a = column.getActions) == null ? void 0 : _a.call(column, apiRef2.current.getRowParams(rowId)).some((action) => !action.props.disabled));
  const tabIndex = (cellMode === "view" || !isEditable) && !canManageOwnFocus ? cellParamsWithAPI.tabIndex : -1;
  const {
    classes: rootClasses,
    getCellClassName
  } = rootProps;
  const pipesClassName = useGridSelector2(apiRef2, () => apiRef2.current.unstable_applyPipeProcessors("cellClassName", [], {
    id: rowId,
    field
  }).filter(Boolean).join(" "));
  const classNames = [pipesClassName];
  if (column.cellClassName) {
    classNames.push(typeof column.cellClassName === "function" ? column.cellClassName(cellParamsWithAPI) : column.cellClassName);
  }
  if (column.display === "flex") {
    classNames.push(gridClasses2["cell--flex"]);
  }
  if (getCellClassName) {
    classNames.push(getCellClassName(cellParamsWithAPI));
  }
  const valueToRender = cellParamsWithAPI.formattedValue ?? value;
  const cellRef = React61.useRef(null);
  const handleRef = useForkRef(ref, cellRef);
  const focusElementRef = React61.useRef(null);
  const isSelectionMode = rootProps.cellSelection ?? false;
  const position = gridPinnedColumnPositionLookup[pinnedPosition];
  const showLeftBorder = shouldCellShowLeftBorder(position, sectionIndex);
  const showRightBorder = shouldCellShowRightBorder(position, sectionIndex, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);
  const ownerState = {
    align,
    showLeftBorder,
    showRightBorder,
    isEditable,
    classes: rootProps.classes,
    pinnedPosition,
    isSelected,
    isSelectionMode
  };
  const classes2 = useUtilityClasses16(ownerState);
  const publishMouseUp = React61.useCallback((eventName) => (event) => {
    const params = apiRef2.current.getCellParams(rowId, field || "");
    apiRef2.current.publishEvent(eventName, params, event);
    if (onMouseUp) {
      onMouseUp(event);
    }
  }, [apiRef2, field, onMouseUp, rowId]);
  const publishMouseDown = React61.useCallback((eventName) => (event) => {
    const params = apiRef2.current.getCellParams(rowId, field || "");
    apiRef2.current.publishEvent(eventName, params, event);
    if (onMouseDown) {
      onMouseDown(event);
    }
  }, [apiRef2, field, onMouseDown, rowId]);
  const publish = React61.useCallback((eventName, propHandler) => (event) => {
    if (!apiRef2.current.getRow(rowId)) {
      return;
    }
    const params = apiRef2.current.getCellParams(rowId, field || "");
    apiRef2.current.publishEvent(eventName, params, event);
    if (propHandler) {
      propHandler(event);
    }
  }, [apiRef2, field, rowId]);
  const style = React61.useMemo(() => {
    if (isNotVisible) {
      return {
        padding: 0,
        opacity: 0,
        width: 0,
        border: 0
      };
    }
    const cellStyle = _extends({
      "--width": `${width}px`
    }, styleProp);
    if (pinnedPosition === PinnedPosition.LEFT) {
      cellStyle.left = pinnedOffset;
    }
    if (pinnedPosition === PinnedPosition.RIGHT) {
      cellStyle.right = pinnedOffset;
    }
    return cellStyle;
  }, [width, isNotVisible, styleProp, pinnedOffset, pinnedPosition]);
  React61.useEffect(() => {
    if (!hasFocus || cellMode === GridCellModes.Edit) {
      return;
    }
    const doc = ownerDocument(apiRef2.current.rootElementRef.current);
    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
      const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;
      if (doesSupportPreventScroll()) {
        elementToFocus.focus({
          preventScroll: true
        });
      } else {
        const scrollPosition = apiRef2.current.getScrollPosition();
        elementToFocus.focus();
        apiRef2.current.scroll(scrollPosition);
      }
    }
  }, [hasFocus, cellMode, apiRef2]);
  if (cellParamsWithAPI === EMPTY_CELL_PARAMS) {
    return null;
  }
  let handleFocus = other.onFocus;
  if (false) {
    handleFocus = (event) => {
      const focusedCell = gridFocusCellSelector2(apiRef2);
      if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {
        if (typeof other.onFocus === "function") {
          other.onFocus(event);
        }
        return;
      }
      if (!warnedOnce) {
        console.warn([`MUI X: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell == null ? void 0 : focusedCell.id}, field=${focusedCell == null ? void 0 : focusedCell.field}.`, "Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.", "Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state."].join("\n"));
        warnedOnce = true;
      }
    };
  }
  let children;
  let title;
  if (editCellState === null && column.renderCell) {
    children = column.renderCell(cellParamsWithAPI);
  }
  if (editCellState !== null && column.renderEditCell) {
    const updatedRow = apiRef2.current.getRowWithUpdatedValues(rowId, column.field);
    const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded23);
    const formattedValue = column.valueFormatter ? column.valueFormatter(editCellState.value, updatedRow, column, apiRef2) : cellParamsWithAPI.formattedValue;
    const params = _extends({}, cellParamsWithAPI, {
      row: updatedRow,
      formattedValue
    }, editCellStateRest);
    children = column.renderEditCell(params);
    classNames.push(gridClasses2["cell--editing"]);
    classNames.push(rootClasses == null ? void 0 : rootClasses["cell--editing"]);
  }
  if (children === void 0) {
    const valueString = valueToRender == null ? void 0 : valueToRender.toString();
    children = valueString;
    title = valueString;
  }
  if (React61.isValidElement(children) && canManageOwnFocus) {
    children = React61.cloneElement(children, {
      focusElementRef
    });
  }
  const draggableEventHandlers = disableDragEvents ? null : {
    onDragEnter: publish("cellDragEnter", onDragEnter),
    onDragOver: publish("cellDragOver", onDragOver)
  };
  return (0, import_jsx_runtime42.jsx)("div", _extends({
    ref: handleRef,
    className: clsx_default(className, classNames, classes2.root),
    role: "gridcell",
    "data-field": field,
    "data-colindex": colIndex,
    "aria-colindex": colIndex + 1,
    "aria-colspan": colSpan,
    style,
    title,
    tabIndex,
    onClick: publish("cellClick", onClick),
    onDoubleClick: publish("cellDoubleClick", onDoubleClick),
    onMouseOver: publish("cellMouseOver", onMouseOver),
    onMouseDown: publishMouseDown("cellMouseDown"),
    onMouseUp: publishMouseUp("cellMouseUp"),
    onKeyDown: publish("cellKeyDown", onKeyDown),
    onKeyUp: publish("cellKeyUp", onKeyUp)
  }, draggableEventHandlers, other, {
    onFocus: handleFocus,
    children
  }));
});
true ? GridCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  align: import_prop_types17.default.oneOf(["center", "left", "right"]).isRequired,
  className: import_prop_types17.default.string,
  colIndex: import_prop_types17.default.number.isRequired,
  colSpan: import_prop_types17.default.number,
  column: import_prop_types17.default.object.isRequired,
  disableDragEvents: import_prop_types17.default.bool,
  editCellState: import_prop_types17.default.shape({
    changeReason: import_prop_types17.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    isProcessingProps: import_prop_types17.default.bool,
    isValidating: import_prop_types17.default.bool,
    value: import_prop_types17.default.any
  }),
  gridHasFiller: import_prop_types17.default.bool.isRequired,
  isNotVisible: import_prop_types17.default.bool.isRequired,
  onClick: import_prop_types17.default.func,
  onDoubleClick: import_prop_types17.default.func,
  onDragEnter: import_prop_types17.default.func,
  onDragOver: import_prop_types17.default.func,
  onKeyDown: import_prop_types17.default.func,
  onMouseDown: import_prop_types17.default.func,
  onMouseUp: import_prop_types17.default.func,
  pinnedOffset: import_prop_types17.default.number.isRequired,
  pinnedPosition: import_prop_types17.default.oneOf([0, 1, 2, 3]).isRequired,
  rowId: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.string]).isRequired,
  sectionIndex: import_prop_types17.default.number.isRequired,
  sectionLength: import_prop_types17.default.number.isRequired,
  width: import_prop_types17.default.number.isRequired
} : void 0;
var MemoizedGridCell = fastMemo(GridCell);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridActionsCellItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React62 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var _excluded18 = ["label", "icon", "showInMenu", "onClick"];
var _excluded24 = ["label", "icon", "showInMenu", "onClick", "closeMenuOnClick", "closeMenu"];
var GridActionsCellItem = React62.forwardRef((props, ref) => {
  var _a;
  const rootProps = useGridRootProps2();
  if (!props.showInMenu) {
    const {
      label: label2,
      icon: icon2,
      onClick: onClick2
    } = props, other2 = _objectWithoutPropertiesLoose(props, _excluded18);
    const handleClick2 = (event) => {
      onClick2 == null ? void 0 : onClick2(event);
    };
    return (0, import_jsx_runtime43.jsx)(rootProps.slots.baseIconButton, _extends({
      ref,
      size: "small",
      role: "menuitem",
      "aria-label": label2
    }, other2, {
      onClick: handleClick2
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
      children: React62.cloneElement(icon2, {
        fontSize: "small"
      })
    }));
  }
  const {
    label,
    icon,
    onClick,
    closeMenuOnClick = true,
    closeMenu
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
  const handleClick = (event) => {
    onClick == null ? void 0 : onClick(event);
    if (closeMenuOnClick) {
      closeMenu == null ? void 0 : closeMenu();
    }
  };
  return (0, import_jsx_runtime43.jsxs)(MenuItem_default, _extends({
    ref
  }, other, {
    onClick: handleClick,
    children: [icon && (0, import_jsx_runtime43.jsx)(ListItemIcon_default, {
      children: icon
    }), label]
  }));
});
true ? GridActionsCellItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component
   */
  component: import_prop_types18.default.elementType,
  icon: import_prop_types18.default.element,
  label: import_prop_types18.default.string.isRequired,
  showInMenu: import_prop_types18.default.bool
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/cell/GridSkeletonCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React63 = __toESM(require_react());
var import_prop_types19 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var _excluded19 = ["field", "align", "width", "height"];
var randomWidth = randomNumberBetween(1e4, 20, 80);
var useUtilityClasses17 = (ownerState) => {
  const {
    align,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["cell", "cellSkeleton", `cell--text${capitalize(align)}`, "withBorderColor"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridSkeletonCell(props) {
  const {
    align,
    width,
    height
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const rootProps = useGridRootProps2();
  const ownerState = {
    classes: rootProps.classes,
    align
  };
  const classes2 = useUtilityClasses17(ownerState);
  const contentWidth = Math.round(randomWidth());
  return (0, import_jsx_runtime44.jsx)("div", _extends({
    className: classes2.root,
    style: {
      height,
      maxWidth: width,
      minWidth: width
    }
  }, other, {
    children: (0, import_jsx_runtime44.jsx)(Skeleton_default, {
      width: `${contentWidth}%`,
      height: 25
    })
  }));
}
true ? GridSkeletonCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  align: import_prop_types19.default.string.isRequired,
  field: import_prop_types19.default.string.isRequired,
  height: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["auto"]), import_prop_types19.default.number]).isRequired,
  width: import_prop_types19.default.number.isRequired
} : void 0;
var Memoized2 = fastMemo(GridSkeletonCell);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/containers/GridRoot.js
init_extends();
init_objectWithoutPropertiesLoose();
var React64 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());
init_clsx();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/containers/GridRootStyles.js
init_extends();
function getBorderColor(theme) {
  if (theme.vars) {
    return theme.vars.palette.TableCell.border;
  }
  if (theme.palette.mode === "light") {
    return lighten(alpha(theme.palette.divider, 1), 0.88);
  }
  return darken(alpha(theme.palette.divider, 1), 0.68);
}
var columnHeadersStyles = {
  [`.${gridClasses2.columnSeparator}, .${gridClasses2["columnSeparator--resizing"]}`]: {
    visibility: "visible",
    width: "auto"
  }
};
var columnHeaderStyles = {
  [`& .${gridClasses2.iconButtonContainer}`]: {
    visibility: "visible",
    width: "auto"
  },
  [`& .${gridClasses2.menuIcon}`]: {
    width: "auto",
    visibility: "visible"
  }
};
var GridRootStyles = styled_default("div", {
  name: "MuiDataGrid",
  slot: "Root",
  overridesResolver: (props, styles) => [{
    [`&.${gridClasses2.autoHeight}`]: styles.autoHeight
  }, {
    [`&.${gridClasses2.aggregationColumnHeader}`]: styles.aggregationColumnHeader
  }, {
    [`&.${gridClasses2["aggregationColumnHeader--alignLeft"]}`]: styles["aggregationColumnHeader--alignLeft"]
  }, {
    [`&.${gridClasses2["aggregationColumnHeader--alignCenter"]}`]: styles["aggregationColumnHeader--alignCenter"]
  }, {
    [`&.${gridClasses2["aggregationColumnHeader--alignRight"]}`]: styles["aggregationColumnHeader--alignRight"]
  }, {
    [`&.${gridClasses2.aggregationColumnHeaderLabel}`]: styles.aggregationColumnHeaderLabel
  }, {
    [`&.${gridClasses2["root--disableUserSelection"]} .${gridClasses2.cell}`]: styles["root--disableUserSelection"]
  }, {
    [`&.${gridClasses2.autosizing}`]: styles.autosizing
  }, {
    [`& .${gridClasses2.editBooleanCell}`]: styles.editBooleanCell
  }, {
    [`& .${gridClasses2.cell}`]: styles.cell
  }, {
    [`& .${gridClasses2["cell--editing"]}`]: styles["cell--editing"]
  }, {
    [`& .${gridClasses2["cell--textCenter"]}`]: styles["cell--textCenter"]
  }, {
    [`& .${gridClasses2["cell--textLeft"]}`]: styles["cell--textLeft"]
  }, {
    [`& .${gridClasses2["cell--textRight"]}`]: styles["cell--textRight"]
  }, {
    [`& .${gridClasses2["cell--rangeTop"]}`]: styles["cell--rangeTop"]
  }, {
    [`& .${gridClasses2["cell--rangeBottom"]}`]: styles["cell--rangeBottom"]
  }, {
    [`& .${gridClasses2["cell--rangeLeft"]}`]: styles["cell--rangeLeft"]
  }, {
    [`& .${gridClasses2["cell--rangeRight"]}`]: styles["cell--rangeRight"]
  }, {
    [`& .${gridClasses2["cell--withRightBorder"]}`]: styles["cell--withRightBorder"]
  }, {
    [`& .${gridClasses2.cellCheckbox}`]: styles.cellCheckbox
  }, {
    [`& .${gridClasses2.cellSkeleton}`]: styles.cellSkeleton
  }, {
    [`& .${gridClasses2.checkboxInput}`]: styles.checkboxInput
  }, {
    [`& .${gridClasses2["columnHeader--alignCenter"]}`]: styles["columnHeader--alignCenter"]
  }, {
    [`& .${gridClasses2["columnHeader--alignLeft"]}`]: styles["columnHeader--alignLeft"]
  }, {
    [`& .${gridClasses2["columnHeader--alignRight"]}`]: styles["columnHeader--alignRight"]
  }, {
    [`& .${gridClasses2["columnHeader--dragging"]}`]: styles["columnHeader--dragging"]
  }, {
    [`& .${gridClasses2["columnHeader--moving"]}`]: styles["columnHeader--moving"]
  }, {
    [`& .${gridClasses2["columnHeader--numeric"]}`]: styles["columnHeader--numeric"]
  }, {
    [`& .${gridClasses2["columnHeader--sortable"]}`]: styles["columnHeader--sortable"]
  }, {
    [`& .${gridClasses2["columnHeader--sorted"]}`]: styles["columnHeader--sorted"]
  }, {
    [`& .${gridClasses2["columnHeader--withRightBorder"]}`]: styles["columnHeader--withRightBorder"]
  }, {
    [`& .${gridClasses2.columnHeader}`]: styles.columnHeader
  }, {
    [`& .${gridClasses2.headerFilterRow}`]: styles.headerFilterRow
  }, {
    [`& .${gridClasses2.columnHeaderCheckbox}`]: styles.columnHeaderCheckbox
  }, {
    [`& .${gridClasses2.columnHeaderDraggableContainer}`]: styles.columnHeaderDraggableContainer
  }, {
    [`& .${gridClasses2.columnHeaderTitleContainer}`]: styles.columnHeaderTitleContainer
  }, {
    [`& .${gridClasses2["columnSeparator--resizable"]}`]: styles["columnSeparator--resizable"]
  }, {
    [`& .${gridClasses2["columnSeparator--resizing"]}`]: styles["columnSeparator--resizing"]
  }, {
    [`& .${gridClasses2.columnSeparator}`]: styles.columnSeparator
  }, {
    [`& .${gridClasses2.filterIcon}`]: styles.filterIcon
  }, {
    [`& .${gridClasses2.iconSeparator}`]: styles.iconSeparator
  }, {
    [`& .${gridClasses2.menuIcon}`]: styles.menuIcon
  }, {
    [`& .${gridClasses2.menuIconButton}`]: styles.menuIconButton
  }, {
    [`& .${gridClasses2.menuOpen}`]: styles.menuOpen
  }, {
    [`& .${gridClasses2.menuList}`]: styles.menuList
  }, {
    [`& .${gridClasses2["row--editable"]}`]: styles["row--editable"]
  }, {
    [`& .${gridClasses2["row--editing"]}`]: styles["row--editing"]
  }, {
    [`& .${gridClasses2["row--dragging"]}`]: styles["row--dragging"]
  }, {
    [`& .${gridClasses2.row}`]: styles.row
  }, {
    [`& .${gridClasses2.rowReorderCellPlaceholder}`]: styles.rowReorderCellPlaceholder
  }, {
    [`& .${gridClasses2.rowReorderCell}`]: styles.rowReorderCell
  }, {
    [`& .${gridClasses2["rowReorderCell--draggable"]}`]: styles["rowReorderCell--draggable"]
  }, {
    [`& .${gridClasses2.sortIcon}`]: styles.sortIcon
  }, {
    [`& .${gridClasses2.withBorderColor}`]: styles.withBorderColor
  }, {
    [`& .${gridClasses2.treeDataGroupingCell}`]: styles.treeDataGroupingCell
  }, {
    [`& .${gridClasses2.treeDataGroupingCellToggle}`]: styles.treeDataGroupingCellToggle
  }, {
    [`& .${gridClasses2.detailPanelToggleCell}`]: styles.detailPanelToggleCell
  }, {
    [`& .${gridClasses2["detailPanelToggleCell--expanded"]}`]: styles["detailPanelToggleCell--expanded"]
  }, styles.root]
})(({
  theme: t
}) => {
  var _a, _b;
  const borderColor = getBorderColor(t);
  const radius = t.shape.borderRadius;
  const containerBackground = t.vars ? t.vars.palette.background.default : ((_a = t.mixins.MuiDataGrid) == null ? void 0 : _a.containerBackground) ?? t.palette.background.default;
  const pinnedBackground = ((_b = t.mixins.MuiDataGrid) == null ? void 0 : _b.pinnedBackground) ?? containerBackground;
  const overlayBackground = t.vars ? `rgba(${t.vars.palette.background.defaultChannel} / ${t.vars.palette.action.disabledOpacity})` : alpha(t.palette.background.default, t.palette.action.disabledOpacity);
  const hoverOpacity = (t.vars || t).palette.action.hoverOpacity;
  const hoverColor = (t.vars || t).palette.action.hover;
  const selectedOpacity = (t.vars || t).palette.action.selectedOpacity;
  const selectedBackground = t.vars ? `rgba(${t.vars.palette.primary.mainChannel} / ${selectedOpacity})` : alpha(t.palette.primary.main, selectedOpacity);
  const selectedHoverBackground = t.vars ? `rgba(${t.vars.palette.primary.mainChannel} / calc(
                ${t.vars.palette.action.selectedOpacity} + 
                ${t.vars.palette.action.hoverOpacity}
              ))` : alpha(t.palette.primary.main, t.palette.action.selectedOpacity + t.palette.action.hoverOpacity);
  const pinnedHoverBackground = t.vars ? hoverColor : blend(pinnedBackground, hoverColor, hoverOpacity);
  const pinnedSelectedBackground = t.vars ? selectedBackground : blend(pinnedBackground, selectedBackground, selectedOpacity);
  const pinnedSelectedHoverBackground = t.vars ? hoverColor : blend(pinnedSelectedBackground, hoverColor, hoverOpacity);
  const selectedStyles = {
    backgroundColor: selectedBackground,
    "&:hover": {
      backgroundColor: selectedHoverBackground,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: selectedBackground
      }
    }
  };
  const gridStyle = _extends({
    "--unstable_DataGrid-radius": typeof radius === "number" ? `${radius}px` : radius,
    "--unstable_DataGrid-headWeight": t.typography.fontWeightMedium,
    "--unstable_DataGrid-overlayBackground": overlayBackground,
    "--DataGrid-containerBackground": containerBackground,
    "--DataGrid-pinnedBackground": pinnedBackground,
    "--DataGrid-rowBorderColor": borderColor,
    "--DataGrid-cellOffsetMultiplier": 2,
    "--DataGrid-width": "0px",
    "--DataGrid-hasScrollX": "0",
    "--DataGrid-hasScrollY": "0",
    "--DataGrid-scrollbarSize": "10px",
    "--DataGrid-rowWidth": "0px",
    "--DataGrid-columnsTotalWidth": "0px",
    "--DataGrid-leftPinnedWidth": "0px",
    "--DataGrid-rightPinnedWidth": "0px",
    "--DataGrid-headerHeight": "0px",
    "--DataGrid-headersTotalHeight": "0px",
    "--DataGrid-topContainerHeight": "0px",
    "--DataGrid-bottomContainerHeight": "0px",
    flex: 1,
    boxSizing: "border-box",
    position: "relative",
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor,
    borderRadius: "var(--unstable_DataGrid-radius)",
    color: (t.vars || t).palette.text.primary
  }, t.typography.body2, {
    outline: "none",
    height: "100%",
    display: "flex",
    minWidth: 0,
    // See https://github.com/mui/mui-x/issues/8547
    minHeight: 0,
    flexDirection: "column",
    overflowAnchor: "none",
    // Keep the same scrolling position
    // The selector we really want here is `:first-child`, but emotion thinks it knows better than use what we
    // want and prints a warning to the console if we use it, about :first-child being "unsafe" in an SSR context.
    // https://github.com/emotion-js/emotion/issues/1105
    // Using `:first-of-type instead` is ironically less "safe" because if all our elements aren't `div`, this style
    // will fail to apply.
    [`.${gridClasses2.main} > *:first-of-type`]: {
      borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
      borderTopRightRadius: "var(--unstable_DataGrid-radius)"
    },
    [`&.${gridClasses2.autoHeight}`]: {
      height: "auto"
    },
    [`&.${gridClasses2.autosizing}`]: {
      [`& .${gridClasses2.columnHeaderTitleContainerContent} > *`]: {
        overflow: "visible !important"
      },
      "@media (hover: hover)": {
        [`& .${gridClasses2.iconButtonContainer}`]: {
          width: "0 !important",
          visibility: "hidden !important"
        },
        [`& .${gridClasses2.menuIcon}`]: {
          width: "0 !important",
          visibility: "hidden !important"
        }
      },
      [`& .${gridClasses2.cell}`]: {
        overflow: "visible !important",
        whiteSpace: "nowrap",
        minWidth: "max-content !important",
        maxWidth: "max-content !important"
      },
      [`& .${gridClasses2.groupingCriteriaCell}`]: {
        width: "unset"
      },
      [`& .${gridClasses2.treeDataGroupingCell}`]: {
        width: "unset"
      }
    },
    [`& .${gridClasses2.columnHeader}, & .${gridClasses2.cell}`]: {
      WebkitTapHighlightColor: "transparent",
      lineHeight: null,
      padding: "0 10px",
      boxSizing: "border-box"
    },
    [`& .${gridClasses2.columnHeader}:focus-within, & .${gridClasses2.cell}:focus-within`]: {
      outline: `solid ${t.vars ? `rgba(${t.vars.palette.primary.mainChannel} / 0.5)` : alpha(t.palette.primary.main, 0.5)} 1px`,
      outlineWidth: 1,
      outlineOffset: -1
    },
    [`& .${gridClasses2.columnHeader}:focus, & .${gridClasses2.cell}:focus`]: {
      outline: `solid ${t.palette.primary.main} 1px`
    },
    [`& .${gridClasses2.columnHeaderCheckbox}, & .${gridClasses2.cellCheckbox}`]: {
      padding: 0,
      justifyContent: "center",
      alignItems: "center"
    },
    [`& .${gridClasses2.columnHeader}`]: {
      position: "relative",
      display: "flex",
      alignItems: "center"
    },
    [`& .${gridClasses2["columnHeader--last"]}`]: {
      overflow: "hidden"
    },
    [`& .${gridClasses2["columnHeader--sorted"]} .${gridClasses2.iconButtonContainer}, & .${gridClasses2["columnHeader--filtered"]} .${gridClasses2.iconButtonContainer}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${gridClasses2.columnHeader}:not(.${gridClasses2["columnHeader--sorted"]}) .${gridClasses2.sortIcon}`]: {
      opacity: 0,
      transition: t.transitions.create(["opacity"], {
        duration: t.transitions.duration.shorter
      })
    },
    [`& .${gridClasses2.columnHeaderTitleContainer}`]: {
      display: "flex",
      alignItems: "center",
      minWidth: 0,
      flex: 1,
      whiteSpace: "nowrap",
      overflow: "hidden",
      // to anchor the aggregation label
      position: "relative"
    },
    [`& .${gridClasses2.columnHeaderTitleContainerContent}`]: {
      overflow: "hidden",
      display: "flex",
      alignItems: "center"
    },
    [`& .${gridClasses2["columnHeader--filledGroup"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
      borderBottomWidth: "1px",
      borderBottomStyle: "solid",
      boxSizing: "border-box"
    },
    [`& .${gridClasses2.sortIcon}, & .${gridClasses2.filterIcon}`]: {
      fontSize: "inherit"
    },
    [`& .${gridClasses2["columnHeader--sortable"]}`]: {
      cursor: "pointer"
    },
    [`& .${gridClasses2["columnHeader--alignCenter"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
      justifyContent: "center"
    },
    [`& .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.columnHeaderDraggableContainer}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
      flexDirection: "row-reverse"
    },
    [`& .${gridClasses2["columnHeader--alignCenter"]} .${gridClasses2.menuIcon}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}`]: {
      marginRight: "auto",
      marginLeft: -6
    },
    [`& .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}`]: {
      marginRight: "auto",
      marginLeft: -10
    },
    [`& .${gridClasses2["columnHeader--moving"]}`]: {
      backgroundColor: (t.vars || t).palette.action.hover
    },
    [`& .${gridClasses2["columnHeader--pinnedLeft"]}, & .${gridClasses2["columnHeader--pinnedRight"]}`]: {
      position: "sticky",
      zIndex: 4,
      // Should be above the column separator
      background: "var(--DataGrid-pinnedBackground)"
    },
    [`& .${gridClasses2.columnSeparator}`]: {
      visibility: "hidden",
      position: "absolute",
      zIndex: 3,
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      color: borderColor
    },
    [`& .${gridClasses2.columnHeaders}`]: {
      width: "var(--DataGrid-rowWidth)"
    },
    "@media (hover: hover)": {
      [`& .${gridClasses2.columnHeaders}:hover`]: columnHeadersStyles,
      [`& .${gridClasses2.columnHeader}:hover`]: columnHeaderStyles,
      [`& .${gridClasses2.columnHeader}:not(.${gridClasses2["columnHeader--sorted"]}):hover .${gridClasses2.sortIcon}`]: {
        opacity: 0.5
      }
    },
    "@media (hover: none)": {
      [`& .${gridClasses2.columnHeaders}`]: columnHeadersStyles,
      [`& .${gridClasses2.columnHeader}`]: columnHeaderStyles
    },
    [`& .${gridClasses2["columnSeparator--sideLeft"]}`]: {
      left: -12
    },
    [`& .${gridClasses2["columnSeparator--sideRight"]}`]: {
      right: -12
    },
    [`& .${gridClasses2["columnSeparator--resizable"]}`]: {
      cursor: "col-resize",
      touchAction: "none",
      "&:hover": {
        color: (t.vars || t).palette.text.primary,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          color: borderColor
        }
      },
      [`&.${gridClasses2["columnSeparator--resizing"]}`]: {
        color: (t.vars || t).palette.text.primary
      },
      "& svg": {
        pointerEvents: "none"
      }
    },
    [`& .${gridClasses2.iconSeparator}`]: {
      color: "inherit"
    },
    [`& .${gridClasses2.menuIcon}`]: {
      width: 0,
      visibility: "hidden",
      fontSize: 20,
      marginRight: -10,
      display: "flex",
      alignItems: "center"
    },
    [`.${gridClasses2.menuOpen}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${gridClasses2.headerFilterRow}`]: {
      [`& .${gridClasses2.columnHeader}`]: {
        boxSizing: "border-box",
        borderTop: "1px solid var(--DataGrid-rowBorderColor)"
      }
    },
    /* Row styles */
    [`.${gridClasses2.row}`]: {
      display: "flex",
      width: "var(--DataGrid-rowWidth)",
      breakInside: "avoid",
      // Avoid the row to be broken in two different print pages.
      "--rowBorderColor": "var(--DataGrid-rowBorderColor)",
      [`&.${gridClasses2["row--firstVisible"]}`]: {
        "--rowBorderColor": "transparent"
      },
      "&:hover": {
        backgroundColor: (t.vars || t).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      "&.Mui-selected": selectedStyles
    },
    [`& .${gridClasses2["container--top"]}, & .${gridClasses2["container--bottom"]}`]: {
      "[role=row]": {
        background: "var(--DataGrid-containerBackground)"
      }
    },
    /* Cell styles */
    [`& .${gridClasses2.cell}`]: {
      height: "var(--height)",
      minWidth: "var(--width)",
      maxWidth: "var(--width)",
      lineHeight: "calc(var(--height) - 1px)",
      // -1px for the border
      boxSizing: "border-box",
      borderTop: `1px solid var(--rowBorderColor)`,
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      "&.Mui-selected": selectedStyles
    },
    [`& .${gridClasses2["virtualScrollerContent--overflowed"]} .${gridClasses2["row--lastVisible"]} .${gridClasses2.cell}`]: {
      borderTopColor: "transparent"
    },
    [`&.${gridClasses2["root--disableUserSelection"]} .${gridClasses2.cell}`]: {
      userSelect: "none"
    },
    [`& .${gridClasses2["row--dynamicHeight"]} > .${gridClasses2.cell}`]: {
      whiteSpace: "initial",
      lineHeight: "inherit"
    },
    [`& .${gridClasses2.cellEmpty}`]: {
      padding: 0,
      height: "unset"
    },
    [`& .${gridClasses2.cell}.${gridClasses2["cell--selectionMode"]}`]: {
      cursor: "default"
    },
    [`& .${gridClasses2.cell}.${gridClasses2["cell--editing"]}`]: {
      padding: 1,
      display: "flex",
      boxShadow: t.shadows[2],
      backgroundColor: (t.vars || t).palette.background.paper,
      "&:focus-within": {
        outline: `solid ${(t.vars || t).palette.primary.main} 1px`,
        outlineOffset: "-1px"
      }
    },
    [`& .${gridClasses2["row--editing"]}`]: {
      boxShadow: t.shadows[2]
    },
    [`& .${gridClasses2["row--editing"]} .${gridClasses2.cell}`]: {
      boxShadow: t.shadows[0],
      backgroundColor: (t.vars || t).palette.background.paper
    },
    [`& .${gridClasses2.editBooleanCell}`]: {
      display: "flex",
      height: "100%",
      width: "100%",
      alignItems: "center",
      justifyContent: "center"
    },
    [`& .${gridClasses2.booleanCell}[data-value="true"]`]: {
      color: (t.vars || t).palette.text.secondary
    },
    [`& .${gridClasses2.booleanCell}[data-value="false"]`]: {
      color: (t.vars || t).palette.text.disabled
    },
    [`& .${gridClasses2.actionsCell}`]: {
      display: "inline-flex",
      alignItems: "center",
      gridGap: t.spacing(1)
    },
    [`& .${gridClasses2.rowReorderCell}`]: {
      display: "inline-flex",
      flex: 1,
      alignItems: "center",
      justifyContent: "center",
      opacity: (t.vars || t).palette.action.disabledOpacity
    },
    [`& .${gridClasses2["rowReorderCell--draggable"]}`]: {
      cursor: "move",
      opacity: 1
    },
    [`& .${gridClasses2.rowReorderCellContainer}`]: {
      padding: 0,
      display: "flex",
      alignItems: "stretch"
    },
    [`.${gridClasses2.withBorderColor}`]: {
      borderColor
    },
    [`& .${gridClasses2["cell--withLeftBorder"]}, & .${gridClasses2["columnHeader--withLeftBorder"]}`]: {
      borderLeftColor: "var(--DataGrid-rowBorderColor)",
      borderLeftWidth: "1px",
      borderLeftStyle: "solid"
    },
    [`& .${gridClasses2["cell--withRightBorder"]}, & .${gridClasses2["columnHeader--withRightBorder"]}`]: {
      borderRightColor: "var(--DataGrid-rowBorderColor)",
      borderRightWidth: "1px",
      borderRightStyle: "solid"
    },
    [`& .${gridClasses2["cell--flex"]}`]: {
      display: "flex",
      alignItems: "center",
      lineHeight: "inherit"
    },
    [`& .${gridClasses2["cell--textLeft"]}`]: {
      textAlign: "left",
      justifyContent: "flex-start"
    },
    [`& .${gridClasses2["cell--textRight"]}`]: {
      textAlign: "right",
      justifyContent: "flex-end"
    },
    [`& .${gridClasses2["cell--textCenter"]}`]: {
      textAlign: "center",
      justifyContent: "center"
    },
    [`& .${gridClasses2["cell--pinnedLeft"]}, & .${gridClasses2["cell--pinnedRight"]}`]: {
      position: "sticky",
      zIndex: 3,
      background: "var(--DataGrid-pinnedBackground)"
    },
    [`& .${gridClasses2.virtualScrollerContent} .${gridClasses2.row}`]: {
      "&:hover": {
        [`& .${gridClasses2["cell--pinnedLeft"]}, & .${gridClasses2["cell--pinnedRight"]}`]: {
          backgroundColor: pinnedHoverBackground
        }
      },
      [`&.Mui-selected`]: {
        [`& .${gridClasses2["cell--pinnedLeft"]}, & .${gridClasses2["cell--pinnedRight"]}`]: {
          backgroundColor: pinnedSelectedBackground
        },
        "&:hover": {
          [`& .${gridClasses2["cell--pinnedLeft"]}, & .${gridClasses2["cell--pinnedRight"]}`]: {
            backgroundColor: pinnedSelectedHoverBackground
          }
        }
      }
    },
    [`& .${gridClasses2.cellOffsetLeft}`]: {
      flex: "0 0 auto",
      display: "inline-block"
    },
    [`& .${gridClasses2.cellSkeleton}`]: {
      flex: "0 0 auto",
      height: "100%",
      display: "inline-flex",
      alignItems: "center"
    },
    [`& .${gridClasses2.columnHeaderDraggableContainer}`]: {
      display: "flex",
      width: "100%",
      height: "100%"
    },
    [`& .${gridClasses2.rowReorderCellPlaceholder}`]: {
      display: "none"
    },
    [`& .${gridClasses2["columnHeader--dragging"]}, & .${gridClasses2["row--dragging"]}`]: {
      background: (t.vars || t).palette.background.paper,
      padding: "0 12px",
      borderRadius: "var(--unstable_DataGrid-radius)",
      opacity: (t.vars || t).palette.action.disabledOpacity
    },
    [`& .${gridClasses2["row--dragging"]}`]: {
      background: (t.vars || t).palette.background.paper,
      padding: "0 12px",
      borderRadius: "var(--unstable_DataGrid-radius)",
      opacity: (t.vars || t).palette.action.disabledOpacity,
      [`& .${gridClasses2.rowReorderCellPlaceholder}`]: {
        display: "flex"
      }
    },
    [`& .${gridClasses2.treeDataGroupingCell}`]: {
      display: "flex",
      alignItems: "center",
      width: "100%"
    },
    [`& .${gridClasses2.treeDataGroupingCellToggle}`]: {
      flex: "0 0 28px",
      alignSelf: "stretch",
      marginRight: t.spacing(2)
    },
    [`& .${gridClasses2.groupingCriteriaCell}`]: {
      display: "flex",
      alignItems: "center",
      width: "100%"
    },
    [`& .${gridClasses2.groupingCriteriaCellToggle}`]: {
      flex: "0 0 28px",
      alignSelf: "stretch",
      marginRight: t.spacing(2)
    },
    /* ScrollbarFiller styles */
    [`.${gridClasses2.scrollbarFiller}`]: {
      minWidth: "calc(var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))",
      alignSelf: "stretch",
      [`&.${gridClasses2["scrollbarFiller--borderTop"]}`]: {
        borderTop: "1px solid var(--DataGrid-rowBorderColor)"
      },
      [`&.${gridClasses2["scrollbarFiller--pinnedRight"]}`]: {
        backgroundColor: "var(--DataGrid-pinnedBackground)",
        position: "sticky",
        right: 0
      }
    },
    [`& .${gridClasses2.filler}`]: {
      flex: 1
    },
    [`& .${gridClasses2["filler--borderTop"]}`]: {
      borderTop: "1px solid var(--DataGrid-rowBorderColor)"
    }
  });
  return gridStyle;
});
function blend(background, overlay, opacity, gamma = 1) {
  const f = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
  const backgroundColor = decomposeColor(background);
  const overlayColor = decomposeColor(overlay);
  const rgb = [f(backgroundColor.values[0], overlayColor.values[0]), f(backgroundColor.values[1], overlayColor.values[1]), f(backgroundColor.values[2], overlayColor.values[2])];
  return recomposeColor({
    type: "rgb",
    values: rgb
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/containers/GridRoot.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var _excluded20 = ["children", "className"];
var useUtilityClasses18 = (ownerState) => {
  const {
    autoHeight,
    density,
    classes: classes2,
    showCellVerticalBorder
  } = ownerState;
  const slots = {
    root: ["root", autoHeight && "autoHeight", `root--density${capitalize(density)}`, "withBorderColor", showCellVerticalBorder && "withVerticalBorder"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridPanelAnchor = styled_default2("div")({
  position: "absolute",
  top: `var(--DataGrid-headersTotalHeight)`,
  left: 0
});
var GridRoot2 = React64.forwardRef(function GridRoot3(props, ref) {
  const rootProps = useGridRootProps2();
  const {
    children,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const apiRef2 = useGridPrivateApiContext();
  const density = useGridSelector2(apiRef2, gridDensitySelector);
  const rootElementRef = apiRef2.current.rootElementRef;
  const handleRef = useForkRef(rootElementRef, ref);
  const ownerState = _extends({}, rootProps, {
    density
  });
  const classes2 = useUtilityClasses18(ownerState);
  const [mountedState, setMountedState] = React64.useState(false);
  useEnhancedEffect_default(() => {
    setMountedState(true);
  }, []);
  if (!mountedState) {
    return null;
  }
  return (0, import_jsx_runtime45.jsxs)(GridRootStyles, _extends({
    ref: handleRef,
    className: clsx_default(className, classes2.root),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime45.jsx)(GridPanelAnchor, {
      role: "presentation",
      "data-id": "gridPanelAnchor"
    }), children]
  }));
});
true ? GridRoot2.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/containers/GridFooterContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React65 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var _excluded21 = ["className"];
var useUtilityClasses19 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["footerContainer", "withBorderColor"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridFooterContainerRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "FooterContainer",
  overridesResolver: (props, styles) => styles.footerContainer
})({
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  minHeight: 52,
  borderTop: "1px solid"
});
var GridFooterContainer = React65.forwardRef(function GridFooterContainer2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses19(rootProps);
  return (0, import_jsx_runtime46.jsx)(GridFooterContainerRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
});
true ? GridFooterContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/containers/GridOverlay.js
init_extends();
init_objectWithoutPropertiesLoose();
var React66 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var _excluded25 = ["className"];
var useUtilityClasses20 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["overlay"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridOverlayRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "Overlay",
  overridesResolver: (_, styles) => styles.overlay
})({
  width: "100%",
  height: "100%",
  display: "flex",
  alignSelf: "center",
  alignItems: "center",
  justifyContent: "center",
  backgroundColor: "var(--unstable_DataGrid-overlayBackground)"
});
var GridOverlay = React66.forwardRef(function GridOverlay2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses20(rootProps);
  return (0, import_jsx_runtime47.jsx)(GridOverlayRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
});
true ? GridOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/containers/GridToolbarContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React67 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var _excluded26 = ["className", "children"];
var useUtilityClasses21 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbarContainer"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridToolbarContainerRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ToolbarContainer",
  overridesResolver: (_, styles) => styles.toolbarContainer
})(({
  theme
}) => ({
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  gap: theme.spacing(1),
  padding: theme.spacing(0.5, 0.5, 0)
}));
var GridToolbarContainer = React67.forwardRef(function GridToolbarContainer2(props, ref) {
  const {
    className,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses21(rootProps);
  if (!children) {
    return null;
  }
  return (0, import_jsx_runtime48.jsx)(GridToolbarContainerRoot, _extends({
    ref,
    className: clsx_default(className, classes2.root),
    ownerState: rootProps
  }, other, {
    children
  }));
});
true ? GridToolbarContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
init_extends();
var React75 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());
init_clsx();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
init_extends();
var React69 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridIconButtonContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React68 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var _excluded27 = ["className"];
var useUtilityClasses22 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["iconButtonContainer"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridIconButtonContainerRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "IconButtonContainer",
  overridesResolver: (props, styles) => styles.iconButtonContainer
})(() => ({
  display: "flex",
  visibility: "hidden",
  width: 0
}));
var GridIconButtonContainer = React68.forwardRef(function GridIconButtonContainer2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses22(rootProps);
  return (0, import_jsx_runtime49.jsx)(GridIconButtonContainerRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var useUtilityClasses23 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    icon: ["sortIcon"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function getIcon(icons, direction, className, sortingOrder) {
  let Icon;
  const iconProps = {};
  if (direction === "asc") {
    Icon = icons.columnSortedAscendingIcon;
  } else if (direction === "desc") {
    Icon = icons.columnSortedDescendingIcon;
  } else {
    Icon = icons.columnUnsortedIcon;
    iconProps.sortingOrder = sortingOrder;
  }
  return Icon ? (0, import_jsx_runtime50.jsx)(Icon, _extends({
    fontSize: "small",
    className
  }, iconProps)) : null;
}
function GridColumnHeaderSortIconRaw(props) {
  var _a;
  const {
    direction,
    index,
    sortingOrder,
    disabled
  } = props;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const ownerState = _extends({}, props, {
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses23(ownerState);
  const iconElement = getIcon(rootProps.slots, direction, classes2.icon, sortingOrder);
  if (!iconElement) {
    return null;
  }
  const iconButton = (0, import_jsx_runtime50.jsx)(rootProps.slots.baseIconButton, _extends({
    tabIndex: -1,
    "aria-label": apiRef2.current.getLocaleText("columnHeaderSortIconLabel"),
    title: apiRef2.current.getLocaleText("columnHeaderSortIconLabel"),
    size: "small",
    disabled
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
    children: iconElement
  }));
  return (0, import_jsx_runtime50.jsxs)(GridIconButtonContainer, {
    children: [index != null && (0, import_jsx_runtime50.jsx)(Badge_default, {
      badgeContent: index,
      color: "default",
      children: iconButton
    }), index == null && iconButton]
  });
}
var GridColumnHeaderSortIcon = React69.memo(GridColumnHeaderSortIconRaw);
true ? GridColumnHeaderSortIconRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  direction: import_prop_types24.default.oneOf(["asc", "desc"]),
  disabled: import_prop_types24.default.bool,
  index: import_prop_types24.default.number,
  sortingOrder: import_prop_types24.default.arrayOf(import_prop_types24.default.oneOf(["asc", "desc"])).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/ColumnHeaderMenuIcon.js
init_extends();
var React70 = __toESM(require_react());
init_utils();
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var useUtilityClasses24 = (ownerState) => {
  const {
    classes: classes2,
    open
  } = ownerState;
  const slots = {
    root: ["menuIcon", open && "menuOpen"],
    button: ["menuIconButton"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var ColumnHeaderMenuIcon = React70.memo((props) => {
  var _a, _b;
  const {
    colDef,
    open,
    columnMenuId,
    columnMenuButtonId,
    iconButtonRef
  } = props;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const ownerState = _extends({}, props, {
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses24(ownerState);
  const handleMenuIconClick = React70.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
    apiRef2.current.toggleColumnMenu(colDef.field);
  }, [apiRef2, colDef.field]);
  return (0, import_jsx_runtime51.jsx)("div", {
    className: classes2.root,
    children: (0, import_jsx_runtime51.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef2.current.getLocaleText("columnMenuLabel"),
      enterDelay: 1e3
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
      children: (0, import_jsx_runtime51.jsx)(rootProps.slots.baseIconButton, _extends({
        ref: iconButtonRef,
        tabIndex: -1,
        className: classes2.button,
        "aria-label": apiRef2.current.getLocaleText("columnMenuLabel"),
        size: "small",
        onClick: handleMenuIconClick,
        "aria-haspopup": "menu",
        "aria-expanded": open,
        "aria-controls": open ? columnMenuId : void 0,
        id: columnMenuButtonId
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseIconButton, {
        children: (0, import_jsx_runtime51.jsx)(rootProps.slots.columnMenuIcon, {
          fontSize: "small"
        })
      }))
    }))
  });
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnHeaderMenu.js
init_extends();
var React71 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
function GridColumnHeaderMenu({
  columnMenuId,
  columnMenuButtonId,
  ContentComponent,
  contentComponentProps,
  field,
  open,
  target,
  onExited
}) {
  const apiRef2 = useGridApiContext();
  const colDef = apiRef2.current.getColumn(field);
  const hideMenu = useEventCallback_default((event) => {
    if (event) {
      event.stopPropagation();
      if (target == null ? void 0 : target.contains(event.target)) {
        return;
      }
    }
    apiRef2.current.hideColumnMenu();
  });
  if (!target || !colDef) {
    return null;
  }
  return (0, import_jsx_runtime52.jsx)(GridMenu, {
    placement: `bottom-${colDef.align === "right" ? "start" : "end"}`,
    open,
    target,
    onClose: hideMenu,
    onExited,
    children: (0, import_jsx_runtime52.jsx)(ContentComponent, _extends({
      colDef,
      hideMenu,
      open,
      id: columnMenuId,
      labelledby: columnMenuButtonId
    }, contentComponentProps))
  });
}
true ? GridColumnHeaderMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnMenuButtonId: import_prop_types25.default.string,
  columnMenuId: import_prop_types25.default.string,
  ContentComponent: import_prop_types25.default.elementType.isRequired,
  contentComponentProps: import_prop_types25.default.any,
  field: import_prop_types25.default.string.isRequired,
  onExited: import_prop_types25.default.func,
  open: import_prop_types25.default.bool.isRequired,
  target: HTMLElementType
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridGenericColumnHeaderItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React74 = __toESM(require_react());
init_clsx();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js
init_extends();
init_objectWithoutPropertiesLoose();
var React72 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var _excluded28 = ["className"];
var useUtilityClasses25 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["columnHeaderTitle"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridColumnHeaderTitleRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ColumnHeaderTitle",
  overridesResolver: (props, styles) => styles.columnHeaderTitle
})({
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap",
  fontWeight: "var(--unstable_DataGrid-headWeight)"
});
var ColumnHeaderInnerTitle = React72.forwardRef(function ColumnHeaderInnerTitle2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses25(rootProps);
  return (0, import_jsx_runtime53.jsx)(GridColumnHeaderTitleRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
});
function GridColumnHeaderTitle(props) {
  var _a;
  const {
    label,
    description
  } = props;
  const rootProps = useGridRootProps2();
  const titleRef = React72.useRef(null);
  const [tooltip, setTooltip] = React72.useState("");
  const handleMouseOver = React72.useCallback(() => {
    if (!description && (titleRef == null ? void 0 : titleRef.current)) {
      const isOver = isOverflown(titleRef.current);
      if (isOver) {
        setTooltip(label);
      } else {
        setTooltip("");
      }
    }
  }, [description, label]);
  return (0, import_jsx_runtime53.jsx)(rootProps.slots.baseTooltip, _extends({
    title: description || tooltip
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
    children: (0, import_jsx_runtime53.jsx)(ColumnHeaderInnerTitle, {
      onMouseOver: handleMouseOver,
      ref: titleRef,
      children: label
    })
  }));
}
true ? GridColumnHeaderTitle.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnWidth: import_prop_types26.default.number.isRequired,
  description: import_prop_types26.default.node,
  label: import_prop_types26.default.string.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSeparator.js
init_extends();
init_objectWithoutPropertiesLoose();
var React73 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var _excluded29 = ["resizable", "resizing", "height", "side"];
var GridColumnHeaderSeparatorSides = function(GridColumnHeaderSeparatorSides2) {
  GridColumnHeaderSeparatorSides2["Left"] = "left";
  GridColumnHeaderSeparatorSides2["Right"] = "right";
  return GridColumnHeaderSeparatorSides2;
}(GridColumnHeaderSeparatorSides || {});
var useUtilityClasses26 = (ownerState) => {
  const {
    resizable,
    resizing,
    classes: classes2,
    side
  } = ownerState;
  const slots = {
    root: ["columnSeparator", resizable && "columnSeparator--resizable", resizing && "columnSeparator--resizing", side && `columnSeparator--side${capitalize(side)}`],
    icon: ["iconSeparator"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridColumnHeaderSeparatorRaw(props) {
  const {
    height,
    side = GridColumnHeaderSeparatorSides.Right
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const rootProps = useGridRootProps2();
  const ownerState = _extends({}, props, {
    side,
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses26(ownerState);
  const stopClick = React73.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    (0, import_jsx_runtime54.jsx)("div", _extends({
      className: classes2.root,
      style: {
        minHeight: height,
        opacity: rootProps.showColumnVerticalBorder ? 0 : 1
      }
    }, other, {
      onClick: stopClick,
      children: (0, import_jsx_runtime54.jsx)(rootProps.slots.columnResizeIcon, {
        className: classes2.icon
      })
    }))
  );
}
var GridColumnHeaderSeparator = React73.memo(GridColumnHeaderSeparatorRaw);
true ? GridColumnHeaderSeparatorRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  height: import_prop_types27.default.number.isRequired,
  resizable: import_prop_types27.default.bool.isRequired,
  resizing: import_prop_types27.default.bool.isRequired,
  side: import_prop_types27.default.oneOf(["left", "right"])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridGenericColumnHeaderItem.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var _excluded30 = ["classes", "columnMenuOpen", "colIndex", "height", "isResizing", "sortDirection", "hasFocus", "tabIndex", "separatorSide", "isDraggable", "headerComponent", "description", "elementId", "width", "columnMenuIconButton", "columnMenu", "columnTitleIconButtons", "headerClassName", "label", "resizable", "draggableContainerProps", "columnHeaderSeparatorProps", "style"];
var GridGenericColumnHeaderItem = React74.forwardRef(function GridGenericColumnHeaderItem2(props, ref) {
  const {
    classes: classes2,
    columnMenuOpen,
    colIndex,
    height,
    isResizing,
    sortDirection,
    hasFocus,
    tabIndex,
    separatorSide,
    isDraggable,
    headerComponent,
    description,
    width,
    columnMenuIconButton = null,
    columnMenu = null,
    columnTitleIconButtons = null,
    headerClassName,
    label,
    resizable,
    draggableContainerProps,
    columnHeaderSeparatorProps,
    style
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps2();
  const headerCellRef = React74.useRef(null);
  const [showColumnMenuIcon, setShowColumnMenuIcon] = React74.useState(columnMenuOpen);
  const handleRef = useForkRef(headerCellRef, ref);
  let ariaSort = "none";
  if (sortDirection != null) {
    ariaSort = sortDirection === "asc" ? "ascending" : "descending";
  }
  React74.useEffect(() => {
    if (!showColumnMenuIcon) {
      setShowColumnMenuIcon(columnMenuOpen);
    }
  }, [showColumnMenuIcon, columnMenuOpen]);
  React74.useLayoutEffect(() => {
    var _a;
    const columnMenuState = apiRef2.current.state.columnMenu;
    if (hasFocus && !columnMenuState.open) {
      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusableElement || headerCellRef.current;
      elementToFocus == null ? void 0 : elementToFocus.focus();
      if ((_a = apiRef2.current.columnHeadersContainerRef) == null ? void 0 : _a.current) {
        apiRef2.current.columnHeadersContainerRef.current.scrollLeft = 0;
      }
    }
  }, [apiRef2, hasFocus]);
  return (0, import_jsx_runtime55.jsxs)("div", _extends({
    ref: handleRef,
    className: clsx_default(classes2.root, headerClassName),
    style: _extends({}, style, {
      height,
      width,
      minWidth: width,
      maxWidth: width
    }),
    role: "columnheader",
    tabIndex,
    "aria-colindex": colIndex + 1,
    "aria-sort": ariaSort,
    "aria-label": headerComponent == null ? label : void 0
  }, other, {
    children: [(0, import_jsx_runtime55.jsxs)("div", _extends({
      className: classes2.draggableContainer,
      draggable: isDraggable,
      role: "presentation"
    }, draggableContainerProps, {
      children: [(0, import_jsx_runtime55.jsxs)("div", {
        className: classes2.titleContainer,
        role: "presentation",
        children: [(0, import_jsx_runtime55.jsx)("div", {
          className: classes2.titleContainerContent,
          children: headerComponent !== void 0 ? headerComponent : (0, import_jsx_runtime55.jsx)(GridColumnHeaderTitle, {
            label,
            description,
            columnWidth: width
          })
        }), columnTitleIconButtons]
      }), columnMenuIconButton]
    })), (0, import_jsx_runtime55.jsx)(GridColumnHeaderSeparator, _extends({
      resizable: !rootProps.disableColumnResize && !!resizable,
      resizing: isResizing,
      height,
      side: separatorSide
    }, columnHeaderSeparatorProps)), columnMenu]
  }));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var useUtilityClasses27 = (ownerState) => {
  const {
    colDef,
    classes: classes2,
    isDragging,
    sortDirection,
    showRightBorder,
    showLeftBorder,
    filterItemsCounter,
    pinnedPosition
  } = ownerState;
  const isColumnSorted = sortDirection != null;
  const isColumnFiltered = filterItemsCounter != null && filterItemsCounter > 0;
  const isColumnNumeric = colDef.type === "number";
  const slots = {
    root: ["columnHeader", colDef.headerAlign === "left" && "columnHeader--alignLeft", colDef.headerAlign === "center" && "columnHeader--alignCenter", colDef.headerAlign === "right" && "columnHeader--alignRight", colDef.sortable && "columnHeader--sortable", isDragging && "columnHeader--moving", isColumnSorted && "columnHeader--sorted", isColumnFiltered && "columnHeader--filtered", isColumnNumeric && "columnHeader--numeric", "withBorderColor", showRightBorder && "columnHeader--withRightBorder", showLeftBorder && "columnHeader--withLeftBorder", pinnedPosition === "left" && "columnHeader--pinnedLeft", pinnedPosition === "right" && "columnHeader--pinnedRight"],
    draggableContainer: ["columnHeaderDraggableContainer"],
    titleContainer: ["columnHeaderTitleContainer"],
    titleContainerContent: ["columnHeaderTitleContainerContent"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridColumnHeaderItem(props) {
  var _a, _b;
  const {
    colDef,
    columnMenuOpen,
    colIndex,
    headerHeight,
    isResizing,
    isLast,
    sortDirection,
    sortIndex,
    filterItemsCounter,
    hasFocus,
    tabIndex,
    disableReorder,
    separatorSide,
    style,
    pinnedPosition,
    indexInSection,
    sectionLength,
    gridHasFiller
  } = props;
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps2();
  const headerCellRef = React75.useRef(null);
  const columnMenuId = useId();
  const columnMenuButtonId = useId();
  const iconButtonRef = React75.useRef(null);
  const [showColumnMenuIcon, setShowColumnMenuIcon] = React75.useState(columnMenuOpen);
  const isDraggable = React75.useMemo(() => !rootProps.disableColumnReorder && !disableReorder && !colDef.disableReorder, [rootProps.disableColumnReorder, disableReorder, colDef.disableReorder]);
  let headerComponent;
  if (colDef.renderHeader) {
    headerComponent = colDef.renderHeader(apiRef2.current.getColumnHeaderParams(colDef.field));
  }
  const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);
  const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);
  const ownerState = _extends({}, props, {
    classes: rootProps.classes,
    showRightBorder,
    showLeftBorder
  });
  const classes2 = useUtilityClasses27(ownerState);
  const publish = React75.useCallback((eventName) => (event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    apiRef2.current.publishEvent(eventName, apiRef2.current.getColumnHeaderParams(colDef.field), event);
  }, [apiRef2, colDef.field]);
  const mouseEventsHandlers = React75.useMemo(() => ({
    onClick: publish("columnHeaderClick"),
    onDoubleClick: publish("columnHeaderDoubleClick"),
    onMouseOver: publish("columnHeaderOver"),
    // TODO remove as it's not used
    onMouseOut: publish("columnHeaderOut"),
    // TODO remove as it's not used
    onMouseEnter: publish("columnHeaderEnter"),
    // TODO remove as it's not used
    onMouseLeave: publish("columnHeaderLeave"),
    // TODO remove as it's not used
    onKeyDown: publish("columnHeaderKeyDown"),
    onFocus: publish("columnHeaderFocus"),
    onBlur: publish("columnHeaderBlur")
  }), [publish]);
  const draggableEventHandlers = React75.useMemo(() => isDraggable ? {
    onDragStart: publish("columnHeaderDragStart"),
    onDragEnter: publish("columnHeaderDragEnter"),
    onDragOver: publish("columnHeaderDragOver"),
    onDragEnd: publish("columnHeaderDragEnd")
  } : {}, [isDraggable, publish]);
  const columnHeaderSeparatorProps = React75.useMemo(() => ({
    onMouseDown: publish("columnSeparatorMouseDown"),
    onDoubleClick: publish("columnSeparatorDoubleClick")
  }), [publish]);
  React75.useEffect(() => {
    if (!showColumnMenuIcon) {
      setShowColumnMenuIcon(columnMenuOpen);
    }
  }, [showColumnMenuIcon, columnMenuOpen]);
  const handleExited = React75.useCallback(() => {
    setShowColumnMenuIcon(false);
  }, []);
  const columnMenuIconButton = !rootProps.disableColumnMenu && !colDef.disableColumnMenu && (0, import_jsx_runtime56.jsx)(ColumnHeaderMenuIcon, {
    colDef,
    columnMenuId,
    columnMenuButtonId,
    open: showColumnMenuIcon,
    iconButtonRef
  });
  const columnMenu = (0, import_jsx_runtime56.jsx)(GridColumnHeaderMenu, {
    columnMenuId,
    columnMenuButtonId,
    field: colDef.field,
    open: columnMenuOpen,
    target: iconButtonRef.current,
    ContentComponent: rootProps.slots.columnMenu,
    contentComponentProps: (_a = rootProps.slotProps) == null ? void 0 : _a.columnMenu,
    onExited: handleExited
  });
  const sortingOrder = colDef.sortingOrder ?? rootProps.sortingOrder;
  const showSortIcon = (colDef.sortable || sortDirection != null) && !colDef.hideSortIcons && !rootProps.disableColumnSorting;
  const columnTitleIconButtons = (0, import_jsx_runtime56.jsxs)(React75.Fragment, {
    children: [!rootProps.disableColumnFilter && (0, import_jsx_runtime56.jsx)(rootProps.slots.columnHeaderFilterIconButton, _extends({
      field: colDef.field,
      counter: filterItemsCounter
    }, (_b = rootProps.slotProps) == null ? void 0 : _b.columnHeaderFilterIconButton)), showSortIcon && (0, import_jsx_runtime56.jsx)(GridColumnHeaderSortIcon, {
      direction: sortDirection,
      index: sortIndex,
      sortingOrder,
      disabled: !colDef.sortable
    })]
  });
  React75.useLayoutEffect(() => {
    var _a2;
    const columnMenuState = apiRef2.current.state.columnMenu;
    if (hasFocus && !columnMenuState.open) {
      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusableElement || headerCellRef.current;
      elementToFocus == null ? void 0 : elementToFocus.focus();
      if ((_a2 = apiRef2.current.columnHeadersContainerRef) == null ? void 0 : _a2.current) {
        apiRef2.current.columnHeadersContainerRef.current.scrollLeft = 0;
      }
    }
  }, [apiRef2, hasFocus]);
  const headerClassName = typeof colDef.headerClassName === "function" ? colDef.headerClassName({
    field: colDef.field,
    colDef
  }) : colDef.headerClassName;
  const label = colDef.headerName ?? colDef.field;
  return (0, import_jsx_runtime56.jsx)(GridGenericColumnHeaderItem, _extends({
    ref: headerCellRef,
    classes: classes2,
    columnMenuOpen,
    colIndex,
    height: headerHeight,
    isResizing,
    sortDirection,
    hasFocus,
    tabIndex,
    separatorSide,
    isDraggable,
    headerComponent,
    description: colDef.description,
    elementId: colDef.field,
    width: colDef.computedWidth,
    columnMenuIconButton,
    columnTitleIconButtons,
    headerClassName: clsx_default(headerClassName, isLast && gridClasses2["columnHeader--last"]),
    label,
    resizable: !rootProps.disableColumnResize && !!colDef.resizable,
    "data-field": colDef.field,
    columnMenu,
    draggableContainerProps: draggableEventHandlers,
    columnHeaderSeparatorProps,
    style
  }, mouseEventsHandlers));
}
true ? GridColumnHeaderItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types28.default.object.isRequired,
  colIndex: import_prop_types28.default.number.isRequired,
  columnMenuOpen: import_prop_types28.default.bool.isRequired,
  disableReorder: import_prop_types28.default.bool,
  filterItemsCounter: import_prop_types28.default.number,
  gridHasFiller: import_prop_types28.default.bool.isRequired,
  hasFocus: import_prop_types28.default.bool,
  headerHeight: import_prop_types28.default.number.isRequired,
  indexInSection: import_prop_types28.default.number.isRequired,
  isDragging: import_prop_types28.default.bool.isRequired,
  isLast: import_prop_types28.default.bool.isRequired,
  isResizing: import_prop_types28.default.bool.isRequired,
  pinnedPosition: import_prop_types28.default.oneOf(["left", "right"]),
  sectionLength: import_prop_types28.default.number.isRequired,
  separatorSide: import_prop_types28.default.oneOf(["left", "right"]),
  sortDirection: import_prop_types28.default.oneOf(["asc", "desc"]),
  sortIndex: import_prop_types28.default.number,
  style: import_prop_types28.default.object,
  tabIndex: import_prop_types28.default.oneOf([-1, 0]).isRequired
} : void 0;
var Memoized3 = fastMemo(GridColumnHeaderItem);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.js
init_extends();
var React76 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var useUtilityClasses28 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    icon: ["filterIcon"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridColumnHeaderFilterIconButton(props) {
  var _a, _b;
  const {
    counter,
    field,
    onClick
  } = props;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const ownerState = _extends({}, props, {
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses28(ownerState);
  const preferencePanel = useGridSelector2(apiRef2, gridPreferencePanelStateSelector);
  const labelId = useId();
  const panelId = useId();
  const toggleFilter = React76.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
    const {
      open: open2,
      openedPanelValue
    } = gridPreferencePanelStateSelector(apiRef2.current.state);
    if (open2 && openedPanelValue === GridPreferencePanelsValue.filters) {
      apiRef2.current.hideFilterPanel();
    } else {
      apiRef2.current.showFilterPanel(void 0, panelId, labelId);
    }
    if (onClick) {
      onClick(apiRef2.current.getColumnHeaderParams(field), event);
    }
  }, [apiRef2, field, onClick, panelId, labelId]);
  if (!counter) {
    return null;
  }
  const open = preferencePanel.open && preferencePanel.labelId === labelId;
  const iconButton = (0, import_jsx_runtime57.jsx)(rootProps.slots.baseIconButton, _extends({
    id: labelId,
    onClick: toggleFilter,
    color: "default",
    "aria-label": apiRef2.current.getLocaleText("columnHeaderFiltersLabel"),
    size: "small",
    tabIndex: -1,
    "aria-haspopup": "menu",
    "aria-expanded": open,
    "aria-controls": open ? panelId : void 0
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
    children: (0, import_jsx_runtime57.jsx)(rootProps.slots.columnFilteredIcon, {
      className: classes2.icon,
      fontSize: "small"
    })
  }));
  return (0, import_jsx_runtime57.jsx)(rootProps.slots.baseTooltip, _extends({
    title: apiRef2.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter),
    enterDelay: 1e3
  }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseTooltip, {
    children: (0, import_jsx_runtime57.jsxs)(GridIconButtonContainer, {
      children: [counter > 1 && (0, import_jsx_runtime57.jsx)(Badge_default, {
        badgeContent: counter,
        color: "default",
        children: iconButton
      }), counter === 1 && iconButton]
    })
  }));
}
true ? GridColumnHeaderFilterIconButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  counter: import_prop_types29.default.number,
  field: import_prop_types29.default.string.isRequired,
  onClick: import_prop_types29.default.func
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/material/icons/index.js
var React77 = __toESM(require_react());
init_utils2();
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var GridArrowUpwardIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
}), "ArrowUpward");
var GridArrowDownwardIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
}), "ArrowDownward");
var GridKeyboardArrowRight = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "KeyboardArrowRight");
var GridExpandMoreIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
}), "ExpandMore");
var GridFilterListIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
}), "FilterList");
var GridFilterAltIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
}), "FilterAlt");
var GridSearchIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
}), "Search");
var GridMenuIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
}), "Menu");
var GridCheckCircleIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckCircle");
var GridColumnIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"
}), "ColumnIcon");
var GridSeparatorIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M11 19V5h2v14z"
}), "Separator");
var GridViewHeadlineIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
}), "ViewHeadline");
var GridTableRowsIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
}), "TableRows");
var GridViewStreamIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
}), "ViewStream");
var GridTripleDotsVerticalIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "TripleDotsVertical");
var GridCloseIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");
var GridAddIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), "Add");
var GridRemoveIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M19 13H5v-2h14v2z"
}), "Remove");
var GridLoadIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
}), "Load");
var GridDragIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "Drag");
var GridSaveAltIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
}), "SaveAlt");
var GridCheckIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
}), "Check");
var GridMoreVertIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "MoreVert");
var GridVisibilityOffIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
}), "VisibilityOff");
var GridViewColumnIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("g", {
  children: (0, import_jsx_runtime58.jsx)("path", {
    d: "M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"
  })
}), "ViewColumn");
var GridClearIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Clear");
var GridDeleteIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
}), "Delete");
var GridDeleteForeverIcon = createSvgIcon((0, import_jsx_runtime58.jsx)("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"
}), "Delete");

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
init_clsx();
var import_prop_types30 = __toESM(require_prop_types());
var React78 = __toESM(require_react());
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var _excluded31 = ["hideMenu", "colDef", "id", "labelledby", "className", "children", "open"];
var StyledMenuList = styled_default(MenuList_default)(() => ({
  minWidth: 248
}));
var GridColumnMenuContainer = React78.forwardRef(function GridColumnMenuContainer2(props, ref) {
  const {
    hideMenu,
    id,
    labelledby,
    className,
    children,
    open
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const handleListKeyDown = React78.useCallback((event) => {
    if (isTabKey(event.key)) {
      event.preventDefault();
    }
    if (isHideMenuKey(event.key)) {
      hideMenu(event);
    }
  }, [hideMenu]);
  return (0, import_jsx_runtime59.jsx)(StyledMenuList, _extends({
    id,
    ref,
    className: clsx_default(gridClasses2.menuList, className),
    "aria-labelledby": labelledby,
    onKeyDown: handleListKeyDown,
    autoFocus: open
  }, other, {
    children
  }));
});
true ? GridColumnMenuContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types30.default.object.isRequired,
  hideMenu: import_prop_types30.default.func.isRequired,
  id: import_prop_types30.default.string,
  labelledby: import_prop_types30.default.string,
  open: import_prop_types30.default.bool.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
init_extends();
init_objectWithoutPropertiesLoose();
var React85 = __toESM(require_react());
var import_prop_types36 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenuSlots.js
init_objectWithoutPropertiesLoose();
init_extends();
var React79 = __toESM(require_react());
var _excluded32 = ["displayOrder"];
var useGridColumnMenuSlots = (props) => {
  const apiRef2 = useGridPrivateApiContext();
  const {
    defaultSlots: defaultSlots3,
    defaultSlotProps,
    slots = {},
    slotProps = {},
    hideMenu,
    colDef,
    addDividers = true
  } = props;
  const processedComponents = React79.useMemo(() => _extends({}, defaultSlots3, slots), [defaultSlots3, slots]);
  const processedSlotProps = React79.useMemo(() => {
    if (!slotProps || Object.keys(slotProps).length === 0) {
      return defaultSlotProps;
    }
    const mergedProps = _extends({}, slotProps);
    Object.entries(defaultSlotProps).forEach(([key, currentSlotProps]) => {
      mergedProps[key] = _extends({}, currentSlotProps, slotProps[key] || {});
    });
    return mergedProps;
  }, [defaultSlotProps, slotProps]);
  const defaultItems = apiRef2.current.unstable_applyPipeProcessors("columnMenu", [], props.colDef);
  const userItems = React79.useMemo(() => {
    const defaultComponentKeys = Object.keys(defaultSlots3);
    return Object.keys(slots).filter((key) => !defaultComponentKeys.includes(key));
  }, [slots, defaultSlots3]);
  return React79.useMemo(() => {
    const uniqueItems = Array.from(/* @__PURE__ */ new Set([...defaultItems, ...userItems]));
    const cleansedItems = uniqueItems.filter((key) => processedComponents[key] != null);
    const sorted = cleansedItems.sort((a, b) => {
      const leftItemProps = processedSlotProps[a];
      const rightItemProps = processedSlotProps[b];
      const leftDisplayOrder = Number.isFinite(leftItemProps == null ? void 0 : leftItemProps.displayOrder) ? leftItemProps.displayOrder : 100;
      const rightDisplayOrder = Number.isFinite(rightItemProps == null ? void 0 : rightItemProps.displayOrder) ? rightItemProps.displayOrder : 100;
      return leftDisplayOrder - rightDisplayOrder;
    });
    return sorted.reduce((acc, key, index) => {
      let itemProps = {
        colDef,
        onClick: hideMenu
      };
      const processedComponentProps = processedSlotProps[key];
      if (processedComponentProps) {
        const customProps = _objectWithoutPropertiesLoose(processedComponentProps, _excluded32);
        itemProps = _extends({}, itemProps, customProps);
      }
      return addDividers && index !== sorted.length - 1 ? [...acc, [processedComponents[key], itemProps], [Divider_default, {}]] : [...acc, [processedComponents[key], itemProps]];
    }, []);
  }, [addDividers, colDef, defaultItems, hideMenu, processedComponents, processedSlotProps, userItems]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
init_extends();
var React82 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuHideItem.js
var React80 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
function GridColumnMenuHideItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
  const columnsWithMenu = visibleColumns.filter((col) => col.disableColumnMenu !== true);
  const disabled = columnsWithMenu.length === 1;
  const toggleColumn = React80.useCallback((event) => {
    if (disabled) {
      return;
    }
    apiRef2.current.setColumnVisibility(colDef.field, false);
    onClick(event);
  }, [apiRef2, colDef.field, onClick, disabled]);
  if (rootProps.disableColumnSelector) {
    return null;
  }
  if (colDef.hideable === false) {
    return null;
  }
  return (0, import_jsx_runtime60.jsxs)(MenuItem_default, {
    onClick: toggleColumn,
    disabled,
    children: [(0, import_jsx_runtime60.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime60.jsx)(rootProps.slots.columnMenuHideIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime60.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("columnMenuHideColumn")
    })]
  });
}
true ? GridColumnMenuHideItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types31.default.object.isRequired,
  onClick: import_prop_types31.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuManageItem.js
var React81 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
function GridColumnMenuManageItem(props) {
  const {
    onClick
  } = props;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const showColumns = React81.useCallback((event) => {
    onClick(event);
    apiRef2.current.showPreferences(GridPreferencePanelsValue.columns);
  }, [apiRef2, onClick]);
  if (rootProps.disableColumnSelector) {
    return null;
  }
  return (0, import_jsx_runtime61.jsxs)(MenuItem_default, {
    onClick: showColumns,
    children: [(0, import_jsx_runtime61.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime61.jsx)(rootProps.slots.columnMenuManageColumnsIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime61.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("columnMenuManageColumns")
    })]
  });
}
true ? GridColumnMenuManageItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types32.default.object.isRequired,
  onClick: import_prop_types32.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
function GridColumnMenuColumnsItem(props) {
  return (0, import_jsx_runtime62.jsxs)(React82.Fragment, {
    children: [(0, import_jsx_runtime62.jsx)(GridColumnMenuHideItem, _extends({}, props)), (0, import_jsx_runtime62.jsx)(GridColumnMenuManageItem, _extends({}, props))]
  });
}
true ? GridColumnMenuColumnsItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types33.default.object.isRequired,
  onClick: import_prop_types33.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuFilterItem.js
var React83 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
function GridColumnMenuFilterItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const showFilter = React83.useCallback((event) => {
    onClick(event);
    apiRef2.current.showFilterPanel(colDef.field);
  }, [apiRef2, colDef.field, onClick]);
  if (rootProps.disableColumnFilter || !colDef.filterable) {
    return null;
  }
  return (0, import_jsx_runtime63.jsxs)(MenuItem_default, {
    onClick: showFilter,
    children: [(0, import_jsx_runtime63.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime63.jsx)(rootProps.slots.columnMenuFilterIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime63.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("columnMenuFilter")
    })]
  });
}
true ? GridColumnMenuFilterItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types34.default.object.isRequired,
  onClick: import_prop_types34.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuSortItem.js
var React84 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
function GridColumnMenuSortItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext();
  const sortModel = useGridSelector2(apiRef2, gridSortModelSelector);
  const rootProps = useGridRootProps2();
  const sortDirection = React84.useMemo(() => {
    if (!colDef) {
      return null;
    }
    const sortItem = sortModel.find((item) => item.field === colDef.field);
    return sortItem == null ? void 0 : sortItem.sort;
  }, [colDef, sortModel]);
  const sortingOrder = colDef.sortingOrder ?? rootProps.sortingOrder;
  const onSortMenuItemClick = React84.useCallback((event) => {
    onClick(event);
    const direction = event.currentTarget.getAttribute("data-value") || null;
    apiRef2.current.sortColumn(colDef.field, direction === sortDirection ? null : direction);
  }, [apiRef2, colDef, onClick, sortDirection]);
  if (rootProps.disableColumnSorting || !colDef || !colDef.sortable || !sortingOrder.some((item) => !!item)) {
    return null;
  }
  const getLabel = (key) => {
    const label = apiRef2.current.getLocaleText(key);
    return typeof label === "function" ? label(colDef) : label;
  };
  return (0, import_jsx_runtime64.jsxs)(React84.Fragment, {
    children: [sortingOrder.includes("asc") && sortDirection !== "asc" ? (0, import_jsx_runtime64.jsxs)(MenuItem_default, {
      onClick: onSortMenuItemClick,
      "data-value": "asc",
      children: [(0, import_jsx_runtime64.jsx)(ListItemIcon_default, {
        children: (0, import_jsx_runtime64.jsx)(rootProps.slots.columnMenuSortAscendingIcon, {
          fontSize: "small"
        })
      }), (0, import_jsx_runtime64.jsx)(ListItemText_default, {
        children: getLabel("columnMenuSortAsc")
      })]
    }) : null, sortingOrder.includes("desc") && sortDirection !== "desc" ? (0, import_jsx_runtime64.jsxs)(MenuItem_default, {
      onClick: onSortMenuItemClick,
      "data-value": "desc",
      children: [(0, import_jsx_runtime64.jsx)(ListItemIcon_default, {
        children: (0, import_jsx_runtime64.jsx)(rootProps.slots.columnMenuSortDescendingIcon, {
          fontSize: "small"
        })
      }), (0, import_jsx_runtime64.jsx)(ListItemText_default, {
        children: getLabel("columnMenuSortDesc")
      })]
    }) : null, sortingOrder.includes(null) && sortDirection != null ? (0, import_jsx_runtime64.jsxs)(MenuItem_default, {
      onClick: onSortMenuItemClick,
      children: [(0, import_jsx_runtime64.jsx)(ListItemIcon_default, {}), (0, import_jsx_runtime64.jsx)(ListItemText_default, {
        children: apiRef2.current.getLocaleText("columnMenuUnsort")
      })]
    }) : null]
  });
}
true ? GridColumnMenuSortItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types35.default.object.isRequired,
  onClick: import_prop_types35.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var _excluded33 = ["defaultSlots", "defaultSlotProps", "slots", "slotProps"];
var GRID_COLUMN_MENU_SLOTS = {
  columnMenuSortItem: GridColumnMenuSortItem,
  columnMenuFilterItem: GridColumnMenuFilterItem,
  columnMenuColumnsItem: GridColumnMenuColumnsItem
};
var GRID_COLUMN_MENU_SLOT_PROPS = {
  columnMenuSortItem: {
    displayOrder: 10
  },
  columnMenuFilterItem: {
    displayOrder: 20
  },
  columnMenuColumnsItem: {
    displayOrder: 30
  }
};
var GridGenericColumnMenu2 = React85.forwardRef(function GridGenericColumnMenu3(props, ref) {
  const {
    defaultSlots: defaultSlots3,
    defaultSlotProps,
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const orderedSlots = useGridColumnMenuSlots(_extends({}, other, {
    defaultSlots: defaultSlots3,
    defaultSlotProps,
    slots,
    slotProps
  }));
  return (0, import_jsx_runtime65.jsx)(GridColumnMenuContainer, _extends({
    ref
  }, other, {
    children: orderedSlots.map(([Component, otherProps], index) => (0, import_jsx_runtime65.jsx)(Component, _extends({}, otherProps), index))
  }));
});
var GridColumnMenu = React85.forwardRef(function GridColumnMenu2(props, ref) {
  return (0, import_jsx_runtime65.jsx)(GridGenericColumnMenu2, _extends({}, props, {
    ref,
    defaultSlots: GRID_COLUMN_MENU_SLOTS,
    defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS
  }));
});
true ? GridColumnMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types36.default.object.isRequired,
  hideMenu: import_prop_types36.default.func.isRequired,
  id: import_prop_types36.default.string,
  labelledby: import_prop_types36.default.string,
  open: import_prop_types36.default.bool.isRequired,
  /**
   * Could be used to pass new props or override props specific to a column menu component
   * e.g. `displayOrder`
   */
  slotProps: import_prop_types36.default.object,
  /**
   * `slots` could be used to add new and (or) override default column menu items
   * If you register a nee component you must pass it's `displayOrder` in `slotProps`
   * or it will be placed in the end of the list
   */
  slots: import_prop_types36.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
init_extends();
var React88 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridPanelWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React86 = __toESM(require_react());
var import_prop_types37 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var _excluded34 = ["className", "slotProps"];
var useUtilityClasses29 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelWrapper"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridPanelWrapperRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "PanelWrapper",
  overridesResolver: (props, styles) => styles.panelWrapper
})({
  display: "flex",
  flexDirection: "column",
  flex: 1,
  "&:focus": {
    outline: 0
  }
});
var isEnabled = () => true;
var GridPanelWrapper = React86.forwardRef(function GridPanelWrapper2(props, ref) {
  const {
    className,
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses29(rootProps);
  return (0, import_jsx_runtime66.jsx)(FocusTrap, _extends({
    open: true,
    disableEnforceFocus: true,
    isEnabled
  }, slotProps.TrapFocus, {
    children: (0, import_jsx_runtime66.jsx)(GridPanelWrapperRoot, _extends({
      ref,
      tabIndex: -1,
      className: clsx_default(className, classes2.root),
      ownerState: rootProps
    }, other))
  }));
});
true ? GridPanelWrapper.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  slotProps: import_prop_types37.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnsManagement/GridColumnsManagement.js
init_extends();
var React87 = __toESM(require_react());
var import_prop_types38 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnsManagement/utils.js
var checkColumnVisibilityModelsSame = (a, b) => {
  const aFalseValues = new Set(Object.keys(a).filter((key) => a[key] === false));
  const bFalseValues = new Set(Object.keys(b).filter((key) => b[key] === false));
  if (aFalseValues.size !== bFalseValues.size) {
    return false;
  }
  let result = true;
  aFalseValues.forEach((key) => {
    if (!bFalseValues.has(key)) {
      result = false;
    }
  });
  return result;
};
var defaultSearchPredicate = (column, searchValue) => (column.headerName || column.field).toLowerCase().indexOf(searchValue) > -1;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnsManagement/GridColumnsManagement.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var useUtilityClasses30 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["columnsManagement"],
    header: ["columnsManagementHeader"],
    footer: ["columnsManagementFooter"],
    row: ["columnsManagementRow"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var collator2 = new Intl.Collator();
function GridColumnsManagement(props) {
  var _a, _b, _c;
  const apiRef2 = useGridApiContext();
  const searchInputRef = React87.useRef(null);
  const columns = useGridSelector2(apiRef2, gridColumnDefinitionsSelector);
  const initialColumnVisibilityModel = useLazyRef(() => gridColumnVisibilityModelSelector(apiRef2)).current;
  const columnVisibilityModel = useGridSelector2(apiRef2, gridColumnVisibilityModelSelector);
  const rootProps = useGridRootProps2();
  const [searchValue, setSearchValue] = React87.useState("");
  const classes2 = useUtilityClasses30(rootProps);
  const {
    sort,
    searchPredicate = defaultSearchPredicate,
    autoFocusSearchField = true,
    disableShowHideToggle = false,
    disableResetButton = false,
    toggleAllMode = "all",
    getTogglableColumns
  } = props;
  const isResetDisabled = React87.useMemo(() => checkColumnVisibilityModelsSame(columnVisibilityModel, initialColumnVisibilityModel), [columnVisibilityModel, initialColumnVisibilityModel]);
  const sortedColumns = React87.useMemo(() => {
    switch (sort) {
      case "asc":
        return [...columns].sort((a, b) => collator2.compare(a.headerName || a.field, b.headerName || b.field));
      case "desc":
        return [...columns].sort((a, b) => -collator2.compare(a.headerName || a.field, b.headerName || b.field));
      default:
        return columns;
    }
  }, [columns, sort]);
  const toggleColumn = (event) => {
    const {
      name: field
    } = event.target;
    apiRef2.current.setColumnVisibility(field, columnVisibilityModel[field] === false);
  };
  const currentColumns = React87.useMemo(() => {
    const togglableColumns = getTogglableColumns ? getTogglableColumns(sortedColumns) : null;
    const togglableSortedColumns = togglableColumns ? sortedColumns.filter(({
      field
    }) => togglableColumns.includes(field)) : sortedColumns;
    if (!searchValue) {
      return togglableSortedColumns;
    }
    return togglableSortedColumns.filter((column) => searchPredicate(column, searchValue.toLowerCase()));
  }, [sortedColumns, searchValue, searchPredicate, getTogglableColumns]);
  const toggleAllColumns = React87.useCallback((isVisible) => {
    const currentModel = gridColumnVisibilityModelSelector(apiRef2);
    const newModel = _extends({}, currentModel);
    const togglableColumns = getTogglableColumns ? getTogglableColumns(columns) : null;
    (toggleAllMode === "filteredOnly" ? currentColumns : columns).forEach((col) => {
      if (col.hideable && (togglableColumns == null || togglableColumns.includes(col.field))) {
        if (isVisible) {
          delete newModel[col.field];
        } else {
          newModel[col.field] = false;
        }
      }
    });
    return apiRef2.current.setColumnVisibilityModel(newModel);
  }, [apiRef2, columns, getTogglableColumns, toggleAllMode, currentColumns]);
  const handleSearchValueChange = React87.useCallback((event) => {
    setSearchValue(event.target.value);
  }, []);
  const hideableColumns = React87.useMemo(() => currentColumns.filter((col) => col.hideable), [currentColumns]);
  const allHideableColumnsVisible = React87.useMemo(() => hideableColumns.every((column) => columnVisibilityModel[column.field] == null || columnVisibilityModel[column.field] !== false), [columnVisibilityModel, hideableColumns]);
  const allHideableColumnsHidden = React87.useMemo(() => hideableColumns.every((column) => columnVisibilityModel[column.field] === false), [columnVisibilityModel, hideableColumns]);
  const firstSwitchRef = React87.useRef(null);
  React87.useEffect(() => {
    if (autoFocusSearchField) {
      searchInputRef.current.focus();
    } else if (firstSwitchRef.current && typeof firstSwitchRef.current.focus === "function") {
      firstSwitchRef.current.focus();
    }
  }, [autoFocusSearchField]);
  let firstHideableColumnFound = false;
  const isFirstHideableColumn = (column) => {
    if (firstHideableColumnFound === false && column.hideable !== false) {
      firstHideableColumnFound = true;
      return true;
    }
    return false;
  };
  return (0, import_jsx_runtime67.jsxs)(React87.Fragment, {
    children: [(0, import_jsx_runtime67.jsx)(GridColumnsManagementHeader, {
      className: classes2.header,
      ownerState: rootProps,
      children: (0, import_jsx_runtime67.jsx)(rootProps.slots.baseTextField, _extends({
        placeholder: apiRef2.current.getLocaleText("columnsManagementSearchTitle"),
        inputRef: searchInputRef,
        value: searchValue,
        onChange: handleSearchValueChange,
        variant: "outlined",
        size: "small",
        InputProps: {
          startAdornment: (0, import_jsx_runtime67.jsx)(rootProps.slots.baseInputAdornment, {
            position: "start",
            children: (0, import_jsx_runtime67.jsx)(rootProps.slots.quickFilterIcon, {})
          }),
          sx: {
            pl: 1.5
          }
        },
        fullWidth: true
      }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField))
    }), (0, import_jsx_runtime67.jsxs)(GridColumnsManagementBody, {
      className: classes2.root,
      ownerState: rootProps,
      children: [currentColumns.map((column) => {
        var _a2;
        return (0, import_jsx_runtime67.jsx)(FormControlLabel_default, {
          className: classes2.row,
          control: (0, import_jsx_runtime67.jsx)(rootProps.slots.baseCheckbox, _extends({
            disabled: column.hideable === false,
            checked: columnVisibilityModel[column.field] !== false,
            onClick: toggleColumn,
            name: column.field,
            sx: {
              p: 0.5
            },
            inputRef: isFirstHideableColumn(column) ? firstSwitchRef : void 0
          }, (_a2 = rootProps.slotProps) == null ? void 0 : _a2.baseCheckbox)),
          label: column.headerName || column.field
        }, column.field);
      }), currentColumns.length === 0 && (0, import_jsx_runtime67.jsx)(GridColumnsManagementEmptyText, {
        ownerState: rootProps,
        children: apiRef2.current.getLocaleText("columnsManagementNoColumns")
      })]
    }), (!disableShowHideToggle || !disableResetButton) && currentColumns.length > 0 ? (0, import_jsx_runtime67.jsxs)(GridColumnsManagementFooter, {
      ownerState: rootProps,
      className: classes2.footer,
      children: [!disableShowHideToggle ? (0, import_jsx_runtime67.jsx)(FormControlLabel_default, {
        control: (0, import_jsx_runtime67.jsx)(rootProps.slots.baseCheckbox, _extends({
          disabled: hideableColumns.length === 0,
          checked: allHideableColumnsVisible,
          indeterminate: !allHideableColumnsVisible && !allHideableColumnsHidden,
          onClick: () => toggleAllColumns(!allHideableColumnsVisible),
          name: apiRef2.current.getLocaleText("columnsManagementShowHideAllText"),
          sx: {
            p: 0.5
          }
        }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseCheckbox)),
        label: apiRef2.current.getLocaleText("columnsManagementShowHideAllText")
      }) : (0, import_jsx_runtime67.jsx)("span", {}), !disableResetButton ? (0, import_jsx_runtime67.jsx)(rootProps.slots.baseButton, _extends({
        onClick: () => apiRef2.current.setColumnVisibilityModel(initialColumnVisibilityModel),
        disabled: isResetDisabled
      }, (_c = rootProps.slotProps) == null ? void 0 : _c.baseButton, {
        children: apiRef2.current.getLocaleText("columnsManagementReset")
      })) : null]
    }) : null]
  });
}
true ? GridColumnsManagement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the column search field will be focused automatically.
   * If `false`, the first column switch input will be focused automatically.
   * This helps to avoid input keyboard panel to popup automatically on touch devices.
   * @default true
   */
  autoFocusSearchField: import_prop_types38.default.bool,
  /**
   * If `true`, the `Reset` button will not be disabled
   * @default false
   */
  disableResetButton: import_prop_types38.default.bool,
  /**
   * If `true`, the `Show/Hide all` toggle checkbox will not be displayed.
   * @default false
   */
  disableShowHideToggle: import_prop_types38.default.bool,
  /**
   * Returns the list of togglable columns.
   * If used, only those columns will be displayed in the panel
   * which are passed as the return value of the function.
   * @param {GridColDef[]} columns The `ColDef` list of all columns.
   * @returns {GridColDef['field'][]} The list of togglable columns' field names.
   */
  getTogglableColumns: import_prop_types38.default.func,
  searchPredicate: import_prop_types38.default.func,
  sort: import_prop_types38.default.oneOf(["asc", "desc"]),
  /**
   * Changes the behavior of the `Show/Hide All` toggle when the search field is used:
   * - `all`: Will toggle all columns.
   * - `filteredOnly`: Will only toggle columns that match the search criteria.
   * @default 'all'
   */
  toggleAllMode: import_prop_types38.default.oneOf(["all", "filteredOnly"])
} : void 0;
var GridColumnsManagementBody = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagement",
  overridesResolver: (props, styles) => styles.columnsManagement
})(({
  theme
}) => ({
  padding: theme.spacing(0, 3, 1.5),
  display: "flex",
  flexDirection: "column",
  overflow: "auto",
  flex: "1 1",
  maxHeight: 400,
  alignItems: "flex-start"
}));
var GridColumnsManagementHeader = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagementHeader",
  overridesResolver: (props, styles) => styles.columnsManagementHeader
})(({
  theme
}) => ({
  padding: theme.spacing(1.5, 3)
}));
var GridColumnsManagementFooter = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagementFooter",
  overridesResolver: (props, styles) => styles.columnsManagementFooter
})(({
  theme
}) => ({
  padding: theme.spacing(0.5, 1, 0.5, 3),
  display: "flex",
  justifyContent: "space-between",
  borderTop: `1px solid ${theme.palette.divider}`
}));
var GridColumnsManagementEmptyText = styled_default("div")(({
  theme
}) => ({
  padding: theme.spacing(0.5, 0),
  color: theme.palette.grey[500]
}));

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
function GridColumnsPanel(props) {
  var _a;
  const rootProps = useGridRootProps2();
  return (0, import_jsx_runtime68.jsx)(GridPanelWrapper, _extends({}, props, {
    children: (0, import_jsx_runtime68.jsx)(GridColumnsManagement, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.columnsManagement))
  }));
}
true ? GridColumnsPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  slotProps: import_prop_types39.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridPanel.js
init_extends();
init_objectWithoutPropertiesLoose();
var React89 = __toESM(require_react());
var import_prop_types40 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var _excluded35 = ["children", "className", "classes"];
var gridPanelClasses = generateUtilityClasses("MuiDataGrid", ["panel", "paper"]);
var GridPanelRoot = styled_default(Popper_default, {
  name: "MuiDataGrid",
  slot: "Panel",
  overridesResolver: (props, styles) => styles.panel
})(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var GridPaperRoot = styled_default(Paper_default, {
  name: "MuiDataGrid",
  slot: "Paper",
  overridesResolver: (props, styles) => styles.paper
})(({
  theme
}) => ({
  backgroundColor: (theme.vars || theme).palette.background.paper,
  minWidth: 300,
  maxHeight: 450,
  display: "flex",
  maxWidth: `calc(100vw - ${theme.spacing(0.5)})`,
  overflow: "auto"
}));
var GridPanel = React89.forwardRef((props, ref) => {
  const {
    children,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const classes2 = gridPanelClasses;
  const [isPlaced, setIsPlaced] = React89.useState(false);
  const handleClickAway = React89.useCallback(() => {
    apiRef2.current.hidePreferences();
  }, [apiRef2]);
  const handleKeyDown = React89.useCallback((event) => {
    if (isEscapeKey(event.key)) {
      apiRef2.current.hidePreferences();
    }
  }, [apiRef2]);
  const modifiers = React89.useMemo(() => [{
    name: "flip",
    enabled: false
  }, {
    name: "isPlaced",
    enabled: true,
    phase: "main",
    fn: () => {
      setIsPlaced(true);
    },
    effect: () => () => {
      setIsPlaced(false);
    }
  }], []);
  const [anchorEl, setAnchorEl] = React89.useState(null);
  React89.useEffect(() => {
    var _a, _b;
    const panelAnchor = (_b = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current) == null ? void 0 : _b.querySelector('[data-id="gridPanelAnchor"]');
    if (panelAnchor) {
      setAnchorEl(panelAnchor);
    }
  }, [apiRef2]);
  if (!anchorEl) {
    return null;
  }
  return (0, import_jsx_runtime69.jsx)(GridPanelRoot, _extends({
    ref,
    placement: "bottom-start",
    className: clsx_default(className, classes2.panel),
    ownerState: rootProps,
    anchorEl,
    modifiers
  }, other, {
    children: (0, import_jsx_runtime69.jsx)(ClickAwayListener, {
      mouseEvent: "onMouseUp",
      onClickAway: handleClickAway,
      children: (0, import_jsx_runtime69.jsx)(GridPaperRoot, {
        className: classes2.paper,
        ownerState: rootProps,
        elevation: 8,
        onKeyDown: handleKeyDown,
        children: isPlaced && children
      })
    })
  }));
});
true ? GridPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Popper render function or node.
   */
  children: import_prop_types40.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types40.default.object,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types40.default.bool.isRequired,
  ownerState: import_prop_types40.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridPanelContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React90 = __toESM(require_react());
var import_prop_types41 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var _excluded36 = ["className"];
var useUtilityClasses31 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelContent"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridPanelContentRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "PanelContent",
  overridesResolver: (props, styles) => styles.panelContent
})({
  display: "flex",
  flexDirection: "column",
  overflow: "auto",
  flex: "1 1",
  maxHeight: 400
});
function GridPanelContent(props) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses31(rootProps);
  return (0, import_jsx_runtime70.jsx)(GridPanelContentRoot, _extends({
    className: clsx_default(className, classes2.root),
    ownerState: rootProps
  }, other));
}
true ? GridPanelContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridPanelFooter.js
init_extends();
init_objectWithoutPropertiesLoose();
var React91 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var _excluded37 = ["className"];
var useUtilityClasses32 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelFooter"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridPanelFooterRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "PanelFooter",
  overridesResolver: (props, styles) => styles.panelFooter
})(({
  theme
}) => ({
  padding: theme.spacing(0.5),
  display: "flex",
  justifyContent: "space-between"
}));
function GridPanelFooter(props) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses32(rootProps);
  return (0, import_jsx_runtime71.jsx)(GridPanelFooterRoot, _extends({
    className: clsx_default(className, classes2.root),
    ownerState: rootProps
  }, other));
}
true ? GridPanelFooter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types42.default.oneOfType([import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object, import_prop_types42.default.bool])), import_prop_types42.default.func, import_prop_types42.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridPanelHeader.js
init_extends();
init_objectWithoutPropertiesLoose();
var React92 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var _excluded38 = ["className"];
var useUtilityClasses33 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelHeader"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridPanelHeaderRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "PanelHeader",
  overridesResolver: (props, styles) => styles.panelHeader
})(({
  theme
}) => ({
  padding: theme.spacing(1)
}));
function GridPanelHeader(props) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses33(rootProps);
  return (0, import_jsx_runtime72.jsx)(GridPanelHeaderRoot, _extends({
    className: clsx_default(className, classes2.root),
    ownerState: rootProps
  }, other));
}
true ? GridPanelHeader.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterForm.js
init_extends();
init_objectWithoutPropertiesLoose();
var React93 = __toESM(require_react());
var import_prop_types44 = __toESM(require_prop_types());
init_utils();
init_clsx();
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
var _excluded39 = ["item", "hasMultipleFilters", "deleteFilter", "applyFilterChanges", "showMultiFilterOperators", "disableMultiFilterOperator", "applyMultiFilterOperatorChanges", "focusElementRef", "logicOperators", "columnsSort", "filterColumns", "deleteIconProps", "logicOperatorInputProps", "operatorInputProps", "columnInputProps", "valueInputProps", "readOnly", "children"];
var _excluded210 = ["InputComponentProps"];
var useUtilityClasses34 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["filterForm"],
    deleteIcon: ["filterFormDeleteIcon"],
    logicOperatorInput: ["filterFormLogicOperatorInput"],
    columnInput: ["filterFormColumnInput"],
    operatorInput: ["filterFormOperatorInput"],
    valueInput: ["filterFormValueInput"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridFilterFormRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterForm",
  overridesResolver: (props, styles) => styles.filterForm
})(({
  theme
}) => ({
  display: "flex",
  padding: theme.spacing(1)
}));
var FilterFormDeleteIcon = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormDeleteIcon",
  overridesResolver: (_, styles) => styles.filterFormDeleteIcon
})(({
  theme
}) => ({
  flexShrink: 0,
  justifyContent: "flex-end",
  marginRight: theme.spacing(0.5),
  marginBottom: theme.spacing(0.2)
}));
var FilterFormLogicOperatorInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormLogicOperatorInput",
  overridesResolver: (_, styles) => styles.filterFormLogicOperatorInput
})({
  minWidth: 55,
  marginRight: 5,
  justifyContent: "end"
});
var FilterFormColumnInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormColumnInput",
  overridesResolver: (_, styles) => styles.filterFormColumnInput
})({
  width: 150
});
var FilterFormOperatorInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormOperatorInput",
  overridesResolver: (_, styles) => styles.filterFormOperatorInput
})({
  width: 120
});
var FilterFormValueInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormValueInput",
  overridesResolver: (_, styles) => styles.filterFormValueInput
})({
  width: 190
});
var getLogicOperatorLocaleKey = (logicOperator) => {
  switch (logicOperator) {
    case GridLogicOperator2.And:
      return "filterPanelOperatorAnd";
    case GridLogicOperator2.Or:
      return "filterPanelOperatorOr";
    default:
      throw new Error("MUI X: Invalid `logicOperator` property in the `GridFilterPanel`.");
  }
};
var getColumnLabel = (col) => col.headerName || col.field;
var collator3 = new Intl.Collator();
var GridFilterForm = React93.forwardRef(function GridFilterForm2(props, ref) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  const {
    item,
    hasMultipleFilters,
    deleteFilter,
    applyFilterChanges,
    showMultiFilterOperators,
    disableMultiFilterOperator,
    applyMultiFilterOperatorChanges,
    focusElementRef,
    logicOperators = [GridLogicOperator2.And, GridLogicOperator2.Or],
    columnsSort,
    filterColumns,
    deleteIconProps = {},
    logicOperatorInputProps = {},
    operatorInputProps = {},
    columnInputProps = {},
    valueInputProps = {},
    readOnly
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const apiRef2 = useGridApiContext();
  const columnLookup = useGridSelector2(apiRef2, gridColumnLookupSelector2);
  const filterableColumns = useGridSelector2(apiRef2, gridFilterableColumnDefinitionsSelector);
  const filterModel = useGridSelector2(apiRef2, gridFilterModelSelector);
  const columnSelectId = useId();
  const columnSelectLabelId = useId();
  const operatorSelectId = useId();
  const operatorSelectLabelId = useId();
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses34(rootProps);
  const valueRef = React93.useRef(null);
  const filterSelectorRef = React93.useRef(null);
  const multiFilterOperator = filterModel.logicOperator ?? GridLogicOperator2.And;
  const hasLogicOperatorColumn = hasMultipleFilters && logicOperators.length > 0;
  const baseFormControlProps = ((_a = rootProps.slotProps) == null ? void 0 : _a.baseFormControl) || {};
  const baseSelectProps = ((_b = rootProps.slotProps) == null ? void 0 : _b.baseSelect) || {};
  const isBaseSelectNative = baseSelectProps.native ?? false;
  const baseInputLabelProps = ((_c = rootProps.slotProps) == null ? void 0 : _c.baseInputLabel) || {};
  const baseSelectOptionProps = ((_d = rootProps.slotProps) == null ? void 0 : _d.baseSelectOption) || {};
  const {
    InputComponentProps
  } = valueInputProps, valueInputPropsOther = _objectWithoutPropertiesLoose(valueInputProps, _excluded210);
  const {
    filteredColumns,
    selectedField
  } = React93.useMemo(() => {
    let itemField = item.field;
    const selectedNonFilterableColumn = columnLookup[item.field].filterable === false ? columnLookup[item.field] : null;
    if (selectedNonFilterableColumn) {
      return {
        filteredColumns: [selectedNonFilterableColumn],
        selectedField: itemField
      };
    }
    if (filterColumns === void 0 || typeof filterColumns !== "function") {
      return {
        filteredColumns: filterableColumns,
        selectedField: itemField
      };
    }
    const filteredFields = filterColumns({
      field: item.field,
      columns: filterableColumns,
      currentFilters: (filterModel == null ? void 0 : filterModel.items) || []
    });
    return {
      filteredColumns: filterableColumns.filter((column) => {
        const isFieldIncluded = filteredFields.includes(column.field);
        if (column.field === item.field && !isFieldIncluded) {
          itemField = void 0;
        }
        return isFieldIncluded;
      }),
      selectedField: itemField
    };
  }, [filterColumns, filterModel == null ? void 0 : filterModel.items, filterableColumns, item.field, columnLookup]);
  const sortedFilteredColumns = React93.useMemo(() => {
    switch (columnsSort) {
      case "asc":
        return filteredColumns.sort((a, b) => collator3.compare(getColumnLabel(a), getColumnLabel(b)));
      case "desc":
        return filteredColumns.sort((a, b) => -collator3.compare(getColumnLabel(a), getColumnLabel(b)));
      default:
        return filteredColumns;
    }
  }, [filteredColumns, columnsSort]);
  const currentColumn = item.field ? apiRef2.current.getColumn(item.field) : null;
  const currentOperator = React93.useMemo(() => {
    var _a2;
    if (!item.operator || !currentColumn) {
      return null;
    }
    return (_a2 = currentColumn.filterOperators) == null ? void 0 : _a2.find((operator) => operator.value === item.operator);
  }, [item, currentColumn]);
  const changeColumn = React93.useCallback((event) => {
    const field = event.target.value;
    const column = apiRef2.current.getColumn(field);
    if (column.field === currentColumn.field) {
      return;
    }
    const newOperator = column.filterOperators.find((operator) => operator.value === item.operator) || column.filterOperators[0];
    const eraseFilterValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent) || column.type !== currentColumn.type;
    let filterValue = eraseFilterValue ? void 0 : item.value;
    if (column.type === "singleSelect" && filterValue !== void 0) {
      const colDef = column;
      const valueOptions = getValueOptions(colDef);
      if (Array.isArray(filterValue)) {
        filterValue = filterValue.filter((val) => {
          return (
            // Only keep values that are in the new value options
            getValueFromValueOptions(val, valueOptions, colDef == null ? void 0 : colDef.getOptionValue) !== void 0
          );
        });
      } else if (getValueFromValueOptions(item.value, valueOptions, colDef == null ? void 0 : colDef.getOptionValue) === void 0) {
        filterValue = void 0;
      }
    }
    applyFilterChanges(_extends({}, item, {
      field,
      operator: newOperator.value,
      value: filterValue
    }));
  }, [apiRef2, applyFilterChanges, item, currentColumn, currentOperator]);
  const changeOperator = React93.useCallback((event) => {
    const operator = event.target.value;
    const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find((op) => op.value === operator);
    const eraseItemValue = !(newOperator == null ? void 0 : newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
    applyFilterChanges(_extends({}, item, {
      operator,
      value: eraseItemValue ? void 0 : item.value
    }));
  }, [applyFilterChanges, item, currentColumn, currentOperator]);
  const changeLogicOperator = React93.useCallback((event) => {
    const logicOperator = event.target.value === GridLogicOperator2.And.toString() ? GridLogicOperator2.And : GridLogicOperator2.Or;
    applyMultiFilterOperatorChanges(logicOperator);
  }, [applyMultiFilterOperatorChanges]);
  const handleDeleteFilter = () => {
    if (rootProps.disableMultipleColumnsFiltering) {
      if (item.value === void 0) {
        deleteFilter(item);
      } else {
        applyFilterChanges(_extends({}, item, {
          value: void 0
        }));
      }
    } else {
      deleteFilter(item);
    }
  };
  React93.useImperativeHandle(focusElementRef, () => ({
    focus: () => {
      var _a2;
      if (currentOperator == null ? void 0 : currentOperator.InputComponent) {
        (_a2 = valueRef == null ? void 0 : valueRef.current) == null ? void 0 : _a2.focus();
      } else {
        filterSelectorRef.current.focus();
      }
    }
  }), [currentOperator]);
  return (0, import_jsx_runtime73.jsxs)(GridFilterFormRoot, _extends({
    ref,
    className: classes2.root,
    "data-id": item.id,
    ownerState: rootProps
  }, other, {
    children: [(0, import_jsx_runtime73.jsx)(FilterFormDeleteIcon, _extends({
      variant: "standard",
      as: rootProps.slots.baseFormControl
    }, baseFormControlProps, deleteIconProps, {
      className: clsx_default(classes2.deleteIcon, baseFormControlProps.className, deleteIconProps.className),
      ownerState: rootProps,
      children: (0, import_jsx_runtime73.jsx)(rootProps.slots.baseIconButton, _extends({
        "aria-label": apiRef2.current.getLocaleText("filterPanelDeleteIconLabel"),
        title: apiRef2.current.getLocaleText("filterPanelDeleteIconLabel"),
        onClick: handleDeleteFilter,
        size: "small",
        disabled: readOnly
      }, (_e = rootProps.slotProps) == null ? void 0 : _e.baseIconButton, {
        children: (0, import_jsx_runtime73.jsx)(rootProps.slots.filterPanelDeleteIcon, {
          fontSize: "small"
        })
      }))
    })), (0, import_jsx_runtime73.jsx)(FilterFormLogicOperatorInput, _extends({
      variant: "standard",
      as: rootProps.slots.baseFormControl
    }, baseFormControlProps, logicOperatorInputProps, {
      sx: _extends({
        display: hasLogicOperatorColumn ? "flex" : "none",
        visibility: showMultiFilterOperators ? "visible" : "hidden"
      }, baseFormControlProps.sx || {}, logicOperatorInputProps.sx || {}),
      className: clsx_default(classes2.logicOperatorInput, baseFormControlProps.className, logicOperatorInputProps.className),
      ownerState: rootProps,
      children: (0, import_jsx_runtime73.jsx)(rootProps.slots.baseSelect, _extends({
        inputProps: {
          "aria-label": apiRef2.current.getLocaleText("filterPanelLogicOperator")
        },
        value: multiFilterOperator ?? "",
        onChange: changeLogicOperator,
        disabled: !!disableMultiFilterOperator || logicOperators.length === 1,
        native: isBaseSelectNative
      }, (_f = rootProps.slotProps) == null ? void 0 : _f.baseSelect, {
        children: logicOperators.map((logicOperator) => (0, import_react3.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isBaseSelectNative,
          key: logicOperator.toString(),
          value: logicOperator.toString()
        }), apiRef2.current.getLocaleText(getLogicOperatorLocaleKey(logicOperator))))
      }))
    })), (0, import_jsx_runtime73.jsxs)(FilterFormColumnInput, _extends({
      variant: "standard",
      as: rootProps.slots.baseFormControl
    }, baseFormControlProps, columnInputProps, {
      className: clsx_default(classes2.columnInput, baseFormControlProps.className, columnInputProps.className),
      ownerState: rootProps,
      children: [(0, import_jsx_runtime73.jsx)(rootProps.slots.baseInputLabel, _extends({}, baseInputLabelProps, {
        htmlFor: columnSelectId,
        id: columnSelectLabelId,
        children: apiRef2.current.getLocaleText("filterPanelColumns")
      })), (0, import_jsx_runtime73.jsx)(rootProps.slots.baseSelect, _extends({
        labelId: columnSelectLabelId,
        id: columnSelectId,
        label: apiRef2.current.getLocaleText("filterPanelColumns"),
        value: selectedField ?? "",
        onChange: changeColumn,
        native: isBaseSelectNative,
        disabled: readOnly
      }, (_g = rootProps.slotProps) == null ? void 0 : _g.baseSelect, {
        children: sortedFilteredColumns.map((col) => (0, import_react3.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isBaseSelectNative,
          key: col.field,
          value: col.field
        }), getColumnLabel(col)))
      }))]
    })), (0, import_jsx_runtime73.jsxs)(FilterFormOperatorInput, _extends({
      variant: "standard",
      as: rootProps.slots.baseFormControl
    }, baseFormControlProps, operatorInputProps, {
      className: clsx_default(classes2.operatorInput, baseFormControlProps.className, operatorInputProps.className),
      ownerState: rootProps,
      children: [(0, import_jsx_runtime73.jsx)(rootProps.slots.baseInputLabel, _extends({}, baseInputLabelProps, {
        htmlFor: operatorSelectId,
        id: operatorSelectLabelId,
        children: apiRef2.current.getLocaleText("filterPanelOperator")
      })), (0, import_jsx_runtime73.jsx)(rootProps.slots.baseSelect, _extends({
        labelId: operatorSelectLabelId,
        label: apiRef2.current.getLocaleText("filterPanelOperator"),
        id: operatorSelectId,
        value: item.operator,
        onChange: changeOperator,
        native: isBaseSelectNative,
        inputRef: filterSelectorRef,
        disabled: readOnly
      }, (_h = rootProps.slotProps) == null ? void 0 : _h.baseSelect, {
        children: (_i = currentColumn == null ? void 0 : currentColumn.filterOperators) == null ? void 0 : _i.map((operator) => (0, import_react3.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isBaseSelectNative,
          key: operator.value,
          value: operator.value
        }), operator.label || apiRef2.current.getLocaleText(`filterOperator${capitalize(operator.value)}`)))
      }))]
    })), (0, import_jsx_runtime73.jsx)(FilterFormValueInput, _extends({
      variant: "standard",
      as: rootProps.slots.baseFormControl
    }, baseFormControlProps, valueInputPropsOther, {
      className: clsx_default(classes2.valueInput, baseFormControlProps.className, valueInputPropsOther.className),
      ownerState: rootProps,
      children: (currentOperator == null ? void 0 : currentOperator.InputComponent) ? (0, import_jsx_runtime73.jsx)(currentOperator.InputComponent, _extends({
        apiRef: apiRef2,
        item,
        applyValue: applyFilterChanges,
        focusElementRef: valueRef,
        disabled: readOnly
      }, currentOperator.InputComponentProps, InputComponentProps), item.field) : null
    }))]
  }));
});
true ? GridFilterForm.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback called when the operator, column field or value is changed.
   * @param {GridFilterItem} item The updated [[GridFilterItem]].
   */
  applyFilterChanges: import_prop_types44.default.func.isRequired,
  /**
   * Callback called when the logic operator is changed.
   * @param {GridLogicOperator} operator The new logic operator.
   */
  applyMultiFilterOperatorChanges: import_prop_types44.default.func.isRequired,
  /**
   * @ignore - do not document.
   */
  children: import_prop_types44.default.node,
  /**
   * Props passed to the column input component.
   * @default {}
   */
  columnInputProps: import_prop_types44.default.any,
  /**
   * Changes how the options in the columns selector should be ordered.
   * If not specified, the order is derived from the `columns` prop.
   */
  columnsSort: import_prop_types44.default.oneOf(["asc", "desc"]),
  /**
   * Callback called when the delete button is clicked.
   * @param {GridFilterItem} item The deleted [[GridFilterItem]].
   */
  deleteFilter: import_prop_types44.default.func.isRequired,
  /**
   * Props passed to the delete icon.
   * @default {}
   */
  deleteIconProps: import_prop_types44.default.any,
  /**
   * If `true`, disables the logic operator field but still renders it.
   */
  disableMultiFilterOperator: import_prop_types44.default.bool,
  /**
   * Allows to filter the columns displayed in the filter form.
   * @param {FilterColumnsArgs} args The columns of the grid and name of field.
   * @returns {GridColDef['field'][]} The filtered fields array.
   */
  filterColumns: import_prop_types44.default.func,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the el
   */
  focusElementRef: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
  /**
   * If `true`, the logic operator field is rendered.
   * The field will be invisible if `showMultiFilterOperators` is also `true`.
   */
  hasMultipleFilters: import_prop_types44.default.bool.isRequired,
  /**
   * The [[GridFilterItem]] representing this form.
   */
  item: import_prop_types44.default.shape({
    field: import_prop_types44.default.string.isRequired,
    id: import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.string]),
    operator: import_prop_types44.default.string.isRequired,
    value: import_prop_types44.default.any
  }).isRequired,
  /**
   * Props passed to the logic operator input component.
   * @default {}
   */
  logicOperatorInputProps: import_prop_types44.default.any,
  /**
   * Sets the available logic operators.
   * @default [GridLogicOperator.And, GridLogicOperator.Or]
   */
  logicOperators: import_prop_types44.default.arrayOf(import_prop_types44.default.oneOf(["and", "or"]).isRequired),
  /**
   * Props passed to the operator input component.
   * @default {}
   */
  operatorInputProps: import_prop_types44.default.any,
  /**
   * `true` if the filter is disabled/read only.
   * i.e. `colDef.fiterable = false` but passed in `filterModel`
   * @default false
   */
  readOnly: import_prop_types44.default.bool,
  /**
   * If `true`, the logic operator field is visible.
   */
  showMultiFilterOperators: import_prop_types44.default.bool,
  /**
   * Props passed to the value input component.
   * @default {}
   */
  valueInputProps: import_prop_types44.default.any
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterPanel.js
init_extends();
init_objectWithoutPropertiesLoose();
var React94 = __toESM(require_react());
var import_prop_types45 = __toESM(require_prop_types());
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var _excluded40 = ["logicOperators", "columnsSort", "filterFormProps", "getColumnForNewFilter", "children", "disableAddFilterButton", "disableRemoveAllButton"];
var getGridFilter = (col) => ({
  field: col.field,
  operator: col.filterOperators[0].value,
  id: Math.round(Math.random() * 1e5)
});
var GridFilterPanel = React94.forwardRef(function GridFilterPanel2(props, ref) {
  var _a, _b;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const filterModel = useGridSelector2(apiRef2, gridFilterModelSelector);
  const filterableColumns = useGridSelector2(apiRef2, gridFilterableColumnDefinitionsSelector);
  const filterableColumnsLookup = useGridSelector2(apiRef2, gridFilterableColumnLookupSelector);
  const lastFilterRef = React94.useRef(null);
  const placeholderFilter = React94.useRef(null);
  const {
    logicOperators = [GridLogicOperator2.And, GridLogicOperator2.Or],
    columnsSort,
    filterFormProps,
    getColumnForNewFilter,
    disableAddFilterButton = false,
    disableRemoveAllButton = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const applyFilter = apiRef2.current.upsertFilterItem;
  const applyFilterLogicOperator = React94.useCallback((operator) => {
    apiRef2.current.setFilterLogicOperator(operator);
  }, [apiRef2]);
  const getDefaultFilter = React94.useCallback(() => {
    let nextColumnWithOperator;
    if (getColumnForNewFilter && typeof getColumnForNewFilter === "function") {
      const nextFieldName = getColumnForNewFilter({
        currentFilters: (filterModel == null ? void 0 : filterModel.items) || [],
        columns: filterableColumns
      });
      if (nextFieldName === null) {
        return null;
      }
      nextColumnWithOperator = filterableColumns.find(({
        field
      }) => field === nextFieldName);
    } else {
      nextColumnWithOperator = filterableColumns.find((colDef) => {
        var _a2;
        return (_a2 = colDef.filterOperators) == null ? void 0 : _a2.length;
      });
    }
    if (!nextColumnWithOperator) {
      return null;
    }
    return getGridFilter(nextColumnWithOperator);
  }, [filterModel == null ? void 0 : filterModel.items, filterableColumns, getColumnForNewFilter]);
  const getNewFilter = React94.useCallback(() => {
    if (getColumnForNewFilter === void 0 || typeof getColumnForNewFilter !== "function") {
      return getDefaultFilter();
    }
    const currentFilters = filterModel.items.length ? filterModel.items : [getDefaultFilter()].filter(Boolean);
    const nextColumnFieldName = getColumnForNewFilter({
      currentFilters,
      columns: filterableColumns
    });
    if (nextColumnFieldName === null) {
      return null;
    }
    const nextColumnWithOperator = filterableColumns.find(({
      field
    }) => field === nextColumnFieldName);
    if (!nextColumnWithOperator) {
      return null;
    }
    return getGridFilter(nextColumnWithOperator);
  }, [filterModel.items, filterableColumns, getColumnForNewFilter, getDefaultFilter]);
  const items = React94.useMemo(() => {
    if (filterModel.items.length) {
      return filterModel.items;
    }
    if (!placeholderFilter.current) {
      placeholderFilter.current = getDefaultFilter();
    }
    return placeholderFilter.current ? [placeholderFilter.current] : [];
  }, [filterModel.items, getDefaultFilter]);
  const hasMultipleFilters = items.length > 1;
  const {
    readOnlyFilters,
    validFilters
  } = React94.useMemo(() => items.reduce((acc, item) => {
    if (filterableColumnsLookup[item.field]) {
      acc.validFilters.push(item);
    } else {
      acc.readOnlyFilters.push(item);
    }
    return acc;
  }, {
    readOnlyFilters: [],
    validFilters: []
  }), [items, filterableColumnsLookup]);
  const addNewFilter = React94.useCallback(() => {
    const newFilter = getNewFilter();
    if (!newFilter) {
      return;
    }
    apiRef2.current.upsertFilterItems([...items, newFilter]);
  }, [apiRef2, getNewFilter, items]);
  const deleteFilter = React94.useCallback((item) => {
    const shouldCloseFilterPanel = validFilters.length === 1;
    apiRef2.current.deleteFilterItem(item);
    if (shouldCloseFilterPanel) {
      apiRef2.current.hideFilterPanel();
    }
  }, [apiRef2, validFilters.length]);
  const handleRemoveAll = React94.useCallback(() => {
    if (validFilters.length === 1 && validFilters[0].value === void 0) {
      apiRef2.current.deleteFilterItem(validFilters[0]);
      return apiRef2.current.hideFilterPanel();
    }
    return apiRef2.current.setFilterModel(_extends({}, filterModel, {
      items: readOnlyFilters
    }), "removeAllFilterItems");
  }, [apiRef2, readOnlyFilters, filterModel, validFilters]);
  React94.useEffect(() => {
    if (logicOperators.length > 0 && filterModel.logicOperator && !logicOperators.includes(filterModel.logicOperator)) {
      applyFilterLogicOperator(logicOperators[0]);
    }
  }, [logicOperators, applyFilterLogicOperator, filterModel.logicOperator]);
  React94.useEffect(() => {
    if (validFilters.length > 0) {
      lastFilterRef.current.focus();
    }
  }, [validFilters.length]);
  return (0, import_jsx_runtime74.jsxs)(GridPanelWrapper, _extends({
    ref
  }, other, {
    children: [(0, import_jsx_runtime74.jsxs)(GridPanelContent, {
      children: [readOnlyFilters.map((item, index) => (0, import_jsx_runtime74.jsx)(GridFilterForm, _extends({
        item,
        applyFilterChanges: applyFilter,
        deleteFilter,
        hasMultipleFilters,
        showMultiFilterOperators: index > 0,
        disableMultiFilterOperator: index !== 1,
        applyMultiFilterOperatorChanges: applyFilterLogicOperator,
        focusElementRef: null,
        readOnly: true,
        logicOperators,
        columnsSort
      }, filterFormProps), item.id == null ? index : item.id)), validFilters.map((item, index) => (0, import_jsx_runtime74.jsx)(GridFilterForm, _extends({
        item,
        applyFilterChanges: applyFilter,
        deleteFilter,
        hasMultipleFilters,
        showMultiFilterOperators: readOnlyFilters.length + index > 0,
        disableMultiFilterOperator: readOnlyFilters.length + index !== 1,
        applyMultiFilterOperatorChanges: applyFilterLogicOperator,
        focusElementRef: index === validFilters.length - 1 ? lastFilterRef : null,
        logicOperators,
        columnsSort
      }, filterFormProps), item.id == null ? index + readOnlyFilters.length : item.id))]
    }), !rootProps.disableMultipleColumnsFiltering && !(disableAddFilterButton && disableRemoveAllButton) ? (0, import_jsx_runtime74.jsxs)(GridPanelFooter, {
      children: [!disableAddFilterButton ? (0, import_jsx_runtime74.jsx)(rootProps.slots.baseButton, _extends({
        onClick: addNewFilter,
        startIcon: (0, import_jsx_runtime74.jsx)(rootProps.slots.filterPanelAddIcon, {})
      }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
        children: apiRef2.current.getLocaleText("filterPanelAddFilter")
      })) : (0, import_jsx_runtime74.jsx)("span", {}), !disableRemoveAllButton && validFilters.length > 0 ? (0, import_jsx_runtime74.jsx)(rootProps.slots.baseButton, _extends({
        onClick: handleRemoveAll,
        startIcon: (0, import_jsx_runtime74.jsx)(rootProps.slots.filterPanelRemoveAllIcon, {})
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, {
        children: apiRef2.current.getLocaleText("filterPanelRemoveAll")
      })) : null]
    }) : null]
  }));
});
true ? GridFilterPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore - do not document.
   */
  children: import_prop_types45.default.node,
  /**
   * Changes how the options in the columns selector should be ordered.
   * If not specified, the order is derived from the `columns` prop.
   */
  columnsSort: import_prop_types45.default.oneOf(["asc", "desc"]),
  /**
   * If `true`, the `Add filter` button will not be displayed.
   * @default false
   */
  disableAddFilterButton: import_prop_types45.default.bool,
  /**
   * If `true`, the `Remove all` button will be disabled
   * @default false
   */
  disableRemoveAllButton: import_prop_types45.default.bool,
  /**
   * Props passed to each filter form.
   */
  filterFormProps: import_prop_types45.default.shape({
    columnInputProps: import_prop_types45.default.any,
    columnsSort: import_prop_types45.default.oneOf(["asc", "desc"]),
    deleteIconProps: import_prop_types45.default.any,
    filterColumns: import_prop_types45.default.func,
    logicOperatorInputProps: import_prop_types45.default.any,
    operatorInputProps: import_prop_types45.default.any,
    valueInputProps: import_prop_types45.default.any
  }),
  /**
   * Function that returns the next filter item to be picked as default filter.
   * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.
   * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.
   */
  getColumnForNewFilter: import_prop_types45.default.func,
  /**
   * Sets the available logic operators.
   * @default [GridLogicOperator.And, GridLogicOperator.Or]
   */
  logicOperators: import_prop_types45.default.arrayOf(import_prop_types45.default.oneOf(["and", "or"]).isRequired),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React101 = __toESM(require_react());
var import_prop_types52 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarColumnsButton.js
init_extends();
var React95 = __toESM(require_react());
var import_prop_types46 = __toESM(require_prop_types());
init_utils2();
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var GridToolbarColumnsButton = React95.forwardRef(function GridToolbarColumnsButton2(props, ref) {
  var _a, _b;
  const {
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const columnButtonId = useId_default();
  const columnPanelId = useId_default();
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const preferencePanel = useGridSelector2(apiRef2, gridPreferencePanelStateSelector);
  const showColumns = (event) => {
    var _a2;
    if (preferencePanel.open && preferencePanel.openedPanelValue === GridPreferencePanelsValue.columns) {
      apiRef2.current.hidePreferences();
    } else {
      apiRef2.current.showPreferences(GridPreferencePanelsValue.columns, columnPanelId, columnButtonId);
    }
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  if (rootProps.disableColumnSelector) {
    return null;
  }
  const isOpen = preferencePanel.open && preferencePanel.panelId === columnPanelId;
  return (0, import_jsx_runtime75.jsx)(rootProps.slots.baseTooltip, _extends({
    title: apiRef2.current.getLocaleText("toolbarColumnsLabel"),
    enterDelay: 1e3
  }, tooltipProps, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
    children: (0, import_jsx_runtime75.jsx)(rootProps.slots.baseButton, _extends({
      ref,
      id: columnButtonId,
      size: "small",
      "aria-label": apiRef2.current.getLocaleText("toolbarColumnsLabel"),
      "aria-haspopup": "menu",
      "aria-expanded": isOpen,
      "aria-controls": isOpen ? columnPanelId : void 0,
      startIcon: (0, import_jsx_runtime75.jsx)(rootProps.slots.columnSelectorIcon, {})
    }, buttonProps, {
      onClick: showColumns
    }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, {
      children: apiRef2.current.getLocaleText("toolbarColumns")
    }))
  }));
});
true ? GridToolbarColumnsButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types46.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarDensitySelector.js
init_extends();
var React96 = __toESM(require_react());
var import_prop_types47 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var GridToolbarDensitySelector = React96.forwardRef(function GridToolbarDensitySelector2(props, ref) {
  var _a, _b;
  const {
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const density = useGridSelector2(apiRef2, gridDensitySelector);
  const densityButtonId = useId();
  const densityMenuId = useId();
  const [open, setOpen] = React96.useState(false);
  const buttonRef = React96.useRef(null);
  const handleRef = useForkRef(ref, buttonRef);
  const densityOptions = [{
    icon: (0, import_jsx_runtime76.jsx)(rootProps.slots.densityCompactIcon, {}),
    label: apiRef2.current.getLocaleText("toolbarDensityCompact"),
    value: "compact"
  }, {
    icon: (0, import_jsx_runtime76.jsx)(rootProps.slots.densityStandardIcon, {}),
    label: apiRef2.current.getLocaleText("toolbarDensityStandard"),
    value: "standard"
  }, {
    icon: (0, import_jsx_runtime76.jsx)(rootProps.slots.densityComfortableIcon, {}),
    label: apiRef2.current.getLocaleText("toolbarDensityComfortable"),
    value: "comfortable"
  }];
  const startIcon = React96.useMemo(() => {
    switch (density) {
      case "compact":
        return (0, import_jsx_runtime76.jsx)(rootProps.slots.densityCompactIcon, {});
      case "comfortable":
        return (0, import_jsx_runtime76.jsx)(rootProps.slots.densityComfortableIcon, {});
      default:
        return (0, import_jsx_runtime76.jsx)(rootProps.slots.densityStandardIcon, {});
    }
  }, [density, rootProps]);
  const handleDensitySelectorOpen = (event) => {
    var _a2;
    setOpen((prevOpen) => !prevOpen);
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  const handleDensitySelectorClose = () => {
    setOpen(false);
  };
  const handleDensityUpdate = (newDensity) => {
    apiRef2.current.setDensity(newDensity);
    setOpen(false);
  };
  const handleListKeyDown = (event) => {
    if (isTabKey(event.key)) {
      event.preventDefault();
    }
    if (isHideMenuKey(event.key)) {
      setOpen(false);
    }
  };
  if (rootProps.disableDensitySelector) {
    return null;
  }
  const densityElements = densityOptions.map((option, index) => (0, import_jsx_runtime76.jsxs)(MenuItem_default, {
    onClick: () => handleDensityUpdate(option.value),
    selected: option.value === density,
    children: [(0, import_jsx_runtime76.jsx)(ListItemIcon_default, {
      children: option.icon
    }), option.label]
  }, index));
  return (0, import_jsx_runtime76.jsxs)(React96.Fragment, {
    children: [(0, import_jsx_runtime76.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef2.current.getLocaleText("toolbarDensityLabel"),
      enterDelay: 1e3
    }, tooltipProps, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
      children: (0, import_jsx_runtime76.jsx)(rootProps.slots.baseButton, _extends({
        ref: handleRef,
        size: "small",
        startIcon,
        "aria-label": apiRef2.current.getLocaleText("toolbarDensityLabel"),
        "aria-haspopup": "menu",
        "aria-expanded": open,
        "aria-controls": open ? densityMenuId : void 0,
        id: densityButtonId
      }, buttonProps, {
        onClick: handleDensitySelectorOpen
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, {
        children: apiRef2.current.getLocaleText("toolbarDensity")
      }))
    })), (0, import_jsx_runtime76.jsx)(GridMenu, {
      open,
      target: buttonRef.current,
      onClose: handleDensitySelectorClose,
      position: "bottom-start",
      children: (0, import_jsx_runtime76.jsx)(MenuList_default, {
        id: densityMenuId,
        className: gridClasses2.menuList,
        "aria-labelledby": densityButtonId,
        onKeyDown: handleListKeyDown,
        autoFocusItem: open,
        children: densityElements
      })
    })]
  });
});
true ? GridToolbarDensitySelector.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types47.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarFilterButton.js
init_extends();
var React97 = __toESM(require_react());
var import_prop_types48 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var useUtilityClasses35 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbarFilterList"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridToolbarFilterListRoot = styled_default("ul", {
  name: "MuiDataGrid",
  slot: "ToolbarFilterList",
  overridesResolver: (_props, styles) => styles.toolbarFilterList
})(({
  theme
}) => ({
  margin: theme.spacing(1, 1, 0.5),
  padding: theme.spacing(0, 1)
}));
var GridToolbarFilterButton = React97.forwardRef(function GridToolbarFilterButton2(props, ref) {
  var _a, _b;
  const {
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const activeFilters = useGridSelector2(apiRef2, gridFilterActiveItemsSelector);
  const lookup = useGridSelector2(apiRef2, gridColumnLookupSelector2);
  const preferencePanel = useGridSelector2(apiRef2, gridPreferencePanelStateSelector);
  const classes2 = useUtilityClasses35(rootProps);
  const filterButtonId = useId();
  const filterPanelId = useId();
  const tooltipContentNode = React97.useMemo(() => {
    if (preferencePanel.open) {
      return apiRef2.current.getLocaleText("toolbarFiltersTooltipHide");
    }
    if (activeFilters.length === 0) {
      return apiRef2.current.getLocaleText("toolbarFiltersTooltipShow");
    }
    const getOperatorLabel = (item) => lookup[item.field].filterOperators.find((operator) => operator.value === item.operator).label || apiRef2.current.getLocaleText(`filterOperator${capitalize(item.operator)}`).toString();
    const getFilterItemValue = (item) => {
      const {
        getValueAsString
      } = lookup[item.field].filterOperators.find((operator) => operator.value === item.operator);
      return getValueAsString ? getValueAsString(item.value) : item.value;
    };
    return (0, import_jsx_runtime77.jsxs)("div", {
      children: [apiRef2.current.getLocaleText("toolbarFiltersTooltipActive")(activeFilters.length), (0, import_jsx_runtime77.jsx)(GridToolbarFilterListRoot, {
        className: classes2.root,
        ownerState: rootProps,
        children: activeFilters.map((item, index) => _extends({}, lookup[item.field] && (0, import_jsx_runtime77.jsx)("li", {
          children: `${lookup[item.field].headerName || item.field}
                  ${getOperatorLabel(item)}
                  ${// implicit check for null and undefined
          item.value != null ? getFilterItemValue(item) : ""}`
        }, index)))
      })]
    });
  }, [apiRef2, rootProps, preferencePanel.open, activeFilters, lookup, classes2]);
  const toggleFilter = (event) => {
    var _a2;
    const {
      open,
      openedPanelValue
    } = preferencePanel;
    if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
      apiRef2.current.hidePreferences();
    } else {
      apiRef2.current.showPreferences(GridPreferencePanelsValue.filters, filterPanelId, filterButtonId);
    }
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  if (rootProps.disableColumnFilter) {
    return null;
  }
  const isOpen = preferencePanel.open && preferencePanel.panelId === filterPanelId;
  return (0, import_jsx_runtime77.jsx)(rootProps.slots.baseTooltip, _extends({
    title: tooltipContentNode,
    enterDelay: 1e3
  }, tooltipProps, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
    children: (0, import_jsx_runtime77.jsx)(rootProps.slots.baseButton, _extends({
      ref,
      id: filterButtonId,
      size: "small",
      "aria-label": apiRef2.current.getLocaleText("toolbarFiltersLabel"),
      "aria-controls": isOpen ? filterPanelId : void 0,
      "aria-expanded": isOpen,
      "aria-haspopup": true,
      startIcon: (0, import_jsx_runtime77.jsx)(Badge_default, {
        badgeContent: activeFilters.length,
        color: "primary",
        children: (0, import_jsx_runtime77.jsx)(rootProps.slots.openFilterButtonIcon, {})
      })
    }, buttonProps, {
      onClick: toggleFilter
    }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, {
      children: apiRef2.current.getLocaleText("toolbarFilters")
    }))
  }));
});
true ? GridToolbarFilterButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types48.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js
init_extends();
init_objectWithoutPropertiesLoose();
var React99 = __toESM(require_react());
var import_prop_types50 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExportContainer.js
init_extends();
var React98 = __toESM(require_react());
var import_prop_types49 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var GridToolbarExportContainer = React98.forwardRef(function GridToolbarExportContainer2(props, ref) {
  var _a, _b;
  const {
    children,
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const exportButtonId = useId();
  const exportMenuId = useId();
  const [open, setOpen] = React98.useState(false);
  const buttonRef = React98.useRef(null);
  const handleRef = useForkRef(ref, buttonRef);
  const handleMenuOpen = (event) => {
    var _a2;
    setOpen((prevOpen) => !prevOpen);
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  const handleMenuClose = () => setOpen(false);
  const handleListKeyDown = (event) => {
    if (isTabKey(event.key)) {
      event.preventDefault();
    }
    if (isHideMenuKey(event.key)) {
      handleMenuClose();
    }
  };
  if (children == null) {
    return null;
  }
  return (0, import_jsx_runtime78.jsxs)(React98.Fragment, {
    children: [(0, import_jsx_runtime78.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef2.current.getLocaleText("toolbarExportLabel"),
      enterDelay: 1e3
    }, tooltipProps, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
      children: (0, import_jsx_runtime78.jsx)(rootProps.slots.baseButton, _extends({
        ref: handleRef,
        size: "small",
        startIcon: (0, import_jsx_runtime78.jsx)(rootProps.slots.exportIcon, {}),
        "aria-expanded": open,
        "aria-label": apiRef2.current.getLocaleText("toolbarExportLabel"),
        "aria-haspopup": "menu",
        "aria-controls": open ? exportMenuId : void 0,
        id: exportButtonId
      }, buttonProps, {
        onClick: handleMenuOpen
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, {
        children: apiRef2.current.getLocaleText("toolbarExport")
      }))
    })), (0, import_jsx_runtime78.jsx)(GridMenu, {
      open,
      target: buttonRef.current,
      onClose: handleMenuClose,
      position: "bottom-start",
      children: (0, import_jsx_runtime78.jsx)(MenuList_default, {
        id: exportMenuId,
        className: gridClasses2.menuList,
        "aria-labelledby": exportButtonId,
        onKeyDown: handleListKeyDown,
        autoFocusItem: open,
        children: React98.Children.map(children, (child) => {
          if (!React98.isValidElement(child)) {
            return child;
          }
          return React98.cloneElement(child, {
            hideMenu: handleMenuClose
          });
        })
      })
    })]
  });
});
true ? GridToolbarExportContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types49.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var _excluded41 = ["hideMenu", "options"];
var _excluded211 = ["hideMenu", "options"];
var _excluded310 = ["csvOptions", "printOptions", "excelOptions"];
function GridCsvExportMenuItem(props) {
  const apiRef2 = useGridApiContext();
  const {
    hideMenu,
    options
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  return (0, import_jsx_runtime79.jsx)(MenuItem_default, _extends({
    onClick: () => {
      apiRef2.current.exportDataAsCsv(options);
      hideMenu == null ? void 0 : hideMenu();
    }
  }, other, {
    children: apiRef2.current.getLocaleText("toolbarExportCSV")
  }));
}
function GridPrintExportMenuItem(props) {
  const apiRef2 = useGridApiContext();
  const {
    hideMenu,
    options
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded211);
  return (0, import_jsx_runtime79.jsx)(MenuItem_default, _extends({
    onClick: () => {
      apiRef2.current.exportDataAsPrint(options);
      hideMenu == null ? void 0 : hideMenu();
    }
  }, other, {
    children: apiRef2.current.getLocaleText("toolbarExportPrint")
  }));
}
var GridToolbarExport = React99.forwardRef(function GridToolbarExport2(props, ref) {
  const {
    csvOptions = {},
    printOptions = {},
    excelOptions
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded310);
  const apiRef2 = useGridApiContext();
  const preProcessedButtons = apiRef2.current.unstable_applyPipeProcessors("exportMenu", [], {
    excelOptions,
    csvOptions,
    printOptions
  }).sort((a, b) => a.componentName > b.componentName ? 1 : -1);
  if (preProcessedButtons.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime79.jsx)(GridToolbarExportContainer, _extends({}, other, {
    ref,
    children: preProcessedButtons.map((button, index) => React99.cloneElement(button.component, {
      key: index
    }))
  }));
});
true ? GridToolbarExport.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  csvOptions: import_prop_types50.default.object,
  printOptions: import_prop_types50.default.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types50.default.object
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarQuickFilter.js
init_extends();
init_objectWithoutPropertiesLoose();
var React100 = __toESM(require_react());
init_clsx();
var import_prop_types51 = __toESM(require_prop_types());
init_utils();
init_composeClasses();
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var _excluded42 = ["quickFilterParser", "quickFilterFormatter", "debounceMs", "className"];
var useUtilityClasses36 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbarQuickFilter"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridToolbarQuickFilterRoot = styled_default(TextField_default, {
  name: "MuiDataGrid",
  slot: "ToolbarQuickFilter",
  overridesResolver: (props, styles) => styles.toolbarQuickFilter
})(({
  theme
}) => ({
  width: "auto",
  paddingBottom: theme.spacing(0.5),
  "& input": {
    marginLeft: theme.spacing(0.5)
  },
  "& .MuiInput-underline:before": {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  },
  [`& input[type=search]::-ms-clear,
& input[type=search]::-ms-reveal`]: {
    /* clears the 'X' icon from IE */
    display: "none",
    width: 0,
    height: 0
  },
  [`& input[type="search"]::-webkit-search-decoration,
  & input[type="search"]::-webkit-search-cancel-button,
  & input[type="search"]::-webkit-search-results-button,
  & input[type="search"]::-webkit-search-results-decoration`]: {
    /* clears the 'X' icon from Chrome */
    display: "none"
  }
}));
var defaultSearchValueParser = (searchText) => searchText.split(" ").filter((word) => word !== "");
var defaultSearchValueFormatter = (values) => values.join(" ");
function GridToolbarQuickFilter(props) {
  var _a, _b;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses36(rootProps);
  const quickFilterValues = useGridSelector2(apiRef2, gridQuickFilterValuesSelector);
  const {
    quickFilterParser = defaultSearchValueParser,
    quickFilterFormatter = defaultSearchValueFormatter,
    debounceMs = rootProps.filterDebounceMs,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
  const [searchValue, setSearchValue] = React100.useState(() => quickFilterFormatter(quickFilterValues ?? []));
  const prevQuickFilterValuesRef = React100.useRef(quickFilterValues);
  React100.useEffect(() => {
    if (!isDeepEqual3(prevQuickFilterValuesRef.current, quickFilterValues)) {
      prevQuickFilterValuesRef.current = quickFilterValues;
      setSearchValue((prevSearchValue) => isDeepEqual3(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues ?? []));
    }
  }, [quickFilterValues, quickFilterFormatter, quickFilterParser]);
  const updateSearchValue = React100.useCallback((newSearchValue) => {
    const newQuickFilterValues = quickFilterParser(newSearchValue);
    prevQuickFilterValuesRef.current = newQuickFilterValues;
    apiRef2.current.setQuickFilterValues(newQuickFilterValues);
  }, [apiRef2, quickFilterParser]);
  const debouncedUpdateSearchValue = React100.useMemo(() => debounce(updateSearchValue, debounceMs), [updateSearchValue, debounceMs]);
  const handleSearchValueChange = React100.useCallback((event) => {
    const newSearchValue = event.target.value;
    setSearchValue(newSearchValue);
    debouncedUpdateSearchValue(newSearchValue);
  }, [debouncedUpdateSearchValue]);
  const handleSearchReset = React100.useCallback(() => {
    setSearchValue("");
    updateSearchValue("");
  }, [updateSearchValue]);
  return (0, import_jsx_runtime80.jsx)(GridToolbarQuickFilterRoot, _extends({
    as: rootProps.slots.baseTextField,
    ownerState: rootProps,
    variant: "standard",
    value: searchValue,
    onChange: handleSearchValueChange,
    className: clsx_default(className, classes2.root),
    placeholder: apiRef2.current.getLocaleText("toolbarQuickFilterPlaceholder"),
    "aria-label": apiRef2.current.getLocaleText("toolbarQuickFilterLabel"),
    type: "search"
  }, other, {
    InputProps: _extends({
      startAdornment: (0, import_jsx_runtime80.jsx)(rootProps.slots.quickFilterIcon, {
        fontSize: "small"
      }),
      endAdornment: (0, import_jsx_runtime80.jsx)(rootProps.slots.baseIconButton, _extends({
        "aria-label": apiRef2.current.getLocaleText("toolbarQuickFilterDeleteIconLabel"),
        size: "small",
        sx: {
          visibility: searchValue ? "visible" : "hidden"
        },
        onClick: handleSearchReset
      }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
        children: (0, import_jsx_runtime80.jsx)(rootProps.slots.quickFilterClearIcon, {
          fontSize: "small"
        })
      }))
    }, other.InputProps)
  }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseTextField));
}
true ? GridToolbarQuickFilter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The debounce time in milliseconds.
   * @default 150
   */
  debounceMs: import_prop_types51.default.number,
  /**
   * Function responsible for formatting values of quick filter in a string when the model is modified
   * @param {any[]} values The new values passed to the quick filter model
   * @returns {string} The string to display in the text field
   * @default (values: string[]) => values.join(' ')
   */
  quickFilterFormatter: import_prop_types51.default.func,
  /**
   * Function responsible for parsing text input in an array of independent values for quick filtering.
   * @param {string} input The value entered by the user
   * @returns {any[]} The array of value on which quick filter is applied
   * @default (searchText: string) => searchText
   *   .split(' ')
   *   .filter((word) => word !== '')
   */
  quickFilterParser: import_prop_types51.default.func
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/toolbar/GridToolbar.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var _excluded43 = ["className", "csvOptions", "printOptions", "excelOptions", "showQuickFilter", "quickFilterProps"];
var GridToolbar = React101.forwardRef(function GridToolbar2(props, ref) {
  const {
    csvOptions,
    printOptions,
    excelOptions,
    showQuickFilter = false,
    quickFilterProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const rootProps = useGridRootProps2();
  if (rootProps.disableColumnFilter && rootProps.disableColumnSelector && rootProps.disableDensitySelector && !showQuickFilter) {
    return null;
  }
  return (0, import_jsx_runtime81.jsxs)(GridToolbarContainer, _extends({
    ref
  }, other, {
    children: [(0, import_jsx_runtime81.jsx)(GridToolbarColumnsButton, {}), (0, import_jsx_runtime81.jsx)(GridToolbarFilterButton, {}), (0, import_jsx_runtime81.jsx)(GridToolbarDensitySelector, {}), (0, import_jsx_runtime81.jsx)(GridToolbarExport, {
      csvOptions,
      printOptions,
      excelOptions
    }), (0, import_jsx_runtime81.jsx)(Box_default, {
      sx: {
        flex: 1
      }
    }), showQuickFilter && (0, import_jsx_runtime81.jsx)(GridToolbarQuickFilter, _extends({}, quickFilterProps))]
  }));
});
true ? GridToolbar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Props passed to the quick filter component.
   */
  quickFilterProps: import_prop_types52.default.object,
  /**
   * Show the quick filter component.
   * @default false
   */
  showQuickFilter: import_prop_types52.default.bool,
  sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridFooter.js
init_extends();
var React103 = __toESM(require_react());
var import_prop_types54 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridSelectedRowCount.js
init_extends();
init_objectWithoutPropertiesLoose();
var React102 = __toESM(require_react());
var import_prop_types53 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var _excluded44 = ["className", "selectedRowCount"];
var useUtilityClasses37 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["selectedRowCount"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridSelectedRowCountRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "SelectedRowCount",
  overridesResolver: (props, styles) => styles.selectedRowCount
})(({
  theme
}) => ({
  alignItems: "center",
  display: "flex",
  margin: theme.spacing(0, 2),
  visibility: "hidden",
  width: 0,
  height: 0,
  [theme.breakpoints.up("sm")]: {
    visibility: "visible",
    width: "auto",
    height: "auto"
  }
}));
var GridSelectedRowCount = React102.forwardRef(function GridSelectedRowCount2(props, ref) {
  const {
    className,
    selectedRowCount
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const apiRef2 = useGridApiContext();
  const ownerState = useGridRootProps2();
  const classes2 = useUtilityClasses37(ownerState);
  const rowSelectedText = apiRef2.current.getLocaleText("footerRowSelected")(selectedRowCount);
  return (0, import_jsx_runtime82.jsx)(GridSelectedRowCountRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: rowSelectedText
  }));
});
true ? GridSelectedRowCount.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  selectedRowCount: import_prop_types53.default.number.isRequired,
  sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridFooter.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var GridFooter = React103.forwardRef(function GridFooter2(props, ref) {
  var _a, _b;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const totalTopLevelRowCount = useGridSelector2(apiRef2, gridTopLevelRowCountSelector);
  const selectedRowCount = useGridSelector2(apiRef2, selectedGridRowsCountSelector);
  const visibleTopLevelRowCount = useGridSelector2(apiRef2, gridFilteredTopLevelRowCountSelector);
  const selectedRowCountElement = !rootProps.hideFooterSelectedRowCount && selectedRowCount > 0 ? (0, import_jsx_runtime83.jsx)(GridSelectedRowCount, {
    selectedRowCount
  }) : (0, import_jsx_runtime83.jsx)("div", {});
  const rowCountElement = !rootProps.hideFooterRowCount && !rootProps.pagination ? (0, import_jsx_runtime83.jsx)(rootProps.slots.footerRowCount, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.footerRowCount, {
    rowCount: totalTopLevelRowCount,
    visibleRowCount: visibleTopLevelRowCount
  })) : null;
  const paginationElement = rootProps.pagination && !rootProps.hideFooterPagination && rootProps.slots.pagination && (0, import_jsx_runtime83.jsx)(rootProps.slots.pagination, _extends({}, (_b = rootProps.slotProps) == null ? void 0 : _b.pagination));
  return (0, import_jsx_runtime83.jsxs)(GridFooterContainer, _extends({
    ref
  }, props, {
    children: [selectedRowCountElement, rowCountElement, paginationElement]
  }));
});
true ? GridFooter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridHeader.js
init_extends();
var React105 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/panel/GridPreferencesPanel.js
init_extends();
var React104 = __toESM(require_react());
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
var GridPreferencesPanel = React104.forwardRef(function GridPreferencesPanel2(props, ref) {
  var _a, _b;
  const apiRef2 = useGridApiContext();
  const columns = useGridSelector2(apiRef2, gridColumnDefinitionsSelector);
  const rootProps = useGridRootProps2();
  const preferencePanelState = useGridSelector2(apiRef2, gridPreferencePanelStateSelector);
  const panelContent = apiRef2.current.unstable_applyPipeProcessors("preferencePanel", null, preferencePanelState.openedPanelValue ?? GridPreferencePanelsValue.filters);
  return (0, import_jsx_runtime84.jsx)(rootProps.slots.panel, _extends({
    ref,
    as: rootProps.slots.basePopper,
    open: columns.length > 0 && preferencePanelState.open,
    id: preferencePanelState.panelId,
    "aria-labelledby": preferencePanelState.labelId
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.panel, props, (_b = rootProps.slotProps) == null ? void 0 : _b.basePopper, {
    children: panelContent
  }));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridHeader.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
function GridHeader2() {
  var _a;
  const rootProps = useGridRootProps2();
  return (0, import_jsx_runtime85.jsxs)(React105.Fragment, {
    children: [(0, import_jsx_runtime85.jsx)(GridPreferencesPanel, {}), rootProps.slots.toolbar && (0, import_jsx_runtime85.jsx)(rootProps.slots.toolbar, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.toolbar))]
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridLoadingOverlay.js
init_extends();
var React106 = __toESM(require_react());
var import_prop_types55 = __toESM(require_prop_types());
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var GridLoadingOverlay = React106.forwardRef(function GridLoadingOverlay2(props, ref) {
  return (0, import_jsx_runtime86.jsx)(GridOverlay, _extends({
    ref
  }, props, {
    children: (0, import_jsx_runtime86.jsx)(CircularProgress_default, {})
  }));
});
true ? GridLoadingOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridNoRowsOverlay.js
init_extends();
var React107 = __toESM(require_react());
var import_prop_types56 = __toESM(require_prop_types());
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var GridNoRowsOverlay = React107.forwardRef(function GridNoRowsOverlay2(props, ref) {
  const apiRef2 = useGridApiContext();
  const noRowsLabel = apiRef2.current.getLocaleText("noRowsLabel");
  return (0, import_jsx_runtime87.jsx)(GridOverlay, _extends({
    ref
  }, props, {
    children: noRowsLabel
  }));
});
true ? GridNoRowsOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object])
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridPagination.js
init_extends();
var React108 = __toESM(require_react());
var import_prop_types57 = __toESM(require_prop_types());
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var GridPaginationRoot = styled_default(TablePagination_default)(({
  theme
}) => ({
  [`& .${tablePaginationClasses_default.selectLabel}`]: {
    display: "none",
    [theme.breakpoints.up("sm")]: {
      display: "block"
    }
  },
  [`& .${tablePaginationClasses_default.input}`]: {
    display: "none",
    [theme.breakpoints.up("sm")]: {
      display: "inline-flex"
    }
  }
}));
var wrapLabelDisplayedRows = (labelDisplayedRows, estimated) => {
  return ({
    from,
    to,
    count,
    page
  }) => labelDisplayedRows({
    from,
    to,
    count,
    page,
    estimated
  });
};
var defaultLabelDisplayedRows = ({
  from,
  to,
  count,
  estimated
}) => {
  if (!estimated) {
    return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  return `${from}–${to} of ${count !== -1 ? count : `more than ${estimated > to ? estimated : to}`}`;
};
var GridPagination = React108.forwardRef(function GridPagination2(props, ref) {
  var _a;
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const paginationModel = useGridSelector2(apiRef2, gridPaginationModelSelector);
  const rowCount = useGridSelector2(apiRef2, gridPaginationRowCountSelector);
  const pageCount = useGridSelector2(apiRef2, gridPageCountSelector);
  const {
    paginationMode,
    loading,
    estimatedRowCount
  } = rootProps;
  const computedProps = React108.useMemo(() => {
    if (rowCount === -1 && paginationMode === "server" && loading) {
      return {
        backIconButtonProps: {
          disabled: true
        },
        nextIconButtonProps: {
          disabled: true
        }
      };
    }
    return {};
  }, [loading, paginationMode, rowCount]);
  const lastPage = React108.useMemo(() => Math.max(0, pageCount - 1), [pageCount]);
  const computedPage = React108.useMemo(() => {
    if (rowCount === -1) {
      return paginationModel.page;
    }
    return paginationModel.page <= lastPage ? paginationModel.page : lastPage;
  }, [lastPage, paginationModel.page, rowCount]);
  const handlePageSizeChange = React108.useCallback((event) => {
    const pageSize = Number(event.target.value);
    apiRef2.current.setPageSize(pageSize);
  }, [apiRef2]);
  const handlePageChange = React108.useCallback((_, page) => {
    apiRef2.current.setPage(page);
  }, [apiRef2]);
  const isPageSizeIncludedInPageSizeOptions = (pageSize) => {
    for (let i2 = 0; i2 < rootProps.pageSizeOptions.length; i2 += 1) {
      const option = rootProps.pageSizeOptions[i2];
      if (typeof option === "number") {
        if (option === pageSize) {
          return true;
        }
      } else if (option.value === pageSize) {
        return true;
      }
    }
    return false;
  };
  if (true) {
    const warnedOnceMissingInPageSizeOptions = React108.useRef(false);
    const pageSize = ((_a = rootProps.paginationModel) == null ? void 0 : _a.pageSize) ?? paginationModel.pageSize;
    if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !isPageSizeIncludedInPageSizeOptions(pageSize)) {
      console.warn([`MUI X: The page size \`${paginationModel.pageSize}\` is not present in the \`pageSizeOptions\`.`, `Add it to show the pagination select.`].join("\n"));
      warnedOnceMissingInPageSizeOptions.current = true;
    }
  }
  const pageSizeOptions = isPageSizeIncludedInPageSizeOptions(paginationModel.pageSize) ? rootProps.pageSizeOptions : [];
  const locales = apiRef2.current.getLocaleText("MuiTablePagination");
  const wrappedLabelDisplayedRows = wrapLabelDisplayedRows(locales.labelDisplayedRows || defaultLabelDisplayedRows, estimatedRowCount);
  return (0, import_jsx_runtime88.jsx)(GridPaginationRoot, _extends({
    ref,
    component: "div",
    count: rowCount,
    page: computedPage,
    rowsPerPageOptions: pageSizeOptions,
    rowsPerPage: paginationModel.pageSize,
    onPageChange: handlePageChange,
    onRowsPerPageChange: handlePageSizeChange
  }, computedProps, locales, {
    labelDisplayedRows: wrappedLabelDisplayedRows
  }, props));
});
true ? GridPagination.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  component: import_prop_types57.default.elementType
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridRowCount.js
init_extends();
init_objectWithoutPropertiesLoose();
var React109 = __toESM(require_react());
var import_prop_types58 = __toESM(require_prop_types());
init_clsx();
init_utils();
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var _excluded45 = ["className", "rowCount", "visibleRowCount"];
var useUtilityClasses38 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["rowCount"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridRowCountRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "RowCount",
  overridesResolver: (props, styles) => styles.rowCount
})(({
  theme
}) => ({
  alignItems: "center",
  display: "flex",
  margin: theme.spacing(0, 2)
}));
var GridRowCount = React109.forwardRef(function GridRowCount2(props, ref) {
  const {
    className,
    rowCount,
    visibleRowCount
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const apiRef2 = useGridApiContext();
  const ownerState = useGridRootProps2();
  const classes2 = useUtilityClasses38(ownerState);
  if (rowCount === 0) {
    return null;
  }
  const text = visibleRowCount < rowCount ? apiRef2.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount, rowCount) : rowCount.toLocaleString();
  return (0, import_jsx_runtime89.jsxs)(GridRowCountRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: [apiRef2.current.getLocaleText("footerTotalRows"), " ", text]
  }));
});
true ? GridRowCount.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  rowCount: import_prop_types58.default.number.isRequired,
  sx: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object, import_prop_types58.default.bool])), import_prop_types58.default.func, import_prop_types58.default.object]),
  visibleRowCount: import_prop_types58.default.number.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridRow.js
init_extends();
init_objectWithoutPropertiesLoose();
var React111 = __toESM(require_react());
var import_prop_types59 = __toESM(require_prop_types());
init_clsx();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/constants/gridDetailPanelToggleField.js
var GRID_DETAIL_PANEL_TOGGLE_FIELD2 = "__detail_panel_toggle__";

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js
var gridEditRowsStateSelector = (state) => state.editRows;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridScrollbarFillerCell.js
var React110 = __toESM(require_react());
init_clsx();
var import_jsx_runtime90 = __toESM(require_jsx_runtime());
var classes = {
  root: gridClasses2.scrollbarFiller,
  header: gridClasses2["scrollbarFiller--header"],
  borderTop: gridClasses2["scrollbarFiller--borderTop"],
  pinnedRight: gridClasses2["scrollbarFiller--pinnedRight"]
};
function GridScrollbarFillerCell({
  header,
  borderTop = true,
  pinnedRight
}) {
  return (0, import_jsx_runtime90.jsx)("div", {
    role: "presentation",
    className: clsx_default(classes.root, header && classes.header, borderTop && classes.borderTop, pinnedRight && classes.pinnedRight)
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/internals/utils/getPinnedCellOffset.js
var getPinnedCellOffset = (pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions) => {
  const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;
  let pinnedOffset;
  switch (pinnedPosition) {
    case GridPinnedColumnPosition.LEFT:
      pinnedOffset = columnPositions[columnIndex];
      break;
    case GridPinnedColumnPosition.RIGHT:
      pinnedOffset = dimensions.columnsTotalWidth - columnPositions[columnIndex] - computedWidth + scrollbarWidth;
      break;
    default:
      pinnedOffset = 0;
      break;
  }
  return pinnedOffset;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridRow.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var _excluded46 = ["selected", "rowId", "row", "index", "style", "rowHeight", "className", "visibleColumns", "pinnedColumns", "offsetTop", "offsetLeft", "dimensions", "renderContext", "focusedColumnIndex", "isFirstVisible", "isLastVisible", "isNotVisible", "focusedCell", "tabbableCell", "onClick", "onDoubleClick", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver"];
var useUtilityClasses39 = (ownerState) => {
  const {
    editable,
    editing,
    selected,
    isFirstVisible,
    isLastVisible,
    rowHeight,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["row", selected && "selected", editable && "row--editable", editing && "row--editing", isFirstVisible && "row--firstVisible", isLastVisible && "row--lastVisible", rowHeight === "auto" && "row--dynamicHeight"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function EmptyCell({
  width
}) {
  if (!width) {
    return null;
  }
  return (0, import_jsx_runtime91.jsx)("div", {
    role: "presentation",
    className: clsx_default(gridClasses2.cell, gridClasses2.cellEmpty),
    style: {
      "--width": `${width}px`
    }
  });
}
var GridRow = React111.forwardRef(function GridRow2(props, refProp) {
  var _a;
  const {
    selected,
    rowId,
    row,
    index,
    style: styleProp,
    rowHeight,
    className,
    visibleColumns,
    pinnedColumns,
    offsetLeft,
    dimensions,
    renderContext,
    focusedColumnIndex,
    isFirstVisible,
    isLastVisible,
    isNotVisible,
    onClick,
    onDoubleClick,
    onMouseEnter,
    onMouseLeave,
    onMouseOut,
    onMouseOver
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
  const apiRef2 = useGridApiContext();
  const ref = React111.useRef(null);
  const rootProps = useGridRootProps2();
  const currentPage = useGridVisibleRows2(apiRef2, rootProps);
  const sortModel = useGridSelector2(apiRef2, gridSortModelSelector);
  const treeDepth = useGridSelector2(apiRef2, gridRowMaximumTreeDepthSelector);
  const headerGroupingMaxDepth = useGridSelector2(apiRef2, gridColumnGroupsHeaderMaxDepthSelector);
  const columnPositions = useGridSelector2(apiRef2, gridColumnPositionsSelector);
  const editRowsState = useGridSelector2(apiRef2, gridEditRowsStateSelector);
  const handleRef = useForkRef(ref, refProp);
  const rowNode = apiRef2.current.getRowNode(rowId);
  const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;
  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;
  const hasFocusCell = focusedColumnIndex !== void 0;
  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < renderContext.firstColumnIndex;
  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= renderContext.lastColumnIndex;
  const ariaRowIndex = index + headerGroupingMaxDepth + 2;
  const ownerState = {
    selected,
    isFirstVisible,
    isLastVisible,
    classes: rootProps.classes,
    editing: apiRef2.current.getRowMode(rowId) === GridRowModes.Edit,
    editable: rootProps.editMode === GridEditModes.Row,
    rowHeight
  };
  const classes2 = useUtilityClasses39(ownerState);
  React111.useLayoutEffect(() => {
    if (rowHeight === "auto" && ref.current && typeof ResizeObserver === "undefined") {
      apiRef2.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight);
    }
  }, [apiRef2, rowHeight, rowId]);
  React111.useLayoutEffect(() => {
    if (currentPage.range) {
      const rowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(rowId);
      if (rowIndex != null) {
        apiRef2.current.unstable_setLastMeasuredRowIndex(rowIndex);
      }
    }
    const rootElement = ref.current;
    const hasFixedHeight = rowHeight !== "auto";
    if (!rootElement || hasFixedHeight || typeof ResizeObserver === "undefined") {
      return void 0;
    }
    const resizeObserver = new ResizeObserver((entries) => {
      const [entry] = entries;
      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
      apiRef2.current.unstable_storeRowHeightMeasurement(rowId, height);
    });
    resizeObserver.observe(rootElement);
    return () => resizeObserver.disconnect();
  }, [apiRef2, currentPage.range, index, rowHeight, rowId]);
  const publish = React111.useCallback((eventName, propHandler) => (event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    if (!apiRef2.current.getRow(rowId)) {
      return;
    }
    apiRef2.current.publishEvent(eventName, apiRef2.current.getRowParams(rowId), event);
    if (propHandler) {
      propHandler(event);
    }
  }, [apiRef2, rowId]);
  const publishClick = React111.useCallback((event) => {
    const cell = findParentElementFromClassName(event.target, gridClasses2.cell);
    const field = cell == null ? void 0 : cell.getAttribute("data-field");
    if (field) {
      if (field === GRID_CHECKBOX_SELECTION_COL_DEF2.field) {
        return;
      }
      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD2) {
        return;
      }
      if (field === "__reorder__") {
        return;
      }
      if (apiRef2.current.getCellMode(rowId, field) === GridCellModes.Edit) {
        return;
      }
      const column = apiRef2.current.getColumn(field);
      if ((column == null ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE2) {
        return;
      }
    }
    publish("rowClick", onClick)(event);
  }, [apiRef2, onClick, publish, rowId]);
  const {
    slots,
    slotProps,
    disableColumnReorder
  } = rootProps;
  const rowReordering = rootProps.rowReordering;
  const sizes = useGridSelector2(apiRef2, () => _extends({}, apiRef2.current.unstable_getRowInternalSizes(rowId)), objectShallowCompare);
  let minHeight = rowHeight;
  if (minHeight === "auto" && sizes) {
    const numberOfBaseSizes = 1;
    const maximumSize = sizes.baseCenter ?? 0;
    if (maximumSize > 0 && numberOfBaseSizes > 1) {
      minHeight = maximumSize;
    }
  }
  const style = React111.useMemo(() => {
    if (isNotVisible) {
      return {
        opacity: 0,
        width: 0,
        height: 0
      };
    }
    const rowStyle = _extends({}, styleProp, {
      maxHeight: rowHeight === "auto" ? "none" : rowHeight,
      // max-height doesn't support "auto"
      minHeight,
      "--height": typeof rowHeight === "number" ? `${rowHeight}px` : rowHeight
    });
    if (sizes == null ? void 0 : sizes.spacingTop) {
      const property = rootProps.rowSpacingType === "border" ? "borderTopWidth" : "marginTop";
      rowStyle[property] = sizes.spacingTop;
    }
    if (sizes == null ? void 0 : sizes.spacingBottom) {
      const property = rootProps.rowSpacingType === "border" ? "borderBottomWidth" : "marginBottom";
      let propertyValue = rowStyle[property];
      if (typeof propertyValue !== "number") {
        propertyValue = parseInt(propertyValue || "0", 10);
      }
      propertyValue += sizes.spacingBottom;
      rowStyle[property] = propertyValue;
    }
    return rowStyle;
  }, [isNotVisible, rowHeight, styleProp, minHeight, sizes, rootProps.rowSpacingType]);
  const rowClassNames = apiRef2.current.unstable_applyPipeProcessors("rowClassName", [], rowId);
  if (typeof rootProps.getRowClassName === "function") {
    const indexRelativeToCurrentPage = index - (((_a = currentPage.range) == null ? void 0 : _a.firstRowIndex) || 0);
    const rowParams = _extends({}, apiRef2.current.getRowParams(rowId), {
      isFirstVisible: indexRelativeToCurrentPage === 0,
      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
      indexRelativeToCurrentPage
    });
    rowClassNames.push(rootProps.getRowClassName(rowParams));
  }
  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedPosition.NONE) => {
    var _a2;
    const cellColSpanInfo = apiRef2.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);
    if (cellColSpanInfo == null ? void 0 : cellColSpanInfo.spannedByColSpan) {
      return null;
    }
    const width = (cellColSpanInfo == null ? void 0 : cellColSpanInfo.cellProps.width) ?? column.computedWidth;
    const colSpan = (cellColSpanInfo == null ? void 0 : cellColSpanInfo.cellProps.colSpan) ?? 1;
    const pinnedOffset = getPinnedCellOffset(gridPinnedColumnPositionLookup[pinnedPosition], column.computedWidth, indexRelativeToAllColumns, columnPositions, dimensions);
    if ((rowNode == null ? void 0 : rowNode.type) === "skeletonRow") {
      return (0, import_jsx_runtime91.jsx)(slots.skeletonCell, {
        width,
        height: rowHeight,
        field: column.field,
        align: column.align ?? "left"
      }, column.field);
    }
    const editCellState = ((_a2 = editRowsState[rowId]) == null ? void 0 : _a2[column.field]) ?? null;
    const isReorderCell = column.field === "__reorder__";
    const isEditingRows = Object.keys(editRowsState).length > 0;
    const canReorderColumn = !(disableColumnReorder || column.disableReorder);
    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;
    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);
    const cellIsNotVisible = pinnedPosition === PinnedPosition.VIRTUAL;
    return (0, import_jsx_runtime91.jsx)(slots.cell, _extends({
      column,
      width,
      rowId,
      align: column.align || "left",
      colIndex: indexRelativeToAllColumns,
      colSpan,
      disableDragEvents,
      editCellState,
      isNotVisible: cellIsNotVisible,
      pinnedOffset,
      pinnedPosition,
      sectionIndex: indexInSection,
      sectionLength,
      gridHasFiller
    }, slotProps == null ? void 0 : slotProps.cell), column.field);
  };
  if (!rowNode) {
    return null;
  }
  const leftCells = pinnedColumns.left.map((column, i2) => {
    const indexRelativeToAllColumns = i2;
    return getCell(column, i2, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedPosition.LEFT);
  });
  const rightCells = pinnedColumns.right.map((column, i2) => {
    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i2;
    return getCell(column, i2, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedPosition.RIGHT);
  });
  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;
  const cells = [];
  if (hasVirtualFocusCellLeft) {
    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));
  }
  for (let i2 = renderContext.firstColumnIndex; i2 < renderContext.lastColumnIndex; i2 += 1) {
    const column = visibleColumns[i2];
    const indexInSection = i2 - pinnedColumns.left.length;
    cells.push(getCell(column, indexInSection, i2, middleColumnsLength));
  }
  if (hasVirtualFocusCellRight) {
    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));
  }
  const eventHandlers = row ? {
    onClick: publishClick,
    onDoubleClick: publish("rowDoubleClick", onDoubleClick),
    onMouseEnter: publish("rowMouseEnter", onMouseEnter),
    onMouseLeave: publish("rowMouseLeave", onMouseLeave),
    onMouseOut: publish("rowMouseOut", onMouseOut),
    onMouseOver: publish("rowMouseOver", onMouseOver)
  } : null;
  const expandedWidth = dimensions.viewportOuterSize.width - dimensions.columnsTotalWidth - scrollbarWidth;
  const emptyCellWidth = Math.max(0, expandedWidth);
  return (0, import_jsx_runtime91.jsxs)("div", _extends({
    ref: handleRef,
    "data-id": rowId,
    "data-rowindex": index,
    role: "row",
    className: clsx_default(...rowClassNames, classes2.root, className),
    "aria-rowindex": ariaRowIndex,
    "aria-selected": selected,
    style
  }, eventHandlers, other, {
    children: [leftCells, (0, import_jsx_runtime91.jsx)("div", {
      role: "presentation",
      className: gridClasses2.cellOffsetLeft,
      style: {
        width: offsetLeft
      }
    }), cells, emptyCellWidth > 0 && (0, import_jsx_runtime91.jsx)(EmptyCell, {
      width: emptyCellWidth
    }), rightCells.length > 0 && (0, import_jsx_runtime91.jsx)("div", {
      role: "presentation",
      className: gridClasses2.filler
    }), rightCells, scrollbarWidth !== 0 && (0, import_jsx_runtime91.jsx)(GridScrollbarFillerCell, {
      pinnedRight: pinnedColumns.right.length > 0
    })]
  }));
});
true ? GridRow.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  dimensions: import_prop_types59.default.shape({
    bottomContainerHeight: import_prop_types59.default.number.isRequired,
    columnsTotalWidth: import_prop_types59.default.number.isRequired,
    contentSize: import_prop_types59.default.shape({
      height: import_prop_types59.default.number.isRequired,
      width: import_prop_types59.default.number.isRequired
    }).isRequired,
    hasScrollX: import_prop_types59.default.bool.isRequired,
    hasScrollY: import_prop_types59.default.bool.isRequired,
    headerFilterHeight: import_prop_types59.default.number.isRequired,
    headerHeight: import_prop_types59.default.number.isRequired,
    headersTotalHeight: import_prop_types59.default.number.isRequired,
    isReady: import_prop_types59.default.bool.isRequired,
    leftPinnedWidth: import_prop_types59.default.number.isRequired,
    minimumSize: import_prop_types59.default.shape({
      height: import_prop_types59.default.number.isRequired,
      width: import_prop_types59.default.number.isRequired
    }).isRequired,
    rightPinnedWidth: import_prop_types59.default.number.isRequired,
    root: import_prop_types59.default.shape({
      height: import_prop_types59.default.number.isRequired,
      width: import_prop_types59.default.number.isRequired
    }).isRequired,
    rowHeight: import_prop_types59.default.number.isRequired,
    rowWidth: import_prop_types59.default.number.isRequired,
    scrollbarSize: import_prop_types59.default.number.isRequired,
    topContainerHeight: import_prop_types59.default.number.isRequired,
    viewportInnerSize: import_prop_types59.default.shape({
      height: import_prop_types59.default.number.isRequired,
      width: import_prop_types59.default.number.isRequired
    }).isRequired,
    viewportOuterSize: import_prop_types59.default.shape({
      height: import_prop_types59.default.number.isRequired,
      width: import_prop_types59.default.number.isRequired
    }).isRequired
  }).isRequired,
  /**
   * Determines which cell has focus.
   * If `null`, no cell in this row has focus.
   */
  focusedColumnIndex: import_prop_types59.default.number,
  /**
   * Index of the row in the whole sorted and filtered dataset.
   * If some rows above have expanded children, this index also take those children into account.
   */
  index: import_prop_types59.default.number.isRequired,
  isFirstVisible: import_prop_types59.default.bool.isRequired,
  isLastVisible: import_prop_types59.default.bool.isRequired,
  isNotVisible: import_prop_types59.default.bool.isRequired,
  offsetLeft: import_prop_types59.default.number.isRequired,
  offsetTop: import_prop_types59.default.number,
  onClick: import_prop_types59.default.func,
  onDoubleClick: import_prop_types59.default.func,
  onMouseEnter: import_prop_types59.default.func,
  onMouseLeave: import_prop_types59.default.func,
  pinnedColumns: import_prop_types59.default.object.isRequired,
  renderContext: import_prop_types59.default.shape({
    firstColumnIndex: import_prop_types59.default.number.isRequired,
    firstRowIndex: import_prop_types59.default.number.isRequired,
    lastColumnIndex: import_prop_types59.default.number.isRequired,
    lastRowIndex: import_prop_types59.default.number.isRequired
  }).isRequired,
  row: import_prop_types59.default.object.isRequired,
  rowHeight: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number]).isRequired,
  rowId: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]).isRequired,
  selected: import_prop_types59.default.bool.isRequired,
  /**
   * Determines which cell should be tabbable by having tabIndex=0.
   * If `null`, no cell in this row is in the tab sequence.
   */
  tabbableCell: import_prop_types59.default.string,
  visibleColumns: import_prop_types59.default.arrayOf(import_prop_types59.default.object).isRequired
} : void 0;
var MemoizedGridRow = fastMemo(GridRow);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/context/GridContextProvider.js
var React112 = __toESM(require_react());
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
function GridContextProvider2({
  privateApiRef,
  props,
  children
}) {
  const apiRef2 = React112.useRef(privateApiRef.current.getPublicApi());
  return (0, import_jsx_runtime92.jsx)(GridRootPropsContext.Provider, {
    value: props,
    children: (0, import_jsx_runtime92.jsx)(GridPrivateApiContext.Provider, {
      value: privateApiRef,
      children: (0, import_jsx_runtime92.jsx)(GridApiContext.Provider, {
        value: apiRef2,
        children
      })
    })
  });
}

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/DataGridPremium.js
init_extends();
var React185 = __toESM(require_react());
var import_prop_types64 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregation.js
init_extends();
var React162 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationSelectors.js
var gridAggregationStateSelector = (state) => state.aggregation;
var gridAggregationModelSelector = createSelector2(gridAggregationStateSelector, (aggregationState) => aggregationState.model);
var gridAggregationLookupSelector = createSelector2(gridAggregationStateSelector, (aggregationState) => aggregationState.lookup);

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationUtils.js
init_extends();
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridBaseColumnHeaders.js
init_extends();
init_objectWithoutPropertiesLoose();
var React113 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var _excluded47 = ["className"];
var useUtilityClasses40 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["columnHeaders"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
var GridColumnHeadersRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ColumnHeaders",
  overridesResolver: (props, styles) => styles.columnHeaders
})({
  display: "flex",
  flexDirection: "column",
  borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
  borderTopRightRadius: "var(--unstable_DataGrid-radius)"
});
var GridBaseColumnHeaders = React113.forwardRef(function GridColumnHeaders2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const rootProps = useGridRootProps2();
  const classes2 = useUtilityClasses40(rootProps);
  return (0, import_jsx_runtime93.jsx)(GridColumnHeadersRoot, _extends({
    ref,
    className: clsx_default(className, classes2.root),
    ownerState: rootProps
  }, other, {
    role: "presentation"
  }));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridColumnHeaders.js
init_extends();
init_objectWithoutPropertiesLoose();
var React116 = __toESM(require_react());
var import_prop_types60 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js
init_extends();
var React115 = __toESM(require_react());
init_clsx();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnGroupHeader.js
init_extends();
var React114 = __toESM(require_react());
init_utils();
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
var useUtilityClasses41 = (ownerState) => {
  const {
    classes: classes2,
    headerAlign,
    isDragging,
    showLeftBorder,
    showRightBorder,
    groupId,
    pinnedPosition
  } = ownerState;
  const slots = {
    root: ["columnHeader", headerAlign === "left" && "columnHeader--alignLeft", headerAlign === "center" && "columnHeader--alignCenter", headerAlign === "right" && "columnHeader--alignRight", isDragging && "columnHeader--moving", showRightBorder && "columnHeader--withRightBorder", showLeftBorder && "columnHeader--withLeftBorder", "withBorderColor", groupId === null ? "columnHeader--emptyGroup" : "columnHeader--filledGroup", pinnedPosition === "left" && "columnHeader--pinnedLeft", pinnedPosition === "right" && "columnHeader--pinnedRight"],
    draggableContainer: ["columnHeaderDraggableContainer"],
    titleContainer: ["columnHeaderTitleContainer", "withBorderColor"],
    titleContainerContent: ["columnHeaderTitleContainerContent"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridColumnGroupHeader(props) {
  var _a;
  const {
    groupId,
    width,
    depth,
    maxDepth,
    fields,
    height,
    colIndex,
    hasFocus,
    tabIndex,
    isLastColumn,
    pinnedPosition,
    style,
    indexInSection,
    sectionLength,
    gridHasFiller
  } = props;
  const rootProps = useGridRootProps2();
  const headerCellRef = React114.useRef(null);
  const apiRef2 = useGridApiContext();
  const columnGroupsLookup = useGridSelector2(apiRef2, gridColumnGroupsLookupSelector);
  const group = groupId ? columnGroupsLookup[groupId] : {};
  const {
    headerName = groupId ?? "",
    description = "",
    headerAlign = void 0
  } = group;
  let headerComponent;
  const render = groupId && ((_a = columnGroupsLookup[groupId]) == null ? void 0 : _a.renderHeaderGroup);
  const renderParams = React114.useMemo(() => ({
    groupId,
    headerName,
    description,
    depth,
    maxDepth,
    fields,
    colIndex,
    isLastColumn
  }), [groupId, headerName, description, depth, maxDepth, fields, colIndex, isLastColumn]);
  if (groupId && render) {
    headerComponent = render(renderParams);
  }
  const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);
  const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);
  const ownerState = _extends({}, props, {
    classes: rootProps.classes,
    showLeftBorder,
    showRightBorder,
    headerAlign,
    depth,
    isDragging: false
  });
  const label = headerName ?? groupId;
  const id = useId();
  const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;
  const classes2 = useUtilityClasses41(ownerState);
  React114.useLayoutEffect(() => {
    if (hasFocus) {
      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusableElement || headerCellRef.current;
      elementToFocus == null ? void 0 : elementToFocus.focus();
    }
  }, [apiRef2, hasFocus]);
  const publish = React114.useCallback(
    (eventName) => (event) => {
      if (isEventTargetInPortal(event)) {
        return;
      }
      apiRef2.current.publishEvent(eventName, renderParams, event);
    },
    // For now this is stupid, because renderParams change all the time.
    // Need to move it's computation in the api, such that for a given depth+columnField, I can get the group parameters
    [apiRef2, renderParams]
  );
  const mouseEventsHandlers = React114.useMemo(() => ({
    onKeyDown: publish("columnGroupHeaderKeyDown"),
    onFocus: publish("columnGroupHeaderFocus"),
    onBlur: publish("columnGroupHeaderBlur")
  }), [publish]);
  const headerClassName = typeof group.headerClassName === "function" ? group.headerClassName(renderParams) : group.headerClassName;
  return (0, import_jsx_runtime94.jsx)(GridGenericColumnHeaderItem, _extends({
    ref: headerCellRef,
    classes: classes2,
    columnMenuOpen: false,
    colIndex,
    height,
    isResizing: false,
    sortDirection: null,
    hasFocus: false,
    tabIndex,
    isDraggable: false,
    headerComponent,
    headerClassName,
    description,
    elementId,
    width,
    columnMenuIconButton: null,
    columnTitleIconButtons: null,
    resizable: true,
    label,
    "aria-colspan": fields.length,
    "data-fields": `|-${fields.join("-|-")}-|`,
    style
  }, mouseEventsHandlers));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
var GridColumnHeaderRow = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnHeaderRow",
  overridesResolver: (_, styles) => styles.columnHeaderRow
})({
  display: "flex"
});
var useGridColumnHeaders2 = (props) => {
  const {
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  } = props;
  const [dragCol, setDragCol] = React115.useState("");
  const [resizeCol, setResizeCol] = React115.useState("");
  const apiRef2 = useGridPrivateApiContext();
  const theme = useTheme();
  const rootProps = useGridRootProps2();
  const dimensions = useGridSelector2(apiRef2, gridDimensionsSelector2);
  const hasVirtualization = useGridSelector2(apiRef2, gridVirtualizationColumnEnabledSelector);
  const columnGroupsModel = useGridSelector2(apiRef2, gridColumnGroupsUnwrappedModelSelector);
  const columnPositions = useGridSelector2(apiRef2, gridColumnPositionsSelector);
  const renderContext = useGridSelector2(apiRef2, gridRenderContextColumnsSelector);
  const pinnedColumns = useGridSelector2(apiRef2, gridVisiblePinnedColumnDefinitionsSelector);
  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, theme.direction, pinnedColumns.left.length);
  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;
  React115.useEffect(() => {
    apiRef2.current.columnHeadersContainerRef.current.scrollLeft = 0;
  }, [apiRef2]);
  const handleColumnResizeStart = React115.useCallback((params) => setResizeCol(params.field), []);
  const handleColumnResizeStop = React115.useCallback(() => setResizeCol(""), []);
  const handleColumnReorderStart = React115.useCallback((params) => setDragCol(params.field), []);
  const handleColumnReorderStop = React115.useCallback(() => setDragCol(""), []);
  const leftRenderContext = React115.useMemo(() => {
    return pinnedColumns.left.length ? {
      firstColumnIndex: 0,
      lastColumnIndex: pinnedColumns.left.length
    } : null;
  }, [pinnedColumns.left.length]);
  const rightRenderContext = React115.useMemo(() => {
    return pinnedColumns.right.length ? {
      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,
      lastColumnIndex: visibleColumns.length
    } : null;
  }, [pinnedColumns.right.length, visibleColumns.length]);
  useGridApiEventHandler2(apiRef2, "columnResizeStart", handleColumnResizeStart);
  useGridApiEventHandler2(apiRef2, "columnResizeStop", handleColumnResizeStop);
  useGridApiEventHandler2(apiRef2, "columnHeaderDragStart", handleColumnReorderStart);
  useGridApiEventHandler2(apiRef2, "columnHeaderDragEnd", handleColumnReorderStop);
  const getColumnsToRender = (params) => {
    const {
      renderContext: currentContext = renderContext,
      // TODO: `minFirstColumn` is not used anymore, could be refactored out.
      maxLastColumn = visibleColumns.length
    } = params || {};
    const firstColumnToRender = !hasVirtualization ? 0 : currentContext.firstColumnIndex;
    const lastColumnToRender = !hasVirtualization ? maxLastColumn : currentContext.lastColumnIndex;
    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
    return {
      renderedColumns,
      firstColumnToRender,
      lastColumnToRender
    };
  };
  const getFillers = (params, children, leftOverflow, borderTop = false) => {
    const isPinnedRight = (params == null ? void 0 : params.position) === GridPinnedColumnPosition.RIGHT;
    const isNotPinned = (params == null ? void 0 : params.position) === void 0;
    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;
    const leftOffsetWidth = offsetLeft - leftOverflow;
    return (0, import_jsx_runtime95.jsxs)(React115.Fragment, {
      children: [isNotPinned && (0, import_jsx_runtime95.jsx)("div", {
        role: "presentation",
        style: {
          width: leftOffsetWidth
        }
      }), children, isNotPinned && (0, import_jsx_runtime95.jsx)("div", {
        role: "presentation",
        className: clsx_default(gridClasses2.filler, borderTop && gridClasses2["filler--borderTop"])
      }), hasScrollbarFiller && (0, import_jsx_runtime95.jsx)(GridScrollbarFillerCell, {
        header: true,
        borderTop,
        pinnedRight: isPinnedRight
      })]
    });
  };
  const getCellOffsetStyle = ({
    pinnedPosition,
    columnIndex,
    computedWidth
  }) => {
    let style;
    if (pinnedPosition === "left" || pinnedPosition === "right") {
      const pinnedOffset = getPinnedCellOffset(pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions);
      if (pinnedPosition === "left") {
        style = {
          left: pinnedOffset
        };
      }
      if (pinnedPosition === "right") {
        style = {
          right: pinnedOffset
        };
      }
    }
    return style;
  };
  const getColumnHeaders = (params, other = {}) => {
    const {
      renderedColumns,
      firstColumnToRender
    } = getColumnsToRender(params);
    const columns = [];
    for (let i2 = 0; i2 < renderedColumns.length; i2 += 1) {
      const colDef = renderedColumns[i2];
      const columnIndex = firstColumnToRender + i2;
      const isFirstColumn = columnIndex === 0;
      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;
      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;
      const open = columnMenuState.open && columnMenuState.field === colDef.field;
      const pinnedPosition = params == null ? void 0 : params.position;
      const style = getCellOffsetStyle({
        pinnedPosition,
        columnIndex,
        computedWidth: colDef.computedWidth
      });
      columns.push((0, import_jsx_runtime95.jsx)(Memoized3, _extends({}, sortColumnLookup[colDef.field], {
        columnMenuOpen: open,
        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,
        headerHeight: dimensions.headerHeight,
        isDragging: colDef.field === dragCol,
        colDef,
        colIndex: columnIndex,
        isResizing: resizeCol === colDef.field,
        isLast: columnIndex === columnPositions.length - 1,
        hasFocus,
        tabIndex,
        pinnedPosition,
        style,
        indexInSection: i2,
        sectionLength: renderedColumns.length,
        gridHasFiller
      }, other), colDef.field));
    }
    return getFillers(params, columns, 0);
  };
  const getColumnHeadersRow = () => {
    return (0, import_jsx_runtime95.jsxs)(GridColumnHeaderRow, {
      role: "row",
      "aria-rowindex": headerGroupingMaxDepth + 1,
      ownerState: rootProps,
      children: [leftRenderContext && getColumnHeaders({
        position: GridPinnedColumnPosition.LEFT,
        renderContext: leftRenderContext,
        minFirstColumn: leftRenderContext.firstColumnIndex,
        maxLastColumn: leftRenderContext.lastColumnIndex
      }, {
        disableReorder: true
      }), getColumnHeaders({
        renderContext,
        minFirstColumn: pinnedColumns.left.length,
        maxLastColumn: visibleColumns.length - pinnedColumns.right.length
      }), rightRenderContext && getColumnHeaders({
        position: GridPinnedColumnPosition.RIGHT,
        renderContext: rightRenderContext,
        minFirstColumn: rightRenderContext.firstColumnIndex,
        maxLastColumn: rightRenderContext.lastColumnIndex
      }, {
        disableReorder: true,
        separatorSide: GridColumnHeaderSeparatorSides.Left
      })]
    });
  };
  const getColumnGroupHeaders = ({
    depth,
    params
  }) => {
    var _a, _b;
    const columnsToRender = getColumnsToRender(params);
    if (columnsToRender.renderedColumns.length === 0) {
      return null;
    }
    const {
      renderedColumns,
      firstColumnToRender,
      lastColumnToRender
    } = columnsToRender;
    const rowStructure = columnGroupsHeaderStructure[depth];
    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;
    const firstGroupToRender = ((_a = columnGroupsModel[firstColumnFieldToRender]) == null ? void 0 : _a[depth]) ?? null;
    const firstGroupIndex = rowStructure.findIndex(({
      groupId,
      columnFields
    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));
    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;
    const lastGroupToRender = ((_b = columnGroupsModel[lastColumnFieldToRender]) == null ? void 0 : _b[depth]) ?? null;
    const lastGroupIndex = rowStructure.findIndex(({
      groupId,
      columnFields
    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));
    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map((groupStructure) => {
      return _extends({}, groupStructure, {
        columnFields: groupStructure.columnFields.filter((field) => columnVisibility[field] !== false)
      });
    }).filter((groupStructure) => groupStructure.columnFields.length > 0);
    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);
    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);
    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {
      const column = apiRef2.current.getColumn(field);
      return acc + (column.computedWidth ?? 0);
    }, 0);
    let columnIndex = firstColumnToRender;
    const children = visibleColumnGroupHeader.map(({
      groupId,
      columnFields
    }, index) => {
      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);
      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;
      const headerInfo = {
        groupId,
        width: columnFields.reduce((acc, field) => acc + apiRef2.current.getColumn(field).computedWidth, 0),
        fields: columnFields,
        colIndex: columnIndex,
        hasFocus,
        tabIndex
      };
      const pinnedPosition = params.position;
      const style = getCellOffsetStyle({
        pinnedPosition,
        columnIndex,
        computedWidth: headerInfo.width
      });
      columnIndex += columnFields.length;
      let indexInSection = index;
      if (pinnedPosition === "left") {
        indexInSection = columnIndex - 1;
      }
      return (0, import_jsx_runtime95.jsx)(GridColumnGroupHeader, {
        groupId,
        width: headerInfo.width,
        fields: headerInfo.fields,
        colIndex: headerInfo.colIndex,
        depth,
        isLastColumn: headerInfo.colIndex === visibleColumns.length - headerInfo.fields.length,
        maxDepth: headerGroupingMaxDepth,
        height: dimensions.headerHeight,
        hasFocus,
        tabIndex,
        pinnedPosition,
        style,
        indexInSection,
        sectionLength: renderedColumns.length,
        gridHasFiller
      }, index);
    });
    return getFillers(params, children, leftOverflow);
  };
  const getColumnGroupHeadersRows = () => {
    if (headerGroupingMaxDepth === 0) {
      return null;
    }
    const headerRows = [];
    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {
      headerRows.push((0, import_jsx_runtime95.jsxs)(GridColumnHeaderRow, {
        role: "row",
        "aria-rowindex": depth + 1,
        ownerState: rootProps,
        children: [leftRenderContext && getColumnGroupHeaders({
          depth,
          params: {
            position: GridPinnedColumnPosition.LEFT,
            renderContext: leftRenderContext,
            minFirstColumn: leftRenderContext.firstColumnIndex,
            maxLastColumn: leftRenderContext.lastColumnIndex
          }
        }), getColumnGroupHeaders({
          depth,
          params: {
            renderContext
          }
        }), rightRenderContext && getColumnGroupHeaders({
          depth,
          params: {
            position: GridPinnedColumnPosition.RIGHT,
            renderContext: rightRenderContext,
            minFirstColumn: rightRenderContext.firstColumnIndex,
            maxLastColumn: rightRenderContext.lastColumnIndex
          }
        })]
      }, depth));
    }
    return headerRows;
  };
  return {
    renderContext,
    leftRenderContext,
    rightRenderContext,
    pinnedColumns,
    visibleColumns,
    getCellOffsetStyle,
    getFillers,
    getColumnHeadersRow,
    getColumnsToRender,
    getColumnGroupHeadersRows,
    isDragging: !!dragCol,
    getInnerProps: () => ({
      role: "rowgroup"
    })
  };
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridColumnHeaders.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
var _excluded48 = ["className", "visibleColumns", "sortColumnLookup", "filterColumnLookup", "columnHeaderTabIndexState", "columnGroupHeaderTabIndexState", "columnHeaderFocus", "columnGroupHeaderFocus", "headerGroupingMaxDepth", "columnMenuState", "columnVisibility", "columnGroupsHeaderStructure", "hasOtherElementInTabSequence"];
var GridColumnHeaders3 = React116.forwardRef(function GridColumnHeaders4(props, ref) {
  const {
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
  const {
    getInnerProps,
    getColumnHeadersRow,
    getColumnGroupHeadersRows
  } = useGridColumnHeaders2({
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  });
  return (0, import_jsx_runtime96.jsxs)(GridBaseColumnHeaders, _extends({
    ref
  }, other, getInnerProps(), {
    children: [getColumnGroupHeadersRows(), getColumnHeadersRow()]
  }));
});
true ? GridColumnHeaders3.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnGroupHeaderFocus: import_prop_types60.default.shape({
    depth: import_prop_types60.default.number.isRequired,
    field: import_prop_types60.default.string.isRequired
  }),
  columnGroupHeaderTabIndexState: import_prop_types60.default.shape({
    depth: import_prop_types60.default.number.isRequired,
    field: import_prop_types60.default.string.isRequired
  }),
  columnGroupsHeaderStructure: import_prop_types60.default.arrayOf(import_prop_types60.default.arrayOf(import_prop_types60.default.shape({
    columnFields: import_prop_types60.default.arrayOf(import_prop_types60.default.string).isRequired,
    groupId: import_prop_types60.default.string
  }))).isRequired,
  columnHeaderFocus: import_prop_types60.default.shape({
    field: import_prop_types60.default.string.isRequired
  }),
  columnHeaderTabIndexState: import_prop_types60.default.shape({
    field: import_prop_types60.default.string.isRequired
  }),
  columnMenuState: import_prop_types60.default.shape({
    field: import_prop_types60.default.string,
    open: import_prop_types60.default.bool.isRequired
  }).isRequired,
  columnVisibility: import_prop_types60.default.object.isRequired,
  filterColumnLookup: import_prop_types60.default.object.isRequired,
  hasOtherElementInTabSequence: import_prop_types60.default.bool.isRequired,
  headerGroupingMaxDepth: import_prop_types60.default.number.isRequired,
  sortColumnLookup: import_prop_types60.default.object.isRequired,
  visibleColumns: import_prop_types60.default.arrayOf(import_prop_types60.default.object).isRequired
} : void 0;
var MemoizedGridColumnHeaders = fastMemo(GridColumnHeaders3);

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridDetailPanels.js
function GridDetailPanels(_) {
  return null;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridPinnedRows.js
function GridPinnedRows(_) {
  return null;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/components/GridNoResultsOverlay.js
init_extends();
var React117 = __toESM(require_react());
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
var GridNoResultsOverlay = React117.forwardRef(function GridNoResultsOverlay2(props, ref) {
  const apiRef2 = useGridApiContext();
  const noResultsOverlayLabel = apiRef2.current.getLocaleText("noResultsOverlayLabel");
  return (0, import_jsx_runtime97.jsx)(GridOverlay, _extends({
    ref
  }, props, {
    children: noResultsOverlayLabel
  }));
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/material/index.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/material/icons/GridColumnUnsortedIcon.js
init_extends();
init_objectWithoutPropertiesLoose();
var React118 = __toESM(require_react());
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
var _excluded49 = ["sortingOrder"];
var GridColumnUnsortedIcon = React118.memo(function GridColumnHeaderSortIcon2(props) {
  const {
    sortingOrder
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
  const rootProps = useGridRootProps2();
  const [nextSortDirection] = sortingOrder;
  const Icon = nextSortDirection === "asc" ? rootProps.slots.columnSortedAscendingIcon : rootProps.slots.columnSortedDescendingIcon;
  return Icon ? (0, import_jsx_runtime98.jsx)(Icon, _extends({}, other)) : null;
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/material/components/MUISelectOption.js
init_extends();
init_objectWithoutPropertiesLoose();
var React119 = __toESM(require_react());
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
var _excluded50 = ["native"];
function MUISelectOption(_ref) {
  let {
    native
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded50);
  if (native) {
    return (0, import_jsx_runtime99.jsx)("option", _extends({}, props));
  }
  return (0, import_jsx_runtime99.jsx)(MenuItem_default, _extends({}, props));
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/material/index.js
var iconSlots = {
  booleanCellTrueIcon: GridCheckIcon,
  booleanCellFalseIcon: GridCloseIcon,
  columnMenuIcon: GridTripleDotsVerticalIcon,
  openFilterButtonIcon: GridFilterListIcon,
  filterPanelDeleteIcon: GridCloseIcon,
  columnFilteredIcon: GridFilterAltIcon,
  columnSelectorIcon: GridColumnIcon,
  columnUnsortedIcon: GridColumnUnsortedIcon,
  columnSortedAscendingIcon: GridArrowUpwardIcon,
  columnSortedDescendingIcon: GridArrowDownwardIcon,
  columnResizeIcon: GridSeparatorIcon,
  densityCompactIcon: GridViewHeadlineIcon,
  densityStandardIcon: GridTableRowsIcon,
  densityComfortableIcon: GridViewStreamIcon,
  exportIcon: GridSaveAltIcon,
  moreActionsIcon: GridMoreVertIcon,
  treeDataCollapseIcon: GridExpandMoreIcon,
  treeDataExpandIcon: GridKeyboardArrowRight,
  groupingCriteriaCollapseIcon: GridExpandMoreIcon,
  groupingCriteriaExpandIcon: GridKeyboardArrowRight,
  detailPanelExpandIcon: GridAddIcon,
  detailPanelCollapseIcon: GridRemoveIcon,
  rowReorderIcon: GridDragIcon,
  quickFilterIcon: GridSearchIcon,
  quickFilterClearIcon: GridCloseIcon,
  columnMenuHideIcon: GridVisibilityOffIcon,
  columnMenuSortAscendingIcon: GridArrowUpwardIcon,
  columnMenuSortDescendingIcon: GridArrowDownwardIcon,
  columnMenuFilterIcon: GridFilterAltIcon,
  columnMenuManageColumnsIcon: GridViewColumnIcon,
  columnMenuClearIcon: GridClearIcon,
  loadIcon: GridLoadIcon,
  filterPanelAddIcon: GridAddIcon,
  filterPanelRemoveAllIcon: GridDeleteForeverIcon,
  columnReorderIcon: GridDragIcon
};
var materialSlots = _extends({}, iconSlots, {
  baseCheckbox: Checkbox_default,
  baseTextField: TextField_default,
  baseFormControl: FormControl_default,
  baseSelect: Select_default,
  baseButton: Button_default,
  baseIconButton: IconButton_default,
  baseInputAdornment: InputAdornment_default,
  baseTooltip: Tooltip_default,
  basePopper: Popper_default,
  baseInputLabel: InputLabel_default,
  baseSelectOption: MUISelectOption,
  baseChip: Chip_default
});
var material_default = materialSlots;

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.js
var DATA_GRID_DEFAULT_SLOTS_COMPONENTS = _extends({}, material_default, {
  cell: MemoizedGridCell,
  skeletonCell: Memoized2,
  columnHeaderFilterIconButton: GridColumnHeaderFilterIconButton,
  columnMenu: GridColumnMenu,
  columnHeaders: MemoizedGridColumnHeaders,
  detailPanels: GridDetailPanels,
  footer: GridFooter,
  footerRowCount: GridRowCount,
  toolbar: null,
  pinnedRows: GridPinnedRows,
  loadingOverlay: GridLoadingOverlay,
  noResultsOverlay: GridNoResultsOverlay,
  noRowsOverlay: GridNoRowsOverlay,
  pagination: GridPagination,
  filterPanel: GridFilterPanel,
  columnsPanel: GridColumnsPanel,
  columnsManagement: GridColumnsManagement,
  panel: GridPanel,
  row: MemoizedGridRow
});

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js
init_objectWithoutPropertiesLoose();
var React120 = __toESM(require_react());
var useGridPipeProcessing = (apiRef2) => {
  const cache2 = React120.useRef({});
  const isRunning = React120.useRef(false);
  const runAppliers = React120.useCallback((groupCache) => {
    if (isRunning.current || !groupCache) {
      return;
    }
    isRunning.current = true;
    Object.values(groupCache.appliers).forEach((callback) => {
      callback();
    });
    isRunning.current = false;
  }, []);
  const registerPipeProcessor = React120.useCallback((group, id, processor) => {
    if (!cache2.current[group]) {
      cache2.current[group] = {
        processors: /* @__PURE__ */ new Map(),
        processorsAsArray: [],
        appliers: {}
      };
    }
    const groupCache = cache2.current[group];
    const oldProcessor = groupCache.processors.get(id);
    if (oldProcessor !== processor) {
      groupCache.processors.set(id, processor);
      groupCache.processorsAsArray = Array.from(cache2.current[group].processors.values());
      runAppliers(groupCache);
    }
    return () => {
      cache2.current[group].processors.delete(id);
      cache2.current[group].processorsAsArray = Array.from(cache2.current[group].processors.values());
    };
  }, [runAppliers]);
  const registerPipeApplier = React120.useCallback((group, id, applier) => {
    if (!cache2.current[group]) {
      cache2.current[group] = {
        processors: /* @__PURE__ */ new Map(),
        processorsAsArray: [],
        appliers: {}
      };
    }
    cache2.current[group].appliers[id] = applier;
    return () => {
      const _appliers = cache2.current[group].appliers, otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(toPropertyKey));
      cache2.current[group].appliers = otherAppliers;
    };
  }, []);
  const requestPipeProcessorsApplication = React120.useCallback((group) => {
    runAppliers(cache2.current[group]);
  }, [runAppliers]);
  const applyPipeProcessors = React120.useCallback((...args) => {
    const [group, value, context] = args;
    if (!cache2.current[group]) {
      return value;
    }
    const processors = cache2.current[group].processorsAsArray;
    let result = value;
    for (let i2 = 0; i2 < processors.length; i2 += 1) {
      result = processors[i2](result, context);
    }
    return result;
  }, []);
  const preProcessingPrivateApi = {
    registerPipeProcessor,
    registerPipeApplier,
    requestPipeProcessorsApplication
  };
  const preProcessingPublicApi = {
    unstable_applyPipeProcessors: applyPipeProcessors
  };
  useGridApiMethod2(apiRef2, preProcessingPrivateApi, "private");
  useGridApiMethod2(apiRef2, preProcessingPublicApi, "public");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js
var React121 = __toESM(require_react());
var useGridRegisterPipeProcessor2 = (apiRef2, group, callback) => {
  const cleanup = React121.useRef();
  const id = React121.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
  const registerPreProcessor = React121.useCallback(() => {
    cleanup.current = apiRef2.current.registerPipeProcessor(group, id.current, callback);
  }, [apiRef2, callback, group]);
  useFirstRender2(() => {
    registerPreProcessor();
  });
  const isFirstRender = React121.useRef(true);
  React121.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      registerPreProcessor();
    }
    return () => {
      if (cleanup.current) {
        cleanup.current();
        cleanup.current = null;
      }
    };
  }, [registerPreProcessor]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js
var React122 = __toESM(require_react());
var useGridRegisterPipeApplier = (apiRef2, group, callback) => {
  const cleanup = React122.useRef();
  const id = React122.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
  const registerPreProcessor = React122.useCallback(() => {
    cleanup.current = apiRef2.current.registerPipeApplier(group, id.current, callback);
  }, [apiRef2, callback, group]);
  useFirstRender2(() => {
    registerPreProcessor();
  });
  const isFirstRender = React122.useRef(true);
  React122.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      registerPreProcessor();
    }
    return () => {
      if (cleanup.current) {
        cleanup.current();
        cleanup.current = null;
      }
    };
  }, [registerPreProcessor]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js
var React123 = __toESM(require_react());
var useGridRegisterStrategyProcessor2 = (apiRef2, strategyName, group, processor) => {
  const registerPreProcessor = React123.useCallback(() => {
    apiRef2.current.registerStrategyProcessor(strategyName, group, processor);
  }, [apiRef2, processor, group, strategyName]);
  useFirstRender2(() => {
    registerPreProcessor();
  });
  const isFirstRender = React123.useRef(true);
  React123.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      registerPreProcessor();
    }
  }, [registerPreProcessor]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js
init_objectWithoutPropertiesLoose();
var React124 = __toESM(require_react());
var GRID_DEFAULT_STRATEGY = "none";
var GRID_STRATEGIES_PROCESSORS = {
  rowTreeCreation: "rowTree",
  filtering: "rowTree",
  sorting: "rowTree",
  visibleRowsLookupCreation: "rowTree"
};
var useGridStrategyProcessing = (apiRef2) => {
  const availableStrategies = React124.useRef(/* @__PURE__ */ new Map());
  const strategiesCache = React124.useRef({});
  const registerStrategyProcessor = React124.useCallback((strategyName, processorName, processor) => {
    const cleanup = () => {
      const _ref = strategiesCache.current[processorName], otherProcessors = _objectWithoutPropertiesLoose(_ref, [strategyName].map(toPropertyKey));
      strategiesCache.current[processorName] = otherProcessors;
    };
    if (!strategiesCache.current[processorName]) {
      strategiesCache.current[processorName] = {};
    }
    const groupPreProcessors = strategiesCache.current[processorName];
    const previousProcessor = groupPreProcessors[strategyName];
    groupPreProcessors[strategyName] = processor;
    if (!previousProcessor || previousProcessor === processor) {
      return cleanup;
    }
    if (strategyName === apiRef2.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
      apiRef2.current.publishEvent("activeStrategyProcessorChange", processorName);
    }
    return cleanup;
  }, [apiRef2]);
  const applyStrategyProcessor = React124.useCallback((processorName, params) => {
    const activeStrategy = apiRef2.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);
    if (activeStrategy == null) {
      throw new Error("Can't apply a strategy processor before defining an active strategy");
    }
    const groupCache = strategiesCache.current[processorName];
    if (!groupCache || !groupCache[activeStrategy]) {
      throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
    }
    const processor = groupCache[activeStrategy];
    return processor(params);
  }, [apiRef2]);
  const getActiveStrategy = React124.useCallback((strategyGroup) => {
    const strategyEntries = Array.from(availableStrategies.current.entries());
    const availableStrategyEntry = strategyEntries.find(([, strategy]) => {
      if (strategy.group !== strategyGroup) {
        return false;
      }
      return strategy.isAvailable();
    });
    return (availableStrategyEntry == null ? void 0 : availableStrategyEntry[0]) ?? GRID_DEFAULT_STRATEGY;
  }, []);
  const setStrategyAvailability2 = React124.useCallback((strategyGroup, strategyName, isAvailable) => {
    availableStrategies.current.set(strategyName, {
      group: strategyGroup,
      isAvailable
    });
    apiRef2.current.publishEvent("strategyAvailabilityChange");
  }, [apiRef2]);
  const strategyProcessingApi = {
    registerStrategyProcessor,
    applyStrategyProcessor,
    getActiveStrategy,
    setStrategyAvailability: setStrategyAvailability2
  };
  useGridApiMethod2(apiRef2, strategyProcessingApi, "private");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridRefs.js
var React125 = __toESM(require_react());
var useGridRefs = (apiRef2) => {
  const rootElementRef = React125.useRef(null);
  const mainElementRef = React125.useRef(null);
  const virtualScrollerRef = React125.useRef(null);
  apiRef2.current.register("public", {
    rootElementRef
  });
  apiRef2.current.register("private", {
    mainElementRef,
    virtualScrollerRef
  });
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridTheme.js
init_extends();
var React126 = __toESM(require_react());
var useGridTheme = (apiRef2) => {
  const theme = useTheme();
  if (!apiRef2.current.state.theme) {
    apiRef2.current.state.theme = theme;
  }
  const isFirstEffect = React126.useRef(true);
  React126.useEffect(() => {
    if (isFirstEffect.current) {
      isFirstEffect.current = false;
    } else {
      apiRef2.current.setState((state) => _extends({}, state, {
        theme
      }));
    }
  }, [apiRef2, theme]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js
var React127 = __toESM(require_react());
var forceDebug = localStorageAvailable() && window.localStorage.getItem("DEBUG") != null;
var noop3 = () => {
};
var noopLogger = {
  debug: noop3,
  info: noop3,
  warn: noop3,
  error: noop3
};
var LOG_LEVELS = ["debug", "info", "warn", "error"];
function getAppender(name, logLevel, appender = console) {
  const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);
  if (minLogLevelIdx === -1) {
    throw new Error(`MUI X: Log level ${logLevel} not recognized.`);
  }
  const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {
    if (idx >= minLogLevelIdx) {
      loggerObj[method] = (...args) => {
        const [message, ...other] = args;
        appender[method](`MUI X: ${name} - ${message}`, ...other);
      };
    } else {
      loggerObj[method] = noop3;
    }
    return loggerObj;
  }, {});
  return logger;
}
var useGridLoggerFactory = (apiRef2, props) => {
  const getLogger = React127.useCallback((name) => {
    if (forceDebug) {
      return getAppender(name, "debug", props.logger);
    }
    if (!props.logLevel) {
      return noopLogger;
    }
    return getAppender(name, props.logLevel.toString(), props.logger);
  }, [props.logLevel, props.logger]);
  useGridApiMethod2(apiRef2, {
    getLogger
  }, "private");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
var React128 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/Store.js
var Store = class _Store {
  static create(value) {
    return new _Store(value);
  }
  constructor(_value) {
    this.value = void 0;
    this.listeners = void 0;
    this.subscribe = (fn) => {
      this.listeners.add(fn);
      return () => {
        this.listeners.delete(fn);
      };
    };
    this.getSnapshot = () => {
      return this.value;
    };
    this.update = (value) => {
      this.value = value;
      this.listeners.forEach((l) => l(value));
    };
    this.value = _value;
    this.listeners = /* @__PURE__ */ new Set();
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/EventManager.js
var EventManager = class {
  constructor() {
    this.maxListeners = 20;
    this.warnOnce = false;
    this.events = {};
  }
  on(eventName, listener, options = {}) {
    let collection = this.events[eventName];
    if (!collection) {
      collection = {
        highPriority: /* @__PURE__ */ new Map(),
        regular: /* @__PURE__ */ new Map()
      };
      this.events[eventName] = collection;
    }
    if (options.isFirst) {
      collection.highPriority.set(listener, true);
    } else {
      collection.regular.set(listener, true);
    }
    if (true) {
      const collectionSize = collection.highPriority.size + collection.regular.size;
      if (collectionSize > this.maxListeners && !this.warnOnce) {
        this.warnOnce = true;
        console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`].join("\n"));
      }
    }
  }
  removeListener(eventName, listener) {
    if (this.events[eventName]) {
      this.events[eventName].regular.delete(listener);
      this.events[eventName].highPriority.delete(listener);
    }
  }
  removeAllListeners() {
    this.events = {};
  }
  emit(eventName, ...args) {
    const collection = this.events[eventName];
    if (!collection) {
      return;
    }
    const highPriorityListeners = Array.from(collection.highPriority.keys());
    const regularListeners = Array.from(collection.regular.keys());
    for (let i2 = highPriorityListeners.length - 1; i2 >= 0; i2 -= 1) {
      const listener = highPriorityListeners[i2];
      if (collection.highPriority.has(listener)) {
        listener.apply(this, args);
      }
    }
    for (let i2 = 0; i2 < regularListeners.length; i2 += 1) {
      const listener = regularListeners[i2];
      if (collection.regular.has(listener)) {
        listener.apply(this, args);
      }
    }
  }
  once(eventName, listener) {
    const that = this;
    this.on(eventName, function oneTimeListener(...args) {
      that.removeListener(eventName, oneTimeListener);
      listener.apply(that, args);
    });
  }
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
var SYMBOL_API_PRIVATE = Symbol("mui.api_private");
var isSyntheticEvent = (event) => {
  return event.isPropagationStopped !== void 0;
};
var globalId = 0;
function createPrivateAPI(publicApiRef) {
  var _a;
  const existingPrivateApi = (_a = publicApiRef.current) == null ? void 0 : _a[SYMBOL_API_PRIVATE];
  if (existingPrivateApi) {
    return existingPrivateApi;
  }
  const state = {};
  const privateApi = {
    state,
    store: Store.create(state),
    instanceId: {
      id: globalId
    }
  };
  globalId += 1;
  privateApi.getPublicApi = () => publicApiRef.current;
  privateApi.register = (visibility, methods) => {
    Object.keys(methods).forEach((methodName) => {
      const method = methods[methodName];
      const currentPrivateMethod = privateApi[methodName];
      if ((currentPrivateMethod == null ? void 0 : currentPrivateMethod.spying) === true) {
        currentPrivateMethod.target = method;
      } else {
        privateApi[methodName] = method;
      }
      if (visibility === "public") {
        const publicApi = publicApiRef.current;
        const currentPublicMethod = publicApi[methodName];
        if ((currentPublicMethod == null ? void 0 : currentPublicMethod.spying) === true) {
          currentPublicMethod.target = method;
        } else {
          publicApi[methodName] = method;
        }
      }
    });
  };
  privateApi.register("private", {
    caches: {},
    eventManager: new EventManager()
  });
  return privateApi;
}
function createPublicAPI(privateApiRef) {
  const publicApi = {
    get state() {
      return privateApiRef.current.state;
    },
    get store() {
      return privateApiRef.current.store;
    },
    get instanceId() {
      return privateApiRef.current.instanceId;
    },
    [SYMBOL_API_PRIVATE]: privateApiRef.current
  };
  return publicApi;
}
function useGridApiInitialization(inputApiRef, props) {
  var _a;
  const publicApiRef = React128.useRef();
  const privateApiRef = React128.useRef();
  if (!privateApiRef.current) {
    privateApiRef.current = createPrivateAPI(publicApiRef);
  }
  if (!publicApiRef.current) {
    publicApiRef.current = createPublicAPI(privateApiRef);
  }
  const publishEvent = React128.useCallback((...args) => {
    const [name, params, event = {}] = args;
    event.defaultMuiPrevented = false;
    if (isSyntheticEvent(event) && event.isPropagationStopped()) {
      return;
    }
    const details = props.signature === GridSignature.DataGridPro ? {
      api: privateApiRef.current.getPublicApi()
    } : {};
    privateApiRef.current.eventManager.emit(name, params, event, details);
  }, [privateApiRef, props.signature]);
  const subscribeEvent = React128.useCallback((event, handler, options) => {
    privateApiRef.current.eventManager.on(event, handler, options);
    const api = privateApiRef.current;
    return () => {
      api.eventManager.removeListener(event, handler);
    };
  }, [privateApiRef]);
  useGridApiMethod2(privateApiRef, {
    subscribeEvent,
    publishEvent
  }, "public");
  if (inputApiRef && !((_a = inputApiRef.current) == null ? void 0 : _a.state)) {
    inputApiRef.current = publicApiRef.current;
  }
  React128.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);
  React128.useEffect(() => {
    const api = privateApiRef.current;
    return () => {
      api.publishEvent("unmount");
    };
  }, [privateApiRef]);
  return privateApiRef;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.js
var React129 = __toESM(require_react());
var useGridLocaleText = (apiRef2, props) => {
  const getLocaleText = React129.useCallback((key) => {
    if (props.localeText[key] == null) {
      throw new Error(`Missing translation for key ${key}.`);
    }
    return props.localeText[key];
  }, [props.localeText]);
  apiRef2.current.register("public", {
    getLocaleText
  });
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js
init_extends();
var React130 = __toESM(require_react());
var useGridStateInitialization = (apiRef2) => {
  const controlStateMapRef = React130.useRef({});
  const [, rawForceUpdate] = React130.useState();
  const registerControlState = React130.useCallback((controlStateItem) => {
    controlStateMapRef.current[controlStateItem.stateId] = controlStateItem;
  }, []);
  const setState = React130.useCallback((state, reason) => {
    let newState;
    if (isFunction(state)) {
      newState = state(apiRef2.current.state);
    } else {
      newState = state;
    }
    if (apiRef2.current.state === newState) {
      return false;
    }
    let ignoreSetState = false;
    const updatedControlStateIds = [];
    Object.keys(controlStateMapRef.current).forEach((stateId) => {
      const controlState = controlStateMapRef.current[stateId];
      const oldSubState = controlState.stateSelector(apiRef2.current.state, apiRef2.current.instanceId);
      const newSubState = controlState.stateSelector(newState, apiRef2.current.instanceId);
      if (newSubState === oldSubState) {
        return;
      }
      updatedControlStateIds.push({
        stateId: controlState.stateId,
        hasPropChanged: newSubState !== controlState.propModel
      });
      if (controlState.propModel !== void 0 && newSubState !== controlState.propModel) {
        ignoreSetState = true;
      }
    });
    if (updatedControlStateIds.length > 1) {
      throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el) => el.stateId).join(", ")} in the same transaction.`);
    }
    if (!ignoreSetState) {
      apiRef2.current.state = newState;
      if (apiRef2.current.publishEvent) {
        apiRef2.current.publishEvent("stateChange", newState);
      }
      apiRef2.current.store.update(newState);
    }
    if (updatedControlStateIds.length === 1) {
      const {
        stateId,
        hasPropChanged
      } = updatedControlStateIds[0];
      const controlState = controlStateMapRef.current[stateId];
      const model = controlState.stateSelector(newState, apiRef2.current.instanceId);
      if (controlState.propOnChange && hasPropChanged) {
        controlState.propOnChange(model, {
          reason,
          api: apiRef2.current
        });
      }
      if (!ignoreSetState) {
        apiRef2.current.publishEvent(controlState.changeEvent, model, {
          reason
        });
      }
    }
    return !ignoreSetState;
  }, [apiRef2]);
  const updateControlState = React130.useCallback((key, state, reason) => {
    return apiRef2.current.setState((previousState) => {
      return _extends({}, previousState, {
        [key]: state(previousState[key])
      });
    }, reason);
  }, [apiRef2]);
  const forceUpdate = React130.useCallback(() => rawForceUpdate(() => apiRef2.current.state), [apiRef2]);
  const publicStateApi = {
    setState,
    forceUpdate
  };
  const privateStateApi = {
    updateControlState,
    registerControlState
  };
  useGridApiMethod2(apiRef2, publicStateApi, "public");
  useGridApiMethod2(apiRef2, privateStateApi, "private");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.js
var useGridInitialization2 = (inputApiRef, props) => {
  const privateApiRef = useGridApiInitialization(inputApiRef, props);
  useGridRefs(privateApiRef);
  useGridTheme(privateApiRef);
  useGridLoggerFactory(privateApiRef, props);
  useGridStateInitialization(privateApiRef);
  useGridPipeProcessing(privateApiRef);
  useGridStrategyProcessing(privateApiRef);
  useGridLocaleText(privateApiRef, props);
  privateApiRef.current.register("private", {
    rootProps: props
  });
  return privateApiRef;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js
var React131 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js
function sanitizeCellValue(value, csvOptions) {
  if (typeof value === "string") {
    if (csvOptions.shouldAppendQuotes || csvOptions.escapeFormulas) {
      const escapedValue = value.replace(/"/g, '""');
      if ([csvOptions.delimiter, "\n", "\r", '"'].some((delimiter) => value.includes(delimiter))) {
        return `"${escapedValue}"`;
      }
      if (csvOptions.escapeFormulas) {
        if (["=", "+", "-", "@", "	", "\r"].includes(escapedValue[0])) {
          return `'${escapedValue}`;
        }
      }
      return escapedValue;
    }
    return value;
  }
  return value;
}
var serializeCellValue2 = (cellParams, options) => {
  var _a, _b;
  const {
    csvOptions,
    ignoreValueFormatter
  } = options;
  let value;
  if (ignoreValueFormatter) {
    const columnType = cellParams.colDef.type;
    if (columnType === "number") {
      value = String(cellParams.value);
    } else if (columnType === "date" || columnType === "dateTime") {
      value = (_a = cellParams.value) == null ? void 0 : _a.toISOString();
    } else if (typeof ((_b = cellParams.value) == null ? void 0 : _b.toString) === "function") {
      value = cellParams.value.toString();
    } else {
      value = cellParams.value;
    }
  } else {
    value = cellParams.formattedValue;
  }
  return sanitizeCellValue(value, csvOptions);
};
var objectFormattedValueWarning = buildWarning(["MUI X: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
var CSVRow = class {
  constructor(options) {
    this.options = void 0;
    this.rowString = "";
    this.isEmpty = true;
    this.options = options;
  }
  addValue(value) {
    if (!this.isEmpty) {
      this.rowString += this.options.csvOptions.delimiter;
    }
    if (value === null || value === void 0) {
      this.rowString += "";
    } else if (typeof this.options.sanitizeCellValue === "function") {
      this.rowString += this.options.sanitizeCellValue(value, this.options.csvOptions);
    } else {
      this.rowString += value;
    }
    this.isEmpty = false;
  }
  getRowString() {
    return this.rowString;
  }
};
var serializeRow = ({
  id,
  columns,
  getCellParams,
  csvOptions,
  ignoreValueFormatter
}) => {
  const row = new CSVRow({
    csvOptions
  });
  columns.forEach((column) => {
    const cellParams = getCellParams(id, column.field);
    if (true) {
      if (String(cellParams.formattedValue) === "[object Object]") {
        objectFormattedValueWarning();
      }
    }
    row.addValue(serializeCellValue2(cellParams, {
      ignoreValueFormatter,
      csvOptions
    }));
  });
  return row.getRowString();
};
function buildCSV(options) {
  const {
    columns,
    rowIds,
    csvOptions,
    ignoreValueFormatter,
    apiRef: apiRef2
  } = options;
  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({
    id,
    columns,
    getCellParams: apiRef2.current.getCellParams,
    ignoreValueFormatter,
    csvOptions
  })}\r
`, "").trim();
  if (!csvOptions.includeHeaders) {
    return CSVBody;
  }
  const filteredColumns = columns.filter((column) => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF2.field);
  const headerRows = [];
  if (csvOptions.includeColumnGroupsHeaders) {
    const columnGroupLookup = apiRef2.current.getAllGroupDetails();
    let maxColumnGroupsDepth = 0;
    const columnGroupPathsLookup = filteredColumns.reduce((acc, column) => {
      const columnGroupPath = apiRef2.current.getColumnGroupPath(column.field);
      acc[column.field] = columnGroupPath;
      maxColumnGroupsDepth = Math.max(maxColumnGroupsDepth, columnGroupPath.length);
      return acc;
    }, {});
    for (let i2 = 0; i2 < maxColumnGroupsDepth; i2 += 1) {
      const headerGroupRow = new CSVRow({
        csvOptions,
        sanitizeCellValue
      });
      headerRows.push(headerGroupRow);
      filteredColumns.forEach((column) => {
        const columnGroupId = (columnGroupPathsLookup[column.field] || [])[i2];
        const columnGroup = columnGroupLookup[columnGroupId];
        headerGroupRow.addValue(columnGroup ? columnGroup.headerName || columnGroup.groupId : "");
      });
    }
  }
  const mainHeaderRow = new CSVRow({
    csvOptions,
    sanitizeCellValue
  });
  filteredColumns.forEach((column) => {
    mainHeaderRow.addValue(column.headerName || column.field);
  });
  headerRows.push(mainHeaderRow);
  const CSVHead = `${headerRows.map((row) => row.getRowString()).join("\r\n")}\r
`;
  return `${CSVHead}${CSVBody}`.trim();
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js
function writeToClipboardPolyfill(data) {
  const span = document.createElement("span");
  span.style.whiteSpace = "pre";
  span.style.userSelect = "all";
  span.style.opacity = "0px";
  span.textContent = data;
  document.body.appendChild(span);
  const range2 = document.createRange();
  range2.selectNode(span);
  const selection = window.getSelection();
  selection.removeAllRanges();
  selection.addRange(range2);
  try {
    document.execCommand("copy");
  } finally {
    document.body.removeChild(span);
  }
}
function copyToClipboard(data) {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(data).catch(() => {
      writeToClipboardPolyfill(data);
    });
  } else {
    writeToClipboardPolyfill(data);
  }
}
function hasNativeSelection(element) {
  var _a;
  if ((_a = window.getSelection()) == null ? void 0 : _a.toString()) {
    return true;
  }
  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {
    return true;
  }
  return false;
}
var useGridClipboard2 = (apiRef2, props) => {
  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;
  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;
  const handleCopy = React131.useCallback((event) => {
    if (!((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === "c" && !event.shiftKey && !event.altKey)) {
      return;
    }
    if (hasNativeSelection(event.target)) {
      return;
    }
    let textToCopy = "";
    const selectedRows = apiRef2.current.getSelectedRows();
    if (selectedRows.size > 0) {
      textToCopy = apiRef2.current.getDataAsCsv({
        includeHeaders: false,
        delimiter: clipboardCopyCellDelimiter,
        shouldAppendQuotes: false,
        escapeFormulas: false
      });
    } else {
      const focusedCell = gridFocusCellSelector2(apiRef2);
      if (focusedCell) {
        const cellParams = apiRef2.current.getCellParams(focusedCell.id, focusedCell.field);
        textToCopy = serializeCellValue2(cellParams, {
          csvOptions: {
            delimiter: clipboardCopyCellDelimiter,
            shouldAppendQuotes: false,
            escapeFormulas: false
          },
          ignoreValueFormatter
        });
      }
    }
    textToCopy = apiRef2.current.unstable_applyPipeProcessors("clipboardCopy", textToCopy);
    if (textToCopy) {
      copyToClipboard(textToCopy);
      apiRef2.current.publishEvent("clipboardCopy", textToCopy);
    }
  }, [apiRef2, ignoreValueFormatter, clipboardCopyCellDelimiter]);
  useGridNativeEventListener(apiRef2, apiRef2.current.rootElementRef, "keydown", handleCopy);
  useGridApiOptionHandler(apiRef2, "clipboardCopy", props.onClipboardCopy);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js
init_extends();
var React132 = __toESM(require_react());
var columnMenuStateInitializer2 = (state) => _extends({}, state, {
  columnMenu: {
    open: false
  }
});
var useGridColumnMenu2 = (apiRef2) => {
  const logger = useGridLogger(apiRef2, "useGridColumnMenu");
  const showColumnMenu = React132.useCallback((field) => {
    const columnMenuState = gridColumnMenuSelector(apiRef2.current.state);
    const newState = {
      open: true,
      field
    };
    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;
    if (shouldUpdate) {
      apiRef2.current.setState((state) => {
        if (state.columnMenu.open && state.columnMenu.field === field) {
          return state;
        }
        logger.debug("Opening Column Menu");
        return _extends({}, state, {
          columnMenu: {
            open: true,
            field
          }
        });
      });
      apiRef2.current.hidePreferences();
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2, logger]);
  const hideColumnMenu = React132.useCallback(() => {
    const columnMenuState = gridColumnMenuSelector(apiRef2.current.state);
    if (columnMenuState.field) {
      const columnLookup = gridColumnLookupSelector2(apiRef2);
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef2);
      const orderedFields = gridColumnFieldsSelector(apiRef2);
      let fieldToFocus = columnMenuState.field;
      if (!columnLookup[fieldToFocus]) {
        fieldToFocus = orderedFields[0];
      }
      if (columnVisibilityModel[fieldToFocus] === false) {
        const visibleOrderedFields = orderedFields.filter((field) => {
          if (field === fieldToFocus) {
            return true;
          }
          return columnVisibilityModel[field] !== false;
        });
        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
      }
      apiRef2.current.setColumnHeaderFocus(fieldToFocus);
    }
    const newState = {
      open: false,
      field: void 0
    };
    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;
    if (shouldUpdate) {
      apiRef2.current.setState((state) => {
        logger.debug("Hiding Column Menu");
        return _extends({}, state, {
          columnMenu: newState
        });
      });
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2, logger]);
  const toggleColumnMenu = React132.useCallback((field) => {
    logger.debug("Toggle Column Menu");
    const columnMenu = gridColumnMenuSelector(apiRef2.current.state);
    if (!columnMenu.open || columnMenu.field !== field) {
      showColumnMenu(field);
    } else {
      hideColumnMenu();
    }
  }, [apiRef2, logger, showColumnMenu, hideColumnMenu]);
  const columnMenuApi = {
    showColumnMenu,
    hideColumnMenu,
    toggleColumnMenu
  };
  useGridApiMethod2(apiRef2, columnMenuApi, "public");
  useGridApiEventHandler2(apiRef2, "columnResizeStart", hideColumnMenu);
  useGridApiEventHandler2(apiRef2, "virtualScrollerWheel", apiRef2.current.hideColumnMenu);
  useGridApiEventHandler2(apiRef2, "virtualScrollerTouchMove", apiRef2.current.hideColumnMenu);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js
init_extends();
var React133 = __toESM(require_react());
var import_jsx_runtime100 = __toESM(require_jsx_runtime());
var columnsStateInitializer2 = (state, props, apiRef2) => {
  var _a, _b, _c;
  const columnsState = createColumnsState({
    apiRef: apiRef2,
    columnsToUpsert: props.columns,
    initialState: (_a = props.initialState) == null ? void 0 : _a.columns,
    columnVisibilityModel: props.columnVisibilityModel ?? ((_c = (_b = props.initialState) == null ? void 0 : _b.columns) == null ? void 0 : _c.columnVisibilityModel) ?? {},
    keepOnlyColumnsToUpsert: true
  });
  return _extends({}, state, {
    columns: columnsState,
    // In pro/premium, this part of the state is defined. We give it an empty but defined value
    // for the community version.
    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS
  });
};
function useGridColumns2(apiRef2, props) {
  var _a, _b;
  const logger = useGridLogger(apiRef2, "useGridColumns");
  const previousColumnsProp = React133.useRef(props.columns);
  apiRef2.current.registerControlState({
    stateId: "visibleColumns",
    propModel: props.columnVisibilityModel,
    propOnChange: props.onColumnVisibilityModelChange,
    stateSelector: gridColumnVisibilityModelSelector,
    changeEvent: "columnVisibilityModelChange"
  });
  const setGridColumnsState = React133.useCallback((columnsState) => {
    var _a2, _b2;
    logger.debug("Updating columns state.");
    apiRef2.current.setState(mergeColumnsState(columnsState));
    apiRef2.current.publishEvent("columnsChange", columnsState.orderedFields);
    (_b2 = (_a2 = apiRef2.current).updateRenderContext) == null ? void 0 : _b2.call(_a2);
    apiRef2.current.forceUpdate();
  }, [logger, apiRef2]);
  const getColumn = React133.useCallback((field) => gridColumnLookupSelector2(apiRef2)[field], [apiRef2]);
  const getAllColumns = React133.useCallback(() => gridColumnDefinitionsSelector(apiRef2), [apiRef2]);
  const getVisibleColumns = React133.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef2), [apiRef2]);
  const getColumnIndex = React133.useCallback((field, useVisibleColumns = true) => {
    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef2) : gridColumnDefinitionsSelector(apiRef2);
    return columns.findIndex((col) => col.field === field);
  }, [apiRef2]);
  const getColumnPosition = React133.useCallback((field) => {
    const index = getColumnIndex(field);
    return gridColumnPositionsSelector(apiRef2)[index];
  }, [apiRef2, getColumnIndex]);
  const setColumnVisibilityModel = React133.useCallback((model) => {
    var _a2, _b2;
    const currentModel = gridColumnVisibilityModelSelector(apiRef2);
    if (currentModel !== model) {
      apiRef2.current.setState((state) => _extends({}, state, {
        columns: createColumnsState({
          apiRef: apiRef2,
          columnsToUpsert: [],
          initialState: void 0,
          columnVisibilityModel: model,
          keepOnlyColumnsToUpsert: false
        })
      }));
      (_b2 = (_a2 = apiRef2.current).updateRenderContext) == null ? void 0 : _b2.call(_a2);
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2]);
  const updateColumns = React133.useCallback((columns) => {
    const columnsState = createColumnsState({
      apiRef: apiRef2,
      columnsToUpsert: columns,
      initialState: void 0,
      keepOnlyColumnsToUpsert: false
    });
    setGridColumnsState(columnsState);
  }, [apiRef2, setGridColumnsState]);
  const setColumnVisibility = React133.useCallback((field, isVisible) => {
    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef2);
    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;
    if (isVisible !== isCurrentlyVisible) {
      const newModel = _extends({}, columnVisibilityModel, {
        [field]: isVisible
      });
      apiRef2.current.setColumnVisibilityModel(newModel);
    }
  }, [apiRef2]);
  const getColumnIndexRelativeToVisibleColumns = React133.useCallback((field) => {
    const allColumns = gridColumnFieldsSelector(apiRef2);
    return allColumns.findIndex((col) => col === field);
  }, [apiRef2]);
  const setColumnIndex = React133.useCallback((field, targetIndexPosition) => {
    const allColumns = gridColumnFieldsSelector(apiRef2);
    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);
    if (oldIndexPosition === targetIndexPosition) {
      return;
    }
    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
    const updatedColumns = [...allColumns];
    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];
    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);
    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef2.current.state), {
      orderedFields: updatedColumns
    }));
    const params = {
      column: apiRef2.current.getColumn(field),
      targetIndex: apiRef2.current.getColumnIndexRelativeToVisibleColumns(field),
      oldIndex: oldIndexPosition
    };
    apiRef2.current.publishEvent("columnIndexChange", params);
  }, [apiRef2, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);
  const setColumnWidth = React133.useCallback((field, width) => {
    logger.debug(`Updating column ${field} width to ${width}`);
    const columnsState = gridColumnsStateSelector(apiRef2.current.state);
    const column = columnsState.lookup[field];
    const newColumn = _extends({}, column, {
      width,
      hasBeenResized: true
    });
    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {
      lookup: _extends({}, columnsState.lookup, {
        [field]: newColumn
      })
    }), apiRef2.current.getRootDimensions()));
    apiRef2.current.publishEvent("columnWidthChange", {
      element: apiRef2.current.getColumnHeaderElement(field),
      colDef: newColumn,
      width
    });
  }, [apiRef2, logger, setGridColumnsState]);
  const columnApi = {
    getColumn,
    getAllColumns,
    getColumnIndex,
    getColumnPosition,
    getVisibleColumns,
    getColumnIndexRelativeToVisibleColumns,
    updateColumns,
    setColumnVisibilityModel,
    setColumnVisibility,
    setColumnWidth
  };
  const columnReorderApi = {
    setColumnIndex
  };
  useGridApiMethod2(apiRef2, columnApi, "public");
  useGridApiMethod2(apiRef2, columnReorderApi, props.signature === GridSignature.DataGrid ? "private" : "public");
  const stateExportPreProcessing = React133.useCallback((prevState, context) => {
    var _a2, _b2;
    const columnsStateToExport = {};
    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef2);
    const shouldExportColumnVisibilityModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.columnVisibilityModel != null || // Always export if the model has been initialized
      // TODO v6 Do a nullish check instead to export even if the initial model equals "{}"
      Object.keys(((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.columns) == null ? void 0 : _b2.columnVisibilityModel) ?? {}).length > 0 || // Always export if the model is not empty
      Object.keys(columnVisibilityModelToExport).length > 0
    );
    if (shouldExportColumnVisibilityModel) {
      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
    }
    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef2);
    const columns = gridColumnDefinitionsSelector(apiRef2);
    const dimensions = {};
    columns.forEach((colDef) => {
      if (colDef.hasBeenResized) {
        const colDefDimensions = {};
        COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName) => {
          let propertyValue = colDef[propertyName];
          if (propertyValue === Infinity) {
            propertyValue = -1;
          }
          colDefDimensions[propertyName] = propertyValue;
        });
        dimensions[colDef.field] = colDefDimensions;
      }
    });
    if (Object.keys(dimensions).length > 0) {
      columnsStateToExport.dimensions = dimensions;
    }
    return _extends({}, prevState, {
      columns: columnsStateToExport
    });
  }, [apiRef2, props.columnVisibilityModel, (_a = props.initialState) == null ? void 0 : _a.columns]);
  const stateRestorePreProcessing = React133.useCallback((params, context) => {
    var _a2;
    const columnVisibilityModelToImport = (_a2 = context.stateToRestore.columns) == null ? void 0 : _a2.columnVisibilityModel;
    const initialState = context.stateToRestore.columns;
    if (columnVisibilityModelToImport == null && initialState == null) {
      return params;
    }
    const columnsState = createColumnsState({
      apiRef: apiRef2,
      columnsToUpsert: [],
      initialState,
      columnVisibilityModel: columnVisibilityModelToImport,
      keepOnlyColumnsToUpsert: false
    });
    apiRef2.current.setState(mergeColumnsState(columnsState));
    if (initialState != null) {
      apiRef2.current.publishEvent("columnsChange", columnsState.orderedFields);
    }
    return params;
  }, [apiRef2]);
  const preferencePanelPreProcessing = React133.useCallback((initialValue, value) => {
    var _a2;
    if (value === GridPreferencePanelsValue.columns) {
      const ColumnsPanel = props.slots.columnsPanel;
      return (0, import_jsx_runtime100.jsx)(ColumnsPanel, _extends({}, (_a2 = props.slotProps) == null ? void 0 : _a2.columnsPanel));
    }
    return initialValue;
  }, [props.slots.columnsPanel, (_b = props.slotProps) == null ? void 0 : _b.columnsPanel]);
  const addColumnMenuItems = React133.useCallback((columnMenuItems) => {
    if (props.disableColumnSelector) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuColumnsItem"];
  }, [props.disableColumnSelector]);
  useGridRegisterPipeProcessor2(apiRef2, "columnMenu", addColumnMenuItems);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "preferencePanel", preferencePanelPreProcessing);
  const prevInnerWidth = React133.useRef(null);
  const handleGridSizeChange = (viewportInnerSize) => {
    if (prevInnerWidth.current !== viewportInnerSize.width) {
      prevInnerWidth.current = viewportInnerSize.width;
      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef2.current.state), apiRef2.current.getRootDimensions()));
    }
  };
  useGridApiEventHandler2(apiRef2, "viewportInnerSizeChange", handleGridSizeChange);
  const hydrateColumns = React133.useCallback(() => {
    logger.info(`Columns pipe processing have changed, regenerating the columns`);
    const columnsState = createColumnsState({
      apiRef: apiRef2,
      columnsToUpsert: [],
      initialState: void 0,
      keepOnlyColumnsToUpsert: false
    });
    setGridColumnsState(columnsState);
  }, [apiRef2, logger, setGridColumnsState]);
  useGridRegisterPipeApplier(apiRef2, "hydrateColumns", hydrateColumns);
  const isFirstRender = React133.useRef(true);
  React133.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    logger.info(`GridColumns have changed, new length ${props.columns.length}`);
    if (previousColumnsProp.current === props.columns) {
      return;
    }
    const columnsState = createColumnsState({
      apiRef: apiRef2,
      initialState: void 0,
      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`
      columnsToUpsert: props.columns,
      keepOnlyColumnsToUpsert: true
    });
    previousColumnsProp.current = props.columns;
    setGridColumnsState(columnsState);
  }, [logger, apiRef2, setGridColumnsState, props.columns]);
  React133.useEffect(() => {
    if (props.columnVisibilityModel !== void 0) {
      apiRef2.current.setColumnVisibilityModel(props.columnVisibilityModel);
    }
  }, [apiRef2, logger, props.columnVisibilityModel]);
}
function mergeColumnsState(columnsState) {
  return (state) => _extends({}, state, {
    columns: columnsState
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js
var React134 = __toESM(require_react());
var useGridColumnSpanning2 = (apiRef2) => {
  const lookup = React134.useRef({});
  const getCellColSpanInfo = (rowId, columnIndex) => {
    var _a;
    return (_a = lookup.current[rowId]) == null ? void 0 : _a[columnIndex];
  };
  const calculateColSpan = React134.useCallback(({
    rowId,
    minFirstColumn,
    maxLastColumn,
    columns
  }) => {
    for (let i2 = minFirstColumn; i2 < maxLastColumn; i2 += 1) {
      const cellProps = calculateCellColSpan({
        apiRef: apiRef2,
        lookup: lookup.current,
        columnIndex: i2,
        rowId,
        minFirstColumnIndex: minFirstColumn,
        maxLastColumnIndex: maxLastColumn,
        columns
      });
      if (cellProps.colSpan > 1) {
        i2 += cellProps.colSpan - 1;
      }
    }
  }, [apiRef2]);
  const columnSpanningPublicApi = {
    unstable_getCellColSpanInfo: getCellColSpanInfo
  };
  const columnSpanningPrivateApi = {
    calculateColSpan
  };
  useGridApiMethod2(apiRef2, columnSpanningPublicApi, "public");
  useGridApiMethod2(apiRef2, columnSpanningPrivateApi, "private");
  const handleColumnReorderChange = React134.useCallback(() => {
    lookup.current = {};
  }, []);
  useGridApiEventHandler2(apiRef2, "columnOrderChange", handleColumnReorderChange);
};
function calculateCellColSpan(params) {
  const {
    apiRef: apiRef2,
    lookup,
    columnIndex,
    rowId,
    minFirstColumnIndex,
    maxLastColumnIndex,
    columns
  } = params;
  const columnsLength = columns.length;
  const column = columns[columnIndex];
  const row = apiRef2.current.getRow(rowId);
  const value = apiRef2.current.getRowValue(row, column);
  const colSpan = typeof column.colSpan === "function" ? column.colSpan(value, row, column, apiRef2) : column.colSpan;
  if (!colSpan || colSpan === 1) {
    setCellColSpanInfo(lookup, rowId, columnIndex, {
      spannedByColSpan: false,
      cellProps: {
        colSpan: 1,
        width: column.computedWidth
      }
    });
    return {
      colSpan: 1
    };
  }
  let width = column.computedWidth;
  for (let j = 1; j < colSpan; j += 1) {
    const nextColumnIndex = columnIndex + j;
    if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
      const nextColumn = columns[nextColumnIndex];
      width += nextColumn.computedWidth;
      setCellColSpanInfo(lookup, rowId, columnIndex + j, {
        spannedByColSpan: true,
        rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
        leftVisibleCellIndex: columnIndex
      });
    }
    setCellColSpanInfo(lookup, rowId, columnIndex, {
      spannedByColSpan: false,
      cellProps: {
        colSpan,
        width
      }
    });
  }
  return {
    colSpan
  };
}
function setCellColSpanInfo(lookup, rowId, columnIndex, cellColSpanInfo) {
  if (!lookup[rowId]) {
    lookup[rowId] = {};
  }
  lookup[rowId][columnIndex] = cellColSpanInfo;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js
init_extends();
init_objectWithoutPropertiesLoose();
var React135 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js
var recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {
  if (isLeaf(columnGroupNode)) {
    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== void 0) {
      throw new Error([`MUI X: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(" > ")}`, `- ${parents.join(" > ")}`].join("\n"));
    }
    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;
    return;
  }
  const {
    groupId,
    children
  } = columnGroupNode;
  children.forEach((child) => {
    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);
  });
};
var unwrapGroupingColumnModel = (columnGroupingModel) => {
  if (!columnGroupingModel) {
    return {};
  }
  const unwrappedSubTree = {};
  columnGroupingModel.forEach((columnGroupNode) => {
    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);
  });
  return unwrappedSubTree;
};
var getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {
  const getParents = (field) => unwrappedGroupingModel[field] ?? [];
  const groupingHeaderStructure = [];
  const maxDepth = Math.max(...orderedColumns.map((field) => getParents(field).length));
  const haveSameParents = (field1, field2, depth) => isDeepEqual3(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));
  const haveDifferentContainers = (field1, field2) => {
    if ((pinnedFields == null ? void 0 : pinnedFields.left) && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {
      return true;
    }
    if ((pinnedFields == null ? void 0 : pinnedFields.right) && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {
      return true;
    }
    return false;
  };
  for (let depth = 0; depth < maxDepth; depth += 1) {
    const depthStructure = orderedColumns.reduce((structure, newField) => {
      const groupId = getParents(newField)[depth] ?? null;
      if (structure.length === 0) {
        return [{
          columnFields: [newField],
          groupId
        }];
      }
      const lastGroup = structure[structure.length - 1];
      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];
      const prevGroupId = lastGroup.groupId;
      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) || // Fix for https://github.com/mui/mui-x/issues/7041
      haveDifferentContainers(prevField, newField)) {
        return [...structure, {
          columnFields: [newField],
          groupId
        }];
      }
      return [...structure.slice(0, structure.length - 1), {
        columnFields: [...lastGroup.columnFields, newField],
        groupId
      }];
    }, []);
    groupingHeaderStructure.push(depthStructure);
  }
  return groupingHeaderStructure;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js
var _excluded51 = ["groupId", "children"];
var createGroupLookup = (columnGroupingModel) => {
  let groupLookup = {};
  columnGroupingModel.forEach((node) => {
    if (isLeaf(node)) {
      return;
    }
    const {
      groupId,
      children
    } = node, other = _objectWithoutPropertiesLoose(node, _excluded51);
    if (!groupId) {
      throw new Error("MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.");
    }
    if (true) {
      if (!children) {
        console.warn(`MUI X: group groupId=${groupId} has no children.`);
      }
    }
    const groupParam = _extends({}, other, {
      groupId
    });
    const subTreeLookup = createGroupLookup(children);
    if (subTreeLookup[groupId] !== void 0 || groupLookup[groupId] !== void 0) {
      throw new Error(`MUI X: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);
    }
    groupLookup = _extends({}, groupLookup, subTreeLookup, {
      [groupId]: groupParam
    });
  });
  return _extends({}, groupLookup);
};
var columnGroupsStateInitializer2 = (state, props, apiRef2) => {
  if (!props.columnGroupingModel) {
    return state;
  }
  const columnFields = gridColumnFieldsSelector(apiRef2);
  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef2);
  const groupLookup = createGroupLookup(props.columnGroupingModel ?? []);
  const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);
  const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, apiRef2.current.state.pinnedColumns ?? {});
  const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
    var _a;
    return ((_a = unwrappedGroupingModel[field]) == null ? void 0 : _a.length) ?? 0;
  }));
  return _extends({}, state, {
    columnGrouping: {
      lookup: groupLookup,
      unwrappedGroupingModel,
      headerStructure: columnGroupsHeaderStructure,
      maxDepth
    }
  });
};
var useGridColumnGrouping2 = (apiRef2, props) => {
  const getColumnGroupPath = React135.useCallback((field) => {
    const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef2);
    return unwrappedGroupingModel[field] ?? [];
  }, [apiRef2]);
  const getAllGroupDetails = React135.useCallback(() => {
    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef2);
    return columnGroupLookup;
  }, [apiRef2]);
  const columnGroupingApi = {
    getColumnGroupPath,
    getAllGroupDetails
  };
  useGridApiMethod2(apiRef2, columnGroupingApi, "public");
  const handleColumnIndexChange = React135.useCallback(() => {
    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);
    apiRef2.current.setState((state) => {
      var _a;
      const orderedFields = ((_a = state.columns) == null ? void 0 : _a.orderedFields) ?? [];
      const pinnedColumns = state.pinnedColumns ?? {};
      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel, pinnedColumns);
      return _extends({}, state, {
        columnGrouping: _extends({}, state.columnGrouping, {
          headerStructure: columnGroupsHeaderStructure
        })
      });
    });
  }, [apiRef2, props.columnGroupingModel]);
  const updateColumnGroupingState = React135.useCallback((columnGroupingModel) => {
    var _a, _b;
    const pinnedColumns = ((_b = (_a = apiRef2.current).getPinnedColumns) == null ? void 0 : _b.call(_a)) ?? {};
    const columnFields = gridColumnFieldsSelector(apiRef2);
    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef2);
    const groupLookup = createGroupLookup(columnGroupingModel ?? []);
    const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel ?? []);
    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, pinnedColumns);
    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
      var _a2;
      return ((_a2 = unwrappedGroupingModel[field]) == null ? void 0 : _a2.length) ?? 0;
    }));
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        columnGrouping: {
          lookup: groupLookup,
          unwrappedGroupingModel,
          headerStructure: columnGroupsHeaderStructure,
          maxDepth
        }
      });
    });
  }, [apiRef2]);
  useGridApiEventHandler2(apiRef2, "columnIndexChange", handleColumnIndexChange);
  useGridApiEventHandler2(apiRef2, "columnsChange", () => {
    updateColumnGroupingState(props.columnGroupingModel);
  });
  useGridApiEventHandler2(apiRef2, "columnVisibilityModelChange", () => {
    updateColumnGroupingState(props.columnGroupingModel);
  });
  React135.useEffect(() => {
    updateColumnGroupingState(props.columnGroupingModel);
  }, [updateColumnGroupingState, props.columnGroupingModel]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js
init_extends();
var React136 = __toESM(require_react());
init_useEventCallback();
var densityStateInitializer2 = (state, props) => {
  var _a;
  return _extends({}, state, {
    density: ((_a = props.initialState) == null ? void 0 : _a.density) ?? props.density ?? "standard"
  });
};
var useGridDensity2 = (apiRef2, props) => {
  var _a;
  const logger = useGridLogger(apiRef2, "useDensity");
  apiRef2.current.registerControlState({
    stateId: "density",
    propModel: props.density,
    propOnChange: props.onDensityChange,
    stateSelector: gridDensitySelector,
    changeEvent: "densityChange"
  });
  const setDensity = useEventCallback_default((newDensity) => {
    const currentDensity = gridDensitySelector(apiRef2.current.state);
    if (currentDensity === newDensity) {
      return;
    }
    logger.debug(`Set grid density to ${newDensity}`);
    apiRef2.current.setState((state) => _extends({}, state, {
      density: newDensity
    }));
  });
  const densityApi = {
    setDensity
  };
  useGridApiMethod2(apiRef2, densityApi, "public");
  const stateExportPreProcessing = React136.useCallback((prevState, context) => {
    var _a2;
    const exportedDensity = gridDensitySelector(apiRef2.current.state);
    const shouldExportRowCount = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `density` is controlled
      props.density != null || // Always export if the `density` has been initialized
      ((_a2 = props.initialState) == null ? void 0 : _a2.density) != null
    );
    if (!shouldExportRowCount) {
      return prevState;
    }
    return _extends({}, prevState, {
      density: exportedDensity
    });
  }, [apiRef2, props.density, (_a = props.initialState) == null ? void 0 : _a.density]);
  const stateRestorePreProcessing = React136.useCallback((params, context) => {
    var _a2;
    const restoredDensity = ((_a2 = context.stateToRestore) == null ? void 0 : _a2.density) ? context.stateToRestore.density : gridDensitySelector(apiRef2.current.state);
    apiRef2.current.setState((state) => _extends({}, state, {
      density: restoredDensity
    }));
    return params;
  }, [apiRef2]);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  React136.useEffect(() => {
    if (props.density) {
      apiRef2.current.setDensity(props.density);
    }
  }, [apiRef2, props.density]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
var React137 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/exportAs.js
function exportAs(blob, extension = "csv", filename = document.title || "untitled") {
  const fullName = `${filename}.${extension}`;
  if ("download" in HTMLAnchorElement.prototype) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = fullName;
    a.click();
    setTimeout(() => {
      URL.revokeObjectURL(url);
    });
    return;
  }
  throw new Error("MUI X: exportAs not supported.");
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/export/utils.js
var getColumnsToExport = ({
  apiRef: apiRef2,
  options
}) => {
  const columns = gridColumnDefinitionsSelector(apiRef2);
  if (options.fields) {
    return options.fields.reduce((currentColumns, field) => {
      const column = columns.find((col) => col.field === field);
      if (column) {
        currentColumns.push(column);
      }
      return currentColumns;
    }, []);
  }
  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef2);
  return validColumns.filter((column) => !column.disableExport);
};
var defaultGetRowsToExport = ({
  apiRef: apiRef2
}) => {
  var _a, _b;
  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef2);
  const rowTree = gridRowTreeSelector2(apiRef2);
  const selectedRows = apiRef2.current.getSelectedRows();
  const bodyRows = filteredSortedRowIds.filter((id) => rowTree[id].type !== "footer");
  const pinnedRows = gridPinnedRowsSelector(apiRef2);
  const topPinnedRowsIds = ((_a = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a.map((row) => row.id)) || [];
  const bottomPinnedRowsIds = ((_b = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b.map((row) => row.id)) || [];
  bodyRows.unshift(...topPinnedRowsIds);
  bodyRows.push(...bottomPinnedRowsIds);
  if (selectedRows.size > 0) {
    return bodyRows.filter((id) => selectedRows.has(id));
  }
  return bodyRows;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var useGridCsvExport2 = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridCsvExport");
  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;
  const getDataAsCsv = React137.useCallback((options = {}) => {
    logger.debug(`Get data as CSV`);
    const exportedColumns = getColumnsToExport({
      apiRef: apiRef2,
      options
    });
    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;
    const exportedRowIds = getRowsToExport({
      apiRef: apiRef2
    });
    return buildCSV({
      columns: exportedColumns,
      rowIds: exportedRowIds,
      csvOptions: {
        delimiter: options.delimiter || ",",
        shouldAppendQuotes: options.shouldAppendQuotes ?? true,
        includeHeaders: options.includeHeaders ?? true,
        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,
        escapeFormulas: options.escapeFormulas ?? true
      },
      ignoreValueFormatter,
      apiRef: apiRef2
    });
  }, [logger, apiRef2, ignoreValueFormatter]);
  const exportDataAsCsv = React137.useCallback((options) => {
    logger.debug(`Export data as CSV`);
    const csv = getDataAsCsv(options);
    const blob = new Blob([(options == null ? void 0 : options.utf8WithBom) ? new Uint8Array([239, 187, 191]) : "", csv], {
      type: "text/csv"
    });
    exportAs(blob, "csv", options == null ? void 0 : options.fileName);
  }, [logger, getDataAsCsv]);
  const csvExportApi = {
    getDataAsCsv,
    exportDataAsCsv
  };
  useGridApiMethod2(apiRef2, csvExportApi, "public");
  const addExportMenuButtons = React137.useCallback((initialValue, options) => {
    var _a;
    if ((_a = options.csvOptions) == null ? void 0 : _a.disableToolbarButton) {
      return initialValue;
    }
    return [...initialValue, {
      component: (0, import_jsx_runtime101.jsx)(GridCsvExportMenuItem, {
        options: options.csvOptions
      }),
      componentName: "csvExport"
    }];
  }, []);
  useGridRegisterPipeProcessor2(apiRef2, "exportMenu", addExportMenuButtons);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
init_extends();
var React139 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationModel.js
init_extends();
var React138 = __toESM(require_react());
var getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {
  let paginationModel = paginationState.paginationModel;
  const rowCount = paginationState.rowCount;
  const pageSize = (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) ?? paginationModel.pageSize;
  const page = (paginationModelProp == null ? void 0 : paginationModelProp.page) ?? paginationModel.page;
  const pageCount = getPageCount(rowCount, pageSize, page);
  if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {
    paginationModel = paginationModelProp;
  }
  const validPage = getValidPage(paginationModel.page, pageCount);
  if (validPage !== paginationModel.page) {
    paginationModel = _extends({}, paginationModel, {
      page: validPage
    });
  }
  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);
  return paginationModel;
};
var useGridPaginationModel = (apiRef2, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef2, "useGridPaginationModel");
  const densityFactor = useGridSelector2(apiRef2, gridDensityFactorSelector);
  const rowHeight = Math.floor(props.rowHeight * densityFactor);
  apiRef2.current.registerControlState({
    stateId: "paginationModel",
    propModel: props.paginationModel,
    propOnChange: props.onPaginationModelChange,
    stateSelector: gridPaginationModelSelector,
    changeEvent: "paginationModelChange"
  });
  const setPage = React138.useCallback((page) => {
    const currentModel = gridPaginationModelSelector(apiRef2);
    if (page === currentModel.page) {
      return;
    }
    logger.debug(`Setting page to ${page}`);
    apiRef2.current.setPaginationModel({
      page,
      pageSize: currentModel.pageSize
    });
  }, [apiRef2, logger]);
  const setPageSize = React138.useCallback((pageSize) => {
    const currentModel = gridPaginationModelSelector(apiRef2);
    if (pageSize === currentModel.pageSize) {
      return;
    }
    logger.debug(`Setting page size to ${pageSize}`);
    apiRef2.current.setPaginationModel({
      pageSize,
      page: currentModel.page
    });
  }, [apiRef2, logger]);
  const setPaginationModel = React138.useCallback((paginationModel) => {
    const currentModel = gridPaginationModelSelector(apiRef2);
    if (paginationModel === currentModel) {
      return;
    }
    logger.debug("Setting 'paginationModel' to", paginationModel);
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
      })
    }));
  }, [apiRef2, logger, props.signature]);
  const paginationModelApi = {
    setPage,
    setPageSize,
    setPaginationModel
  };
  useGridApiMethod2(apiRef2, paginationModelApi, "public");
  const stateExportPreProcessing = React138.useCallback((prevState, context) => {
    var _a2, _b2;
    const paginationModel = gridPaginationModelSelector(apiRef2);
    const shouldExportPaginationModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `paginationModel` is controlled
      props.paginationModel != null || // Always export if the `paginationModel` has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.pagination) == null ? void 0 : _b2.paginationModel) != null || // Export if `page` or `pageSize` is not equal to the default value
      paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize)
    );
    if (!shouldExportPaginationModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      pagination: _extends({}, prevState.pagination, {
        paginationModel
      })
    });
  }, [apiRef2, props.paginationModel, (_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.paginationModel, props.autoPageSize]);
  const stateRestorePreProcessing = React138.useCallback((params, context) => {
    var _a2, _b2;
    const paginationModel = ((_a2 = context.stateToRestore.pagination) == null ? void 0 : _a2.paginationModel) ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_b2 = context.stateToRestore.pagination) == null ? void 0 : _b2.paginationModel) : gridPaginationModelSelector(apiRef2);
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
      })
    }));
    return params;
  }, [apiRef2, props.autoPageSize, props.signature]);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  const handlePaginationModelChange = () => {
    var _a2;
    const paginationModel = gridPaginationModelSelector(apiRef2);
    if ((_a2 = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a2.current) {
      apiRef2.current.scrollToIndexes({
        rowIndex: paginationModel.page * paginationModel.pageSize
      });
    }
  };
  const handleUpdateAutoPageSize = React138.useCallback(() => {
    if (!props.autoPageSize) {
      return;
    }
    const dimensions = apiRef2.current.getRootDimensions();
    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);
    apiRef2.current.setPageSize(maximumPageSizeWithoutScrollBar);
  }, [apiRef2, props.autoPageSize, rowHeight]);
  const handleRowCountChange = React138.useCallback((newRowCount) => {
    if (newRowCount == null) {
      return;
    }
    const paginationModel = gridPaginationModelSelector(apiRef2);
    const pageCount = gridPageCountSelector(apiRef2);
    if (paginationModel.page > pageCount - 1) {
      apiRef2.current.setPage(Math.max(0, pageCount - 1));
    }
  }, [apiRef2]);
  useGridApiEventHandler2(apiRef2, "viewportInnerSizeChange", handleUpdateAutoPageSize);
  useGridApiEventHandler2(apiRef2, "paginationModelChange", handlePaginationModelChange);
  useGridApiEventHandler2(apiRef2, "rowCountChange", handleRowCountChange);
  React138.useEffect(() => {
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)
      })
    }));
  }, [apiRef2, props.paginationModel, props.paginationMode, props.signature]);
  React138.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime());
function raf() {
  return new Promise((resolve) => {
    requestAnimationFrame(() => {
      resolve();
    });
  });
}
function buildPrintWindow(title) {
  const iframeEl = document.createElement("iframe");
  iframeEl.style.position = "absolute";
  iframeEl.style.width = "0px";
  iframeEl.style.height = "0px";
  iframeEl.title = title || document.title;
  return iframeEl;
}
var useGridPrintExport2 = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridPrintExport");
  const doc = React139.useRef(null);
  const previousGridState = React139.useRef(null);
  const previousColumnVisibility = React139.useRef({});
  const previousRows = React139.useRef([]);
  const previousVirtualizationState = React139.useRef();
  React139.useEffect(() => {
    doc.current = ownerDocument(apiRef2.current.rootElementRef.current);
  }, [apiRef2]);
  const updateGridColumnsForPrint = React139.useCallback((fields, allColumns, includeCheckboxes) => new Promise((resolve) => {
    const exportedColumnFields = getColumnsToExport({
      apiRef: apiRef2,
      options: {
        fields,
        allColumns
      }
    }).map((column) => column.field);
    const columns = gridColumnDefinitionsSelector(apiRef2);
    const newColumnVisibilityModel = {};
    columns.forEach((column) => {
      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);
    });
    if (includeCheckboxes) {
      newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF2.field] = true;
    }
    apiRef2.current.setColumnVisibilityModel(newColumnVisibilityModel);
    resolve();
  }), [apiRef2]);
  const updateGridRowsForPrint = React139.useCallback((getRowsToExport) => {
    const rowsToExportIds = getRowsToExport({
      apiRef: apiRef2
    });
    const newRows = rowsToExportIds.reduce((acc, id) => {
      const row = apiRef2.current.getRow(id);
      if (!row[GRID_ID_AUTOGENERATED]) {
        acc.push(row);
      }
      return acc;
    }, []);
    apiRef2.current.setRows(newRows);
  }, [apiRef2]);
  const handlePrintWindowLoad = React139.useCallback((printWindow, options) => {
    var _a, _b, _c, _d;
    const normalizeOptions = _extends({
      copyStyles: true,
      hideToolbar: false,
      hideFooter: false,
      includeCheckboxes: false
    }, options);
    const printDoc = printWindow.contentDocument;
    if (!printDoc) {
      return;
    }
    const rowsMeta = gridRowsMetaSelector(apiRef2.current.state);
    const gridRootElement = apiRef2.current.rootElementRef.current;
    const gridClone = gridRootElement.cloneNode(true);
    const gridMain = gridClone.querySelector(`.${gridClasses2.main}`);
    gridMain.style.overflow = "visible";
    gridClone.style.contain = "size";
    let gridToolbarElementHeight = ((_a = gridRootElement.querySelector(`.${gridClasses2.toolbarContainer}`)) == null ? void 0 : _a.offsetHeight) || 0;
    let gridFooterElementHeight = ((_b = gridRootElement.querySelector(`.${gridClasses2.footerContainer}`)) == null ? void 0 : _b.offsetHeight) || 0;
    if (normalizeOptions.hideToolbar) {
      (_c = gridClone.querySelector(`.${gridClasses2.toolbarContainer}`)) == null ? void 0 : _c.remove();
      gridToolbarElementHeight = 0;
    }
    if (normalizeOptions.hideFooter) {
      (_d = gridClone.querySelector(`.${gridClasses2.footerContainer}`)) == null ? void 0 : _d.remove();
      gridFooterElementHeight = 0;
    }
    const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight2(apiRef2, props) + gridToolbarElementHeight + gridFooterElementHeight;
    gridClone.style.height = `${computedTotalHeight}px`;
    gridClone.style.boxSizing = "content-box";
    const gridFooterElement = gridClone.querySelector(`.${gridClasses2.footerContainer}`);
    gridFooterElement.style.position = "absolute";
    gridFooterElement.style.width = "100%";
    gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;
    const container = document.createElement("div");
    container.appendChild(gridClone);
    printDoc.body.style.marginTop = "0px";
    printDoc.body.innerHTML = container.innerHTML;
    const defaultPageStyle = typeof normalizeOptions.pageStyle === "function" ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;
    if (typeof defaultPageStyle === "string") {
      const styleElement = printDoc.createElement("style");
      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
      printDoc.head.appendChild(styleElement);
    }
    if (normalizeOptions.bodyClassName) {
      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" "));
    }
    const stylesheetLoadPromises = [];
    if (normalizeOptions.copyStyles) {
      const rootCandidate = gridRootElement.getRootNode();
      const root = rootCandidate.constructor.name === "ShadowRoot" ? rootCandidate : doc.current;
      const headStyleElements = root.querySelectorAll("style, link[rel='stylesheet']");
      for (let i2 = 0; i2 < headStyleElements.length; i2 += 1) {
        const node = headStyleElements[i2];
        if (node.tagName === "STYLE") {
          const newHeadStyleElements = printDoc.createElement(node.tagName);
          const sheet = node.sheet;
          if (sheet) {
            let styleCSS = "";
            for (let j = 0; j < sheet.cssRules.length; j += 1) {
              if (typeof sheet.cssRules[j].cssText === "string") {
                styleCSS += `${sheet.cssRules[j].cssText}\r
`;
              }
            }
            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));
            printDoc.head.appendChild(newHeadStyleElements);
          }
        } else if (node.getAttribute("href")) {
          const newHeadStyleElements = printDoc.createElement(node.tagName);
          for (let j = 0; j < node.attributes.length; j += 1) {
            const attr = node.attributes[j];
            if (attr) {
              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || "");
            }
          }
          stylesheetLoadPromises.push(new Promise((resolve) => {
            newHeadStyleElements.addEventListener("load", () => resolve());
          }));
          printDoc.head.appendChild(newHeadStyleElements);
        }
      }
    }
    if (true) {
      Promise.all(stylesheetLoadPromises).then(() => {
        printWindow.contentWindow.print();
      });
    }
  }, [apiRef2, doc, props]);
  const handlePrintWindowAfterPrint = React139.useCallback((printWindow) => {
    var _a, _b;
    doc.current.body.removeChild(printWindow);
    apiRef2.current.restoreState(previousGridState.current || {});
    if (!((_b = (_a = previousGridState.current) == null ? void 0 : _a.columns) == null ? void 0 : _b.columnVisibilityModel)) {
      apiRef2.current.setColumnVisibilityModel(previousColumnVisibility.current);
    }
    apiRef2.current.setState((state) => _extends({}, state, {
      virtualization: previousVirtualizationState.current
    }));
    apiRef2.current.setRows(previousRows.current);
    previousGridState.current = null;
    previousColumnVisibility.current = {};
    previousRows.current = [];
  }, [apiRef2]);
  const exportDataAsPrint = React139.useCallback(async (options) => {
    logger.debug(`Export data as Print`);
    if (!apiRef2.current.rootElementRef.current) {
      throw new Error("MUI X: No grid root element available.");
    }
    previousGridState.current = apiRef2.current.exportState();
    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef2);
    previousRows.current = apiRef2.current.getSortedRows().filter((row) => !row[GRID_ID_AUTOGENERATED]);
    if (props.pagination) {
      const visibleRowCount = gridExpandedRowCountSelector(apiRef2);
      const paginationModel = {
        page: 0,
        pageSize: visibleRowCount
      };
      apiRef2.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          paginationModel: getDerivedPaginationModel(
            state.pagination,
            // Using signature `DataGridPro` to allow more than 100 rows in the print export
            "DataGridPro",
            paginationModel
          )
        })
      }));
    }
    previousVirtualizationState.current = apiRef2.current.state.virtualization;
    apiRef2.current.setState((state) => _extends({}, state, {
      virtualization: _extends({}, state.virtualization, {
        enabled: false,
        enabledForColumns: false
      })
    }));
    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns, options == null ? void 0 : options.includeCheckboxes);
    updateGridRowsForPrint((options == null ? void 0 : options.getRowsToExport) ?? defaultGetRowsToExport);
    await raf();
    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);
    if (false) {
      doc.current.body.appendChild(printWindow);
      handlePrintWindowLoad(printWindow, options);
      handlePrintWindowAfterPrint(printWindow);
    } else {
      printWindow.onload = () => {
        handlePrintWindowLoad(printWindow, options);
        const mediaQueryList = printWindow.contentWindow.matchMedia("print");
        mediaQueryList.addEventListener("change", (mql) => {
          const isAfterPrint = mql.matches === false;
          if (isAfterPrint) {
            handlePrintWindowAfterPrint(printWindow);
          }
        });
      };
      doc.current.body.appendChild(printWindow);
    }
  }, [props, logger, apiRef2, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);
  const printExportApi = {
    exportDataAsPrint
  };
  useGridApiMethod2(apiRef2, printExportApi, "public");
  const addExportMenuButtons = React139.useCallback((initialValue, options) => {
    var _a;
    if ((_a = options.printOptions) == null ? void 0 : _a.disableToolbarButton) {
      return initialValue;
    }
    return [...initialValue, {
      component: (0, import_jsx_runtime102.jsx)(GridPrintExportMenuItem, {
        options: options.printOptions
      }),
      componentName: "printExport"
    }];
  }, []);
  useGridRegisterPipeProcessor2(apiRef2, "exportMenu", addExportMenuButtons);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js
init_extends();
var React140 = __toESM(require_react());
init_utils();
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
var filterStateInitializer2 = (state, props, apiRef2) => {
  var _a, _b;
  const filterModel = props.filterModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.filter) == null ? void 0 : _b.filterModel) ?? getDefaultGridFilterModel();
  return _extends({}, state, {
    filter: {
      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef2),
      filteredRowsLookup: {},
      filteredDescendantCountLookup: {}
    },
    visibleRowsLookup: {}
  });
};
var getVisibleRowsLookup2 = (params) => {
  return params.filteredRowsLookup;
};
function getVisibleRowsLookupState(apiRef2, state) {
  return apiRef2.current.applyStrategyProcessor("visibleRowsLookupCreation", {
    tree: state.rows.tree,
    filteredRowsLookup: state.filter.filteredRowsLookup
  });
}
function createMemoizedValues() {
  return defaultMemoize(Object.values);
}
var useGridFilter2 = (apiRef2, props) => {
  var _a, _b, _c;
  const logger = useGridLogger(apiRef2, "useGridFilter");
  apiRef2.current.registerControlState({
    stateId: "filter",
    propModel: props.filterModel,
    propOnChange: props.onFilterModelChange,
    stateSelector: gridFilterModelSelector,
    changeEvent: "filterModelChange"
  });
  const updateFilteredRows = React140.useCallback(() => {
    apiRef2.current.setState((state) => {
      const filterModel = gridFilterModelSelector(state, apiRef2.current.instanceId);
      const isRowMatchingFilters = props.filterMode === "client" ? buildAggregatedFilterApplier(filterModel, apiRef2, props.disableEval) : null;
      const filteringResult = apiRef2.current.applyStrategyProcessor("filtering", {
        isRowMatchingFilters,
        filterModel: filterModel ?? getDefaultGridFilterModel()
      });
      const newState = _extends({}, state, {
        filter: _extends({}, state.filter, filteringResult)
      });
      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef2, newState);
      return _extends({}, newState, {
        visibleRowsLookup: visibleRowsLookupState
      });
    });
    apiRef2.current.publishEvent("filteredRowsSet");
  }, [apiRef2, props.filterMode, props.disableEval]);
  const addColumnMenuItem = React140.useCallback((columnMenuItems, colDef) => {
    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuFilterItem"];
  }, [props.disableColumnFilter]);
  const applyFilters = React140.useCallback(() => {
    updateFilteredRows();
    apiRef2.current.forceUpdate();
  }, [apiRef2, updateFilteredRows]);
  const upsertFilterItem = React140.useCallback((item) => {
    const filterModel = gridFilterModelSelector(apiRef2);
    const items = [...filterModel.items];
    const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
    if (itemIndex === -1) {
      items.push(item);
    } else {
      items[itemIndex] = item;
    }
    apiRef2.current.setFilterModel(_extends({}, filterModel, {
      items
    }), "upsertFilterItem");
  }, [apiRef2]);
  const upsertFilterItems = React140.useCallback((items) => {
    const filterModel = gridFilterModelSelector(apiRef2);
    const existingItems = [...filterModel.items];
    items.forEach((item) => {
      const itemIndex = existingItems.findIndex((filterItem) => filterItem.id === item.id);
      if (itemIndex === -1) {
        existingItems.push(item);
      } else {
        existingItems[itemIndex] = item;
      }
    });
    apiRef2.current.setFilterModel(_extends({}, filterModel, {
      items: existingItems
    }), "upsertFilterItems");
  }, [apiRef2]);
  const deleteFilterItem = React140.useCallback((itemToDelete) => {
    const filterModel = gridFilterModelSelector(apiRef2);
    const items = filterModel.items.filter((item) => item.id !== itemToDelete.id);
    if (items.length === filterModel.items.length) {
      return;
    }
    apiRef2.current.setFilterModel(_extends({}, filterModel, {
      items
    }), "deleteFilterItem");
  }, [apiRef2]);
  const showFilterPanel = React140.useCallback((targetColumnField, panelId, labelId) => {
    logger.debug("Displaying filter panel");
    if (targetColumnField) {
      const filterModel = gridFilterModelSelector(apiRef2);
      const filterItemsWithValue = filterModel.items.filter((item) => {
        var _a2;
        if (item.value !== void 0) {
          if (Array.isArray(item.value) && item.value.length === 0) {
            return false;
          }
          return true;
        }
        const column = apiRef2.current.getColumn(item.field);
        const filterOperator = (_a2 = column.filterOperators) == null ? void 0 : _a2.find((operator) => operator.value === item.operator);
        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === "undefined" ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;
        if (requiresFilterValue) {
          return false;
        }
        return true;
      });
      let newFilterItems;
      const filterItemOnTarget = filterItemsWithValue.find((item) => item.field === targetColumnField);
      const targetColumn = apiRef2.current.getColumn(targetColumnField);
      if (filterItemOnTarget) {
        newFilterItems = filterItemsWithValue;
      } else if (props.disableMultipleColumnsFiltering) {
        newFilterItems = [cleanFilterItem({
          field: targetColumnField,
          operator: targetColumn.filterOperators[0].value
        }, apiRef2)];
      } else {
        newFilterItems = [...filterItemsWithValue, cleanFilterItem({
          field: targetColumnField,
          operator: targetColumn.filterOperators[0].value
        }, apiRef2)];
      }
      apiRef2.current.setFilterModel(_extends({}, filterModel, {
        items: newFilterItems
      }));
    }
    apiRef2.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);
  }, [apiRef2, logger, props.disableMultipleColumnsFiltering]);
  const hideFilterPanel = React140.useCallback(() => {
    logger.debug("Hiding filter panel");
    apiRef2.current.hidePreferences();
  }, [apiRef2, logger]);
  const setFilterLogicOperator = React140.useCallback((logicOperator) => {
    const filterModel = gridFilterModelSelector(apiRef2);
    if (filterModel.logicOperator === logicOperator) {
      return;
    }
    apiRef2.current.setFilterModel(_extends({}, filterModel, {
      logicOperator
    }), "changeLogicOperator");
  }, [apiRef2]);
  const setQuickFilterValues = React140.useCallback((values) => {
    const filterModel = gridFilterModelSelector(apiRef2);
    if (isDeepEqual3(filterModel.quickFilterValues, values)) {
      return;
    }
    apiRef2.current.setFilterModel(_extends({}, filterModel, {
      quickFilterValues: [...values]
    }));
  }, [apiRef2]);
  const setFilterModel = React140.useCallback((model, reason) => {
    const currentModel = gridFilterModelSelector(apiRef2);
    if (currentModel !== model) {
      logger.debug("Setting filter model");
      apiRef2.current.updateControlState("filter", mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef2), reason);
      apiRef2.current.unstable_applyFilters();
    }
  }, [apiRef2, logger, props.disableMultipleColumnsFiltering]);
  const filterApi = {
    setFilterLogicOperator,
    unstable_applyFilters: applyFilters,
    deleteFilterItem,
    upsertFilterItem,
    upsertFilterItems,
    setFilterModel,
    showFilterPanel,
    hideFilterPanel,
    setQuickFilterValues,
    ignoreDiacritics: props.ignoreDiacritics
  };
  useGridApiMethod2(apiRef2, filterApi, "public");
  const stateExportPreProcessing = React140.useCallback((prevState, context) => {
    var _a2, _b2;
    const filterModelToExport = gridFilterModelSelector(apiRef2);
    const shouldExportFilterModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.filterModel != null || // Always export if the model has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.filter) == null ? void 0 : _b2.filterModel) != null || // Export if the model is not equal to the default value
      !isDeepEqual3(filterModelToExport, getDefaultGridFilterModel())
    );
    if (!shouldExportFilterModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      filter: {
        filterModel: filterModelToExport
      }
    });
  }, [apiRef2, props.filterModel, (_b = (_a = props.initialState) == null ? void 0 : _a.filter) == null ? void 0 : _b.filterModel]);
  const stateRestorePreProcessing = React140.useCallback((params, context) => {
    var _a2;
    const filterModel = (_a2 = context.stateToRestore.filter) == null ? void 0 : _a2.filterModel;
    if (filterModel == null) {
      return params;
    }
    apiRef2.current.updateControlState("filter", mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef2), "restoreState");
    return _extends({}, params, {
      callbacks: [...params.callbacks, apiRef2.current.unstable_applyFilters]
    });
  }, [apiRef2, props.disableMultipleColumnsFiltering]);
  const preferencePanelPreProcessing = React140.useCallback((initialValue, value) => {
    var _a2;
    if (value === GridPreferencePanelsValue.filters) {
      const FilterPanel = props.slots.filterPanel;
      return (0, import_jsx_runtime103.jsx)(FilterPanel, _extends({}, (_a2 = props.slotProps) == null ? void 0 : _a2.filterPanel));
    }
    return initialValue;
  }, [props.slots.filterPanel, (_c = props.slotProps) == null ? void 0 : _c.filterPanel]);
  const {
    getRowId
  } = props;
  const getRowsRef = useLazyRef(createMemoizedValues);
  const flatFilteringMethod = React140.useCallback((params) => {
    if (props.filterMode !== "client" || !params.isRowMatchingFilters) {
      return {
        filteredRowsLookup: {},
        filteredDescendantCountLookup: {}
      };
    }
    const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef2);
    const filteredRowsLookup = {};
    const {
      isRowMatchingFilters
    } = params;
    const filterCache = {};
    const result = {
      passingFilterItems: null,
      passingQuickFilterValues: null
    };
    const rows = getRowsRef.current(apiRef2.current.state.rows.dataRowIdToModelLookup);
    for (let i2 = 0; i2 < rows.length; i2 += 1) {
      const row = rows[i2];
      const id = getRowId ? getRowId(row) : row.id;
      isRowMatchingFilters(row, void 0, result);
      const isRowPassing = passFilterLogic2([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef2, filterCache);
      filteredRowsLookup[id] = isRowPassing;
    }
    const footerId = "auto-generated-group-footer-root";
    const footer = dataRowIdToModelLookup[footerId];
    if (footer) {
      filteredRowsLookup[footerId] = true;
    }
    return {
      filteredRowsLookup,
      filteredDescendantCountLookup: {}
    };
  }, [apiRef2, props.filterMode, getRowId, getRowsRef]);
  useGridRegisterPipeProcessor2(apiRef2, "columnMenu", addColumnMenuItem);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "preferencePanel", preferencePanelPreProcessing);
  useGridRegisterStrategyProcessor2(apiRef2, GRID_DEFAULT_STRATEGY, "filtering", flatFilteringMethod);
  useGridRegisterStrategyProcessor2(apiRef2, GRID_DEFAULT_STRATEGY, "visibleRowsLookupCreation", getVisibleRowsLookup2);
  const handleColumnsChange = React140.useCallback(() => {
    logger.debug("onColUpdated - GridColumns changed, applying filters");
    const filterModel = gridFilterModelSelector(apiRef2);
    const columnsLookup = gridColumnLookupSelector2(apiRef2);
    const newFilterItems = filterModel.items.filter((item) => item.field && columnsLookup[item.field]);
    if (newFilterItems.length < filterModel.items.length) {
      apiRef2.current.setFilterModel(_extends({}, filterModel, {
        items: newFilterItems
      }));
    }
  }, [apiRef2, logger]);
  const handleStrategyProcessorChange = React140.useCallback((methodName) => {
    if (methodName === "filtering") {
      apiRef2.current.unstable_applyFilters();
    }
  }, [apiRef2]);
  const updateVisibleRowsLookupState = React140.useCallback(() => {
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        visibleRowsLookup: getVisibleRowsLookupState(apiRef2, state)
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  useGridApiEventHandler2(apiRef2, "rowsSet", updateFilteredRows);
  useGridApiEventHandler2(apiRef2, "columnsChange", handleColumnsChange);
  useGridApiEventHandler2(apiRef2, "activeStrategyProcessorChange", handleStrategyProcessorChange);
  useGridApiEventHandler2(apiRef2, "rowExpansionChange", updateVisibleRowsLookupState);
  useGridApiEventHandler2(apiRef2, "columnVisibilityModelChange", () => {
    const filterModel = gridFilterModelSelector(apiRef2);
    if (filterModel.quickFilterValues && shouldQuickFilterExcludeHiddenColumns(filterModel)) {
      apiRef2.current.unstable_applyFilters();
    }
  });
  useFirstRender2(() => {
    apiRef2.current.unstable_applyFilters();
  });
  useEnhancedEffect_default(() => {
    if (props.filterModel !== void 0) {
      apiRef2.current.setFilterModel(props.filterModel);
    }
  }, [apiRef2, logger, props.filterModel]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js
init_extends();
var React141 = __toESM(require_react());
init_utils();
var focusStateInitializer2 = (state) => _extends({}, state, {
  focus: {
    cell: null,
    columnHeader: null,
    columnHeaderFilter: null,
    columnGroupHeader: null
  },
  tabIndex: {
    cell: null,
    columnHeader: null,
    columnHeaderFilter: null,
    columnGroupHeader: null
  }
});
var useGridFocus2 = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridFocus");
  const lastClickedCell = React141.useRef(null);
  const publishCellFocusOut = React141.useCallback((cell, event) => {
    if (cell) {
      if (apiRef2.current.getRow(cell.id)) {
        apiRef2.current.publishEvent("cellFocusOut", apiRef2.current.getCellParams(cell.id, cell.field), event);
      }
    }
  }, [apiRef2]);
  const setCellFocus = React141.useCallback((id, field) => {
    const focusedCell = gridFocusCellSelector2(apiRef2);
    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {
      return;
    }
    apiRef2.current.setState((state) => {
      logger.debug(`Focusing on cell with id=${id} and field=${field}`);
      return _extends({}, state, {
        tabIndex: {
          cell: {
            id,
            field
          },
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        },
        focus: {
          cell: {
            id,
            field
          },
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      });
    });
    apiRef2.current.forceUpdate();
    if (!apiRef2.current.getRow(id)) {
      return;
    }
    if (focusedCell) {
      publishCellFocusOut(focusedCell, {});
    }
    apiRef2.current.publishEvent("cellFocusIn", apiRef2.current.getCellParams(id, field));
  }, [apiRef2, logger, publishCellFocusOut]);
  const setColumnHeaderFocus = React141.useCallback((field, event = {}) => {
    const cell = gridFocusCellSelector2(apiRef2);
    publishCellFocusOut(cell, event);
    apiRef2.current.setState((state) => {
      logger.debug(`Focusing on column header with colIndex=${field}`);
      return _extends({}, state, {
        tabIndex: {
          columnHeader: {
            field
          },
          columnHeaderFilter: null,
          cell: null,
          columnGroupHeader: null
        },
        focus: {
          columnHeader: {
            field
          },
          columnHeaderFilter: null,
          cell: null,
          columnGroupHeader: null
        }
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2, logger, publishCellFocusOut]);
  const setColumnHeaderFilterFocus = React141.useCallback((field, event = {}) => {
    const cell = gridFocusCellSelector2(apiRef2);
    publishCellFocusOut(cell, event);
    apiRef2.current.setState((state) => {
      logger.debug(`Focusing on column header filter with colIndex=${field}`);
      return _extends({}, state, {
        tabIndex: {
          columnHeader: null,
          columnHeaderFilter: {
            field
          },
          cell: null,
          columnGroupHeader: null
        },
        focus: {
          columnHeader: null,
          columnHeaderFilter: {
            field
          },
          cell: null,
          columnGroupHeader: null
        }
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2, logger, publishCellFocusOut]);
  const setColumnGroupHeaderFocus = React141.useCallback((field, depth, event = {}) => {
    const cell = gridFocusCellSelector2(apiRef2);
    if (cell) {
      apiRef2.current.publishEvent("cellFocusOut", apiRef2.current.getCellParams(cell.id, cell.field), event);
    }
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        tabIndex: {
          columnGroupHeader: {
            field,
            depth
          },
          columnHeader: null,
          columnHeaderFilter: null,
          cell: null
        },
        focus: {
          columnGroupHeader: {
            field,
            depth
          },
          columnHeader: null,
          columnHeaderFilter: null,
          cell: null
        }
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const getColumnGroupHeaderFocus = React141.useCallback(() => gridFocusColumnGroupHeaderSelector(apiRef2), [apiRef2]);
  const moveFocusToRelativeCell = React141.useCallback((id, field, direction) => {
    let columnIndexToFocus = apiRef2.current.getColumnIndex(field);
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
    const currentPage = getVisibleRows(apiRef2, {
      pagination: props.pagination,
      paginationMode: props.paginationMode
    });
    const pinnedRows = gridPinnedRowsSelector(apiRef2);
    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);
    let rowIndexToFocus = currentPageRows.findIndex((row) => row.id === id);
    if (direction === "right") {
      columnIndexToFocus += 1;
    } else if (direction === "left") {
      columnIndexToFocus -= 1;
    } else {
      rowIndexToFocus += 1;
    }
    if (columnIndexToFocus >= visibleColumns.length) {
      rowIndexToFocus += 1;
      if (rowIndexToFocus < currentPageRows.length) {
        columnIndexToFocus = 0;
      }
    } else if (columnIndexToFocus < 0) {
      rowIndexToFocus -= 1;
      if (rowIndexToFocus >= 0) {
        columnIndexToFocus = visibleColumns.length - 1;
      }
    }
    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);
    const rowToFocus = currentPageRows[rowIndexToFocus];
    if (!rowToFocus) {
      return;
    }
    const colSpanInfo = apiRef2.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);
    if (colSpanInfo && colSpanInfo.spannedByColSpan) {
      if (direction === "left" || direction === "below") {
        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;
      } else if (direction === "right") {
        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;
      }
    }
    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);
    const columnToFocus = visibleColumns[columnIndexToFocus];
    apiRef2.current.setCellFocus(rowToFocus.id, columnToFocus.field);
  }, [apiRef2, props.pagination, props.paginationMode]);
  const handleCellDoubleClick = React141.useCallback(({
    id,
    field
  }) => {
    apiRef2.current.setCellFocus(id, field);
  }, [apiRef2]);
  const handleCellKeyDown = React141.useCallback((params, event) => {
    if (event.key === "Enter" || event.key === "Tab" || event.key === "Shift" || isNavigationKey2(event.key)) {
      return;
    }
    apiRef2.current.setCellFocus(params.id, params.field);
  }, [apiRef2]);
  const handleColumnHeaderFocus = React141.useCallback(({
    field
  }, event) => {
    if (event.target !== event.currentTarget) {
      return;
    }
    apiRef2.current.setColumnHeaderFocus(field, event);
  }, [apiRef2]);
  const handleColumnGroupHeaderFocus = React141.useCallback(({
    fields,
    depth
  }, event) => {
    if (event.target !== event.currentTarget) {
      return;
    }
    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef2);
    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {
      return;
    }
    apiRef2.current.setColumnGroupHeaderFocus(fields[0], depth, event);
  }, [apiRef2]);
  const handleBlur = React141.useCallback((_, event) => {
    var _a, _b;
    if ((_b = (_a = event.relatedTarget) == null ? void 0 : _a.getAttribute("class")) == null ? void 0 : _b.includes(gridClasses2.columnHeader)) {
      return;
    }
    logger.debug(`Clearing focus`);
    apiRef2.current.setState((state) => _extends({}, state, {
      focus: {
        cell: null,
        columnHeader: null,
        columnHeaderFilter: null,
        columnGroupHeader: null
      }
    }));
  }, [logger, apiRef2]);
  const handleCellMouseDown = React141.useCallback((params) => {
    lastClickedCell.current = params;
  }, []);
  const handleDocumentClick = React141.useCallback((event) => {
    const cellParams = lastClickedCell.current;
    lastClickedCell.current = null;
    const focusedCell = gridFocusCellSelector2(apiRef2);
    const canUpdateFocus = apiRef2.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
      event,
      cell: cellParams
    });
    if (!canUpdateFocus) {
      return;
    }
    if (!focusedCell) {
      if (cellParams) {
        apiRef2.current.setCellFocus(cellParams.id, cellParams.field);
      }
      return;
    }
    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {
      return;
    }
    const cellElement = apiRef2.current.getCellElement(focusedCell.id, focusedCell.field);
    if (cellElement == null ? void 0 : cellElement.contains(event.target)) {
      return;
    }
    if (cellParams) {
      apiRef2.current.setCellFocus(cellParams.id, cellParams.field);
    } else {
      apiRef2.current.setState((state) => _extends({}, state, {
        focus: {
          cell: null,
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      }));
      apiRef2.current.forceUpdate();
      publishCellFocusOut(focusedCell, event);
    }
  }, [apiRef2, publishCellFocusOut]);
  const handleCellModeChange = React141.useCallback((params) => {
    if (params.cellMode === "view") {
      return;
    }
    const cell = gridFocusCellSelector2(apiRef2);
    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {
      apiRef2.current.setCellFocus(params.id, params.field);
    }
  }, [apiRef2]);
  const handleRowSet = React141.useCallback(() => {
    const cell = gridFocusCellSelector2(apiRef2);
    if (cell && !apiRef2.current.getRow(cell.id)) {
      apiRef2.current.setState((state) => _extends({}, state, {
        focus: {
          cell: null,
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      }));
    }
  }, [apiRef2]);
  const handlePaginationModelChange = useEventCallback_default(() => {
    const currentFocusedCell = gridFocusCellSelector2(apiRef2);
    if (!currentFocusedCell) {
      return;
    }
    const currentPage = getVisibleRows(apiRef2, {
      pagination: props.pagination,
      paginationMode: props.paginationMode
    });
    const rowIsInCurrentPage = currentPage.rows.find((row) => row.id === currentFocusedCell.id);
    if (rowIsInCurrentPage) {
      return;
    }
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        tabIndex: {
          cell: {
            id: currentPage.rows[0].id,
            field: visibleColumns[0].field
          },
          columnGroupHeader: null,
          columnHeader: null,
          columnHeaderFilter: null
        }
      });
    });
  });
  const focusApi = {
    setCellFocus,
    setColumnHeaderFocus,
    setColumnHeaderFilterFocus
  };
  const focusPrivateApi = {
    moveFocusToRelativeCell,
    setColumnGroupHeaderFocus,
    getColumnGroupHeaderFocus
  };
  useGridApiMethod2(apiRef2, focusApi, "public");
  useGridApiMethod2(apiRef2, focusPrivateApi, "private");
  React141.useEffect(() => {
    const doc = ownerDocument(apiRef2.current.rootElementRef.current);
    doc.addEventListener("mouseup", handleDocumentClick);
    return () => {
      doc.removeEventListener("mouseup", handleDocumentClick);
    };
  }, [apiRef2, handleDocumentClick]);
  useGridApiEventHandler2(apiRef2, "columnHeaderBlur", handleBlur);
  useGridApiEventHandler2(apiRef2, "cellDoubleClick", handleCellDoubleClick);
  useGridApiEventHandler2(apiRef2, "cellMouseDown", handleCellMouseDown);
  useGridApiEventHandler2(apiRef2, "cellKeyDown", handleCellKeyDown);
  useGridApiEventHandler2(apiRef2, "cellModeChange", handleCellModeChange);
  useGridApiEventHandler2(apiRef2, "columnHeaderFocus", handleColumnHeaderFocus);
  useGridApiEventHandler2(apiRef2, "columnGroupHeaderFocus", handleColumnGroupHeaderFocus);
  useGridApiEventHandler2(apiRef2, "rowsSet", handleRowSet);
  useGridApiEventHandler2(apiRef2, "paginationModelChange", handlePaginationModelChange);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js
var React142 = __toESM(require_react());
function enrichPageRowsWithPinnedRows(apiRef2, rows) {
  const pinnedRows = gridPinnedRowsSelector(apiRef2) || {};
  return [...pinnedRows.top || [], ...rows, ...pinnedRows.bottom || []];
}
var getLeftColumnIndex = ({
  currentColIndex,
  firstColIndex,
  lastColIndex,
  direction
}) => {
  if (direction === "rtl") {
    if (currentColIndex < lastColIndex) {
      return currentColIndex + 1;
    }
  } else if (direction === "ltr") {
    if (currentColIndex > firstColIndex) {
      return currentColIndex - 1;
    }
  }
  return null;
};
var getRightColumnIndex = ({
  currentColIndex,
  firstColIndex,
  lastColIndex,
  direction
}) => {
  if (direction === "rtl") {
    if (currentColIndex > firstColIndex) {
      return currentColIndex - 1;
    }
  } else if (direction === "ltr") {
    if (currentColIndex < lastColIndex) {
      return currentColIndex + 1;
    }
  }
  return null;
};
var useGridKeyboardNavigation2 = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridKeyboardNavigation");
  const initialCurrentPageRows = useGridVisibleRows2(apiRef2, props).rows;
  const theme = useTheme();
  const currentPageRows = React142.useMemo(() => enrichPageRowsWithPinnedRows(apiRef2, initialCurrentPageRows), [apiRef2, initialCurrentPageRows]);
  const headerFilteringEnabled = props.signature !== "DataGrid" && props.headerFilters;
  const goToCell = React142.useCallback((colIndex, rowId, closestColumnToUse = "left") => {
    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef2);
    const nextCellColSpanInfo = apiRef2.current.unstable_getCellColSpanInfo(rowId, colIndex);
    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
      if (closestColumnToUse === "left") {
        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
      } else if (closestColumnToUse === "right") {
        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
      }
    }
    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex((row) => row.id === rowId);
    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);
    apiRef2.current.scrollToIndexes({
      colIndex,
      rowIndex: rowIndexRelativeToAllRows
    });
    const field = apiRef2.current.getVisibleColumns()[colIndex].field;
    apiRef2.current.setCellFocus(rowId, field);
  }, [apiRef2, logger]);
  const goToHeader = React142.useCallback((colIndex, event) => {
    logger.debug(`Navigating to header col ${colIndex}`);
    apiRef2.current.scrollToIndexes({
      colIndex
    });
    const field = apiRef2.current.getVisibleColumns()[colIndex].field;
    apiRef2.current.setColumnHeaderFocus(field, event);
  }, [apiRef2, logger]);
  const goToHeaderFilter = React142.useCallback((colIndex, event) => {
    logger.debug(`Navigating to header filter col ${colIndex}`);
    apiRef2.current.scrollToIndexes({
      colIndex
    });
    const field = apiRef2.current.getVisibleColumns()[colIndex].field;
    apiRef2.current.setColumnHeaderFilterFocus(field, event);
  }, [apiRef2, logger]);
  const goToGroupHeader = React142.useCallback((colIndex, depth, event) => {
    logger.debug(`Navigating to header col ${colIndex}`);
    apiRef2.current.scrollToIndexes({
      colIndex
    });
    const {
      field
    } = apiRef2.current.getVisibleColumns()[colIndex];
    apiRef2.current.setColumnGroupHeaderFocus(field, depth, event);
  }, [apiRef2, logger]);
  const getRowIdFromIndex = React142.useCallback((rowIndex) => {
    var _a;
    return (_a = currentPageRows[rowIndex]) == null ? void 0 : _a.id;
  }, [currentPageRows]);
  const handleColumnHeaderKeyDown = React142.useCallback((params, event) => {
    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses2.columnHeaderTitleContainerContent}`);
    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);
    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF2.field) {
      return;
    }
    const viewportPageSize = apiRef2.current.getViewportPageSize();
    const colIndexBefore = params.field ? apiRef2.current.getColumnIndex(params.field) : 0;
    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef2).length - 1;
    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef2);
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        if (firstRowIndexInPage !== null) {
          if (headerFilteringEnabled) {
            goToHeaderFilter(colIndexBefore, event);
          } else {
            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));
          }
        }
        break;
      }
      case "ArrowRight": {
        const rightColIndex = getRightColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          direction: theme.direction
        });
        if (rightColIndex !== null) {
          goToHeader(rightColIndex, event);
        }
        break;
      }
      case "ArrowLeft": {
        const leftColIndex = getLeftColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          direction: theme.direction
        });
        if (leftColIndex !== null) {
          goToHeader(leftColIndex, event);
        }
        break;
      }
      case "ArrowUp": {
        if (columnGroupMaxDepth > 0) {
          goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);
        }
        break;
      }
      case "PageDown": {
        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "Home": {
        goToHeader(firstColIndex, event);
        break;
      }
      case "End": {
        goToHeader(lastColIndex, event);
        break;
      }
      case "Enter": {
        if (event.ctrlKey || event.metaKey) {
          apiRef2.current.toggleColumnMenu(params.field);
        }
        break;
      }
      case " ": {
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef2, currentPageRows.length, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, theme.direction, goToHeader, goToGroupHeader]);
  const handleHeaderFilterKeyDown = React142.useCallback((params, event) => {
    const isEditing = gridHeaderFilteringEditFieldSelector(apiRef2) === params.field;
    const isHeaderMenuOpen = gridHeaderFilteringMenuSelector(apiRef2) === params.field;
    if (isEditing || isHeaderMenuOpen || !isNavigationKey2(event.key)) {
      return;
    }
    const viewportPageSize = apiRef2.current.getViewportPageSize();
    const colIndexBefore = params.field ? apiRef2.current.getColumnIndex(params.field) : 0;
    const firstRowIndexInPage = 0;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef2).length - 1;
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        const rowId = getRowIdFromIndex(firstRowIndexInPage);
        if (firstRowIndexInPage !== null && rowId != null) {
          goToCell(colIndexBefore, rowId);
        }
        break;
      }
      case "ArrowRight": {
        const rightColIndex = getRightColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          direction: theme.direction
        });
        if (rightColIndex !== null) {
          goToHeaderFilter(rightColIndex, event);
        }
        break;
      }
      case "ArrowLeft": {
        const leftColIndex = getLeftColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          direction: theme.direction
        });
        if (leftColIndex !== null) {
          goToHeaderFilter(leftColIndex, event);
        } else {
          apiRef2.current.setColumnHeaderFilterFocus(params.field, event);
        }
        break;
      }
      case "ArrowUp": {
        goToHeader(colIndexBefore, event);
        break;
      }
      case "PageDown": {
        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "Home": {
        goToHeaderFilter(firstColIndex, event);
        break;
      }
      case "End": {
        goToHeaderFilter(lastColIndex, event);
        break;
      }
      case " ": {
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef2, currentPageRows.length, goToHeaderFilter, theme.direction, goToHeader, goToCell, getRowIdFromIndex]);
  const handleColumnGroupHeaderKeyDown = React142.useCallback((params, event) => {
    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef2);
    if (focusedColumnGroup === null) {
      return;
    }
    const {
      field: currentField,
      depth: currentDepth
    } = focusedColumnGroup;
    const {
      fields,
      depth,
      maxDepth
    } = params;
    const viewportPageSize = apiRef2.current.getViewportPageSize();
    const currentColIndex = apiRef2.current.getColumnIndex(currentField);
    const colIndexBefore = currentField ? apiRef2.current.getColumnIndex(currentField) : 0;
    const firstRowIndexInPage = 0;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef2).length - 1;
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        if (depth === maxDepth - 1) {
          goToHeader(currentColIndex, event);
        } else {
          goToGroupHeader(currentColIndex, currentDepth + 1, event);
        }
        break;
      }
      case "ArrowUp": {
        if (depth > 0) {
          goToGroupHeader(currentColIndex, currentDepth - 1, event);
        }
        break;
      }
      case "ArrowRight": {
        const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;
        if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {
          goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);
        }
        break;
      }
      case "ArrowLeft": {
        const remainingLeftColumns = fields.indexOf(currentField);
        if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {
          goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);
        }
        break;
      }
      case "PageDown": {
        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "Home": {
        goToGroupHeader(firstColIndex, currentDepth, event);
        break;
      }
      case "End": {
        goToGroupHeader(lastColIndex, currentDepth, event);
        break;
      }
      case " ": {
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef2, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);
  const handleCellKeyDown = React142.useCallback((params, event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    const cellParams = apiRef2.current.getCellParams(params.id, params.field);
    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey2(event.key)) {
      return;
    }
    const canUpdateFocus = apiRef2.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
      event,
      cell: cellParams
    });
    if (!canUpdateFocus) {
      return;
    }
    if (currentPageRows.length === 0) {
      return;
    }
    const direction = theme.direction;
    const viewportPageSize = apiRef2.current.getViewportPageSize();
    const colIndexBefore = params.field ? apiRef2.current.getColumnIndex(params.field) : 0;
    const rowIndexBefore = currentPageRows.findIndex((row) => row.id === params.id);
    const firstRowIndexInPage = 0;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef2).length - 1;
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        if (rowIndexBefore < lastRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));
        }
        break;
      }
      case "ArrowUp": {
        if (rowIndexBefore > firstRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));
        } else if (headerFilteringEnabled) {
          goToHeaderFilter(colIndexBefore, event);
        } else {
          goToHeader(colIndexBefore, event);
        }
        break;
      }
      case "ArrowRight": {
        const rightColIndex = getRightColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          direction
        });
        if (rightColIndex !== null) {
          goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === "rtl" ? "left" : "right");
        }
        break;
      }
      case "ArrowLeft": {
        const leftColIndex = getLeftColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          direction
        });
        if (leftColIndex !== null) {
          goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === "rtl" ? "right" : "left");
        }
        break;
      }
      case "Tab": {
        if (event.shiftKey && colIndexBefore > firstColIndex) {
          goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), "left");
        } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
          goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), "right");
        }
        break;
      }
      case " ": {
        const field = params.field;
        if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD2) {
          break;
        }
        const colDef = params.colDef;
        if (colDef && // `GRID_TREE_DATA_GROUPING_FIELD` from the Pro package
        colDef.field === "__tree_data_group__") {
          break;
        }
        if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "PageDown": {
        if (rowIndexBefore < lastRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "PageUp": {
        const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);
        if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));
        } else {
          goToHeader(colIndexBefore, event);
        }
        break;
      }
      case "Home": {
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));
        } else {
          goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));
        }
        break;
      }
      case "End": {
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));
        } else {
          goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));
        }
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef2, currentPageRows, theme.direction, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);
  const checkIfCanStartEditing = React142.useCallback((initialValue, {
    event
  }) => {
    if (event.key === " ") {
      return false;
    }
    return initialValue;
  }, []);
  useGridRegisterPipeProcessor2(apiRef2, "canStartEditing", checkIfCanStartEditing);
  useGridApiEventHandler2(apiRef2, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
  useGridApiEventHandler2(apiRef2, "headerFilterKeyDown", handleHeaderFilterKeyDown);
  useGridApiEventHandler2(apiRef2, "columnGroupHeaderKeyDown", handleColumnGroupHeaderKeyDown);
  useGridApiEventHandler2(apiRef2, "cellKeyDown", handleCellKeyDown);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js
init_extends();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js
init_extends();
var React143 = __toESM(require_react());
init_useLazyRef();
var useGridRowCount = (apiRef2, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef2, "useGridRowCount");
  const visibleTopLevelRowCount = useGridSelector2(apiRef2, gridFilteredTopLevelRowCountSelector);
  const rowCountState = useGridSelector2(apiRef2, gridPaginationRowCountSelector);
  const paginationMeta = useGridSelector2(apiRef2, gridPaginationMetaSelector);
  const paginationModel = useGridSelector2(apiRef2, gridPaginationModelSelector);
  const previousPageSize = useLazyRef(() => gridPaginationModelSelector(apiRef2).pageSize);
  apiRef2.current.registerControlState({
    stateId: "paginationRowCount",
    propModel: props.rowCount,
    propOnChange: props.onRowCountChange,
    stateSelector: gridPaginationRowCountSelector,
    changeEvent: "rowCountChange"
  });
  const setRowCount = React143.useCallback((newRowCount) => {
    if (rowCountState === newRowCount) {
      return;
    }
    logger.debug("Setting 'rowCount' to", newRowCount);
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        rowCount: newRowCount
      })
    }));
  }, [apiRef2, logger, rowCountState]);
  const paginationRowCountApi = {
    setRowCount
  };
  useGridApiMethod2(apiRef2, paginationRowCountApi, "public");
  const stateExportPreProcessing = React143.useCallback((prevState, context) => {
    var _a2, _b2;
    const exportedRowCount = gridPaginationRowCountSelector(apiRef2);
    const shouldExportRowCount = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `rowCount` is controlled
      props.rowCount != null || // Always export if the `rowCount` has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.pagination) == null ? void 0 : _b2.rowCount) != null
    );
    if (!shouldExportRowCount) {
      return prevState;
    }
    return _extends({}, prevState, {
      pagination: _extends({}, prevState.pagination, {
        rowCount: exportedRowCount
      })
    });
  }, [apiRef2, props.rowCount, (_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.rowCount]);
  const stateRestorePreProcessing = React143.useCallback((params, context) => {
    var _a2;
    const restoredRowCount = ((_a2 = context.stateToRestore.pagination) == null ? void 0 : _a2.rowCount) ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef2);
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        rowCount: restoredRowCount
      })
    }));
    return params;
  }, [apiRef2]);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  const handlePaginationModelChange = React143.useCallback((model) => {
    if (props.paginationMode === "client" || !previousPageSize.current) {
      return;
    }
    if (model.pageSize !== previousPageSize.current) {
      previousPageSize.current = model.pageSize;
      if (rowCountState === -1) {
        apiRef2.current.setPage(0);
      }
    }
  }, [props.paginationMode, previousPageSize, rowCountState, apiRef2]);
  useGridApiEventHandler2(apiRef2, "paginationModelChange", handlePaginationModelChange);
  React143.useEffect(() => {
    if (props.paginationMode === "client") {
      apiRef2.current.setRowCount(visibleTopLevelRowCount);
    } else if (props.rowCount != null) {
      apiRef2.current.setRowCount(props.rowCount);
    }
  }, [apiRef2, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);
  const isLastPage = paginationMeta.hasNextPage === false;
  React143.useEffect(() => {
    if (isLastPage && rowCountState === -1) {
      apiRef2.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);
    }
  }, [apiRef2, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationMeta.js
init_extends();
var React144 = __toESM(require_react());
var useGridPaginationMeta = (apiRef2, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef2, "useGridPaginationMeta");
  const paginationMeta = useGridSelector2(apiRef2, gridPaginationMetaSelector);
  apiRef2.current.registerControlState({
    stateId: "paginationMeta",
    propModel: props.paginationMeta,
    propOnChange: props.onPaginationMetaChange,
    stateSelector: gridPaginationMetaSelector,
    changeEvent: "paginationMetaChange"
  });
  const setPaginationMeta = React144.useCallback((newPaginationMeta) => {
    if (paginationMeta === newPaginationMeta) {
      return;
    }
    logger.debug("Setting 'paginationMeta' to", newPaginationMeta);
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        meta: newPaginationMeta
      })
    }));
  }, [apiRef2, logger, paginationMeta]);
  const paginationMetaApi = {
    setPaginationMeta
  };
  useGridApiMethod2(apiRef2, paginationMetaApi, "public");
  const stateExportPreProcessing = React144.useCallback((prevState, context) => {
    var _a2, _b2;
    const exportedPaginationMeta = gridPaginationMetaSelector(apiRef2);
    const shouldExportRowCount = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `paginationMeta` is controlled
      props.paginationMeta != null || // Always export if the `paginationMeta` has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.pagination) == null ? void 0 : _b2.meta) != null
    );
    if (!shouldExportRowCount) {
      return prevState;
    }
    return _extends({}, prevState, {
      pagination: _extends({}, prevState.pagination, {
        meta: exportedPaginationMeta
      })
    });
  }, [apiRef2, props.paginationMeta, (_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.meta]);
  const stateRestorePreProcessing = React144.useCallback((params, context) => {
    var _a2;
    const restoredPaginationMeta = ((_a2 = context.stateToRestore.pagination) == null ? void 0 : _a2.meta) ? context.stateToRestore.pagination.meta : gridPaginationMetaSelector(apiRef2);
    apiRef2.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        meta: restoredPaginationMeta
      })
    }));
    return params;
  }, [apiRef2]);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  React144.useEffect(() => {
    if (props.paginationMeta) {
      apiRef2.current.setPaginationMeta(props.paginationMeta);
    }
  }, [apiRef2, props.paginationMeta]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js
var paginationStateInitializer2 = (state, props) => {
  var _a, _b, _c, _d, _e, _f;
  const paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), props.paginationModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.paginationModel));
  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);
  const rowCount = props.rowCount ?? ((_d = (_c = props.initialState) == null ? void 0 : _c.pagination) == null ? void 0 : _d.rowCount);
  const meta = props.paginationMeta ?? ((_f = (_e = props.initialState) == null ? void 0 : _e.pagination) == null ? void 0 : _f.meta) ?? {};
  return _extends({}, state, {
    pagination: {
      paginationModel,
      rowCount,
      meta
    }
  });
};
var useGridPagination2 = (apiRef2, props) => {
  useGridPaginationMeta(apiRef2, props);
  useGridPaginationModel(apiRef2, props);
  useGridRowCount(apiRef2, props);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js
init_extends();
var React145 = __toESM(require_react());
var preferencePanelStateInitializer2 = (state, props) => {
  var _a;
  return _extends({}, state, {
    preferencePanel: ((_a = props.initialState) == null ? void 0 : _a.preferencePanel) ?? {
      open: false
    }
  });
};
var useGridPreferencesPanel2 = (apiRef2, props) => {
  var _a;
  const logger = useGridLogger(apiRef2, "useGridPreferencesPanel");
  const hideTimeout = React145.useRef();
  const immediateTimeout = React145.useRef();
  const hidePreferences = React145.useCallback(() => {
    logger.debug("Hiding Preferences Panel");
    const preferencePanelState = gridPreferencePanelStateSelector(apiRef2.current.state);
    if (preferencePanelState.openedPanelValue) {
      apiRef2.current.publishEvent("preferencePanelClose", {
        openedPanelValue: preferencePanelState.openedPanelValue
      });
    }
    apiRef2.current.setState((state) => _extends({}, state, {
      preferencePanel: {
        open: false
      }
    }));
    apiRef2.current.forceUpdate();
  }, [apiRef2, logger]);
  const doNotHidePanel = React145.useCallback(() => {
    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);
  }, []);
  const hidePreferencesDelayed = React145.useCallback(() => {
    hideTimeout.current = setTimeout(hidePreferences, 100);
  }, [hidePreferences]);
  const showPreferences = React145.useCallback((newValue, panelId, labelId) => {
    logger.debug("Opening Preferences Panel");
    doNotHidePanel();
    apiRef2.current.setState((state) => _extends({}, state, {
      preferencePanel: _extends({}, state.preferencePanel, {
        open: true,
        openedPanelValue: newValue,
        panelId,
        labelId
      })
    }));
    apiRef2.current.publishEvent("preferencePanelOpen", {
      openedPanelValue: newValue
    });
    apiRef2.current.forceUpdate();
  }, [logger, doNotHidePanel, apiRef2]);
  useGridApiMethod2(apiRef2, {
    showPreferences,
    hidePreferences: hidePreferencesDelayed
  }, "public");
  const stateExportPreProcessing = React145.useCallback((prevState, context) => {
    var _a2;
    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef2.current.state);
    const shouldExportPreferencePanel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the panel was initialized
      ((_a2 = props.initialState) == null ? void 0 : _a2.preferencePanel) != null || // Always export if the panel is opened
      preferencePanelToExport.open
    );
    if (!shouldExportPreferencePanel) {
      return prevState;
    }
    return _extends({}, prevState, {
      preferencePanel: preferencePanelToExport
    });
  }, [apiRef2, (_a = props.initialState) == null ? void 0 : _a.preferencePanel]);
  const stateRestorePreProcessing = React145.useCallback((params, context) => {
    const preferencePanel = context.stateToRestore.preferencePanel;
    if (preferencePanel != null) {
      apiRef2.current.setState((state) => _extends({}, state, {
        preferencePanel
      }));
    }
    return params;
  }, [apiRef2]);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  React145.useEffect(() => {
    return () => {
      clearTimeout(hideTimeout.current);
      clearTimeout(immediateTimeout.current);
    };
  }, []);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.js
init_extends();
var React148 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js
init_objectWithoutPropertiesLoose();
init_extends();
var React146 = __toESM(require_react());
init_utils();
var _excluded52 = ["id", "field"];
var _excluded212 = ["id", "field"];
var missingOnProcessRowUpdateErrorWarning = buildWarning(["MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence."], "error");
var useGridCellEditing = (apiRef2, props) => {
  const [cellModesModel, setCellModesModel] = React146.useState({});
  const cellModesModelRef = React146.useRef(cellModesModel);
  const prevCellModesModel = React146.useRef({});
  const {
    processRowUpdate,
    onProcessRowUpdateError,
    cellModesModel: cellModesModelProp,
    onCellModesModelChange
  } = props;
  const runIfEditModeIsCell = (callback) => (...args) => {
    if (props.editMode === GridEditModes.Cell) {
      callback(...args);
    }
  };
  const throwIfNotEditable = React146.useCallback((id, field) => {
    const params = apiRef2.current.getCellParams(id, field);
    if (!apiRef2.current.isCellEditable(params)) {
      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);
    }
  }, [apiRef2]);
  const throwIfNotInMode = React146.useCallback((id, field, mode) => {
    if (apiRef2.current.getCellMode(id, field) !== mode) {
      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
    }
  }, [apiRef2]);
  const handleCellDoubleClick = React146.useCallback((params, event) => {
    if (!params.isEditable) {
      return;
    }
    if (params.cellMode === GridCellModes.Edit) {
      return;
    }
    const newParams = _extends({}, params, {
      reason: GridCellEditStartReasons.cellDoubleClick
    });
    apiRef2.current.publishEvent("cellEditStart", newParams, event);
  }, [apiRef2]);
  const handleCellFocusOut = React146.useCallback((params, event) => {
    if (params.cellMode === GridCellModes.View) {
      return;
    }
    if (apiRef2.current.getCellMode(params.id, params.field) === GridCellModes.View) {
      return;
    }
    const newParams = _extends({}, params, {
      reason: GridCellEditStopReasons.cellFocusOut
    });
    apiRef2.current.publishEvent("cellEditStop", newParams, event);
  }, [apiRef2]);
  const handleCellKeyDown = React146.useCallback((params, event) => {
    if (params.cellMode === GridCellModes.Edit) {
      if (event.which === 229) {
        return;
      }
      let reason;
      if (event.key === "Escape") {
        reason = GridCellEditStopReasons.escapeKeyDown;
      } else if (event.key === "Enter") {
        reason = GridCellEditStopReasons.enterKeyDown;
      } else if (event.key === "Tab") {
        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;
        event.preventDefault();
      }
      if (reason) {
        const newParams = _extends({}, params, {
          reason
        });
        apiRef2.current.publishEvent("cellEditStop", newParams, event);
      }
    } else if (params.isEditable) {
      let reason;
      const canStartEditing = apiRef2.current.unstable_applyPipeProcessors("canStartEditing", true, {
        event,
        cellParams: params,
        editMode: "cell"
      });
      if (!canStartEditing) {
        return;
      }
      if (isPrintableKey(event)) {
        reason = GridCellEditStartReasons.printableKeyDown;
      } else if (isPasteShortcut(event)) {
        reason = GridCellEditStartReasons.pasteKeyDown;
      } else if (event.key === "Enter") {
        reason = GridCellEditStartReasons.enterKeyDown;
      } else if (event.key === "Backspace" || event.key === "Delete") {
        reason = GridCellEditStartReasons.deleteKeyDown;
      }
      if (reason) {
        const newParams = _extends({}, params, {
          reason,
          key: event.key
        });
        apiRef2.current.publishEvent("cellEditStart", newParams, event);
      }
    }
  }, [apiRef2]);
  const handleCellEditStart = React146.useCallback((params) => {
    const {
      id,
      field,
      reason
    } = params;
    const startCellEditModeParams = {
      id,
      field
    };
    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {
      startCellEditModeParams.deleteValue = true;
    }
    apiRef2.current.startCellEditMode(startCellEditModeParams);
  }, [apiRef2]);
  const handleCellEditStop = React146.useCallback((params) => {
    const {
      id,
      field,
      reason
    } = params;
    apiRef2.current.runPendingEditCellValueMutation(id, field);
    let cellToFocusAfter;
    if (reason === GridCellEditStopReasons.enterKeyDown) {
      cellToFocusAfter = "below";
    } else if (reason === GridCellEditStopReasons.tabKeyDown) {
      cellToFocusAfter = "right";
    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {
      cellToFocusAfter = "left";
    }
    const ignoreModifications = reason === "escapeKeyDown";
    apiRef2.current.stopCellEditMode({
      id,
      field,
      ignoreModifications,
      cellToFocusAfter
    });
  }, [apiRef2]);
  const runIfNoFieldErrors = (callback) => async (...args) => {
    var _a;
    if (callback) {
      const {
        id,
        field
      } = args[0];
      const editRowsState = apiRef2.current.state.editRows;
      const hasFieldErrors = (_a = editRowsState[id][field]) == null ? void 0 : _a.error;
      if (!hasFieldErrors) {
        callback(...args);
      }
    }
  };
  useGridApiEventHandler2(apiRef2, "cellDoubleClick", runIfEditModeIsCell(handleCellDoubleClick));
  useGridApiEventHandler2(apiRef2, "cellFocusOut", runIfEditModeIsCell(handleCellFocusOut));
  useGridApiEventHandler2(apiRef2, "cellKeyDown", runIfEditModeIsCell(handleCellKeyDown));
  useGridApiEventHandler2(apiRef2, "cellEditStart", runIfEditModeIsCell(handleCellEditStart));
  useGridApiEventHandler2(apiRef2, "cellEditStop", runIfEditModeIsCell(handleCellEditStop));
  useGridApiOptionHandler(apiRef2, "cellEditStart", props.onCellEditStart);
  useGridApiOptionHandler(apiRef2, "cellEditStop", runIfNoFieldErrors(props.onCellEditStop));
  const getCellMode = React146.useCallback((id, field) => {
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    const isEditing = editingState[id] && editingState[id][field];
    return isEditing ? GridCellModes.Edit : GridCellModes.View;
  }, [apiRef2]);
  const updateCellModesModel = useEventCallback_default((newModel) => {
    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;
    if (onCellModesModelChange && isNewModelDifferentFromProp) {
      onCellModesModelChange(newModel, {
        api: apiRef2.current
      });
    }
    if (props.cellModesModel && isNewModelDifferentFromProp) {
      return;
    }
    setCellModesModel(newModel);
    cellModesModelRef.current = newModel;
    apiRef2.current.publishEvent("cellModesModelChange", newModel);
  });
  const updateFieldInCellModesModel = React146.useCallback((id, field, newProps) => {
    const newModel = _extends({}, cellModesModelRef.current);
    if (newProps !== null) {
      newModel[id] = _extends({}, newModel[id], {
        [field]: _extends({}, newProps)
      });
    } else {
      const _newModel$id = newModel[id], otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(toPropertyKey));
      newModel[id] = otherFields;
      if (Object.keys(newModel[id]).length === 0) {
        delete newModel[id];
      }
    }
    updateCellModesModel(newModel);
  }, [updateCellModesModel]);
  const updateOrDeleteFieldState = React146.useCallback((id, field, newProps) => {
    apiRef2.current.setState((state) => {
      const newEditingState = _extends({}, state.editRows);
      if (newProps !== null) {
        newEditingState[id] = _extends({}, newEditingState[id], {
          [field]: _extends({}, newProps)
        });
      } else {
        delete newEditingState[id][field];
        if (Object.keys(newEditingState[id]).length === 0) {
          delete newEditingState[id];
        }
      }
      return _extends({}, state, {
        editRows: newEditingState
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const startCellEditMode = React146.useCallback((params) => {
    const {
      id,
      field
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded52);
    throwIfNotEditable(id, field);
    throwIfNotInMode(id, field, GridCellModes.View);
    updateFieldInCellModesModel(id, field, _extends({
      mode: GridCellModes.Edit
    }, other));
  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);
  const updateStateToStartCellEditMode = useEventCallback_default((params) => {
    const {
      id,
      field,
      deleteValue,
      initialValue
    } = params;
    let newValue = apiRef2.current.getCellValue(id, field);
    if (deleteValue) {
      const fieldType = apiRef2.current.getColumn(field).type;
      switch (fieldType) {
        case "boolean":
          newValue = false;
          break;
        case "date":
        case "dateTime":
        case "number":
          newValue = void 0;
          break;
        case "singleSelect":
          newValue = null;
          break;
        case "string":
        default:
          newValue = "";
          break;
      }
    } else if (initialValue) {
      newValue = initialValue;
    }
    const newProps = {
      value: newValue,
      error: false,
      isProcessingProps: false
    };
    updateOrDeleteFieldState(id, field, newProps);
    apiRef2.current.setCellFocus(id, field);
  });
  const stopCellEditMode = React146.useCallback((params) => {
    const {
      id,
      field
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded212);
    throwIfNotInMode(id, field, GridCellModes.Edit);
    updateFieldInCellModesModel(id, field, _extends({
      mode: GridCellModes.View
    }, other));
  }, [throwIfNotInMode, updateFieldInCellModesModel]);
  const updateStateToStopCellEditMode = useEventCallback_default(async (params) => {
    const {
      id,
      field,
      ignoreModifications,
      cellToFocusAfter = "none"
    } = params;
    throwIfNotInMode(id, field, GridCellModes.Edit);
    apiRef2.current.runPendingEditCellValueMutation(id, field);
    const finishCellEditMode = () => {
      updateOrDeleteFieldState(id, field, null);
      updateFieldInCellModesModel(id, field, null);
      if (cellToFocusAfter !== "none") {
        apiRef2.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);
      }
    };
    if (ignoreModifications) {
      finishCellEditMode();
      return;
    }
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    const {
      error,
      isProcessingProps
    } = editingState[id][field];
    if (error || isProcessingProps) {
      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
      updateFieldInCellModesModel(id, field, {
        mode: GridCellModes.Edit
      });
      return;
    }
    const rowUpdate = apiRef2.current.getRowWithUpdatedValuesFromCellEditing(id, field);
    if (processRowUpdate) {
      const handleError = (errorThrown) => {
        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
        updateFieldInCellModesModel(id, field, {
          mode: GridCellModes.Edit
        });
        if (onProcessRowUpdateError) {
          onProcessRowUpdateError(errorThrown);
        } else if (true) {
          missingOnProcessRowUpdateErrorWarning();
        }
      };
      try {
        const row = apiRef2.current.getRow(id);
        Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
          apiRef2.current.updateRows([finalRowUpdate]);
          finishCellEditMode();
        }).catch(handleError);
      } catch (errorThrown) {
        handleError(errorThrown);
      }
    } else {
      apiRef2.current.updateRows([rowUpdate]);
      finishCellEditMode();
    }
  });
  const setCellEditingEditCellValue = React146.useCallback(async (params) => {
    var _a, _b;
    const {
      id,
      field,
      value,
      debounceMs,
      unstable_skipValueParser: skipValueParser
    } = params;
    throwIfNotEditable(id, field);
    throwIfNotInMode(id, field, GridCellModes.Edit);
    const column = apiRef2.current.getColumn(field);
    const row = apiRef2.current.getRow(id);
    let parsedValue = value;
    if (column.valueParser && !skipValueParser) {
      parsedValue = column.valueParser(value, row, column, apiRef2);
    }
    let editingState = gridEditRowsStateSelector(apiRef2.current.state);
    let newProps = _extends({}, editingState[id][field], {
      value: parsedValue,
      changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
    });
    if (column.preProcessEditCellProps) {
      const hasChanged = value !== editingState[id][field].value;
      newProps = _extends({}, newProps, {
        isProcessingProps: true
      });
      updateOrDeleteFieldState(id, field, newProps);
      newProps = await Promise.resolve(column.preProcessEditCellProps({
        id,
        row,
        props: newProps,
        hasChanged
      }));
    }
    if (apiRef2.current.getCellMode(id, field) === GridCellModes.View) {
      return false;
    }
    editingState = gridEditRowsStateSelector(apiRef2.current.state);
    newProps = _extends({}, newProps, {
      isProcessingProps: false
    });
    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
    updateOrDeleteFieldState(id, field, newProps);
    editingState = gridEditRowsStateSelector(apiRef2.current.state);
    return !((_b = (_a = editingState[id]) == null ? void 0 : _a[field]) == null ? void 0 : _b.error);
  }, [apiRef2, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
  const getRowWithUpdatedValuesFromCellEditing = React146.useCallback((id, field) => {
    const column = apiRef2.current.getColumn(field);
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    const row = apiRef2.current.getRow(id);
    if (!editingState[id] || !editingState[id][field]) {
      return apiRef2.current.getRow(id);
    }
    const {
      value
    } = editingState[id][field];
    return column.valueSetter ? column.valueSetter(value, row, column, apiRef2) : _extends({}, row, {
      [field]: value
    });
  }, [apiRef2]);
  const editingApi = {
    getCellMode,
    startCellEditMode,
    stopCellEditMode
  };
  const editingPrivateApi = {
    setCellEditingEditCellValue,
    getRowWithUpdatedValuesFromCellEditing
  };
  useGridApiMethod2(apiRef2, editingApi, "public");
  useGridApiMethod2(apiRef2, editingPrivateApi, "private");
  React146.useEffect(() => {
    if (cellModesModelProp) {
      updateCellModesModel(cellModesModelProp);
    }
  }, [cellModesModelProp, updateCellModesModel]);
  useEnhancedEffect_default(() => {
    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector2(apiRef2);
    const copyOfPrevCellModes = prevCellModesModel.current;
    prevCellModesModel.current = deepClone(cellModesModel);
    Object.entries(cellModesModel).forEach(([id, fields]) => {
      Object.entries(fields).forEach(([field, params]) => {
        var _a, _b;
        const prevMode = ((_b = (_a = copyOfPrevCellModes[id]) == null ? void 0 : _a[field]) == null ? void 0 : _b.mode) || GridCellModes.View;
        const originalId = idToIdLookup[id] ?? id;
        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {
          updateStateToStartCellEditMode(_extends({
            id: originalId,
            field
          }, params));
        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {
          updateStateToStopCellEditMode(_extends({
            id: originalId,
            field
          }, params));
        }
      });
    });
  }, [apiRef2, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js
init_objectWithoutPropertiesLoose();
init_extends();
var React147 = __toESM(require_react());
init_utils();
var _excluded53 = ["id"];
var _excluded213 = ["id"];
var missingOnProcessRowUpdateErrorWarning2 = buildWarning(["MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence."], "error");
var useGridRowEditing = (apiRef2, props) => {
  const [rowModesModel, setRowModesModel] = React147.useState({});
  const rowModesModelRef = React147.useRef(rowModesModel);
  const prevRowModesModel = React147.useRef({});
  const focusTimeout = React147.useRef();
  const nextFocusedCell = React147.useRef(null);
  const {
    processRowUpdate,
    onProcessRowUpdateError,
    rowModesModel: rowModesModelProp,
    onRowModesModelChange
  } = props;
  const runIfEditModeIsRow = (callback) => (...args) => {
    if (props.editMode === GridEditModes.Row) {
      callback(...args);
    }
  };
  const throwIfNotEditable = React147.useCallback((id, field) => {
    const params = apiRef2.current.getCellParams(id, field);
    if (!apiRef2.current.isCellEditable(params)) {
      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);
    }
  }, [apiRef2]);
  const throwIfNotInMode = React147.useCallback((id, mode) => {
    if (apiRef2.current.getRowMode(id) !== mode) {
      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);
    }
  }, [apiRef2]);
  const hasFieldsWithErrors = React147.useCallback((rowId) => {
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    return Object.values(editingState[rowId]).some((fieldProps) => fieldProps.error);
  }, [apiRef2]);
  const handleCellDoubleClick = React147.useCallback((params, event) => {
    if (!params.isEditable) {
      return;
    }
    if (apiRef2.current.getRowMode(params.id) === GridRowModes.Edit) {
      return;
    }
    const rowParams = apiRef2.current.getRowParams(params.id);
    const newParams = _extends({}, rowParams, {
      field: params.field,
      reason: GridRowEditStartReasons.cellDoubleClick
    });
    apiRef2.current.publishEvent("rowEditStart", newParams, event);
  }, [apiRef2]);
  const handleCellFocusIn = React147.useCallback((params) => {
    nextFocusedCell.current = params;
  }, []);
  const handleCellFocusOut = React147.useCallback((params, event) => {
    if (!params.isEditable) {
      return;
    }
    if (apiRef2.current.getRowMode(params.id) === GridRowModes.View) {
      return;
    }
    nextFocusedCell.current = null;
    focusTimeout.current = setTimeout(() => {
      var _a;
      if (((_a = nextFocusedCell.current) == null ? void 0 : _a.id) !== params.id) {
        if (!apiRef2.current.getRow(params.id)) {
          return;
        }
        if (apiRef2.current.getRowMode(params.id) === GridRowModes.View) {
          return;
        }
        if (hasFieldsWithErrors(params.id)) {
          return;
        }
        const rowParams = apiRef2.current.getRowParams(params.id);
        const newParams = _extends({}, rowParams, {
          field: params.field,
          reason: GridRowEditStopReasons.rowFocusOut
        });
        apiRef2.current.publishEvent("rowEditStop", newParams, event);
      }
    });
  }, [apiRef2, hasFieldsWithErrors]);
  React147.useEffect(() => {
    return () => {
      clearTimeout(focusTimeout.current);
    };
  }, []);
  const handleCellKeyDown = React147.useCallback((params, event) => {
    if (params.cellMode === GridRowModes.Edit) {
      if (event.which === 229) {
        return;
      }
      let reason;
      if (event.key === "Escape") {
        reason = GridRowEditStopReasons.escapeKeyDown;
      } else if (event.key === "Enter") {
        reason = GridRowEditStopReasons.enterKeyDown;
      } else if (event.key === "Tab") {
        const columnFields = gridVisibleColumnFieldsSelector(apiRef2).filter((field) => {
          const column = apiRef2.current.getColumn(field);
          if (column.type === GRID_ACTIONS_COLUMN_TYPE2) {
            return true;
          }
          return apiRef2.current.isCellEditable(apiRef2.current.getCellParams(params.id, field));
        });
        if (event.shiftKey) {
          if (params.field === columnFields[0]) {
            reason = GridRowEditStopReasons.shiftTabKeyDown;
          }
        } else if (params.field === columnFields[columnFields.length - 1]) {
          reason = GridRowEditStopReasons.tabKeyDown;
        }
        event.preventDefault();
        if (!reason) {
          const index = columnFields.findIndex((field) => field === params.field);
          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];
          apiRef2.current.setCellFocus(params.id, nextFieldToFocus);
        }
      }
      if (reason) {
        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {
          return;
        }
        const newParams = _extends({}, apiRef2.current.getRowParams(params.id), {
          reason,
          field: params.field
        });
        apiRef2.current.publishEvent("rowEditStop", newParams, event);
      }
    } else if (params.isEditable) {
      let reason;
      const canStartEditing = apiRef2.current.unstable_applyPipeProcessors("canStartEditing", true, {
        event,
        cellParams: params,
        editMode: "row"
      });
      if (!canStartEditing) {
        return;
      }
      if (isPrintableKey(event)) {
        reason = GridRowEditStartReasons.printableKeyDown;
      } else if (isPasteShortcut(event)) {
        reason = GridRowEditStartReasons.printableKeyDown;
      } else if (event.key === "Enter") {
        reason = GridRowEditStartReasons.enterKeyDown;
      } else if (event.key === "Backspace" || event.key === "Delete") {
        reason = GridRowEditStartReasons.deleteKeyDown;
      }
      if (reason) {
        const rowParams = apiRef2.current.getRowParams(params.id);
        const newParams = _extends({}, rowParams, {
          field: params.field,
          reason
        });
        apiRef2.current.publishEvent("rowEditStart", newParams, event);
      }
    }
  }, [apiRef2, hasFieldsWithErrors]);
  const handleRowEditStart = React147.useCallback((params) => {
    const {
      id,
      field,
      reason
    } = params;
    const startRowEditModeParams = {
      id,
      fieldToFocus: field
    };
    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {
      startRowEditModeParams.deleteValue = !!field;
    }
    apiRef2.current.startRowEditMode(startRowEditModeParams);
  }, [apiRef2]);
  const handleRowEditStop = React147.useCallback((params) => {
    const {
      id,
      reason,
      field
    } = params;
    apiRef2.current.runPendingEditCellValueMutation(id);
    let cellToFocusAfter;
    if (reason === GridRowEditStopReasons.enterKeyDown) {
      cellToFocusAfter = "below";
    } else if (reason === GridRowEditStopReasons.tabKeyDown) {
      cellToFocusAfter = "right";
    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {
      cellToFocusAfter = "left";
    }
    const ignoreModifications = reason === "escapeKeyDown";
    apiRef2.current.stopRowEditMode({
      id,
      ignoreModifications,
      field,
      cellToFocusAfter
    });
  }, [apiRef2]);
  useGridApiEventHandler2(apiRef2, "cellDoubleClick", runIfEditModeIsRow(handleCellDoubleClick));
  useGridApiEventHandler2(apiRef2, "cellFocusIn", runIfEditModeIsRow(handleCellFocusIn));
  useGridApiEventHandler2(apiRef2, "cellFocusOut", runIfEditModeIsRow(handleCellFocusOut));
  useGridApiEventHandler2(apiRef2, "cellKeyDown", runIfEditModeIsRow(handleCellKeyDown));
  useGridApiEventHandler2(apiRef2, "rowEditStart", runIfEditModeIsRow(handleRowEditStart));
  useGridApiEventHandler2(apiRef2, "rowEditStop", runIfEditModeIsRow(handleRowEditStop));
  useGridApiOptionHandler(apiRef2, "rowEditStart", props.onRowEditStart);
  useGridApiOptionHandler(apiRef2, "rowEditStop", props.onRowEditStop);
  const getRowMode = React147.useCallback((id) => {
    if (props.editMode === GridEditModes.Cell) {
      return GridRowModes.View;
    }
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;
    return isEditing ? GridRowModes.Edit : GridRowModes.View;
  }, [apiRef2, props.editMode]);
  const updateRowModesModel = useEventCallback_default((newModel) => {
    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;
    if (onRowModesModelChange && isNewModelDifferentFromProp) {
      onRowModesModelChange(newModel, {
        api: apiRef2.current
      });
    }
    if (props.rowModesModel && isNewModelDifferentFromProp) {
      return;
    }
    setRowModesModel(newModel);
    rowModesModelRef.current = newModel;
    apiRef2.current.publishEvent("rowModesModelChange", newModel);
  });
  const updateRowInRowModesModel = React147.useCallback((id, newProps) => {
    const newModel = _extends({}, rowModesModelRef.current);
    if (newProps !== null) {
      newModel[id] = _extends({}, newProps);
    } else {
      delete newModel[id];
    }
    updateRowModesModel(newModel);
  }, [updateRowModesModel]);
  const updateOrDeleteRowState = React147.useCallback((id, newProps) => {
    apiRef2.current.setState((state) => {
      const newEditingState = _extends({}, state.editRows);
      if (newProps !== null) {
        newEditingState[id] = newProps;
      } else {
        delete newEditingState[id];
      }
      return _extends({}, state, {
        editRows: newEditingState
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const updateOrDeleteFieldState = React147.useCallback((id, field, newProps) => {
    apiRef2.current.setState((state) => {
      const newEditingState = _extends({}, state.editRows);
      if (newProps !== null) {
        newEditingState[id] = _extends({}, newEditingState[id], {
          [field]: _extends({}, newProps)
        });
      } else {
        delete newEditingState[id][field];
        if (Object.keys(newEditingState[id]).length === 0) {
          delete newEditingState[id];
        }
      }
      return _extends({}, state, {
        editRows: newEditingState
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const startRowEditMode = React147.useCallback((params) => {
    const {
      id
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded53);
    throwIfNotInMode(id, GridRowModes.View);
    updateRowInRowModesModel(id, _extends({
      mode: GridRowModes.Edit
    }, other));
  }, [throwIfNotInMode, updateRowInRowModesModel]);
  const updateStateToStartRowEditMode = useEventCallback_default((params) => {
    const {
      id,
      fieldToFocus,
      deleteValue,
      initialValue
    } = params;
    const columnFields = gridColumnFieldsSelector(apiRef2);
    const newProps = columnFields.reduce((acc, field) => {
      const cellParams = apiRef2.current.getCellParams(id, field);
      if (!cellParams.isEditable) {
        return acc;
      }
      let newValue = apiRef2.current.getCellValue(id, field);
      if (fieldToFocus === field && (deleteValue || initialValue)) {
        newValue = deleteValue ? "" : initialValue;
      }
      acc[field] = {
        value: newValue,
        error: false,
        isProcessingProps: false
      };
      return acc;
    }, {});
    updateOrDeleteRowState(id, newProps);
    if (fieldToFocus) {
      apiRef2.current.setCellFocus(id, fieldToFocus);
    }
  });
  const stopRowEditMode = React147.useCallback((params) => {
    const {
      id
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded213);
    throwIfNotInMode(id, GridRowModes.Edit);
    updateRowInRowModesModel(id, _extends({
      mode: GridRowModes.View
    }, other));
  }, [throwIfNotInMode, updateRowInRowModesModel]);
  const updateStateToStopRowEditMode = useEventCallback_default((params) => {
    const {
      id,
      ignoreModifications,
      field: focusedField,
      cellToFocusAfter = "none"
    } = params;
    apiRef2.current.runPendingEditCellValueMutation(id);
    const finishRowEditMode = () => {
      if (cellToFocusAfter !== "none" && focusedField) {
        apiRef2.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
      }
      updateOrDeleteRowState(id, null);
      updateRowInRowModesModel(id, null);
    };
    if (ignoreModifications) {
      finishRowEditMode();
      return;
    }
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    const row = apiRef2.current.getRow(id);
    const isSomeFieldProcessingProps = Object.values(editingState[id]).some((fieldProps) => fieldProps.isProcessingProps);
    if (isSomeFieldProcessingProps) {
      prevRowModesModel.current[id].mode = GridRowModes.Edit;
      return;
    }
    if (hasFieldsWithErrors(id)) {
      prevRowModesModel.current[id].mode = GridRowModes.Edit;
      updateRowInRowModesModel(id, {
        mode: GridRowModes.Edit
      });
      return;
    }
    const rowUpdate = apiRef2.current.getRowWithUpdatedValuesFromRowEditing(id);
    if (processRowUpdate) {
      const handleError = (errorThrown) => {
        prevRowModesModel.current[id].mode = GridRowModes.Edit;
        updateRowInRowModesModel(id, {
          mode: GridRowModes.Edit
        });
        if (onProcessRowUpdateError) {
          onProcessRowUpdateError(errorThrown);
        } else if (true) {
          missingOnProcessRowUpdateErrorWarning2();
        }
      };
      try {
        Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
          apiRef2.current.updateRows([finalRowUpdate]);
          finishRowEditMode();
        }).catch(handleError);
      } catch (errorThrown) {
        handleError(errorThrown);
      }
    } else {
      apiRef2.current.updateRows([rowUpdate]);
      finishRowEditMode();
    }
  });
  const setRowEditingEditCellValue = React147.useCallback((params) => {
    const {
      id,
      field,
      value,
      debounceMs,
      unstable_skipValueParser: skipValueParser
    } = params;
    throwIfNotEditable(id, field);
    const column = apiRef2.current.getColumn(field);
    const row = apiRef2.current.getRow(id);
    let parsedValue = value;
    if (column.valueParser && !skipValueParser) {
      parsedValue = column.valueParser(value, row, column, apiRef2);
    }
    let editingState = gridEditRowsStateSelector(apiRef2.current.state);
    let newProps = _extends({}, editingState[id][field], {
      value: parsedValue,
      changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
    });
    if (!column.preProcessEditCellProps) {
      updateOrDeleteFieldState(id, field, newProps);
    }
    return new Promise((resolve) => {
      const promises = [];
      if (column.preProcessEditCellProps) {
        const hasChanged = newProps.value !== editingState[id][field].value;
        newProps = _extends({}, newProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, field, newProps);
        const _editingState$id = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(toPropertyKey));
        const promise = Promise.resolve(column.preProcessEditCellProps({
          id,
          row,
          props: newProps,
          hasChanged,
          otherFieldsProps
        })).then((processedProps) => {
          if (apiRef2.current.getRowMode(id) === GridRowModes.View) {
            resolve(false);
            return;
          }
          editingState = gridEditRowsStateSelector(apiRef2.current.state);
          processedProps = _extends({}, processedProps, {
            isProcessingProps: false
          });
          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
          updateOrDeleteFieldState(id, field, processedProps);
        });
        promises.push(promise);
      }
      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {
        if (thisField === field) {
          return;
        }
        const fieldColumn = apiRef2.current.getColumn(thisField);
        if (!fieldColumn.preProcessEditCellProps) {
          return;
        }
        fieldProps = _extends({}, fieldProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, thisField, fieldProps);
        editingState = gridEditRowsStateSelector(apiRef2.current.state);
        const _editingState$id2 = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(toPropertyKey));
        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
          id,
          row,
          props: fieldProps,
          hasChanged: false,
          otherFieldsProps
        })).then((processedProps) => {
          if (apiRef2.current.getRowMode(id) === GridRowModes.View) {
            resolve(false);
            return;
          }
          processedProps = _extends({}, processedProps, {
            isProcessingProps: false
          });
          updateOrDeleteFieldState(id, thisField, processedProps);
        });
        promises.push(promise);
      });
      Promise.all(promises).then(() => {
        if (apiRef2.current.getRowMode(id) === GridRowModes.Edit) {
          editingState = gridEditRowsStateSelector(apiRef2.current.state);
          resolve(!editingState[id][field].error);
        } else {
          resolve(false);
        }
      });
    });
  }, [apiRef2, throwIfNotEditable, updateOrDeleteFieldState]);
  const getRowWithUpdatedValuesFromRowEditing = React147.useCallback((id) => {
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    const row = apiRef2.current.getRow(id);
    if (!editingState[id]) {
      return apiRef2.current.getRow(id);
    }
    let rowUpdate = _extends({}, row);
    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {
      const column = apiRef2.current.getColumn(field);
      if (column.valueSetter) {
        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef2);
      } else {
        rowUpdate[field] = fieldProps.value;
      }
    });
    return rowUpdate;
  }, [apiRef2]);
  const editingApi = {
    getRowMode,
    startRowEditMode,
    stopRowEditMode
  };
  const editingPrivateApi = {
    setRowEditingEditCellValue,
    getRowWithUpdatedValuesFromRowEditing
  };
  useGridApiMethod2(apiRef2, editingApi, "public");
  useGridApiMethod2(apiRef2, editingPrivateApi, "private");
  React147.useEffect(() => {
    if (rowModesModelProp) {
      updateRowModesModel(rowModesModelProp);
    }
  }, [rowModesModelProp, updateRowModesModel]);
  useEnhancedEffect_default(() => {
    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector2(apiRef2);
    const copyOfPrevRowModesModel = prevRowModesModel.current;
    prevRowModesModel.current = deepClone(rowModesModel);
    const ids = /* @__PURE__ */ new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);
    Array.from(ids).forEach((id) => {
      var _a;
      const params = rowModesModel[id] ?? {
        mode: GridRowModes.View
      };
      const prevMode = ((_a = copyOfPrevRowModesModel[id]) == null ? void 0 : _a.mode) || GridRowModes.View;
      const originalId = idToIdLookup[id] ?? id;
      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {
        updateStateToStartRowEditMode(_extends({
          id: originalId
        }, params));
      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {
        updateStateToStopRowEditMode(_extends({
          id: originalId
        }, params));
      }
    });
  }, [apiRef2, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.js
var editingStateInitializer2 = (state) => _extends({}, state, {
  editRows: {}
});
var useGridEditing2 = (apiRef2, props) => {
  useGridCellEditing(apiRef2, props);
  useGridRowEditing(apiRef2, props);
  const debounceMap = React148.useRef({});
  const {
    isCellEditable: isCellEditableProp
  } = props;
  const isCellEditable = React148.useCallback((params) => {
    if (isAutoGeneratedRow(params.rowNode)) {
      return false;
    }
    if (!params.colDef.editable) {
      return false;
    }
    if (!params.colDef.renderEditCell) {
      return false;
    }
    if (isCellEditableProp) {
      return isCellEditableProp(params);
    }
    return true;
  }, [isCellEditableProp]);
  const maybeDebounce = (id, field, debounceMs, callback) => {
    if (!debounceMs) {
      callback();
      return;
    }
    if (!debounceMap.current[id]) {
      debounceMap.current[id] = {};
    }
    if (debounceMap.current[id][field]) {
      const [timeout2] = debounceMap.current[id][field];
      clearTimeout(timeout2);
    }
    const runImmediately = () => {
      const [timeout2] = debounceMap.current[id][field];
      clearTimeout(timeout2);
      callback();
      delete debounceMap.current[id][field];
    };
    const timeout = setTimeout(() => {
      callback();
      delete debounceMap.current[id][field];
    }, debounceMs);
    debounceMap.current[id][field] = [timeout, runImmediately];
  };
  React148.useEffect(() => {
    const debounces = debounceMap.current;
    return () => {
      Object.entries(debounces).forEach(([id, fields]) => {
        Object.keys(fields).forEach((field) => {
          const [timeout] = debounces[id][field];
          clearTimeout(timeout);
          delete debounces[id][field];
        });
      });
    };
  }, []);
  const runPendingEditCellValueMutation = React148.useCallback((id, field) => {
    if (!debounceMap.current[id]) {
      return;
    }
    if (!field) {
      Object.keys(debounceMap.current[id]).forEach((debouncedField) => {
        const [, runCallback] = debounceMap.current[id][debouncedField];
        runCallback();
      });
    } else if (debounceMap.current[id][field]) {
      const [, runCallback] = debounceMap.current[id][field];
      runCallback();
    }
  }, []);
  const setEditCellValue = React148.useCallback((params) => {
    const {
      id,
      field,
      debounceMs
    } = params;
    return new Promise((resolve) => {
      maybeDebounce(id, field, debounceMs, async () => {
        const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef2.current.setRowEditingEditCellValue : apiRef2.current.setCellEditingEditCellValue;
        if (apiRef2.current.getCellMode(id, field) === GridCellModes.Edit) {
          const result = await setEditCellValueToCall(params);
          resolve(result);
        }
      });
    });
  }, [apiRef2, props.editMode]);
  const getRowWithUpdatedValues = React148.useCallback((id, field) => {
    return props.editMode === GridEditModes.Cell ? apiRef2.current.getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef2.current.getRowWithUpdatedValuesFromRowEditing(id);
  }, [apiRef2, props.editMode]);
  const getEditCellMeta = React148.useCallback((id, field) => {
    var _a;
    const editingState = gridEditRowsStateSelector(apiRef2.current.state);
    return ((_a = editingState[id]) == null ? void 0 : _a[field]) ?? null;
  }, [apiRef2]);
  const editingSharedApi = {
    isCellEditable,
    setEditCellValue,
    getRowWithUpdatedValues,
    unstable_getEditCellMeta: getEditCellMeta
  };
  const editingSharedPrivateApi = {
    runPendingEditCellValueMutation
  };
  useGridApiMethod2(apiRef2, editingSharedApi, "public");
  useGridApiMethod2(apiRef2, editingSharedPrivateApi, "private");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js
init_extends();
var React149 = __toESM(require_react());
var rowsStateInitializer2 = (state, props, apiRef2) => {
  apiRef2.current.caches.rows = createRowsInternalCache({
    rows: props.rows,
    getRowId: props.getRowId,
    loading: props.loading,
    rowCount: props.rowCount
  });
  return _extends({}, state, {
    rows: getRowsStateFromCache({
      apiRef: apiRef2,
      rowCountProp: props.rowCount,
      loadingProp: props.loading,
      previousTree: null,
      previousTreeDepths: null
    })
  });
};
var useGridRows2 = (apiRef2, props) => {
  if (true) {
    try {
      Object.freeze(props.rows);
    } catch (error) {
    }
  }
  const logger = useGridLogger(apiRef2, "useGridRows");
  const currentPage = useGridVisibleRows2(apiRef2, props);
  const lastUpdateMs = React149.useRef(Date.now());
  const lastRowCount = React149.useRef(props.rowCount);
  const timeout = useTimeout();
  const getRow = React149.useCallback((id) => {
    const model = gridRowsLookupSelector(apiRef2)[id];
    if (model) {
      return model;
    }
    const node = apiRef2.current.getRowNode(id);
    if (node && isAutoGeneratedRow(node)) {
      return {
        [GRID_ID_AUTOGENERATED]: id
      };
    }
    return null;
  }, [apiRef2]);
  const getRowIdProp = props.getRowId;
  const getRowId = React149.useCallback((row) => {
    if (GRID_ID_AUTOGENERATED in row) {
      return row[GRID_ID_AUTOGENERATED];
    }
    if (getRowIdProp) {
      return getRowIdProp(row);
    }
    return row.id;
  }, [getRowIdProp]);
  const lookup = React149.useMemo(() => currentPage.rows.reduce((acc, {
    id
  }, index) => {
    acc[id] = index;
    return acc;
  }, {}), [currentPage.rows]);
  const throttledRowsChange = React149.useCallback(({
    cache: cache2,
    throttle: throttle2
  }) => {
    const run = () => {
      lastUpdateMs.current = Date.now();
      apiRef2.current.setState((state) => _extends({}, state, {
        rows: getRowsStateFromCache({
          apiRef: apiRef2,
          rowCountProp: props.rowCount,
          loadingProp: props.loading,
          previousTree: gridRowTreeSelector2(apiRef2),
          previousTreeDepths: gridRowTreeDepthsSelector(apiRef2)
        })
      }));
      apiRef2.current.publishEvent("rowsSet");
      apiRef2.current.forceUpdate();
    };
    timeout.clear();
    apiRef2.current.caches.rows = cache2;
    if (!throttle2) {
      run();
      return;
    }
    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);
    if (throttleRemainingTimeMs > 0) {
      timeout.start(throttleRemainingTimeMs, run);
      return;
    }
    run();
  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef2, timeout]);
  const setRows = React149.useCallback((rows) => {
    logger.debug(`Updating all rows, new length ${rows.length}`);
    const cache2 = createRowsInternalCache({
      rows,
      getRowId: props.getRowId,
      loading: props.loading,
      rowCount: props.rowCount
    });
    const prevCache = apiRef2.current.caches.rows;
    cache2.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;
    throttledRowsChange({
      cache: cache2,
      throttle: true
    });
  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef2]);
  const updateRows = React149.useCallback((updates) => {
    if (props.signature === GridSignature.DataGrid && updates.length > 1) {
      throw new Error(["MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
    }
    const nonPinnedRowsUpdates = [];
    updates.forEach((update) => {
      const id = getRowIdFromRowModel(update, props.getRowId, "A row was provided without id when calling updateRows():");
      const rowNode = apiRef2.current.getRowNode(id);
      if ((rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
        const pinnedRowsCache = apiRef2.current.caches.pinnedRows;
        const prevModel = pinnedRowsCache.idLookup[id];
        if (prevModel) {
          pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);
        }
      } else {
        nonPinnedRowsUpdates.push(update);
      }
    });
    const cache2 = updateCacheWithNewRows({
      updates: nonPinnedRowsUpdates,
      getRowId: props.getRowId,
      previousCache: apiRef2.current.caches.rows
    });
    throttledRowsChange({
      cache: cache2,
      throttle: true
    });
  }, [props.signature, props.getRowId, throttledRowsChange, apiRef2]);
  const getRowModels = React149.useCallback(() => {
    const dataRows = gridDataRowIdsSelector(apiRef2);
    const idRowsLookup = gridRowsLookupSelector(apiRef2);
    return new Map(dataRows.map((id) => [id, idRowsLookup[id] ?? {}]));
  }, [apiRef2]);
  const getRowsCount = React149.useCallback(() => gridRowCountSelector(apiRef2), [apiRef2]);
  const getAllRowIds = React149.useCallback(() => gridDataRowIdsSelector(apiRef2), [apiRef2]);
  const getRowIndexRelativeToVisibleRows = React149.useCallback((id) => lookup[id], [lookup]);
  const setRowChildrenExpansion = React149.useCallback((id, isExpanded) => {
    const currentNode = apiRef2.current.getRowNode(id);
    if (!currentNode) {
      throw new Error(`MUI X: No row with id #${id} found.`);
    }
    if (currentNode.type !== "group") {
      throw new Error("MUI X: Only group nodes can be expanded or collapsed.");
    }
    const newNode = _extends({}, currentNode, {
      childrenExpanded: isExpanded
    });
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        rows: _extends({}, state.rows, {
          tree: _extends({}, state.rows.tree, {
            [id]: newNode
          })
        })
      });
    });
    apiRef2.current.forceUpdate();
    apiRef2.current.publishEvent("rowExpansionChange", newNode);
  }, [apiRef2]);
  const getRowNode = React149.useCallback((id) => gridRowTreeSelector2(apiRef2)[id] ?? null, [apiRef2]);
  const getRowGroupChildren = React149.useCallback(({
    skipAutoGeneratedRows = true,
    groupId,
    applySorting,
    applyFiltering
  }) => {
    const tree = gridRowTreeSelector2(apiRef2);
    let children;
    if (applySorting) {
      const groupNode = tree[groupId];
      if (!groupNode) {
        return [];
      }
      const sortedRowIds = gridSortedRowIdsSelector2(apiRef2);
      children = [];
      const startIndex = sortedRowIds.findIndex((id) => id === groupId) + 1;
      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {
        const id = sortedRowIds[index];
        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {
          children.push(id);
        }
      }
    } else {
      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);
    }
    if (applyFiltering) {
      const filteredRowsLookup = gridFilteredRowsLookupSelector2(apiRef2);
      children = children.filter((childId) => filteredRowsLookup[childId] !== false);
    }
    return children;
  }, [apiRef2]);
  const setRowIndex = React149.useCallback((rowId, targetIndex) => {
    const node = apiRef2.current.getRowNode(rowId);
    if (!node) {
      throw new Error(`MUI X: No row with id #${rowId} found.`);
    }
    if (node.parent !== GRID_ROOT_GROUP_ID2) {
      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);
    }
    if (node.type !== "leaf") {
      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);
    }
    apiRef2.current.setState((state) => {
      const group = gridRowTreeSelector2(state, apiRef2.current.instanceId)[GRID_ROOT_GROUP_ID2];
      const allRows = group.children;
      const oldIndex = allRows.findIndex((row) => row === rowId);
      if (oldIndex === -1 || oldIndex === targetIndex) {
        return state;
      }
      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);
      const updatedRows = [...allRows];
      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
      return _extends({}, state, {
        rows: _extends({}, state.rows, {
          tree: _extends({}, state.rows.tree, {
            [GRID_ROOT_GROUP_ID2]: _extends({}, group, {
              children: updatedRows
            })
          })
        })
      });
    });
    apiRef2.current.publishEvent("rowsSet");
  }, [apiRef2, logger]);
  const replaceRows = React149.useCallback((firstRowToRender, newRows) => {
    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {
      throw new Error(["MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
    }
    if (newRows.length === 0) {
      return;
    }
    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef2);
    if (treeDepth > 1) {
      throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");
    }
    const tree = _extends({}, gridRowTreeSelector2(apiRef2));
    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef2));
    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector2(apiRef2));
    const rootGroup = tree[GRID_ROOT_GROUP_ID2];
    const rootGroupChildren = [...rootGroup.children];
    const seenIds = /* @__PURE__ */ new Set();
    for (let i2 = 0; i2 < newRows.length; i2 += 1) {
      const rowModel = newRows[i2];
      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, "A row was provided without id when calling replaceRows().");
      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i2, 1, rowId);
      if (!seenIds.has(removedRowId)) {
        delete dataRowIdToModelLookup[removedRowId];
        delete dataRowIdToIdLookup[removedRowId];
        delete tree[removedRowId];
      }
      const rowTreeNodeConfig = {
        id: rowId,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID2,
        type: "leaf",
        groupingKey: null
      };
      dataRowIdToModelLookup[rowId] = rowModel;
      dataRowIdToIdLookup[rowId] = rowId;
      tree[rowId] = rowTreeNodeConfig;
      seenIds.add(rowId);
    }
    tree[GRID_ROOT_GROUP_ID2] = _extends({}, rootGroup, {
      children: rootGroupChildren
    });
    const dataRowIds = rootGroupChildren.filter((childId) => {
      var _a;
      return ((_a = tree[childId]) == null ? void 0 : _a.type) === "leaf";
    });
    apiRef2.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;
    apiRef2.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;
    apiRef2.current.setState((state) => _extends({}, state, {
      rows: _extends({}, state.rows, {
        dataRowIdToModelLookup,
        dataRowIdToIdLookup,
        dataRowIds,
        tree
      })
    }));
    apiRef2.current.publishEvent("rowsSet");
  }, [apiRef2, props.signature, props.getRowId]);
  const rowApi = {
    getRow,
    getRowId,
    getRowModels,
    getRowsCount,
    getAllRowIds,
    setRows,
    updateRows,
    getRowNode,
    getRowIndexRelativeToVisibleRows,
    unstable_replaceRows: replaceRows
  };
  const rowProApi = {
    setRowIndex,
    setRowChildrenExpansion,
    getRowGroupChildren
  };
  const groupRows = React149.useCallback(() => {
    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
    let cache2;
    if (apiRef2.current.caches.rows.rowsBeforePartialUpdates === props.rows) {
      cache2 = _extends({}, apiRef2.current.caches.rows, {
        updates: {
          type: "full",
          rows: gridDataRowIdsSelector(apiRef2)
        }
      });
    } else {
      cache2 = createRowsInternalCache({
        rows: props.rows,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
      });
    }
    throttledRowsChange({
      cache: cache2,
      throttle: false
    });
  }, [logger, apiRef2, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);
  const handleStrategyProcessorChange = React149.useCallback((methodName) => {
    if (methodName === "rowTreeCreation") {
      groupRows();
    }
  }, [groupRows]);
  const handleStrategyActivityChange = React149.useCallback(() => {
    if (apiRef2.current.getActiveStrategy("rowTree") !== gridRowGroupingNameSelector(apiRef2)) {
      groupRows();
    }
  }, [apiRef2, groupRows]);
  useGridApiEventHandler2(apiRef2, "activeStrategyProcessorChange", handleStrategyProcessorChange);
  useGridApiEventHandler2(apiRef2, "strategyAvailabilityChange", handleStrategyActivityChange);
  const applyHydrateRowsProcessor = React149.useCallback(() => {
    apiRef2.current.setState((state) => {
      const response = apiRef2.current.unstable_applyPipeProcessors("hydrateRows", {
        tree: gridRowTreeSelector2(state, apiRef2.current.instanceId),
        treeDepths: gridRowTreeDepthsSelector(state, apiRef2.current.instanceId),
        dataRowIds: gridDataRowIdsSelector(state, apiRef2.current.instanceId),
        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef2.current.instanceId),
        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector2(state, apiRef2.current.instanceId)
      });
      return _extends({}, state, {
        rows: _extends({}, state.rows, response, {
          totalTopLevelRowCount: getTopLevelRowCount({
            tree: response.tree,
            rowCountProp: props.rowCount
          })
        })
      });
    });
    apiRef2.current.publishEvent("rowsSet");
    apiRef2.current.forceUpdate();
  }, [apiRef2, props.rowCount]);
  useGridRegisterPipeApplier(apiRef2, "hydrateRows", applyHydrateRowsProcessor);
  useGridApiMethod2(apiRef2, rowApi, "public");
  useGridApiMethod2(apiRef2, rowProApi, props.signature === GridSignature.DataGrid ? "private" : "public");
  const isFirstRender = React149.useRef(true);
  React149.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    let isRowCountPropUpdated = false;
    if (props.rowCount !== lastRowCount.current) {
      isRowCountPropUpdated = true;
      lastRowCount.current = props.rowCount;
    }
    const areNewRowsAlreadyInState = apiRef2.current.caches.rows.rowsBeforePartialUpdates === props.rows;
    const isNewLoadingAlreadyInState = apiRef2.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;
    const isNewRowCountAlreadyInState = apiRef2.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;
    if (areNewRowsAlreadyInState) {
      if (!isNewLoadingAlreadyInState) {
        apiRef2.current.setState((state) => _extends({}, state, {
          rows: _extends({}, state.rows, {
            loading: props.loading
          })
        }));
        apiRef2.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;
        apiRef2.current.forceUpdate();
      }
      if (!isNewRowCountAlreadyInState) {
        apiRef2.current.setState((state) => _extends({}, state, {
          rows: _extends({}, state.rows, {
            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),
            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)
          })
        }));
        apiRef2.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;
        apiRef2.current.forceUpdate();
      }
      if (!isRowCountPropUpdated) {
        return;
      }
    }
    logger.debug(`Updating all rows, new length ${props.rows.length}`);
    throttledRowsChange({
      cache: createRowsInternalCache({
        rows: props.rows,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
      }),
      throttle: false
    });
  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef2]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js
init_extends();
var createFlatRowTree = (rows) => {
  const tree = {
    [GRID_ROOT_GROUP_ID2]: _extends({}, buildRootGroup(), {
      children: rows
    })
  };
  for (let i2 = 0; i2 < rows.length; i2 += 1) {
    const rowId = rows[i2];
    tree[rowId] = {
      id: rowId,
      depth: 0,
      parent: GRID_ROOT_GROUP_ID2,
      type: "leaf",
      groupingKey: null
    };
  }
  return {
    groupingName: GRID_DEFAULT_STRATEGY,
    tree,
    treeDepths: {
      0: rows.length
    },
    dataRowIds: rows
  };
};
var updateFlatRowTree = ({
  previousTree,
  actions
}) => {
  const tree = _extends({}, previousTree);
  const idsToRemoveFromRootGroup = {};
  for (let i2 = 0; i2 < actions.remove.length; i2 += 1) {
    const idToDelete = actions.remove[i2];
    idsToRemoveFromRootGroup[idToDelete] = true;
    delete tree[idToDelete];
  }
  for (let i2 = 0; i2 < actions.insert.length; i2 += 1) {
    const idToInsert = actions.insert[i2];
    tree[idToInsert] = {
      id: idToInsert,
      depth: 0,
      parent: GRID_ROOT_GROUP_ID2,
      type: "leaf",
      groupingKey: null
    };
  }
  const rootGroup = tree[GRID_ROOT_GROUP_ID2];
  let rootGroupChildren = [...rootGroup.children, ...actions.insert];
  if (Object.values(idsToRemoveFromRootGroup).length) {
    rootGroupChildren = rootGroupChildren.filter((id) => !idsToRemoveFromRootGroup[id]);
  }
  tree[GRID_ROOT_GROUP_ID2] = _extends({}, rootGroup, {
    children: rootGroupChildren
  });
  return {
    groupingName: GRID_DEFAULT_STRATEGY,
    tree,
    treeDepths: {
      0: rootGroupChildren.length
    },
    dataRowIds: rootGroupChildren
  };
};
var flatRowTreeCreationMethod = (params) => {
  if (params.updates.type === "full") {
    return createFlatRowTree(params.updates.rows);
  }
  return updateFlatRowTree({
    previousTree: params.previousTree,
    actions: params.updates.actions
  });
};
var useGridRowsPreProcessors2 = (apiRef2) => {
  useGridRegisterStrategyProcessor2(apiRef2, GRID_DEFAULT_STRATEGY, "rowTreeCreation", flatRowTreeCreationMethod);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js
init_extends();
var React152 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js
init_extends();
var React151 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/internals/utils/computeSlots.js
init_extends();
function computeSlots2({
  defaultSlots: defaultSlots3,
  slots
}) {
  const overrides = slots;
  if (!overrides || Object.keys(overrides).length === 0) {
    return defaultSlots3;
  }
  const result = _extends({}, defaultSlots3);
  Object.keys(overrides).forEach((key) => {
    const k2 = key;
    if (overrides[k2] !== void 0) {
      result[k2] = overrides[k2];
    }
  });
  return result;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/internals/utils/useProps.js
init_extends();
var React150 = __toESM(require_react());
function groupForwardedProps(props) {
  const keys = Object.keys(props);
  if (!keys.some((key) => key.startsWith("aria-") || key.startsWith("data-"))) {
    return props;
  }
  const newProps = {};
  const forwardedProps = props.forwardedProps ?? {};
  for (let i2 = 0; i2 < keys.length; i2 += 1) {
    const key = keys[i2];
    if (key.startsWith("aria-") || key.startsWith("data-")) {
      forwardedProps[key] = props[key];
    } else {
      newProps[key] = props[key];
    }
  }
  newProps.forwardedProps = forwardedProps;
  return newProps;
}
function useProps2(allProps) {
  return React150.useMemo(() => {
    const themedProps = _extends({}, (_objectDestructuringEmpty(allProps), allProps));
    return groupForwardedProps(themedProps);
  }, [allProps]);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/internals/utils/propValidation.js
var propValidatorsDataGrid2 = [(props) => props.autoPageSize && props.autoHeight && ["MUI X: `<DataGrid autoPageSize={true} autoHeight={true} />` are not valid props.", "You cannot use both the `autoPageSize` and `autoHeight` props at the same time because `autoHeight` scales the height of the Data Grid according to the `pageSize`.", "", "Please remove one of these two props."].join("\n") || void 0, (props) => props.paginationMode === "client" && props.paginationMeta != null && ['MUI X: Usage of the `paginationMeta` prop with client-side pagination (`paginationMode="client"`) has no effect.', '`paginationMeta` is only meant to be used with `paginationMode="server"`.'].join("\n") || void 0, (props) => props.signature === GridSignature.DataGrid && props.paginationMode === "client" && isNumber2(props.rowCount) && ['MUI X: Usage of the `rowCount` prop with client side pagination (`paginationMode="client"`) has no effect.', '`rowCount` is only meant to be used with `paginationMode="server"`.'].join("\n") || void 0, (props) => props.paginationMode === "server" && props.rowCount == null && ["MUI X: The `rowCount` prop must be passed using `paginationMode='server'`", "For more detail, see http://mui.com/components/data-grid/pagination/#index-based-pagination"].join("\n") || void 0];
var warnedOnceCache = /* @__PURE__ */ new Set();
function warnOnce(message) {
  if (!warnedOnceCache.has(message)) {
    console.error(message);
    warnedOnceCache.add(message);
  }
}
function validateProps2(props, validators) {
  validators.forEach((validator) => {
    const warning = validator(props);
    if (warning) {
      warnOnce(warning);
    }
  });
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js
var DATA_GRID_FORCED_PROPS = {
  disableMultipleColumnsFiltering: true,
  disableMultipleColumnsSorting: true,
  throttleRowsMs: void 0,
  hideFooterRowCount: false,
  pagination: true,
  checkboxSelectionVisibleOnly: false,
  disableColumnReorder: true,
  keepColumnPositionIfDraggedOutside: false,
  signature: "DataGrid"
};
var DATA_GRID_PROPS_DEFAULT_VALUES = {
  autoHeight: false,
  autoPageSize: false,
  checkboxSelection: false,
  checkboxSelectionVisibleOnly: false,
  columnBufferPx: 150,
  rowBufferPx: 150,
  rows: [],
  rowSelection: true,
  disableColumnFilter: false,
  disableColumnMenu: false,
  disableColumnSelector: false,
  disableDensitySelector: false,
  disableEval: false,
  disableMultipleColumnsFiltering: false,
  disableMultipleRowSelection: false,
  disableColumnSorting: false,
  disableMultipleColumnsSorting: false,
  disableRowSelectionOnClick: false,
  disableVirtualization: false,
  editMode: GridEditModes.Cell,
  filterMode: "client",
  filterDebounceMs: 150,
  columnHeaderHeight: 56,
  hideFooter: false,
  hideFooterPagination: false,
  hideFooterRowCount: false,
  hideFooterSelectedRowCount: false,
  ignoreDiacritics: false,
  logger: console,
  logLevel: false ? "error" : "warn",
  pagination: false,
  paginationMode: "client",
  rowHeight: 52,
  resizeThrottleMs: 60,
  pageSizeOptions: [25, 50, 100],
  rowSpacingType: "margin",
  showCellVerticalBorder: false,
  showColumnVerticalBorder: false,
  sortingOrder: ["asc", "desc", null],
  sortingMode: "client",
  throttleRowsMs: 0,
  disableColumnReorder: false,
  disableColumnResize: false,
  keepNonExistentRowsSelected: false,
  keepColumnPositionIfDraggedOutside: false,
  ignoreValueFormatterDuringExport: false,
  clipboardCopyCellDelimiter: "	",
  rowPositionsDebounceMs: 166,
  autosizeOnMount: false,
  disableAutosize: false
};
var defaultSlots = DATA_GRID_DEFAULT_SLOTS_COMPONENTS;
var useDataGridProps = (inProps) => {
  const themedProps = useProps2(
    // eslint-disable-next-line material-ui/mui-name-matches-component-name
    useThemeProps({
      props: inProps,
      name: "MuiDataGrid"
    })
  );
  const localeText = React151.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT2, themedProps.localeText), [themedProps.localeText]);
  const slots = React151.useMemo(() => computeSlots2({
    defaultSlots,
    slots: themedProps.slots
  }), [themedProps.slots]);
  return React151.useMemo(() => _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, themedProps, {
    localeText,
    slots
  }, DATA_GRID_FORCED_PROPS), [themedProps, localeText, slots]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js
var rowsMetaStateInitializer2 = (state) => _extends({}, state, {
  rowsMeta: {
    currentPageTotalHeight: 0,
    positions: []
  }
});
var warnedOnceInvalidRowHeight = false;
var getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {
  if (typeof rowHeightProp === "number" && rowHeightProp > 0) {
    return rowHeightProp;
  }
  if (!warnedOnceInvalidRowHeight && typeof rowHeightProp !== "undefined" && rowHeightProp !== null) {
    console.warn(warningMessage);
    warnedOnceInvalidRowHeight = true;
  }
  return defaultRowHeight;
};
var rowHeightWarning = [`MUI X: The \`rowHeight\` prop should be a number greater than 0.`, `The default value will be used instead.`].join("\n");
var getRowHeightWarning = [`MUI X: The \`getRowHeight\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join("\n");
var useGridRowsMeta2 = (apiRef2, props) => {
  const {
    getRowHeight: getRowHeightProp,
    getRowSpacing,
    getEstimatedRowHeight
  } = props;
  const rowsHeightLookup = React152.useRef(/* @__PURE__ */ Object.create(null));
  const lastMeasuredRowIndex = React152.useRef(-1);
  const hasRowWithAutoHeight = React152.useRef(false);
  const densityFactor = useGridSelector2(apiRef2, gridDensityFactorSelector);
  const filterModel = useGridSelector2(apiRef2, gridFilterModelSelector);
  const paginationState = useGridSelector2(apiRef2, gridPaginationSelector);
  const sortModel = useGridSelector2(apiRef2, gridSortModelSelector);
  const currentPage = useGridVisibleRows2(apiRef2, props);
  const pinnedRows = useGridSelector2(apiRef2, gridPinnedRowsSelector);
  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);
  const rowHeight = Math.floor(validRowHeight * densityFactor);
  const hydrateRowsMeta = React152.useCallback(() => {
    var _a, _b;
    hasRowWithAutoHeight.current = false;
    const calculateRowProcessedSizes = (row) => {
      if (!rowsHeightLookup.current[row.id]) {
        rowsHeightLookup.current[row.id] = {
          sizes: {
            baseCenter: rowHeight
          },
          isResized: false,
          autoHeight: false,
          needsFirstMeasurement: true
          // Assume all rows will need to be measured by default
        };
      }
      const {
        isResized,
        needsFirstMeasurement,
        sizes
      } = rowsHeightLookup.current[row.id];
      let baseRowHeight = typeof rowHeight === "number" && rowHeight > 0 ? rowHeight : 52;
      const existingBaseRowHeight = sizes.baseCenter;
      if (isResized) {
        baseRowHeight = existingBaseRowHeight;
      } else if (getRowHeightProp) {
        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {
          densityFactor
        }));
        if (rowHeightFromUser === "auto") {
          if (needsFirstMeasurement) {
            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {
              densityFactor
            })) : rowHeight;
            baseRowHeight = estimatedRowHeight ?? rowHeight;
          } else {
            baseRowHeight = existingBaseRowHeight;
          }
          hasRowWithAutoHeight.current = true;
          rowsHeightLookup.current[row.id].autoHeight = true;
        } else {
          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);
          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
          rowsHeightLookup.current[row.id].autoHeight = false;
        }
      } else {
        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
      }
      const initialHeights = {
        baseCenter: baseRowHeight
      };
      if (getRowSpacing) {
        const indexRelativeToCurrentPage = apiRef2.current.getRowIndexRelativeToVisibleRows(row.id);
        const spacing = getRowSpacing(_extends({}, row, {
          isFirstVisible: indexRelativeToCurrentPage === 0,
          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
          indexRelativeToCurrentPage
        }));
        initialHeights.spacingTop = spacing.top ?? 0;
        initialHeights.spacingBottom = spacing.bottom ?? 0;
      }
      const processedSizes = apiRef2.current.unstable_applyPipeProcessors("rowHeight", initialHeights, row);
      rowsHeightLookup.current[row.id].sizes = processedSizes;
      return processedSizes;
    };
    const positions = [];
    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {
      positions.push(acc);
      let otherSizes = 0;
      const processedSizes = calculateRowProcessedSizes(row);
      for (const key in processedSizes) {
        const value = processedSizes[key];
        if (key !== "baseCenter") {
          otherSizes += value;
        }
      }
      return acc + processedSizes.baseCenter + otherSizes;
    }, 0);
    (_a = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a.forEach((row) => {
      calculateRowProcessedSizes(row);
    });
    (_b = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b.forEach((row) => {
      calculateRowProcessedSizes(row);
    });
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        rowsMeta: {
          currentPageTotalHeight,
          positions
        }
      });
    });
    if (!hasRowWithAutoHeight.current) {
      lastMeasuredRowIndex.current = Infinity;
    }
    apiRef2.current.forceUpdate();
  }, [apiRef2, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);
  const getRowHeight = React152.useCallback((rowId) => {
    const height = rowsHeightLookup.current[rowId];
    return height ? height.sizes.baseCenter : rowHeight;
  }, [rowHeight]);
  const getRowInternalSizes = (rowId) => {
    var _a;
    return (_a = rowsHeightLookup.current[rowId]) == null ? void 0 : _a.sizes;
  };
  const setRowHeight = React152.useCallback((id, height) => {
    rowsHeightLookup.current[id].sizes.baseCenter = height;
    rowsHeightLookup.current[id].isResized = true;
    rowsHeightLookup.current[id].needsFirstMeasurement = false;
    hydrateRowsMeta();
  }, [hydrateRowsMeta]);
  const debouncedHydrateRowsMeta = React152.useMemo(() => debounce(hydrateRowsMeta, props.rowPositionsDebounceMs), [hydrateRowsMeta, props.rowPositionsDebounceMs]);
  const storeMeasuredRowHeight = React152.useCallback((id, height) => {
    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {
      return;
    }
    const needsHydration = rowsHeightLookup.current[id].sizes.baseCenter !== height;
    rowsHeightLookup.current[id].needsFirstMeasurement = false;
    rowsHeightLookup.current[id].sizes.baseCenter = height;
    if (needsHydration) {
      debouncedHydrateRowsMeta();
    }
  }, [debouncedHydrateRowsMeta]);
  const rowHasAutoHeight = React152.useCallback((id) => {
    var _a;
    return ((_a = rowsHeightLookup.current[id]) == null ? void 0 : _a.autoHeight) || false;
  }, []);
  const getLastMeasuredRowIndex = React152.useCallback(() => {
    return lastMeasuredRowIndex.current;
  }, []);
  const setLastMeasuredRowIndex = React152.useCallback((index) => {
    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {
      lastMeasuredRowIndex.current = index;
    }
  }, []);
  const resetRowHeights = React152.useCallback(() => {
    rowsHeightLookup.current = {};
    hydrateRowsMeta();
  }, [hydrateRowsMeta]);
  React152.useEffect(() => {
    hydrateRowsMeta();
  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);
  useGridRegisterPipeApplier(apiRef2, "rowHeight", hydrateRowsMeta);
  const rowsMetaApi = {
    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,
    unstable_getRowHeight: getRowHeight,
    unstable_getRowInternalSizes: getRowInternalSizes,
    unstable_setRowHeight: setRowHeight,
    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,
    resetRowHeights
  };
  const rowsMetaPrivateApi = {
    getLastMeasuredRowIndex,
    rowHasAutoHeight
  };
  useGridApiMethod2(apiRef2, rowsMetaApi, "public");
  useGridApiMethod2(apiRef2, rowsMetaPrivateApi, "private");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/headerFiltering/useGridHeaderFiltering.js
init_extends();
var React153 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js
init_extends();
var React154 = __toESM(require_react());
var getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {
  if (selectionModelProp == null) {
    return selectionModelProp;
  }
  if (Array.isArray(selectionModelProp)) {
    return selectionModelProp;
  }
  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {
    return prevSelectionModel;
  }
  return [selectionModelProp];
};
var rowSelectionStateInitializer2 = (state, props) => _extends({}, state, {
  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []
});
var useGridRowSelection2 = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridSelection");
  const runIfRowSelectionIsEnabled = (callback) => (...args) => {
    if (props.rowSelection) {
      callback(...args);
    }
  };
  const propRowSelectionModel = React154.useMemo(() => {
    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef2.current.state));
  }, [apiRef2, props.rowSelectionModel]);
  const lastRowToggled = React154.useRef(null);
  apiRef2.current.registerControlState({
    stateId: "rowSelection",
    propModel: propRowSelectionModel,
    propOnChange: props.onRowSelectionModelChange,
    stateSelector: gridRowSelectionStateSelector,
    changeEvent: "rowSelectionChange"
  });
  const {
    checkboxSelection,
    disableRowSelectionOnClick,
    isRowSelectable: propIsRowSelectable
  } = props;
  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);
  const visibleRows = useGridVisibleRows2(apiRef2, props);
  const expandMouseRowRangeSelection = React154.useCallback((id) => {
    let endId = id;
    const startId = lastRowToggled.current ?? id;
    const isSelected = apiRef2.current.isRowSelected(id);
    if (isSelected) {
      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef2);
      const startIndex = visibleRowIds.findIndex((rowId) => rowId === startId);
      const endIndex = visibleRowIds.findIndex((rowId) => rowId === endId);
      if (startIndex === endIndex) {
        return;
      }
      if (startIndex > endIndex) {
        endId = visibleRowIds[endIndex + 1];
      } else {
        endId = visibleRowIds[endIndex - 1];
      }
    }
    lastRowToggled.current = id;
    apiRef2.current.selectRowRange({
      startId,
      endId
    }, !isSelected);
  }, [apiRef2]);
  const setRowSelectionModel = React154.useCallback((model) => {
    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {
      throw new Error(["MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join("\n"));
    }
    const currentModel = gridRowSelectionStateSelector(apiRef2.current.state);
    if (currentModel !== model) {
      logger.debug(`Setting selection model`);
      apiRef2.current.setState((state) => _extends({}, state, {
        rowSelection: props.rowSelection ? model : []
      }));
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);
  const isRowSelected = React154.useCallback((id) => gridRowSelectionStateSelector(apiRef2.current.state).includes(id), [apiRef2]);
  const isRowSelectable = React154.useCallback((id) => {
    if (propIsRowSelectable && !propIsRowSelectable(apiRef2.current.getRowParams(id))) {
      return false;
    }
    const rowNode = apiRef2.current.getRowNode(id);
    if ((rowNode == null ? void 0 : rowNode.type) === "footer" || (rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
      return false;
    }
    return true;
  }, [apiRef2, propIsRowSelectable]);
  const getSelectedRows = React154.useCallback(() => selectedGridRowsSelector(apiRef2), [apiRef2]);
  const selectRow = React154.useCallback((id, isSelected = true, resetSelection = false) => {
    if (!apiRef2.current.isRowSelectable(id)) {
      return;
    }
    lastRowToggled.current = id;
    if (resetSelection) {
      logger.debug(`Setting selection for row ${id}`);
      apiRef2.current.setRowSelectionModel(isSelected ? [id] : []);
    } else {
      logger.debug(`Toggling selection for row ${id}`);
      const selection = gridRowSelectionStateSelector(apiRef2.current.state);
      const newSelection = selection.filter((el) => el !== id);
      if (isSelected) {
        newSelection.push(id);
      }
      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
      if (isSelectionValid) {
        apiRef2.current.setRowSelectionModel(newSelection);
      }
    }
  }, [apiRef2, logger, canHaveMultipleSelection]);
  const selectRows = React154.useCallback((ids, isSelected = true, resetSelection = false) => {
    logger.debug(`Setting selection for several rows`);
    const selectableIds = ids.filter((id) => apiRef2.current.isRowSelectable(id));
    let newSelection;
    if (resetSelection) {
      newSelection = isSelected ? selectableIds : [];
    } else {
      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef2));
      selectableIds.forEach((id) => {
        if (isSelected) {
          selectionLookup[id] = id;
        } else {
          delete selectionLookup[id];
        }
      });
      newSelection = Object.values(selectionLookup);
    }
    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
    if (isSelectionValid) {
      apiRef2.current.setRowSelectionModel(newSelection);
    }
  }, [apiRef2, logger, canHaveMultipleSelection]);
  const selectRowRange = React154.useCallback(({
    startId,
    endId
  }, isSelected = true, resetSelection = false) => {
    if (!apiRef2.current.getRow(startId) || !apiRef2.current.getRow(endId)) {
      return;
    }
    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);
    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef2);
    const startIndex = allPagesRowIds.indexOf(startId);
    const endIndex = allPagesRowIds.indexOf(endId);
    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];
    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);
    apiRef2.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
  }, [apiRef2, logger]);
  const selectionPublicApi = {
    selectRow,
    setRowSelectionModel,
    getSelectedRows,
    isRowSelected,
    isRowSelectable
  };
  const selectionPrivateApi = {
    selectRows,
    selectRowRange
  };
  useGridApiMethod2(apiRef2, selectionPublicApi, "public");
  useGridApiMethod2(apiRef2, selectionPrivateApi, props.signature === GridSignature.DataGrid ? "private" : "public");
  const removeOutdatedSelection = React154.useCallback(() => {
    if (props.keepNonExistentRowsSelected) {
      return;
    }
    const currentSelection = gridRowSelectionStateSelector(apiRef2.current.state);
    const rowsLookup = gridRowsLookupSelector(apiRef2);
    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef2));
    let hasChanged = false;
    currentSelection.forEach((id) => {
      if (!rowsLookup[id]) {
        delete selectionLookup[id];
        hasChanged = true;
      }
    });
    if (hasChanged) {
      apiRef2.current.setRowSelectionModel(Object.values(selectionLookup));
    }
  }, [apiRef2, props.keepNonExistentRowsSelected]);
  const handleSingleRowSelection = React154.useCallback((id, event) => {
    const hasCtrlKey = event.metaKey || event.ctrlKey;
    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);
    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
    const isSelected = apiRef2.current.isRowSelected(id);
    if (resetSelection) {
      apiRef2.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);
    } else {
      apiRef2.current.selectRow(id, !isSelected, false);
    }
  }, [apiRef2, canHaveMultipleSelection, checkboxSelection]);
  const handleRowClick = React154.useCallback((params, event) => {
    var _a;
    if (disableRowSelectionOnClick) {
      return;
    }
    const field = (_a = event.target.closest(`.${gridClasses2.cell}`)) == null ? void 0 : _a.getAttribute("data-field");
    if (field === GRID_CHECKBOX_SELECTION_COL_DEF2.field) {
      return;
    }
    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD2) {
      return;
    }
    if (field) {
      const column = apiRef2.current.getColumn(field);
      if ((column == null ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE2) {
        return;
      }
    }
    const rowNode = apiRef2.current.getRowNode(params.id);
    if (rowNode.type === "pinnedRow") {
      return;
    }
    if (event.shiftKey && canHaveMultipleSelection) {
      expandMouseRowRangeSelection(params.id);
    } else {
      handleSingleRowSelection(params.id, event);
    }
  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef2, expandMouseRowRangeSelection, handleSingleRowSelection]);
  const preventSelectionOnShift = React154.useCallback((params, event) => {
    var _a;
    if (canHaveMultipleSelection && event.shiftKey) {
      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();
    }
  }, [canHaveMultipleSelection]);
  const handleRowSelectionCheckboxChange = React154.useCallback((params, event) => {
    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {
      expandMouseRowRangeSelection(params.id);
    } else {
      apiRef2.current.selectRow(params.id, params.value, !canHaveMultipleSelection);
    }
  }, [apiRef2, expandMouseRowRangeSelection, canHaveMultipleSelection]);
  const handleHeaderSelectionCheckboxChange = React154.useCallback((params) => {
    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;
    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef2) : gridExpandedSortedRowIdsSelector(apiRef2);
    const filterModel = gridFilterModelSelector(apiRef2);
    apiRef2.current.selectRows(rowsToBeSelected, params.value, (filterModel == null ? void 0 : filterModel.items.length) > 0);
  }, [apiRef2, props.checkboxSelectionVisibleOnly, props.pagination]);
  const handleCellKeyDown = React154.useCallback((params, event) => {
    if (apiRef2.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {
      return;
    }
    if (isEventTargetInPortal(event)) {
      return;
    }
    if (isNavigationKey2(event.key) && event.shiftKey) {
      const focusCell = gridFocusCellSelector2(apiRef2);
      if (focusCell && focusCell.id !== params.id) {
        event.preventDefault();
        const isNextRowSelected = apiRef2.current.isRowSelected(focusCell.id);
        if (!canHaveMultipleSelection) {
          apiRef2.current.selectRow(focusCell.id, !isNextRowSelected, true);
          return;
        }
        const newRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(focusCell.id);
        const previousRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(params.id);
        let start;
        let end;
        if (newRowIndex > previousRowIndex) {
          if (isNextRowSelected) {
            start = previousRowIndex;
            end = newRowIndex - 1;
          } else {
            start = previousRowIndex;
            end = newRowIndex;
          }
        } else {
          if (isNextRowSelected) {
            start = newRowIndex + 1;
            end = previousRowIndex;
          } else {
            start = newRowIndex;
            end = previousRowIndex;
          }
        }
        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map((row) => row.id);
        apiRef2.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
        return;
      }
    }
    if (event.key === " " && event.shiftKey) {
      event.preventDefault();
      handleSingleRowSelection(params.id, event);
      return;
    }
    if (event.key === "a" && (event.ctrlKey || event.metaKey)) {
      event.preventDefault();
      selectRows(apiRef2.current.getAllRowIds(), true);
    }
  }, [apiRef2, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);
  useGridApiEventHandler2(apiRef2, "sortedRowsSet", runIfRowSelectionIsEnabled(removeOutdatedSelection));
  useGridApiEventHandler2(apiRef2, "rowClick", runIfRowSelectionIsEnabled(handleRowClick));
  useGridApiEventHandler2(apiRef2, "rowSelectionCheckboxChange", runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));
  useGridApiEventHandler2(apiRef2, "headerSelectionCheckboxChange", handleHeaderSelectionCheckboxChange);
  useGridApiEventHandler2(apiRef2, "cellMouseDown", runIfRowSelectionIsEnabled(preventSelectionOnShift));
  useGridApiEventHandler2(apiRef2, "cellKeyDown", runIfRowSelectionIsEnabled(handleCellKeyDown));
  React154.useEffect(() => {
    if (propRowSelectionModel !== void 0) {
      apiRef2.current.setRowSelectionModel(propRowSelectionModel);
    }
  }, [apiRef2, propRowSelectionModel, props.rowSelection]);
  React154.useEffect(() => {
    if (!props.rowSelection) {
      apiRef2.current.setRowSelectionModel([]);
    }
  }, [apiRef2, props.rowSelection]);
  const isStateControlled = propRowSelectionModel != null;
  React154.useEffect(() => {
    if (isStateControlled || !props.rowSelection) {
      return;
    }
    const currentSelection = gridRowSelectionStateSelector(apiRef2.current.state);
    if (isRowSelectable) {
      const newSelection = currentSelection.filter((id) => isRowSelectable(id));
      if (newSelection.length < currentSelection.length) {
        apiRef2.current.setRowSelectionModel(newSelection);
      }
    }
  }, [apiRef2, isRowSelectable, isStateControlled, props.rowSelection]);
  React154.useEffect(() => {
    if (!props.rowSelection || isStateControlled) {
      return;
    }
    const currentSelection = gridRowSelectionStateSelector(apiRef2.current.state);
    if (!canHaveMultipleSelection && currentSelection.length > 1) {
      apiRef2.current.setRowSelectionModel([]);
    }
  }, [apiRef2, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js
init_extends();
var React155 = __toESM(require_react());
init_utils();
var useUtilityClasses42 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  return React155.useMemo(() => {
    const slots = {
      cellCheckbox: ["cellCheckbox"],
      columnHeaderCheckbox: ["columnHeaderCheckbox"]
    };
    return composeClasses(slots, getDataGridUtilityClass2, classes2);
  }, [classes2]);
};
var useGridRowSelectionPreProcessors2 = (apiRef2, props) => {
  const ownerState = {
    classes: props.classes
  };
  const classes2 = useUtilityClasses42(ownerState);
  const updateSelectionColumn = React155.useCallback((columnsState) => {
    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF2, {
      cellClassName: classes2.cellCheckbox,
      headerClassName: classes2.columnHeaderCheckbox,
      headerName: apiRef2.current.getLocaleText("checkboxSelectionHeaderName")
    });
    const shouldHaveSelectionColumn = props.checkboxSelection;
    const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD2] != null;
    if (shouldHaveSelectionColumn && !haveSelectionColumn) {
      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD2] = selectionColumn;
      columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD2, ...columnsState.orderedFields];
    } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {
      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD2];
      columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== GRID_CHECKBOX_SELECTION_FIELD2);
    } else if (shouldHaveSelectionColumn && haveSelectionColumn) {
      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD2] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD2]);
    }
    return columnsState;
  }, [apiRef2, classes2, props.checkboxSelection]);
  useGridRegisterPipeProcessor2(apiRef2, "hydrateColumns", updateSelectionColumn);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js
init_extends();
var React156 = __toESM(require_react());
init_utils();
var sortingStateInitializer2 = (state, props) => {
  var _a, _b;
  const sortModel = props.sortModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.sorting) == null ? void 0 : _b.sortModel) ?? [];
  return _extends({}, state, {
    sorting: {
      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),
      sortedRows: []
    }
  });
};
var useGridSorting2 = (apiRef2, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef2, "useGridSorting");
  apiRef2.current.registerControlState({
    stateId: "sortModel",
    propModel: props.sortModel,
    propOnChange: props.onSortModelChange,
    stateSelector: gridSortModelSelector,
    changeEvent: "sortModelChange"
  });
  const upsertSortModel = React156.useCallback((field, sortItem) => {
    const sortModel = gridSortModelSelector(apiRef2);
    const existingIdx = sortModel.findIndex((c) => c.field === field);
    let newSortModel = [...sortModel];
    if (existingIdx > -1) {
      if ((sortItem == null ? void 0 : sortItem.sort) == null) {
        newSortModel.splice(existingIdx, 1);
      } else {
        newSortModel.splice(existingIdx, 1, sortItem);
      }
    } else {
      newSortModel = [...sortModel, sortItem];
    }
    return newSortModel;
  }, [apiRef2]);
  const createSortItem = React156.useCallback((col, directionOverride) => {
    const sortModel = gridSortModelSelector(apiRef2);
    const existing = sortModel.find((c) => c.field === col.field);
    if (existing) {
      const nextSort = directionOverride === void 0 ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;
      return nextSort === void 0 ? void 0 : _extends({}, existing, {
        sort: nextSort
      });
    }
    return {
      field: col.field,
      sort: directionOverride === void 0 ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder) : directionOverride
    };
  }, [apiRef2, props.sortingOrder]);
  const addColumnMenuItem = React156.useCallback((columnMenuItems, colDef) => {
    if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {
      return columnMenuItems;
    }
    const sortingOrder = colDef.sortingOrder || props.sortingOrder;
    if (sortingOrder.some((item) => !!item)) {
      return [...columnMenuItems, "columnMenuSortItem"];
    }
    return columnMenuItems;
  }, [props.sortingOrder, props.disableColumnSorting]);
  const applySorting = React156.useCallback(() => {
    apiRef2.current.setState((state) => {
      if (props.sortingMode === "server") {
        logger.debug("Skipping sorting rows as sortingMode = server");
        return _extends({}, state, {
          sorting: _extends({}, state.sorting, {
            sortedRows: getTreeNodeDescendants(gridRowTreeSelector2(apiRef2), GRID_ROOT_GROUP_ID2, false)
          })
        });
      }
      const sortModel = gridSortModelSelector(state, apiRef2.current.instanceId);
      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef2);
      const sortedRows = apiRef2.current.applyStrategyProcessor("sorting", {
        sortRowList
      });
      return _extends({}, state, {
        sorting: _extends({}, state.sorting, {
          sortedRows
        })
      });
    });
    apiRef2.current.publishEvent("sortedRowsSet");
    apiRef2.current.forceUpdate();
  }, [apiRef2, logger, props.sortingMode]);
  const setSortModel = React156.useCallback((model) => {
    const currentModel = gridSortModelSelector(apiRef2);
    if (currentModel !== model) {
      logger.debug(`Setting sort model`);
      apiRef2.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));
      apiRef2.current.forceUpdate();
      apiRef2.current.applySorting();
    }
  }, [apiRef2, logger, props.disableMultipleColumnsSorting]);
  const sortColumn = React156.useCallback((field, direction, allowMultipleSorting) => {
    const column = apiRef2.current.getColumn(field);
    const sortItem = createSortItem(column, direction);
    let sortModel;
    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
      sortModel = (sortItem == null ? void 0 : sortItem.sort) == null ? [] : [sortItem];
    } else {
      sortModel = upsertSortModel(column.field, sortItem);
    }
    apiRef2.current.setSortModel(sortModel);
  }, [apiRef2, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);
  const getSortModel = React156.useCallback(() => gridSortModelSelector(apiRef2), [apiRef2]);
  const getSortedRows = React156.useCallback(() => {
    const sortedRows = gridSortedRowEntriesSelector(apiRef2);
    return sortedRows.map((row) => row.model);
  }, [apiRef2]);
  const getSortedRowIds = React156.useCallback(() => gridSortedRowIdsSelector2(apiRef2), [apiRef2]);
  const getRowIdFromRowIndex = React156.useCallback((index) => apiRef2.current.getSortedRowIds()[index], [apiRef2]);
  const sortApi = {
    getSortModel,
    getSortedRows,
    getSortedRowIds,
    getRowIdFromRowIndex,
    setSortModel,
    sortColumn,
    applySorting
  };
  useGridApiMethod2(apiRef2, sortApi, "public");
  const stateExportPreProcessing = React156.useCallback((prevState, context) => {
    var _a2, _b2;
    const sortModelToExport = gridSortModelSelector(apiRef2);
    const shouldExportSortModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.sortModel != null || // Always export if the model has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.sorting) == null ? void 0 : _b2.sortModel) != null || // Export if the model is not empty
      sortModelToExport.length > 0
    );
    if (!shouldExportSortModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      sorting: {
        sortModel: sortModelToExport
      }
    });
  }, [apiRef2, props.sortModel, (_b = (_a = props.initialState) == null ? void 0 : _a.sorting) == null ? void 0 : _b.sortModel]);
  const stateRestorePreProcessing = React156.useCallback((params, context) => {
    var _a2;
    const sortModel = (_a2 = context.stateToRestore.sorting) == null ? void 0 : _a2.sortModel;
    if (sortModel == null) {
      return params;
    }
    apiRef2.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));
    return _extends({}, params, {
      callbacks: [...params.callbacks, apiRef2.current.applySorting]
    });
  }, [apiRef2, props.disableMultipleColumnsSorting]);
  const flatSortingMethod = React156.useCallback((params) => {
    const rowTree = gridRowTreeSelector2(apiRef2);
    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID2];
    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map((childId) => rowTree[childId])) : [...rootGroupNode.children];
    if (rootGroupNode.footerId != null) {
      sortedChildren.push(rootGroupNode.footerId);
    }
    return sortedChildren;
  }, [apiRef2]);
  useGridRegisterPipeProcessor2(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor2(apiRef2, "restoreState", stateRestorePreProcessing);
  useGridRegisterStrategyProcessor2(apiRef2, GRID_DEFAULT_STRATEGY, "sorting", flatSortingMethod);
  const handleColumnHeaderClick = React156.useCallback(({
    field,
    colDef
  }, event) => {
    if (!colDef.sortable || props.disableColumnSorting) {
      return;
    }
    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;
    sortColumn(field, void 0, allowMultipleSorting);
  }, [sortColumn, props.disableColumnSorting]);
  const handleColumnHeaderKeyDown = React156.useCallback(({
    field,
    colDef
  }, event) => {
    if (!colDef.sortable || props.disableColumnSorting) {
      return;
    }
    if (event.key === "Enter" && !event.ctrlKey && !event.metaKey) {
      sortColumn(field, void 0, event.shiftKey);
    }
  }, [sortColumn, props.disableColumnSorting]);
  const handleColumnsChange = React156.useCallback(() => {
    const sortModel = gridSortModelSelector(apiRef2);
    const latestColumns = gridColumnLookupSelector2(apiRef2);
    if (sortModel.length > 0) {
      const newModel = sortModel.filter((sortItem) => latestColumns[sortItem.field]);
      if (newModel.length < sortModel.length) {
        apiRef2.current.setSortModel(newModel);
      }
    }
  }, [apiRef2]);
  const handleStrategyProcessorChange = React156.useCallback((methodName) => {
    if (methodName === "sorting") {
      apiRef2.current.applySorting();
    }
  }, [apiRef2]);
  useGridRegisterPipeProcessor2(apiRef2, "columnMenu", addColumnMenuItem);
  useGridApiEventHandler2(apiRef2, "columnHeaderClick", handleColumnHeaderClick);
  useGridApiEventHandler2(apiRef2, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
  useGridApiEventHandler2(apiRef2, "rowsSet", apiRef2.current.applySorting);
  useGridApiEventHandler2(apiRef2, "columnsChange", handleColumnsChange);
  useGridApiEventHandler2(apiRef2, "activeStrategyProcessorChange", handleStrategyProcessorChange);
  useFirstRender2(() => {
    apiRef2.current.applySorting();
  });
  useEnhancedEffect_default(() => {
    if (props.sortModel !== void 0) {
      apiRef2.current.setSortModel(props.sortModel);
    }
  }, [apiRef2, props.sortModel]);
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js
var React157 = __toESM(require_react());
function scrollIntoView(dimensions) {
  const {
    clientHeight,
    scrollTop,
    offsetHeight,
    offsetTop
  } = dimensions;
  const elementBottom = offsetTop + offsetHeight;
  if (offsetHeight > clientHeight) {
    return offsetTop;
  }
  if (elementBottom - clientHeight > scrollTop) {
    return elementBottom - clientHeight;
  }
  if (offsetTop < scrollTop) {
    return offsetTop;
  }
  return void 0;
}
var useGridScroll2 = (apiRef2, props) => {
  const theme = useTheme();
  const logger = useGridLogger(apiRef2, "useGridScroll");
  const colRef = apiRef2.current.columnHeadersContainerRef;
  const virtualScrollerRef = apiRef2.current.virtualScrollerRef;
  const visibleSortedRows = useGridSelector2(apiRef2, gridExpandedSortedRowEntriesSelector);
  const scrollToIndexes = React157.useCallback((params) => {
    var _a;
    const dimensions = gridDimensionsSelector2(apiRef2.current.state);
    const totalRowCount = gridRowCountSelector(apiRef2);
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
    const scrollToHeader = params.rowIndex == null;
    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
      return false;
    }
    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
    let scrollCoordinates = {};
    if (params.colIndex !== void 0) {
      const columnPositions = gridColumnPositionsSelector(apiRef2);
      let cellWidth;
      if (typeof params.rowIndex !== "undefined") {
        const rowId = (_a = visibleSortedRows[params.rowIndex]) == null ? void 0 : _a.id;
        const cellColSpanInfo = apiRef2.current.unstable_getCellColSpanInfo(rowId, params.colIndex);
        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
          cellWidth = cellColSpanInfo.cellProps.width;
        }
      }
      if (typeof cellWidth === "undefined") {
        cellWidth = visibleColumns[params.colIndex].computedWidth;
      }
      scrollCoordinates.left = scrollIntoView({
        clientHeight: dimensions.viewportInnerSize.width,
        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),
        offsetHeight: cellWidth,
        offsetTop: columnPositions[params.colIndex]
      });
    }
    if (params.rowIndex !== void 0) {
      const rowsMeta = gridRowsMetaSelector(apiRef2.current.state);
      const page = gridPageSelector(apiRef2);
      const pageSize = gridPageSizeSelector(apiRef2);
      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;
      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
      scrollCoordinates.top = scrollIntoView({
        clientHeight: dimensions.viewportInnerSize.height,
        scrollTop: virtualScrollerRef.current.scrollTop,
        offsetHeight: targetOffsetHeight,
        offsetTop: rowsMeta.positions[elementIndex]
      });
    }
    scrollCoordinates = apiRef2.current.unstable_applyPipeProcessors("scrollToIndexes", scrollCoordinates, params);
    if (typeof scrollCoordinates.left !== void 0 || typeof scrollCoordinates.top !== void 0) {
      apiRef2.current.scroll(scrollCoordinates);
      return true;
    }
    return false;
  }, [logger, apiRef2, virtualScrollerRef, props.pagination, visibleSortedRows]);
  const scroll = React157.useCallback((params) => {
    if (virtualScrollerRef.current && params.left !== void 0 && colRef.current) {
      const direction = theme.direction === "rtl" ? -1 : 1;
      colRef.current.scrollLeft = params.left;
      virtualScrollerRef.current.scrollLeft = direction * params.left;
      logger.debug(`Scrolling left: ${params.left}`);
    }
    if (virtualScrollerRef.current && params.top !== void 0) {
      virtualScrollerRef.current.scrollTop = params.top;
      logger.debug(`Scrolling top: ${params.top}`);
    }
    logger.debug(`Scrolling, updating container, and viewport`);
  }, [virtualScrollerRef, theme.direction, colRef, logger]);
  const getScrollPosition = React157.useCallback(() => {
    if (!(virtualScrollerRef == null ? void 0 : virtualScrollerRef.current)) {
      return {
        top: 0,
        left: 0
      };
    }
    return {
      top: virtualScrollerRef.current.scrollTop,
      left: virtualScrollerRef.current.scrollLeft
    };
  }, [virtualScrollerRef]);
  const scrollApi = {
    scroll,
    scrollToIndexes,
    getScrollPosition
  };
  useGridApiMethod2(apiRef2, scrollApi, "public");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/events/useGridEvents.js
function useGridEvents2(apiRef2, props) {
  useGridApiOptionHandler(apiRef2, "columnHeaderClick", props.onColumnHeaderClick);
  useGridApiOptionHandler(apiRef2, "columnHeaderDoubleClick", props.onColumnHeaderDoubleClick);
  useGridApiOptionHandler(apiRef2, "columnHeaderOver", props.onColumnHeaderOver);
  useGridApiOptionHandler(apiRef2, "columnHeaderOut", props.onColumnHeaderOut);
  useGridApiOptionHandler(apiRef2, "columnHeaderEnter", props.onColumnHeaderEnter);
  useGridApiOptionHandler(apiRef2, "columnHeaderLeave", props.onColumnHeaderLeave);
  useGridApiOptionHandler(apiRef2, "cellClick", props.onCellClick);
  useGridApiOptionHandler(apiRef2, "cellDoubleClick", props.onCellDoubleClick);
  useGridApiOptionHandler(apiRef2, "cellKeyDown", props.onCellKeyDown);
  useGridApiOptionHandler(apiRef2, "preferencePanelClose", props.onPreferencePanelClose);
  useGridApiOptionHandler(apiRef2, "preferencePanelOpen", props.onPreferencePanelOpen);
  useGridApiOptionHandler(apiRef2, "menuOpen", props.onMenuOpen);
  useGridApiOptionHandler(apiRef2, "menuClose", props.onMenuClose);
  useGridApiOptionHandler(apiRef2, "rowDoubleClick", props.onRowDoubleClick);
  useGridApiOptionHandler(apiRef2, "rowClick", props.onRowClick);
  useGridApiOptionHandler(apiRef2, "stateChange", props.onStateChange);
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js
init_extends();
var React158 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/throttle.js
function throttle(func, wait = 166) {
  let timeout;
  let lastArgs;
  const later = () => {
    timeout = void 0;
    func(...lastArgs);
  };
  function throttled(...args) {
    lastArgs = args;
    if (timeout === void 0) {
      timeout = setTimeout(later, wait);
    }
  }
  throttled.clear = () => {
    clearTimeout(timeout);
    timeout = void 0;
  };
  return throttled;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js
var EMPTY_SIZE = {
  width: 0,
  height: 0
};
var EMPTY_DIMENSIONS = {
  isReady: false,
  root: EMPTY_SIZE,
  viewportOuterSize: EMPTY_SIZE,
  viewportInnerSize: EMPTY_SIZE,
  contentSize: EMPTY_SIZE,
  minimumSize: EMPTY_SIZE,
  hasScrollX: false,
  hasScrollY: false,
  scrollbarSize: 0,
  headerHeight: 0,
  headerFilterHeight: 0,
  rowWidth: 0,
  rowHeight: 0,
  columnsTotalWidth: 0,
  leftPinnedWidth: 0,
  rightPinnedWidth: 0,
  headersTotalHeight: 0,
  topContainerHeight: 0,
  bottomContainerHeight: 0
};
var dimensionsStateInitializer2 = (state) => {
  const dimensions = EMPTY_DIMENSIONS;
  return _extends({}, state, {
    dimensions
  });
};
function useGridDimensions2(apiRef2, props) {
  const logger = useGridLogger(apiRef2, "useResizeContainer");
  const errorShown = React158.useRef(false);
  const rootDimensionsRef = React158.useRef(EMPTY_SIZE);
  const rowsMeta = useGridSelector2(apiRef2, gridRowsMetaSelector);
  const pinnedColumns = useGridSelector2(apiRef2, gridVisiblePinnedColumnDefinitionsSelector);
  const densityFactor = useGridSelector2(apiRef2, gridDensityFactorSelector);
  const rowHeight = Math.floor(props.rowHeight * densityFactor);
  const headerHeight = Math.floor(props.columnHeaderHeight * densityFactor);
  const headerFilterHeight = Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor);
  const columnsTotalWidth = roundToDecimalPlaces(gridColumnsTotalWidthSelector(apiRef2), 6);
  const headersTotalHeight = getTotalHeaderHeight2(apiRef2, props);
  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);
  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);
  const [savedSize, setSavedSize] = React158.useState();
  const debouncedSetSavedSize = React158.useMemo(() => throttle(setSavedSize, props.resizeThrottleMs), [props.resizeThrottleMs]);
  const previousSize = React158.useRef();
  const getRootDimensions = () => apiRef2.current.state.dimensions;
  const setDimensions = useEventCallback_default((dimensions2) => {
    apiRef2.current.setState((state) => _extends({}, state, {
      dimensions: dimensions2
    }));
  });
  const resize = React158.useCallback(() => {
    var _a, _b;
    const element = apiRef2.current.mainElementRef.current;
    if (!element) {
      return;
    }
    const computedStyle = ownerWindow(element).getComputedStyle(element);
    const height = parseFloat(computedStyle.height) || 0;
    const width = parseFloat(computedStyle.width) || 0;
    const hasHeightChanged = height !== ((_a = previousSize.current) == null ? void 0 : _a.height);
    const hasWidthChanged = width !== ((_b = previousSize.current) == null ? void 0 : _b.width);
    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {
      const size = {
        width,
        height
      };
      apiRef2.current.publishEvent("resize", size);
      previousSize.current = size;
    }
  }, [apiRef2]);
  const getViewportPageSize = React158.useCallback(() => {
    const dimensions2 = gridDimensionsSelector2(apiRef2.current.state);
    if (!dimensions2.isReady) {
      return 0;
    }
    const currentPage = getVisibleRows(apiRef2, {
      pagination: props.pagination,
      paginationMode: props.paginationMode
    });
    if (props.getRowHeight) {
      const renderContext = gridRenderContextSelector(apiRef2);
      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
      return Math.min(viewportPageSize - 1, currentPage.rows.length);
    }
    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions2.viewportInnerSize.height / rowHeight);
    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);
  }, [apiRef2, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);
  const updateDimensions = React158.useCallback(() => {
    var _a, _b;
    const rootElement = apiRef2.current.rootElementRef.current;
    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef2);
    const scrollbarSize = measureScrollbarSize(rootElement, columnsTotalWidth, props.scrollbarSize);
    const topContainerHeight = headersTotalHeight + pinnedRowsHeight.top;
    const bottomContainerHeight = pinnedRowsHeight.bottom;
    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;
    const contentSize = {
      width: nonPinnedColumnsTotalWidth,
      height: rowsMeta.currentPageTotalHeight
    };
    let viewportOuterSize;
    let viewportInnerSize;
    let hasScrollX = false;
    let hasScrollY = false;
    if (props.autoHeight) {
      hasScrollY = false;
      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);
      viewportOuterSize = {
        width: rootDimensionsRef.current.width,
        height: topContainerHeight + bottomContainerHeight + contentSize.height
      };
      viewportInnerSize = {
        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),
        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))
      };
    } else {
      viewportOuterSize = {
        width: rootDimensionsRef.current.width,
        height: rootDimensionsRef.current.height
      };
      viewportInnerSize = {
        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),
        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)
      };
      const content = contentSize;
      const container = viewportInnerSize;
      const hasScrollXIfNoYScrollBar = content.width > container.width;
      const hasScrollYIfNoXScrollBar = content.height > container.height;
      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
        hasScrollY = hasScrollYIfNoXScrollBar;
        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;
        if (hasScrollX) {
          hasScrollY = content.height + scrollbarSize > container.height;
        }
      }
      if (hasScrollY) {
        viewportInnerSize.width -= scrollbarSize;
      }
      if (hasScrollX) {
        viewportInnerSize.height -= scrollbarSize;
      }
    }
    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));
    const minimumSize = {
      width: columnsTotalWidth,
      height: topContainerHeight + contentSize.height + bottomContainerHeight
    };
    const newDimensions = {
      isReady: true,
      root: rootDimensionsRef.current,
      viewportOuterSize,
      viewportInnerSize,
      contentSize,
      minimumSize,
      hasScrollX,
      hasScrollY,
      scrollbarSize,
      headerHeight,
      headerFilterHeight,
      rowWidth,
      rowHeight,
      columnsTotalWidth,
      leftPinnedWidth,
      rightPinnedWidth,
      headersTotalHeight,
      topContainerHeight,
      bottomContainerHeight
    };
    const prevDimensions = apiRef2.current.state.dimensions;
    setDimensions(newDimensions);
    if (newDimensions.viewportInnerSize.width !== prevDimensions.viewportInnerSize.width || newDimensions.viewportInnerSize.height !== prevDimensions.viewportInnerSize.height) {
      apiRef2.current.publishEvent("viewportInnerSizeChange", newDimensions.viewportInnerSize);
    }
    (_b = (_a = apiRef2.current).updateRenderContext) == null ? void 0 : _b.call(_a);
  }, [apiRef2, setDimensions, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, rowHeight, headerHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);
  const apiPublic = {
    resize,
    getRootDimensions
  };
  const apiPrivate = {
    updateDimensions,
    getViewportPageSize
  };
  useGridApiMethod2(apiRef2, apiPublic, "public");
  useGridApiMethod2(apiRef2, apiPrivate, "private");
  useEnhancedEffect_default(() => {
    if (savedSize) {
      updateDimensions();
      apiRef2.current.publishEvent("debouncedResize", rootDimensionsRef.current);
    }
  }, [apiRef2, savedSize, updateDimensions]);
  const root = apiRef2.current.rootElementRef.current;
  const dimensions = apiRef2.current.state.dimensions;
  useEnhancedEffect_default(() => {
    if (!root) {
      return;
    }
    const set = (k2, v) => root.style.setProperty(k2, v);
    set("--DataGrid-width", `${dimensions.viewportOuterSize.width}px`);
    set("--DataGrid-hasScrollX", `${Number(dimensions.hasScrollX)}`);
    set("--DataGrid-hasScrollY", `${Number(dimensions.hasScrollY)}`);
    set("--DataGrid-scrollbarSize", `${dimensions.scrollbarSize}px`);
    set("--DataGrid-rowWidth", `${dimensions.rowWidth}px`);
    set("--DataGrid-columnsTotalWidth", `${dimensions.columnsTotalWidth}px`);
    set("--DataGrid-leftPinnedWidth", `${dimensions.leftPinnedWidth}px`);
    set("--DataGrid-rightPinnedWidth", `${dimensions.rightPinnedWidth}px`);
    set("--DataGrid-headerHeight", `${dimensions.headerHeight}px`);
    set("--DataGrid-headersTotalHeight", `${dimensions.headersTotalHeight}px`);
    set("--DataGrid-topContainerHeight", `${dimensions.topContainerHeight}px`);
    set("--DataGrid-bottomContainerHeight", `${dimensions.bottomContainerHeight}px`);
    set("--height", `${dimensions.rowHeight}px`);
  }, [root, dimensions]);
  const isFirstSizing = React158.useRef(true);
  const handleResize = React158.useCallback((size) => {
    rootDimensionsRef.current = size;
    const isJSDOM2 = /jsdom/.test(window.navigator.userAgent);
    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM2) {
      logger.error(["The parent DOM element of the data grid has an empty height.", "Please make sure that this element has an intrinsic height.", "The grid displays with a height of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
      errorShown.current = true;
    }
    if (size.width === 0 && !errorShown.current && !isJSDOM2) {
      logger.error(["The parent DOM element of the data grid has an empty width.", "Please make sure that this element has an intrinsic width.", "The grid displays with a width of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
      errorShown.current = true;
    }
    if (isFirstSizing.current) {
      setSavedSize(size);
      isFirstSizing.current = false;
      return;
    }
    debouncedSetSavedSize(size);
  }, [props.autoHeight, debouncedSetSavedSize, logger]);
  useEnhancedEffect_default(updateDimensions, [updateDimensions]);
  useGridApiOptionHandler(apiRef2, "sortedRowsSet", updateDimensions);
  useGridApiOptionHandler(apiRef2, "paginationModelChange", updateDimensions);
  useGridApiOptionHandler(apiRef2, "columnsChange", updateDimensions);
  useGridApiEventHandler2(apiRef2, "resize", handleResize);
  useGridApiOptionHandler(apiRef2, "debouncedResize", props.onResize);
}
function measureScrollbarSize(rootElement, columnsTotalWidth, scrollbarSize) {
  if (scrollbarSize !== void 0) {
    return scrollbarSize;
  }
  if (rootElement === null || columnsTotalWidth === 0) {
    return 0;
  }
  const doc = ownerDocument(rootElement);
  const scrollDiv = doc.createElement("div");
  scrollDiv.style.width = "99px";
  scrollDiv.style.height = "99px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.overflow = "scroll";
  scrollDiv.className = "scrollDiv";
  rootElement.appendChild(scrollDiv);
  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  rootElement.removeChild(scrollDiv);
  return size;
}
function roundToDecimalPlaces(value, decimals) {
  return Math.round(value * 10 ** decimals) / 10 ** decimals;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/statePersistence/useGridStatePersistence.js
var React159 = __toESM(require_react());
var useGridStatePersistence2 = (apiRef2) => {
  const exportState = React159.useCallback((params = {}) => {
    const stateToExport = apiRef2.current.unstable_applyPipeProcessors("exportState", {}, params);
    return stateToExport;
  }, [apiRef2]);
  const restoreState = React159.useCallback((stateToRestore) => {
    const response = apiRef2.current.unstable_applyPipeProcessors("restoreState", {
      callbacks: []
    }, {
      stateToRestore
    });
    response.callbacks.forEach((callback) => {
      callback();
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const statePersistenceApi = {
    exportState,
    restoreState
  };
  useGridApiMethod2(apiRef2, statePersistenceApi, "public");
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js
init_extends();
var React160 = __toESM(require_react());
init_utils();
init_useLazyRef();

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/utils/createControllablePromise.js
function createControllablePromise() {
  let resolve;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  promise.resolve = resolve;
  promise.reject = reject;
  return promise;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js
var cachedSupportsTouchActionNone = false;
function doesSupportTouchActionNone() {
  if (cachedSupportsTouchActionNone === void 0) {
    if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
      cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
    } else {
      cachedSupportsTouchActionNone = true;
    }
  }
  return cachedSupportsTouchActionNone;
}
function trackFinger(event, currentTouchId) {
  if (currentTouchId !== void 0 && event.changedTouches) {
    for (let i2 = 0; i2 < event.changedTouches.length; i2 += 1) {
      const touch = event.changedTouches[i2];
      if (touch.identifier === currentTouchId) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
function computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {
  let newWidth = initialOffsetToSeparator;
  if (resizeDirection === "Right") {
    newWidth += clickX - columnBounds.left;
  } else {
    newWidth += columnBounds.right - clickX;
  }
  return newWidth;
}
function computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {
  if (resizeDirection === "Left") {
    return clickX - columnBounds.left;
  }
  return columnBounds.right - clickX;
}
function flipResizeDirection(side) {
  if (side === "Right") {
    return "Left";
  }
  return "Right";
}
function getResizeDirection(separator, direction) {
  const side = separator.classList.contains(gridClasses2["columnSeparator--sideRight"]) ? "Right" : "Left";
  if (direction === "rtl") {
    return flipResizeDirection(side);
  }
  return side;
}
function preventClick(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
function useColumnVirtualizationDisabled(apiRef2) {
  const promise = React160.useRef();
  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef2);
  const value = useGridSelector2(apiRef2, selector);
  React160.useEffect(() => {
    if (promise.current && value === false) {
      promise.current.resolve();
      promise.current = void 0;
    }
  });
  const asyncCheck = () => {
    if (!promise.current) {
      if (selector() === false) {
        return Promise.resolve();
      }
      promise.current = createControllablePromise();
    }
    return promise.current;
  };
  return asyncCheck;
}
function excludeOutliers(inputValues, factor) {
  if (inputValues.length < 4) {
    return inputValues;
  }
  const values = inputValues.slice();
  values.sort((a, b) => a - b);
  const q1 = values[Math.floor(values.length * 0.25)];
  const q3 = values[Math.floor(values.length * 0.75) - 1];
  const iqr = q3 - q1;
  const deviation = iqr < 5 ? 5 : iqr * factor;
  return values.filter((v) => v > q1 - deviation && v < q3 + deviation);
}
function extractColumnWidths(apiRef2, options, columns) {
  const widthByField = {};
  const root = apiRef2.current.rootElementRef.current;
  root.classList.add(gridClasses2.autosizing);
  columns.forEach((column) => {
    const cells = findGridCells(apiRef2.current, column.field);
    const widths = cells.map((cell) => {
      return cell.getBoundingClientRect().width ?? 0;
    });
    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);
    if (options.includeHeaders) {
      const header = findGridHeader(apiRef2.current, column.field);
      if (header) {
        const title = header.querySelector(`.${gridClasses2.columnHeaderTitle}`);
        const content = header.querySelector(`.${gridClasses2.columnHeaderTitleContainerContent}`);
        const iconContainer = header.querySelector(`.${gridClasses2.iconButtonContainer}`);
        const menuContainer = header.querySelector(`.${gridClasses2.menuIcon}`);
        const element = title ?? content;
        const style = window.getComputedStyle(header, null);
        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);
        const contentWidth = element.scrollWidth + 1;
        const width = contentWidth + paddingWidth + ((iconContainer == null ? void 0 : iconContainer.clientWidth) ?? 0) + ((menuContainer == null ? void 0 : menuContainer.clientWidth) ?? 0);
        filteredWidths.push(width);
      }
    }
    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== void 0;
    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== void 0;
    const min = hasColumnMin ? column.minWidth : 0;
    const max = hasColumnMax ? column.maxWidth : Infinity;
    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);
    widthByField[column.field] = clamp(maxContent, min, max);
  });
  root.classList.remove(gridClasses2.autosizing);
  return widthByField;
}
var columnResizeStateInitializer2 = (state) => _extends({}, state, {
  columnResize: {
    resizingColumnField: ""
  }
});
function createResizeRefs() {
  return {
    colDef: void 0,
    initialColWidth: 0,
    initialTotalWidth: 0,
    previousMouseClickEvent: void 0,
    columnHeaderElement: void 0,
    headerFilterElement: void 0,
    groupHeaderElements: [],
    cellElements: [],
    leftPinnedCellsAfter: [],
    rightPinnedCellsBefore: [],
    fillerLeft: void 0,
    fillerRight: void 0,
    leftPinnedHeadersAfter: [],
    rightPinnedHeadersBefore: []
  };
}
var useGridColumnResize2 = (apiRef2, props) => {
  const theme = useTheme();
  const logger = useGridLogger(apiRef2, "useGridColumnResize");
  const refs = useLazyRef(createResizeRefs).current;
  const initialOffsetToSeparator = React160.useRef();
  const resizeDirection = React160.useRef();
  const stopResizeEventTimeout = useTimeout();
  const touchId = React160.useRef();
  const updateWidth = (newWidth) => {
    var _a, _b;
    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);
    const prevWidth = refs.columnHeaderElement.offsetWidth;
    const widthDiff = newWidth - prevWidth;
    const columnWidthDiff = newWidth - refs.initialColWidth;
    const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;
    (_b = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current) == null ? void 0 : _b.style.setProperty("--DataGrid-rowWidth", `${newTotalWidth}px`);
    refs.colDef.computedWidth = newWidth;
    refs.colDef.width = newWidth;
    refs.colDef.flex = 0;
    refs.columnHeaderElement.style.width = `${newWidth}px`;
    refs.columnHeaderElement.style.minWidth = `${newWidth}px`;
    refs.columnHeaderElement.style.maxWidth = `${newWidth}px`;
    const headerFilterElement = refs.headerFilterElement;
    if (headerFilterElement) {
      headerFilterElement.style.width = `${newWidth}px`;
      headerFilterElement.style.minWidth = `${newWidth}px`;
      headerFilterElement.style.maxWidth = `${newWidth}px`;
    }
    refs.groupHeaderElements.forEach((element) => {
      const div = element;
      let finalWidth;
      if (div.getAttribute("aria-colspan") === "1") {
        finalWidth = `${newWidth}px`;
      } else {
        finalWidth = `${div.offsetWidth + widthDiff}px`;
      }
      div.style.width = finalWidth;
      div.style.minWidth = finalWidth;
      div.style.maxWidth = finalWidth;
    });
    refs.cellElements.forEach((element) => {
      const div = element;
      let finalWidth;
      if (div.getAttribute("aria-colspan") === "1") {
        finalWidth = `${newWidth}px`;
      } else {
        finalWidth = `${div.offsetWidth + widthDiff}px`;
      }
      div.style.setProperty("--width", finalWidth);
    });
    const pinnedPosition = apiRef2.current.unstable_applyPipeProcessors("isColumnPinned", false, refs.colDef.field);
    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {
      updateProperty(refs.fillerLeft, "width", widthDiff);
      refs.leftPinnedCellsAfter.forEach((cell) => {
        updateProperty(cell, "left", widthDiff);
      });
      refs.leftPinnedHeadersAfter.forEach((header) => {
        updateProperty(header, "left", widthDiff);
      });
    }
    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {
      updateProperty(refs.fillerRight, "width", widthDiff);
      refs.rightPinnedCellsBefore.forEach((cell) => {
        updateProperty(cell, "right", widthDiff);
      });
      refs.rightPinnedHeadersBefore.forEach((header) => {
        updateProperty(header, "right", widthDiff);
      });
    }
  };
  const finishResize = (nativeEvent) => {
    stopListening();
    if (refs.previousMouseClickEvent) {
      const prevEvent = refs.previousMouseClickEvent;
      const prevTimeStamp = prevEvent.timeStamp;
      const prevClientX = prevEvent.clientX;
      const prevClientY = prevEvent.clientY;
      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {
        refs.previousMouseClickEvent = void 0;
        return;
      }
    }
    if (refs.colDef) {
      apiRef2.current.setColumnWidth(refs.colDef.field, refs.colDef.width);
      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);
      const columnsState = gridColumnsStateSelector(apiRef2.current.state);
      refs.groupHeaderElements.forEach((element) => {
        const fields = getFieldsFromGroupHeaderElem(element);
        const div = element;
        const newWidth = fields.reduce((acc, field) => {
          if (columnsState.columnVisibilityModel[field] !== false) {
            return acc + columnsState.lookup[field].computedWidth;
          }
          return acc;
        }, 0);
        const finalWidth = `${newWidth}px`;
        div.style.width = finalWidth;
        div.style.minWidth = finalWidth;
        div.style.maxWidth = finalWidth;
      });
    }
    stopResizeEventTimeout.start(0, () => {
      apiRef2.current.publishEvent("columnResizeStop", null, nativeEvent);
    });
  };
  const storeReferences = (colDef, separator, xStart) => {
    var _a;
    const root = apiRef2.current.rootElementRef.current;
    refs.initialColWidth = colDef.computedWidth;
    refs.initialTotalWidth = apiRef2.current.getRootDimensions().rowWidth;
    refs.colDef = colDef;
    refs.columnHeaderElement = findHeaderElementFromField(apiRef2.current.columnHeadersContainerRef.current, colDef.field);
    const headerFilterElement = root.querySelector(`.${gridClasses2.headerFilterRow} [data-field="${colDef.field}"]`);
    if (headerFilterElement) {
      refs.headerFilterElement = headerFilterElement;
    }
    refs.groupHeaderElements = findGroupHeaderElementsFromField((_a = apiRef2.current.columnHeadersContainerRef) == null ? void 0 : _a.current, colDef.field);
    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef2.current);
    refs.fillerLeft = findGridElement(apiRef2.current, "filler--pinnedLeft");
    refs.fillerRight = findGridElement(apiRef2.current, "filler--pinnedRight");
    const pinnedPosition = apiRef2.current.unstable_applyPipeProcessors("isColumnPinned", false, refs.colDef.field);
    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef2.current, refs.columnHeaderElement);
    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef2.current, refs.columnHeaderElement);
    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef2.current, refs.columnHeaderElement);
    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef2.current, refs.columnHeaderElement);
    resizeDirection.current = getResizeDirection(separator, theme.direction);
    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
  };
  const handleResizeMouseUp = useEventCallback_default(finishResize);
  const handleResizeMouseMove = useEventCallback_default((nativeEvent) => {
    if (nativeEvent.buttons === 0) {
      handleResizeMouseUp(nativeEvent);
      return;
    }
    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);
    updateWidth(newWidth);
    const params = {
      element: refs.columnHeaderElement,
      colDef: refs.colDef,
      width: newWidth
    };
    apiRef2.current.publishEvent("columnResize", params, nativeEvent);
  });
  const handleTouchEnd = useEventCallback_default((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId.current);
    if (!finger) {
      return;
    }
    finishResize(nativeEvent);
  });
  const handleTouchMove = useEventCallback_default((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId.current);
    if (!finger) {
      return;
    }
    if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
      handleTouchEnd(nativeEvent);
      return;
    }
    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);
    updateWidth(newWidth);
    const params = {
      element: refs.columnHeaderElement,
      colDef: refs.colDef,
      width: newWidth
    };
    apiRef2.current.publishEvent("columnResize", params, nativeEvent);
  });
  const handleTouchStart = useEventCallback_default((event) => {
    const cellSeparator = findParentElementFromClassName(event.target, gridClasses2["columnSeparator--resizable"]);
    if (!cellSeparator) {
      return;
    }
    if (!doesSupportTouchActionNone()) {
      event.preventDefault();
    }
    const touch = event.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses2.columnHeader);
    const field = getFieldFromHeaderElem(columnHeaderElement);
    const colDef = apiRef2.current.getColumn(field);
    logger.debug(`Start Resize on col ${colDef.field}`);
    apiRef2.current.publishEvent("columnResizeStart", {
      field
    }, event);
    storeReferences(colDef, cellSeparator, touch.clientX);
    const doc = ownerDocument(event.currentTarget);
    doc.addEventListener("touchmove", handleTouchMove);
    doc.addEventListener("touchend", handleTouchEnd);
  });
  const stopListening = React160.useCallback(() => {
    const doc = ownerDocument(apiRef2.current.rootElementRef.current);
    doc.body.style.removeProperty("cursor");
    doc.removeEventListener("mousemove", handleResizeMouseMove);
    doc.removeEventListener("mouseup", handleResizeMouseUp);
    doc.removeEventListener("touchmove", handleTouchMove);
    doc.removeEventListener("touchend", handleTouchEnd);
    setTimeout(() => {
      doc.removeEventListener("click", preventClick, true);
    }, 100);
    if (refs.columnHeaderElement) {
      refs.columnHeaderElement.style.pointerEvents = "unset";
    }
  }, [apiRef2, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);
  const handleResizeStart = React160.useCallback(({
    field
  }) => {
    apiRef2.current.setState((state) => _extends({}, state, {
      columnResize: _extends({}, state.columnResize, {
        resizingColumnField: field
      })
    }));
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const handleResizeStop = React160.useCallback(() => {
    apiRef2.current.setState((state) => _extends({}, state, {
      columnResize: _extends({}, state.columnResize, {
        resizingColumnField: ""
      })
    }));
    apiRef2.current.forceUpdate();
  }, [apiRef2]);
  const handleColumnResizeMouseDown = useEventCallback_default(({
    colDef
  }, event) => {
    if (event.button !== 0) {
      return;
    }
    if (!event.currentTarget.classList.contains(gridClasses2["columnSeparator--resizable"])) {
      return;
    }
    event.preventDefault();
    logger.debug(`Start Resize on col ${colDef.field}`);
    apiRef2.current.publishEvent("columnResizeStart", {
      field: colDef.field
    }, event);
    storeReferences(colDef, event.currentTarget, event.clientX);
    const doc = ownerDocument(apiRef2.current.rootElementRef.current);
    doc.body.style.cursor = "col-resize";
    refs.previousMouseClickEvent = event.nativeEvent;
    doc.addEventListener("mousemove", handleResizeMouseMove);
    doc.addEventListener("mouseup", handleResizeMouseUp);
    doc.addEventListener("click", preventClick, true);
  });
  const handleColumnSeparatorDoubleClick = useEventCallback_default((params, event) => {
    if (props.disableAutosize) {
      return;
    }
    if (event.button !== 0) {
      return;
    }
    const column = apiRef2.current.state.columns.lookup[params.field];
    if (column.resizable === false) {
      return;
    }
    apiRef2.current.autosizeColumns(_extends({}, props.autosizeOptions, {
      columns: [column.field]
    }));
  });
  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef2);
  const isAutosizingRef = React160.useRef(false);
  const autosizeColumns = React160.useCallback(async (userOptions) => {
    var _a;
    const root = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current;
    if (!root) {
      return;
    }
    if (isAutosizingRef.current) {
      return;
    }
    isAutosizingRef.current = true;
    const state = gridColumnsStateSelector(apiRef2.current.state);
    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {
      columns: (userOptions == null ? void 0 : userOptions.columns) ?? state.orderedFields
    });
    options.columns = options.columns.filter((c) => state.columnVisibilityModel[c] !== false);
    const columns = options.columns.map((c) => apiRef2.current.state.columns.lookup[c]);
    try {
      apiRef2.current.unstable_setColumnVirtualization(false);
      await columnVirtualizationDisabled();
      const widthByField = extractColumnWidths(apiRef2, options, columns);
      const newColumns = columns.map((column) => _extends({}, column, {
        width: widthByField[column.field],
        computedWidth: widthByField[column.field]
      }));
      if (options.expand) {
        const visibleColumns = state.orderedFields.map((field) => state.lookup[field]).filter((c) => state.columnVisibilityModel[c.field] !== false);
        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);
        const availableWidth = apiRef2.current.getRootDimensions().viewportInnerSize.width;
        const remainingWidth = availableWidth - totalWidth;
        if (remainingWidth > 0) {
          const widthPerColumn = remainingWidth / (newColumns.length || 1);
          newColumns.forEach((column) => {
            column.width += widthPerColumn;
            column.computedWidth += widthPerColumn;
          });
        }
      }
      apiRef2.current.updateColumns(newColumns);
      newColumns.forEach((newColumn, index) => {
        if (newColumn.width !== columns[index].width) {
          const width = newColumn.width;
          apiRef2.current.publishEvent("columnWidthChange", {
            element: apiRef2.current.getColumnHeaderElement(newColumn.field),
            colDef: newColumn,
            width
          });
        }
      });
    } finally {
      apiRef2.current.unstable_setColumnVirtualization(true);
      isAutosizingRef.current = false;
    }
  }, [apiRef2, columnVirtualizationDisabled]);
  React160.useEffect(() => stopListening, [stopListening]);
  useOnMount(() => {
    if (props.autosizeOnMount) {
      Promise.resolve().then(() => {
        apiRef2.current.autosizeColumns(props.autosizeOptions);
      });
    }
  });
  useGridNativeEventListener(apiRef2, () => {
    var _a;
    return (_a = apiRef2.current.columnHeadersContainerRef) == null ? void 0 : _a.current;
  }, "touchstart", handleTouchStart, {
    passive: doesSupportTouchActionNone()
  });
  useGridApiMethod2(apiRef2, {
    autosizeColumns
  }, "public");
  useGridApiEventHandler2(apiRef2, "columnResizeStop", handleResizeStop);
  useGridApiEventHandler2(apiRef2, "columnResizeStart", handleResizeStart);
  useGridApiEventHandler2(apiRef2, "columnSeparatorMouseDown", handleColumnResizeMouseDown);
  useGridApiEventHandler2(apiRef2, "columnSeparatorDoubleClick", handleColumnSeparatorDoubleClick);
  useGridApiOptionHandler(apiRef2, "columnResize", props.onColumnResize);
  useGridApiOptionHandler(apiRef2, "columnWidthChange", props.onColumnWidthChange);
};
function updateProperty(element, property, delta) {
  if (!element) {
    return;
  }
  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;
}

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridInitializeState.js
var React161 = __toESM(require_react());
var useGridInitializeState2 = (initializer, privateApiRef, props) => {
  const isInitialized = React161.useRef(false);
  if (!isInitialized.current) {
    privateApiRef.current.state = initializer(privateApiRef.current.state, props, privateApiRef);
    isInitialized.current = true;
  }
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationUtils.js
var GRID_AGGREGATION_ROOT_FOOTER_ROW_ID = "auto-generated-group-footer-root";
var getAggregationFooterRowIdFromGroupId = (groupId) => {
  if (groupId == null) {
    return GRID_AGGREGATION_ROOT_FOOTER_ROW_ID;
  }
  return `auto-generated-group-footer-${groupId}`;
};
var canColumnHaveAggregationFunction = ({
  colDef,
  aggregationFunctionName,
  aggregationFunction
}) => {
  if (!colDef) {
    return false;
  }
  if (!aggregationFunction) {
    return false;
  }
  if (colDef.availableAggregationFunctions != null) {
    return colDef.availableAggregationFunctions.includes(aggregationFunctionName);
  }
  if (!aggregationFunction.columnTypes) {
    return true;
  }
  return aggregationFunction.columnTypes.includes(colDef.type);
};
var getAvailableAggregationFunctions = ({
  aggregationFunctions,
  colDef
}) => Object.keys(aggregationFunctions).filter((aggregationFunctionName) => canColumnHaveAggregationFunction({
  colDef,
  aggregationFunctionName,
  aggregationFunction: aggregationFunctions[aggregationFunctionName]
}));
var mergeStateWithAggregationModel = (aggregationModel) => (state) => _extends({}, state, {
  aggregation: _extends({}, state.aggregation, {
    model: aggregationModel
  })
});
var getAggregationRules = ({
  columnsLookup,
  aggregationModel,
  aggregationFunctions
}) => {
  const aggregationRules = {};
  Object.entries(aggregationModel).forEach(([field, columnItem]) => {
    if (columnsLookup[field] && canColumnHaveAggregationFunction({
      colDef: columnsLookup[field],
      aggregationFunctionName: columnItem,
      aggregationFunction: aggregationFunctions[columnItem]
    })) {
      aggregationRules[field] = {
        aggregationFunctionName: columnItem,
        aggregationFunction: aggregationFunctions[columnItem]
      };
    }
  });
  return aggregationRules;
};
var addFooterRows = ({
  groupingParams,
  apiRef: apiRef2,
  getAggregationPosition,
  hasAggregationRule
}) => {
  let newGroupingParams = _extends({}, groupingParams, {
    tree: _extends({}, groupingParams.tree),
    treeDepths: _extends({}, groupingParams.treeDepths)
  });
  const updateChildGroupFooter = (groupNode) => {
    const shouldHaveFooter = hasAggregationRule && getAggregationPosition(groupNode) === "footer";
    if (shouldHaveFooter) {
      const footerId = getAggregationFooterRowIdFromGroupId(groupNode.id);
      if (groupNode.footerId !== footerId) {
        if (groupNode.footerId != null) {
          removeNodeFromTree({
            node: newGroupingParams.tree[groupNode.footerId],
            tree: newGroupingParams.tree,
            treeDepths: newGroupingParams.treeDepths
          });
        }
        const footerNode = {
          id: footerId,
          parent: groupNode.id,
          depth: groupNode ? groupNode.depth + 1 : 0,
          type: "footer"
        };
        insertNodeInTree(footerNode, newGroupingParams.tree, newGroupingParams.treeDepths, null);
      }
    } else if (groupNode.footerId != null) {
      removeNodeFromTree({
        node: newGroupingParams.tree[groupNode.footerId],
        tree: newGroupingParams.tree,
        treeDepths: newGroupingParams.treeDepths
      });
      newGroupingParams.tree[groupNode.id] = _extends({}, newGroupingParams.tree[groupNode.id], {
        footerId: null
      });
    }
  };
  const updateRootGroupFooter = (groupNode) => {
    const shouldHaveFooter = hasAggregationRule && getAggregationPosition(groupNode) === "footer";
    if (shouldHaveFooter) {
      const rowId = getAggregationFooterRowIdFromGroupId(null);
      newGroupingParams = addPinnedRow({
        groupingParams: newGroupingParams,
        rowModel: {
          [GRID_ID_AUTOGENERATED]: rowId
        },
        rowId,
        position: "bottom",
        apiRef: apiRef2,
        isAutoGenerated: true
      });
    }
  };
  const updateGroupFooter = (groupNode) => {
    if (groupNode.id === GRID_ROOT_GROUP_ID) {
      updateRootGroupFooter(groupNode);
    } else {
      updateChildGroupFooter(groupNode);
    }
    groupNode.children.forEach((childId) => {
      const childNode = newGroupingParams.tree[childId];
      if (childNode.type === "group") {
        updateGroupFooter(childNode);
      }
    });
  };
  updateGroupFooter(newGroupingParams.tree[GRID_ROOT_GROUP_ID]);
  return newGroupingParams;
};
var areAggregationRulesEqual = (previousValue, newValue) => {
  const previousFields = Object.keys(previousValue ?? {});
  const newFields = Object.keys(newValue);
  if (!isDeepEqual(previousFields, newFields)) {
    return false;
  }
  return newFields.every((field) => {
    const previousRule = previousValue == null ? void 0 : previousValue[field];
    const newRule = newValue[field];
    if ((previousRule == null ? void 0 : previousRule.aggregationFunction) !== (newRule == null ? void 0 : newRule.aggregationFunction)) {
      return false;
    }
    if ((previousRule == null ? void 0 : previousRule.aggregationFunctionName) !== (newRule == null ? void 0 : newRule.aggregationFunctionName)) {
      return false;
    }
    return true;
  });
};
var getAggregationFunctionLabel = ({
  apiRef: apiRef2,
  aggregationRule
}) => {
  if (aggregationRule.aggregationFunction.label != null) {
    return aggregationRule.aggregationFunction.label;
  }
  try {
    return apiRef2.current.getLocaleText(`aggregationFunctionLabel${capitalize(aggregationRule.aggregationFunctionName)}`);
  } catch (e) {
    return aggregationRule.aggregationFunctionName;
  }
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/createAggregationLookup.js
var getAggregationCellValue = ({
  apiRef: apiRef2,
  groupId,
  field,
  aggregationFunction,
  aggregationRowsScope
}) => {
  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef2);
  const rowIds = apiRef2.current.getRowGroupChildren({
    groupId
  });
  const values = [];
  rowIds.forEach((rowId) => {
    if (aggregationRowsScope === "filtered" && filteredRowsLookup[rowId] === false) {
      return;
    }
    const rowNode = apiRef2.current.getRowNode(rowId);
    if (rowNode.type === "group") {
      return;
    }
    if (typeof aggregationFunction.getCellValue === "function") {
      const row = apiRef2.current.getRow(rowId);
      values.push(aggregationFunction.getCellValue({
        row
      }));
    } else {
      values.push(apiRef2.current.getCellValue(rowId, field));
    }
  });
  return aggregationFunction.apply({
    values,
    groupId,
    field
    // Added per user request in https://github.com/mui/mui-x/issues/6995#issuecomment-1327423455
  });
};
var getGroupAggregatedValue = ({
  groupId,
  apiRef: apiRef2,
  aggregationRowsScope,
  aggregatedFields,
  aggregationRules,
  position
}) => {
  const groupAggregationLookup = {};
  for (let j = 0; j < aggregatedFields.length; j += 1) {
    const aggregatedField = aggregatedFields[j];
    const columnAggregationRules = aggregationRules[aggregatedField];
    groupAggregationLookup[aggregatedField] = {
      position,
      value: getAggregationCellValue({
        apiRef: apiRef2,
        groupId,
        field: aggregatedField,
        aggregationFunction: columnAggregationRules.aggregationFunction,
        aggregationRowsScope
      })
    };
  }
  return groupAggregationLookup;
};
var createAggregationLookup = ({
  apiRef: apiRef2,
  aggregationFunctions,
  aggregationRowsScope,
  getAggregationPosition
}) => {
  const aggregationRules = getAggregationRules({
    columnsLookup: gridColumnLookupSelector(apiRef2),
    aggregationModel: gridAggregationModelSelector(apiRef2),
    aggregationFunctions
  });
  const aggregatedFields = Object.keys(aggregationRules);
  if (aggregatedFields.length === 0) {
    return {};
  }
  const aggregationLookup = {};
  const rowTree = gridRowTreeSelector(apiRef2);
  const createGroupAggregationLookup = (groupNode) => {
    for (let i2 = 0; i2 < groupNode.children.length; i2 += 1) {
      const childId = groupNode.children[i2];
      const childNode = rowTree[childId];
      if (childNode.type === "group") {
        createGroupAggregationLookup(childNode);
      }
    }
    const hasAggregableChildren = groupNode.children.length;
    if (hasAggregableChildren) {
      const position = getAggregationPosition(groupNode);
      if (position != null) {
        aggregationLookup[groupNode.id] = getGroupAggregatedValue({
          groupId: groupNode.id,
          apiRef: apiRef2,
          aggregatedFields,
          aggregationRowsScope,
          aggregationRules,
          position
        });
      }
    }
  };
  createGroupAggregationLookup(rowTree[GRID_ROOT_GROUP_ID]);
  return aggregationLookup;
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregation.js
var aggregationStateInitializer = (state, props, apiRef2) => {
  var _a, _b;
  apiRef2.current.caches.aggregation = {
    rulesOnLastColumnHydration: {},
    rulesOnLastRowHydration: {}
  };
  return _extends({}, state, {
    aggregation: {
      model: props.aggregationModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.aggregation) == null ? void 0 : _b.model) ?? {}
    }
  });
};
var useGridAggregation = (apiRef2, props) => {
  apiRef2.current.registerControlState({
    stateId: "aggregation",
    propModel: props.aggregationModel,
    propOnChange: props.onAggregationModelChange,
    stateSelector: gridAggregationModelSelector,
    changeEvent: "aggregationModelChange"
  });
  const setAggregationModel = React162.useCallback((model) => {
    const currentModel = gridAggregationModelSelector(apiRef2);
    if (currentModel !== model) {
      apiRef2.current.setState(mergeStateWithAggregationModel(model));
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2]);
  const applyAggregation = React162.useCallback(() => {
    const aggregationLookup = createAggregationLookup({
      apiRef: apiRef2,
      getAggregationPosition: props.getAggregationPosition,
      aggregationFunctions: props.aggregationFunctions,
      aggregationRowsScope: props.aggregationRowsScope
    });
    apiRef2.current.setState((state) => _extends({}, state, {
      aggregation: _extends({}, state.aggregation, {
        lookup: aggregationLookup
      })
    }));
  }, [apiRef2, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);
  const aggregationApi = {
    setAggregationModel
  };
  useGridApiMethod(apiRef2, aggregationApi, "public");
  const checkAggregationRulesDiff = React162.useCallback(() => {
    const {
      rulesOnLastRowHydration,
      rulesOnLastColumnHydration
    } = apiRef2.current.caches.aggregation;
    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({
      columnsLookup: gridColumnLookupSelector(apiRef2),
      aggregationModel: gridAggregationModelSelector(apiRef2),
      aggregationFunctions: props.aggregationFunctions
    });
    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {
      apiRef2.current.requestPipeProcessorsApplication("hydrateRows");
      applyAggregation();
    }
    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {
      apiRef2.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;
      apiRef2.current.requestPipeProcessorsApplication("hydrateColumns");
    }
  }, [apiRef2, applyAggregation, props.aggregationFunctions, props.disableAggregation]);
  useGridApiEventHandler(apiRef2, "aggregationModelChange", checkAggregationRulesDiff);
  useGridApiEventHandler(apiRef2, "columnsChange", checkAggregationRulesDiff);
  useGridApiEventHandler(apiRef2, "filteredRowsSet", applyAggregation);
  React162.useEffect(() => {
    if (props.aggregationModel !== void 0) {
      apiRef2.current.setAggregationModel(props.aggregationModel);
    }
  }, [apiRef2, props.aggregationModel]);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregationPreProcessors.js
init_extends();
var React168 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/wrapColumnWithAggregation.js
init_objectWithoutPropertiesLoose();
init_extends();
var React167 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/components/GridFooterCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React165 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/hooks/utils/useGridApiRef.js
var React163 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
init_extends();
var React164 = __toESM(require_react());
var import_prop_types61 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js
var useDataGridComponent = (inputApiRef, props) => {
  const apiRef2 = useGridInitialization2(inputApiRef, props);
  useGridRowSelectionPreProcessors2(apiRef2, props);
  useGridRowsPreProcessors2(apiRef2);
  useGridInitializeState2(dimensionsStateInitializer2, apiRef2, props);
  useGridInitializeState2(rowSelectionStateInitializer2, apiRef2, props);
  useGridInitializeState2(columnsStateInitializer2, apiRef2, props);
  useGridInitializeState2(rowsStateInitializer2, apiRef2, props);
  useGridInitializeState2(editingStateInitializer2, apiRef2, props);
  useGridInitializeState2(focusStateInitializer2, apiRef2, props);
  useGridInitializeState2(sortingStateInitializer2, apiRef2, props);
  useGridInitializeState2(preferencePanelStateInitializer2, apiRef2, props);
  useGridInitializeState2(filterStateInitializer2, apiRef2, props);
  useGridInitializeState2(densityStateInitializer2, apiRef2, props);
  useGridInitializeState2(columnResizeStateInitializer2, apiRef2, props);
  useGridInitializeState2(paginationStateInitializer2, apiRef2, props);
  useGridInitializeState2(rowsMetaStateInitializer2, apiRef2, props);
  useGridInitializeState2(columnMenuStateInitializer2, apiRef2, props);
  useGridInitializeState2(columnGroupsStateInitializer2, apiRef2, props);
  useGridInitializeState2(virtualizationStateInitializer2, apiRef2, props);
  useGridKeyboardNavigation2(apiRef2, props);
  useGridRowSelection2(apiRef2, props);
  useGridColumns2(apiRef2, props);
  useGridRows2(apiRef2, props);
  useGridParamsApi2(apiRef2);
  useGridColumnSpanning2(apiRef2);
  useGridColumnGrouping2(apiRef2, props);
  useGridEditing2(apiRef2, props);
  useGridFocus2(apiRef2, props);
  useGridPreferencesPanel2(apiRef2, props);
  useGridFilter2(apiRef2, props);
  useGridSorting2(apiRef2, props);
  useGridDensity2(apiRef2, props);
  useGridColumnResize2(apiRef2, props);
  useGridPagination2(apiRef2, props);
  useGridRowsMeta2(apiRef2, props);
  useGridScroll2(apiRef2, props);
  useGridColumnMenu2(apiRef2);
  useGridCsvExport2(apiRef2, props);
  useGridPrintExport2(apiRef2, props);
  useGridClipboard2(apiRef2, props);
  useGridDimensions2(apiRef2, props);
  useGridEvents2(apiRef2, props);
  useGridStatePersistence2(apiRef2);
  useGridVirtualization2(apiRef2, props);
  return apiRef2;
};

// node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
var propValidators;
if (true) {
  propValidators = [
    ...propValidatorsDataGrid2,
    // Only validate in MIT version
    (props) => props.columns && props.columns.some((column) => column.resizable) && [`MUI X: \`column.resizable = true\` is not a valid prop.`, "Column resizing is not available in the MIT version.", "", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n") || void 0
  ];
}
var DataGridRaw = React164.forwardRef(function DataGrid(inProps, ref) {
  const props = useDataGridProps(inProps);
  const privateApiRef = useDataGridComponent(props.apiRef, props);
  if (true) {
    validateProps2(props, propValidators);
  }
  return (0, import_jsx_runtime104.jsx)(GridContextProvider2, {
    privateApiRef,
    props,
    children: (0, import_jsx_runtime104.jsxs)(GridRoot2, _extends({
      className: props.className,
      style: props.style,
      sx: props.sx,
      ref
    }, props.forwardedProps, {
      children: [(0, import_jsx_runtime104.jsx)(GridHeader2, {}), (0, import_jsx_runtime104.jsx)(GridVirtualScroller2, {}), (0, import_jsx_runtime104.jsx)(GridFooterPlaceholder2, {})]
    }))
  });
});
var DataGrid2 = React164.memo(DataGridRaw);
DataGridRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.
   */
  apiRef: import_prop_types61.default.shape({
    current: import_prop_types61.default.object.isRequired
  }),
  /**
   * The label of the Data Grid.
   */
  "aria-label": import_prop_types61.default.string,
  /**
   * The id of the element containing a label for the Data Grid.
   */
  "aria-labelledby": import_prop_types61.default.string,
  /**
   * If `true`, the Data Grid height is dynamic and follow the number of rows in the Data Grid.
   * @default false
   */
  autoHeight: import_prop_types61.default.bool,
  /**
   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
   * @default false
   */
  autoPageSize: import_prop_types61.default.bool,
  /**
   * If `true`, columns are autosized after the datagrid is mounted.
   * @default false
   */
  autosizeOnMount: import_prop_types61.default.bool,
  /**
   * The options for autosize when user-initiated.
   */
  autosizeOptions: import_prop_types61.default.shape({
    columns: import_prop_types61.default.arrayOf(import_prop_types61.default.string),
    expand: import_prop_types61.default.bool,
    includeHeaders: import_prop_types61.default.bool,
    includeOutliers: import_prop_types61.default.bool,
    outliersFactor: import_prop_types61.default.number
  }),
  /**
   * Controls the modes of the cells.
   */
  cellModesModel: import_prop_types61.default.object,
  /**
   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
   * @default false
   */
  checkboxSelection: import_prop_types61.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types61.default.object,
  /**
   * The character used to separate cell values when copying to the clipboard.
   * @default '\t'
   */
  clipboardCopyCellDelimiter: import_prop_types61.default.string,
  /**
   * Column region in pixels to render before/after the viewport
   * @default 150
   */
  columnBufferPx: import_prop_types61.default.number,
  columnGroupingModel: import_prop_types61.default.arrayOf(import_prop_types61.default.object),
  /**
   * Sets the height in pixel of the column headers in the Data Grid.
   * @default 56
   */
  columnHeaderHeight: import_prop_types61.default.number,
  /**
   * Set of columns of type [[GridColDef]][].
   */
  columns: import_prop_types61.default.arrayOf(import_prop_types61.default.object).isRequired,
  /**
   * Set the column visibility model of the Data Grid.
   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
   */
  columnVisibilityModel: import_prop_types61.default.object,
  /**
   * Set the density of the Data Grid.
   * @default "standard"
   */
  density: import_prop_types61.default.oneOf(["comfortable", "compact", "standard"]),
  /**
   * If `true`, column autosizing on header separator double-click is disabled.
   * @default false
   */
  disableAutosize: import_prop_types61.default.bool,
  /**
   * If `true`, column filters are disabled.
   * @default false
   */
  disableColumnFilter: import_prop_types61.default.bool,
  /**
   * If `true`, the column menu is disabled.
   * @default false
   */
  disableColumnMenu: import_prop_types61.default.bool,
  /**
   * If `true`, resizing columns is disabled.
   * @default false
   */
  disableColumnResize: import_prop_types61.default.bool,
  /**
   * If `true`, hiding/showing columns is disabled.
   * @default false
   */
  disableColumnSelector: import_prop_types61.default.bool,
  /**
   * If `true`, the column sorting feature will be disabled.
   * @default false
   */
  disableColumnSorting: import_prop_types61.default.bool,
  /**
   * If `true`, the density selector is disabled.
   * @default false
   */
  disableDensitySelector: import_prop_types61.default.bool,
  /**
   * If `true`, `eval()` is not used for performance optimization.
   * @default false
   */
  disableEval: import_prop_types61.default.bool,
  /**
   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.
   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.
   * @default false (`!props.checkboxSelection` for MIT Data Grid)
   */
  disableMultipleRowSelection: import_prop_types61.default.bool,
  /**
   * If `true`, the selection on click on a row or cell is disabled.
   * @default false
   */
  disableRowSelectionOnClick: import_prop_types61.default.bool,
  /**
   * If `true`, the virtualization is disabled.
   * @default false
   */
  disableVirtualization: import_prop_types61.default.bool,
  /**
   * Controls whether to use the cell or row editing.
   * @default "cell"
   */
  editMode: import_prop_types61.default.oneOf(["cell", "row"]),
  /**
   * Use if the actual rowCount is not known upfront, but an estimation is available.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Applicable only with `paginationMode="server"` and when `rowCount="-1"`
   */
  estimatedRowCount: import_prop_types61.default.number,
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.
   */
  experimentalFeatures: import_prop_types61.default.shape({
    warnIfFocusStateIsNotSynced: import_prop_types61.default.bool
  }),
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering.
   * @default 150
   */
  filterDebounceMs: import_prop_types61.default.number,
  /**
   * Filtering can be processed on the server or client-side.
   * Set it to 'server' if you would like to handle filtering on the server-side.
   * @default "client"
   */
  filterMode: import_prop_types61.default.oneOf(["client", "server"]),
  /**
   * Set the filter model of the Data Grid.
   */
  filterModel: import_prop_types61.default.shape({
    items: import_prop_types61.default.arrayOf(import_prop_types61.default.shape({
      field: import_prop_types61.default.string.isRequired,
      id: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]),
      operator: import_prop_types61.default.string.isRequired,
      value: import_prop_types61.default.any
    })).isRequired,
    logicOperator: import_prop_types61.default.oneOf(["and", "or"]),
    quickFilterExcludeHiddenColumns: import_prop_types61.default.bool,
    quickFilterLogicOperator: import_prop_types61.default.oneOf(["and", "or"]),
    quickFilterValues: import_prop_types61.default.array
  }),
  /**
   * Forwarded props for the Data Grid root element.
   * @ignore - do not document.
   */
  forwardedProps: import_prop_types61.default.object,
  /**
   * Function that applies CSS classes dynamically on cells.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {string} The CSS class to apply to the cell.
   */
  getCellClassName: import_prop_types61.default.func,
  /**
   * Function that returns the element to render in row detail.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {React.JSX.Element} The row detail element.
   */
  getDetailPanelContent: import_prop_types61.default.func,
  /**
   * Function that returns the estimated height for a row.
   * Only works if dynamic row height is used.
   * Once the row height is measured this value is discarded.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
   */
  getEstimatedRowHeight: import_prop_types61.default.func,
  /**
   * Function that applies CSS classes dynamically on rows.
   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
   * @returns {string} The CSS class to apply to the row.
   */
  getRowClassName: import_prop_types61.default.func,
  /**
   * Function that sets the row height per row.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
   */
  getRowHeight: import_prop_types61.default.func,
  /**
   * Return the id of a given [[GridRowModel]].
   */
  getRowId: import_prop_types61.default.func,
  /**
   * Function that allows to specify the spacing between rows.
   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
   * @returns {GridRowSpacing} The row spacing values.
   */
  getRowSpacing: import_prop_types61.default.func,
  /**
   * If `true`, the footer component is hidden.
   * @default false
   */
  hideFooter: import_prop_types61.default.bool,
  /**
   * If `true`, the pagination component in the footer is hidden.
   * @default false
   */
  hideFooterPagination: import_prop_types61.default.bool,
  /**
   * If `true`, the selected row count in the footer is hidden.
   * @default false
   */
  hideFooterSelectedRowCount: import_prop_types61.default.bool,
  /**
   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
   * E.g. when filter value is `cafe`, the rows with `café` will be visible.
   * @default false
   */
  ignoreDiacritics: import_prop_types61.default.bool,
  /**
   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
   * @default false
   */
  ignoreValueFormatterDuringExport: import_prop_types61.default.oneOfType([import_prop_types61.default.shape({
    clipboardExport: import_prop_types61.default.bool,
    csvExport: import_prop_types61.default.bool
  }), import_prop_types61.default.bool]),
  /**
   * The initial state of the DataGrid.
   * The data in it will be set in the state on initialization but will not be controlled.
   * If one of the data in `initialState` is also being controlled, then the control state wins.
   */
  initialState: import_prop_types61.default.object,
  /**
   * Callback fired when a cell is rendered, returns true if the cell is editable.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {boolean} A boolean indicating if the cell is editable.
   */
  isCellEditable: import_prop_types61.default.func,
  /**
   * Determines if a row can be selected.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {boolean} A boolean indicating if the cell is selectable.
   */
  isRowSelectable: import_prop_types61.default.func,
  /**
   * If `true`, the selection model will retain selected rows that do not exist.
   * Useful when using server side pagination and row selections need to be retained
   * when changing pages.
   * @default false
   */
  keepNonExistentRowsSelected: import_prop_types61.default.bool,
  /**
   * If `true`, a loading overlay is displayed.
   */
  loading: import_prop_types61.default.bool,
  /**
   * Set the locale text of the Data Grid.
   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
   */
  localeText: import_prop_types61.default.object,
  /**
   * Pass a custom logger in the components that implements the [[Logger]] interface.
   * @default console
   */
  logger: import_prop_types61.default.shape({
    debug: import_prop_types61.default.func.isRequired,
    error: import_prop_types61.default.func.isRequired,
    info: import_prop_types61.default.func.isRequired,
    warn: import_prop_types61.default.func.isRequired
  }),
  /**
   * Allows to pass the logging level or false to turn off logging.
   * @default "error" ("warn" in dev mode)
   */
  logLevel: import_prop_types61.default.oneOf(["debug", "error", "info", "warn", false]),
  /**
   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
   */
  nonce: import_prop_types61.default.string,
  /**
   * Callback fired when any cell is clicked.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellClick: import_prop_types61.default.func,
  /**
   * Callback fired when a double click event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellDoubleClick: import_prop_types61.default.func,
  /**
   * Callback fired when the cell turns to edit mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStart: import_prop_types61.default.func,
  /**
   * Callback fired when the cell turns to view mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStop: import_prop_types61.default.func,
  /**
   * Callback fired when a keydown event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellKeyDown: import_prop_types61.default.func,
  /**
   * Callback fired when the `cellModesModel` prop changes.
   * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellModesModelChange: import_prop_types61.default.func,
  /**
   * Callback called when the data is copied to the clipboard.
   * @param {string} data The data copied to the clipboard.
   */
  onClipboardCopy: import_prop_types61.default.func,
  /**
   * Callback fired when a click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderClick: import_prop_types61.default.func,
  /**
   * Callback fired when a double click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderDoubleClick: import_prop_types61.default.func,
  /**
   * Callback fired when a mouse enter event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderEnter: import_prop_types61.default.func,
  /**
   * Callback fired when a mouse leave event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderLeave: import_prop_types61.default.func,
  /**
   * Callback fired when a mouseout event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOut: import_prop_types61.default.func,
  /**
   * Callback fired when a mouseover event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOver: import_prop_types61.default.func,
  /**
   * Callback fired when a column is reordered.
   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnOrderChange: import_prop_types61.default.func,
  /**
   * Callback fired while a column is being resized.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnResize: import_prop_types61.default.func,
  /**
   * Callback fired when the column visibility model changes.
   * @param {GridColumnVisibilityModel} model The new model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnVisibilityModelChange: import_prop_types61.default.func,
  /**
   * Callback fired when the width of a column is changed.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnWidthChange: import_prop_types61.default.func,
  /**
   * Callback fired when the density changes.
   * @param {GridDensity} density New density value.
   */
  onDensityChange: import_prop_types61.default.func,
  /**
   * Callback fired when the Filter model changes before the filters are applied.
   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFilterModelChange: import_prop_types61.default.func,
  /**
   * Callback fired when the menu is closed.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuClose: import_prop_types61.default.func,
  /**
   * Callback fired when the menu is opened.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuOpen: import_prop_types61.default.func,
  /**
   * Callback fired when the pagination meta has changed.
   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.
   */
  onPaginationMetaChange: import_prop_types61.default.func,
  /**
   * Callback fired when the pagination model has changed.
   * @param {GridPaginationModel} model Updated pagination model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPaginationModelChange: import_prop_types61.default.func,
  /**
   * Callback fired when the preferences panel is closed.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelClose: import_prop_types61.default.func,
  /**
   * Callback fired when the preferences panel is opened.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelOpen: import_prop_types61.default.func,
  /**
   * Callback called when `processRowUpdate` throws an error or rejects.
   * @param {any} error The error thrown.
   */
  onProcessRowUpdateError: import_prop_types61.default.func,
  /**
   * Callback fired when the Data Grid is resized.
   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onResize: import_prop_types61.default.func,
  /**
   * Callback fired when a row is clicked.
   * Not called if the target clicked is an interactive element added by the built-in columns.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowClick: import_prop_types61.default.func,
  /**
   * Callback fired when the row count has changed.
   * @param {number} count Updated row count.
   */
  onRowCountChange: import_prop_types61.default.func,
  /**
   * Callback fired when a double click event comes from a row container element.
   * @param {GridRowParams} params With all properties from [[RowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowDoubleClick: import_prop_types61.default.func,
  /**
   * Callback fired when the row turns to edit mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStart: import_prop_types61.default.func,
  /**
   * Callback fired when the row turns to view mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStop: import_prop_types61.default.func,
  /**
   * Callback fired when the `rowModesModel` prop changes.
   * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowModesModelChange: import_prop_types61.default.func,
  /**
   * Callback fired when the selection state of one or multiple rows changes.
   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowSelectionModelChange: import_prop_types61.default.func,
  /**
   * Callback fired when the sort model changes before a column is sorted.
   * @param {GridSortModel} model With all properties from [[GridSortModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onSortModelChange: import_prop_types61.default.func,
  /**
   * Callback fired when the state of the Data Grid is updated.
   * @param {GridState} state The new state.
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   * @ignore - do not document.
   */
  onStateChange: import_prop_types61.default.func,
  /**
   * Select the pageSize dynamically using the component UI.
   * @default [25, 50, 100]
   */
  pageSizeOptions: import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.shape({
    label: import_prop_types61.default.string.isRequired,
    value: import_prop_types61.default.number.isRequired
  })]).isRequired),
  pagination: import_prop_types61.default.oneOf([true]),
  /**
   * The extra information about the pagination state of the Data Grid.
   * Only applicable with `paginationMode="server"`.
   */
  paginationMeta: import_prop_types61.default.shape({
    hasNextPage: import_prop_types61.default.bool
  }),
  /**
   * Pagination can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle the pagination on the client-side.
   * Set it to 'server' if you would like to handle the pagination on the server-side.
   * @default "client"
   */
  paginationMode: import_prop_types61.default.oneOf(["client", "server"]),
  /**
   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
   */
  paginationModel: import_prop_types61.default.shape({
    page: import_prop_types61.default.number.isRequired,
    pageSize: import_prop_types61.default.number.isRequired
  }),
  /**
   * Callback called before updating a row with new values in the row and cell editing.
   * @template R
   * @param {R} newRow Row object with the new values.
   * @param {R} oldRow Row object with the old values.
   * @returns {Promise<R> | R} The final values to update the row.
   */
  processRowUpdate: import_prop_types61.default.func,
  /**
   * The milliseconds throttle delay for resizing the grid.
   * @default 60
   */
  resizeThrottleMs: import_prop_types61.default.number,
  /**
   * Row region in pixels to render before/after the viewport
   * @default 150
   */
  rowBufferPx: import_prop_types61.default.number,
  /**
   * Set the total number of rows, if it is different from the length of the value `rows` prop.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Only works with `paginationMode="server"`, ignored when `paginationMode="client"`.
   */
  rowCount: import_prop_types61.default.number,
  /**
   * Sets the height in pixel of a row in the Data Grid.
   * @default 52
   */
  rowHeight: import_prop_types61.default.number,
  /**
   * Controls the modes of the rows.
   */
  rowModesModel: import_prop_types61.default.object,
  /**
   * The milliseconds delay to wait after measuring the row height before recalculating row positions.
   * Setting it to a lower value could be useful when using dynamic row height,
   * but might reduce performance when displaying a large number of rows.
   * @default 166
   */
  rowPositionsDebounceMs: import_prop_types61.default.number,
  /**
   * Set of rows of type [[GridRowsProp]].
   * @default []
   */
  rows: import_prop_types61.default.arrayOf(import_prop_types61.default.object),
  /**
   * If `false`, the row selection mode is disabled.
   * @default true
   */
  rowSelection: import_prop_types61.default.bool,
  /**
   * Sets the row selection model of the Data Grid.
   */
  rowSelectionModel: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]).isRequired), import_prop_types61.default.number, import_prop_types61.default.string]),
  /**
   * Sets the type of space between rows added by `getRowSpacing`.
   * @default "margin"
   */
  rowSpacingType: import_prop_types61.default.oneOf(["border", "margin"]),
  /**
   * Override the height/width of the Data Grid inner scrollbar.
   */
  scrollbarSize: import_prop_types61.default.number,
  /**
   * If `true`, the vertical borders of the cells are displayed.
   * @default false
   */
  showCellVerticalBorder: import_prop_types61.default.bool,
  /**
   * If `true`, the right border of the column headers are displayed.
   * @default false
   */
  showColumnVerticalBorder: import_prop_types61.default.bool,
  /**
   * Overridable components props dynamically passed to the component at rendering.
   */
  slotProps: import_prop_types61.default.object,
  /**
   * Overridable components.
   */
  slots: import_prop_types61.default.object,
  /**
   * Sorting can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle sorting on the client-side.
   * Set it to 'server' if you would like to handle sorting on the server-side.
   * @default "client"
   */
  sortingMode: import_prop_types61.default.oneOf(["client", "server"]),
  /**
   * The order of the sorting sequence.
   * @default ['asc', 'desc', null]
   */
  sortingOrder: import_prop_types61.default.arrayOf(import_prop_types61.default.oneOf(["asc", "desc"])),
  /**
   * Set the sort model of the Data Grid.
   */
  sortModel: import_prop_types61.default.arrayOf(import_prop_types61.default.shape({
    field: import_prop_types61.default.string.isRequired,
    sort: import_prop_types61.default.oneOf(["asc", "desc"])
  })),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object])
};

// node_modules/@mui/x-data-grid-premium/esm/components/GridFooterCell.js
init_utils();

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useGridRootProps.js
var useGridRootProps3 = useGridRootProps;

// node_modules/@mui/x-data-grid-premium/esm/components/GridFooterCell.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime());
var _excluded54 = ["formattedValue", "colDef", "cellMode", "row", "api", "id", "value", "rowNode", "field", "focusElementRef", "hasFocus", "tabIndex", "isEditable"];
var GridFooterCellRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FooterCell",
  overridesResolver: (_, styles) => styles.footerCell
})(({
  theme
}) => ({
  fontWeight: theme.typography.fontWeightMedium,
  color: (theme.vars || theme).palette.primary.dark
}));
var useUtilityClasses43 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["footerCell"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridFooterCell(props) {
  const {
    formattedValue
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
  const rootProps = useGridRootProps3();
  const ownerState = rootProps;
  const classes2 = useUtilityClasses43(ownerState);
  return (0, import_jsx_runtime105.jsx)(GridFooterCellRoot, _extends({
    ownerState,
    className: classes2.root
  }, other, {
    children: formattedValue
  }));
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridAggregationHeader.js
init_extends();
init_objectWithoutPropertiesLoose();
var React166 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useGridApiContext.js
var useGridApiContext2 = useGridApiContext;

// node_modules/@mui/x-data-grid-premium/esm/components/GridAggregationHeader.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime());
var _excluded55 = ["renderHeader"];
var GridAggregationHeaderRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "AggregationColumnHeader",
  overridesResolver: (_, styles) => styles.aggregationColumnHeader
})({
  display: "flex",
  flexDirection: "column",
  [`&.${gridClasses2["aggregationColumnHeader--alignRight"]}`]: {
    alignItems: "flex-end"
  },
  [`&.${gridClasses2["aggregationColumnHeader--alignCenter"]}`]: {
    alignItems: "center"
  }
});
var GridAggregationFunctionLabel = styled_default("div", {
  name: "MuiDataGrid",
  slot: "AggregationColumnHeaderLabel",
  overridesResolver: (_, styles) => styles.aggregationColumnHeaderLabel
})(({
  theme
}) => {
  return {
    fontSize: theme.typography.caption.fontSize,
    lineHeight: theme.typography.caption.fontSize,
    position: "absolute",
    bottom: 4,
    fontWeight: theme.typography.fontWeightMedium,
    color: (theme.vars || theme).palette.primary.dark,
    textTransform: "uppercase"
  };
});
var useUtilityClasses44 = (ownerState) => {
  const {
    classes: classes2,
    colDef
  } = ownerState;
  const slots = {
    root: ["aggregationColumnHeader", colDef.headerAlign === "left" && "aggregationColumnHeader--alignLeft", colDef.headerAlign === "center" && "aggregationColumnHeader--alignCenter", colDef.headerAlign === "right" && "aggregationColumnHeader--alignRight"],
    aggregationLabel: ["aggregationColumnHeaderLabel"]
  };
  return composeClasses(slots, getDataGridUtilityClass2, classes2);
};
function GridAggregationHeader(props) {
  const {
    renderHeader
  } = props, params = _objectWithoutPropertiesLoose(props, _excluded55);
  const {
    colDef,
    aggregation
  } = params;
  const apiRef2 = useGridApiContext2();
  const rootProps = useGridRootProps3();
  const ownerState = _extends({}, rootProps, {
    classes: rootProps.classes,
    colDef
  });
  const classes2 = useUtilityClasses44(ownerState);
  if (!aggregation) {
    return null;
  }
  const aggregationLabel = getAggregationFunctionLabel({
    apiRef: apiRef2,
    aggregationRule: aggregation.aggregationRule
  });
  return (0, import_jsx_runtime106.jsxs)(GridAggregationHeaderRoot, {
    ownerState,
    className: classes2.root,
    children: [renderHeader ? renderHeader(params) : (0, import_jsx_runtime106.jsx)(GridColumnHeaderTitle, {
      label: colDef.headerName ?? colDef.field,
      description: colDef.description,
      columnWidth: colDef.computedWidth
    }), (0, import_jsx_runtime106.jsx)(GridAggregationFunctionLabel, {
      ownerState,
      className: classes2.aggregationLabel,
      children: aggregationLabel
    })]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/wrapColumnWithAggregation.js
var import_jsx_runtime107 = __toESM(require_jsx_runtime());
var _excluded56 = ["aggregationWrappedProperties"];
var getAggregationValueWrappedValueGetter = ({
  value: valueGetter,
  getCellAggregationResult
}) => {
  const wrappedValueGetter = (value, row, column, apiRef2) => {
    const rowId = apiRef2.current.getRowId(row);
    const cellAggregationResult = getCellAggregationResult(rowId, column.field);
    if (cellAggregationResult != null) {
      return (cellAggregationResult == null ? void 0 : cellAggregationResult.value) ?? null;
    }
    if (valueGetter) {
      return valueGetter(value, row, column, apiRef2);
    }
    return row[column.field];
  };
  return wrappedValueGetter;
};
var getAggregationValueWrappedValueFormatter = ({
  value: valueFormatter,
  aggregationRule,
  getCellAggregationResult
}) => {
  if (!aggregationRule.aggregationFunction.valueFormatter) {
    return valueFormatter;
  }
  const wrappedValueFormatter = (value, row, column, apiRef2) => {
    var _a, _b;
    const rowId = apiRef2.current.getRowId(row);
    if (rowId != null) {
      const cellAggregationResult = getCellAggregationResult(rowId, column.field);
      if (cellAggregationResult != null) {
        return (_b = (_a = aggregationRule.aggregationFunction).valueFormatter) == null ? void 0 : _b.call(_a, value, row, column, apiRef2);
      }
    }
    if (valueFormatter) {
      return valueFormatter(value, row, column, apiRef2);
    }
    return value;
  };
  return wrappedValueFormatter;
};
var getAggregationValueWrappedRenderCell = ({
  value: renderCell,
  aggregationRule,
  getCellAggregationResult
}) => {
  const wrappedRenderCell = (params) => {
    const cellAggregationResult = getCellAggregationResult(params.id, params.field);
    if (cellAggregationResult != null) {
      if (!renderCell) {
        if (cellAggregationResult.position === "footer") {
          return (0, import_jsx_runtime107.jsx)(GridFooterCell, _extends({}, params));
        }
        return params.formattedValue;
      }
      const aggregationMeta = {
        hasCellUnit: aggregationRule.aggregationFunction.hasCellUnit ?? true,
        aggregationFunctionName: aggregationRule.aggregationFunctionName
      };
      return renderCell(_extends({}, params, {
        aggregation: aggregationMeta
      }));
    }
    if (!renderCell) {
      return params.formattedValue;
    }
    return renderCell(params);
  };
  return wrappedRenderCell;
};
var getWrappedFilterOperators = ({
  value: filterOperators,
  apiRef: apiRef2,
  getCellAggregationResult
}) => filterOperators.map((operator) => {
  const baseGetApplyFilterFn = operator.getApplyFilterFn;
  const getApplyFilterFn = (filterItem, colDef) => {
    const filterFn = baseGetApplyFilterFn(filterItem, colDef);
    if (!filterFn) {
      return null;
    }
    return (value, row, column, api) => {
      if (getCellAggregationResult(apiRef2.current.getRowId(row), column.field) != null) {
        return true;
      }
      return filterFn(value, row, column, api);
    };
  };
  return _extends({}, operator, {
    getApplyFilterFn
  });
});
var getWrappedRenderHeader = ({
  value: renderHeader,
  aggregationRule
}) => {
  const wrappedRenderHeader = (params) => {
    return (0, import_jsx_runtime107.jsx)(GridAggregationHeader, _extends({}, params, {
      aggregation: {
        aggregationRule
      },
      renderHeader
    }));
  };
  return wrappedRenderHeader;
};
var wrapColumnWithAggregationValue = ({
  column,
  apiRef: apiRef2,
  aggregationRule
}) => {
  const getCellAggregationResult = (id, field) => {
    var _a, _b;
    let cellAggregationPosition = null;
    const rowNode = apiRef2.current.getRowNode(id);
    if (rowNode.type === "group") {
      cellAggregationPosition = "inline";
    } else if (id.toString().startsWith("auto-generated-group-footer-")) {
      cellAggregationPosition = "footer";
    }
    if (cellAggregationPosition == null) {
      return null;
    }
    const groupId = cellAggregationPosition === "inline" ? id : rowNode.parent ?? "";
    const aggregationResult = (_b = (_a = gridAggregationLookupSelector(apiRef2)) == null ? void 0 : _a[groupId]) == null ? void 0 : _b[field];
    if (!aggregationResult || aggregationResult.position !== cellAggregationPosition) {
      return null;
    }
    return aggregationResult;
  };
  let didWrapSomeProperty = false;
  const wrappedColumn = _extends({}, column, {
    aggregationWrappedProperties: []
  });
  const wrapColumnProperty = (property, wrapper) => {
    const originalValue = column[property];
    const wrappedProperty = wrapper({
      apiRef: apiRef2,
      value: originalValue,
      colDef: column,
      aggregationRule,
      getCellAggregationResult
    });
    if (wrappedProperty !== originalValue) {
      didWrapSomeProperty = true;
      wrappedColumn[property] = wrappedProperty;
      wrappedColumn.aggregationWrappedProperties.push({
        name: property,
        originalValue,
        wrappedValue: wrappedProperty
      });
    }
  };
  wrapColumnProperty("valueGetter", getAggregationValueWrappedValueGetter);
  wrapColumnProperty("valueFormatter", getAggregationValueWrappedValueFormatter);
  wrapColumnProperty("renderCell", getAggregationValueWrappedRenderCell);
  wrapColumnProperty("renderHeader", getWrappedRenderHeader);
  wrapColumnProperty("filterOperators", getWrappedFilterOperators);
  if (!didWrapSomeProperty) {
    return column;
  }
  return wrappedColumn;
};
var unwrapColumnFromAggregation = ({
  column
}) => {
  if (!column.aggregationWrappedProperties) {
    return column;
  }
  const _ref = column, {
    aggregationWrappedProperties
  } = _ref, unwrappedColumn = _objectWithoutPropertiesLoose(_ref, _excluded56);
  aggregationWrappedProperties.forEach(({
    name,
    originalValue,
    wrappedValue
  }) => {
    if (wrappedValue !== unwrappedColumn[name]) {
      return;
    }
    unwrappedColumn[name] = originalValue;
  });
  return unwrappedColumn;
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregationPreProcessors.js
var useGridAggregationPreProcessors = (apiRef2, props) => {
  const rulesOnLastColumnHydration = React168.useRef({});
  const updateAggregatedColumns = React168.useCallback((columnsState) => {
    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({
      columnsLookup: columnsState.lookup,
      aggregationModel: gridAggregationModelSelector(apiRef2),
      aggregationFunctions: props.aggregationFunctions
    });
    columnsState.orderedFields.forEach((field) => {
      const shouldHaveAggregationValue = !!aggregationRules[field];
      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];
      let column = columnsState.lookup[field];
      if (haveAggregationColumnValue) {
        column = unwrapColumnFromAggregation({
          column
        });
      }
      if (shouldHaveAggregationValue) {
        column = wrapColumnWithAggregationValue({
          column,
          aggregationRule: aggregationRules[field],
          apiRef: apiRef2
        });
      }
      columnsState.lookup[field] = column;
    });
    rulesOnLastColumnHydration.current = aggregationRules;
    return columnsState;
  }, [apiRef2, props.aggregationFunctions, props.disableAggregation]);
  const addGroupFooterRows = React168.useCallback((value) => {
    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({
      columnsLookup: gridColumnLookupSelector(apiRef2),
      aggregationModel: gridAggregationModelSelector(apiRef2),
      aggregationFunctions: props.aggregationFunctions
    });
    const hasAggregationRule = Object.keys(aggregationRules).length > 0;
    if (Object.keys(apiRef2.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {
      return value;
    }
    apiRef2.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;
    return addFooterRows({
      apiRef: apiRef2,
      groupingParams: value,
      getAggregationPosition: props.getAggregationPosition,
      hasAggregationRule
    });
  }, [apiRef2, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);
  const addColumnMenuButtons = React168.useCallback((columnMenuItems, colDef) => {
    if (props.disableAggregation || !colDef.aggregable) {
      return columnMenuItems;
    }
    const availableAggregationFunctions = getAvailableAggregationFunctions({
      aggregationFunctions: props.aggregationFunctions,
      colDef
    });
    if (availableAggregationFunctions.length === 0) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuAggregationItem"];
  }, [props.aggregationFunctions, props.disableAggregation]);
  const stateExportPreProcessing = React168.useCallback((prevState) => {
    if (props.disableAggregation) {
      return prevState;
    }
    const aggregationModelToExport = gridAggregationModelSelector(apiRef2);
    if (Object.values(aggregationModelToExport).length === 0) {
      return prevState;
    }
    return _extends({}, prevState, {
      aggregation: {
        model: aggregationModelToExport
      }
    });
  }, [apiRef2, props.disableAggregation]);
  const stateRestorePreProcessing = React168.useCallback((params, context) => {
    var _a;
    if (props.disableAggregation) {
      return params;
    }
    const aggregationModel = (_a = context.stateToRestore.aggregation) == null ? void 0 : _a.model;
    if (aggregationModel != null) {
      apiRef2.current.setState(mergeStateWithAggregationModel(aggregationModel));
    }
    return params;
  }, [apiRef2, props.disableAggregation]);
  useGridRegisterPipeProcessor(apiRef2, "hydrateColumns", updateAggregatedColumns);
  useGridRegisterPipeProcessor(apiRef2, "hydrateRows", addGroupFooterRows);
  useGridRegisterPipeProcessor(apiRef2, "columnMenu", addColumnMenuButtons);
  useGridRegisterPipeProcessor(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef2, "restoreState", stateRestorePreProcessing);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGrouping.js
init_extends();
var React169 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/gridRowGroupingSelector.js
var gridRowGroupingStateSelector = (state) => state.rowGrouping;
var gridRowGroupingModelSelector = createSelector3(gridRowGroupingStateSelector, (rowGrouping) => rowGrouping.model);
var gridRowGroupingSanitizedModelSelector = createSelectorMemoized(gridRowGroupingModelSelector, gridColumnLookupSelector, (model, columnsLookup) => model.filter((field) => !!columnsLookup[field]));

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/gridRowGroupingUtils.js
init_extends();
var GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD = "__row_group_by_columns_group__";
var ROW_GROUPING_STRATEGY = "grouping-columns";
var getRowGroupingFieldFromGroupingCriteria = (groupingCriteria) => {
  if (groupingCriteria === null) {
    return GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD;
  }
  return `__row_group_by_columns_group_${groupingCriteria}__`;
};
var getRowGroupingCriteriaFromGroupingField = (groupingColDefField) => {
  const match = groupingColDefField.match(/^__row_group_by_columns_group_(.*)__$/);
  if (!match) {
    return null;
  }
  return match[1];
};
var isGroupingColumn = (field) => field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD || getRowGroupingCriteriaFromGroupingField(field) !== null;
var shouldApplyFilterItemOnGroup = (columnField, node) => {
  if (columnField === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {
    return true;
  }
  const groupingCriteriaField = getRowGroupingCriteriaFromGroupingField(columnField);
  return groupingCriteriaField === node.groupingField;
};
var filterRowTreeFromGroupingColumns = (params) => {
  const {
    apiRef: apiRef2,
    rowTree,
    isRowMatchingFilters,
    filterModel
  } = params;
  const filteredRowsLookup = {};
  const filteredDescendantCountLookup = {};
  const filterCache = {};
  const filterTreeNode = (node, areAncestorsExpanded, ancestorsResults) => {
    const filterResults = {
      passingFilterItems: null,
      passingQuickFilterValues: null
    };
    let isPassingFiltering = false;
    if (isRowMatchingFilters && node.type !== "footer") {
      const shouldApplyItem = node.type === "group" && node.isAutoGenerated ? (columnField) => shouldApplyFilterItemOnGroup(columnField, node) : void 0;
      const row = apiRef2.current.getRow(node.id);
      isRowMatchingFilters(row, shouldApplyItem, filterResults);
    } else {
      isPassingFiltering = true;
    }
    let filteredDescendantCount = 0;
    if (node.type === "group") {
      node.children.forEach((childId) => {
        const childNode = rowTree[childId];
        const childSubTreeSize = filterTreeNode(childNode, areAncestorsExpanded && !!node.childrenExpanded, [...ancestorsResults, filterResults]);
        filteredDescendantCount += childSubTreeSize;
      });
    }
    if (isPassingFiltering === false) {
      if (node.type === "group") {
        isPassingFiltering = filteredDescendantCount > 0;
      } else {
        const allResults = [...ancestorsResults, filterResults];
        isPassingFiltering = passFilterLogic(allResults.map((result) => result.passingFilterItems), allResults.map((result) => result.passingQuickFilterValues), filterModel, params.apiRef, filterCache);
      }
    }
    filteredRowsLookup[node.id] = isPassingFiltering;
    if (!isPassingFiltering) {
      return 0;
    }
    filteredDescendantCountLookup[node.id] = filteredDescendantCount;
    if (node.type !== "group") {
      return filteredDescendantCount + 1;
    }
    return filteredDescendantCount;
  };
  const nodes = Object.values(rowTree);
  for (let i2 = 0; i2 < nodes.length; i2 += 1) {
    const node = nodes[i2];
    if (node.depth === 0) {
      filterTreeNode(node, true, []);
    }
  }
  return {
    filteredRowsLookup,
    filteredDescendantCountLookup
  };
};
var getColDefOverrides = (groupingColDefProp, fields) => {
  if (typeof groupingColDefProp === "function") {
    return groupingColDefProp({
      groupingName: ROW_GROUPING_STRATEGY,
      fields
    });
  }
  return groupingColDefProp;
};
var mergeStateWithRowGroupingModel = (rowGroupingModel) => (state) => _extends({}, state, {
  rowGrouping: _extends({}, state.rowGrouping, {
    model: rowGroupingModel
  })
});
var setStrategyAvailability = (privateApiRef, disableRowGrouping) => {
  let isAvailable;
  if (disableRowGrouping) {
    isAvailable = () => false;
  } else {
    isAvailable = () => {
      const rowGroupingSanitizedModel = gridRowGroupingSanitizedModelSelector(privateApiRef);
      return rowGroupingSanitizedModel.length > 0;
    };
  }
  privateApiRef.current.setStrategyAvailability("rowTree", ROW_GROUPING_STRATEGY, isAvailable);
};
var getCellGroupingCriteria = ({
  row,
  colDef,
  groupingRule,
  apiRef: apiRef2
}) => {
  let key;
  if (groupingRule.groupingValueGetter) {
    key = groupingRule.groupingValueGetter(row[groupingRule.field], row, colDef, apiRef2);
  } else {
    key = row[groupingRule.field];
  }
  return {
    key,
    field: groupingRule.field
  };
};
var getGroupingRules = ({
  sanitizedRowGroupingModel,
  columnsLookup
}) => sanitizedRowGroupingModel.map((field) => {
  var _a;
  return {
    field,
    groupingValueGetter: (_a = columnsLookup[field]) == null ? void 0 : _a.groupingValueGetter
  };
});
var areGroupingRulesEqual = (newValue, previousValue) => {
  if (previousValue.length !== newValue.length) {
    return false;
  }
  return newValue.every((newRule, newRuleIndex) => {
    const previousRule = previousValue[newRuleIndex];
    if (previousRule.groupingValueGetter !== newRule.groupingValueGetter) {
      return false;
    }
    if (previousRule.field !== newRule.field) {
      return false;
    }
    return true;
  });
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGrouping.js
var rowGroupingStateInitializer = (state, props, apiRef2) => {
  var _a, _b;
  apiRef2.current.caches.rowGrouping = {
    rulesOnLastRowTreeCreation: []
  };
  return _extends({}, state, {
    rowGrouping: {
      model: props.rowGroupingModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.rowGrouping) == null ? void 0 : _b.model) ?? []
    }
  });
};
var useGridRowGrouping = (apiRef2, props) => {
  var _a, _b;
  apiRef2.current.registerControlState({
    stateId: "rowGrouping",
    propModel: props.rowGroupingModel,
    propOnChange: props.onRowGroupingModelChange,
    stateSelector: gridRowGroupingModelSelector,
    changeEvent: "rowGroupingModelChange"
  });
  const setRowGroupingModel = React169.useCallback((model) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    if (currentModel !== model) {
      apiRef2.current.setState(mergeStateWithRowGroupingModel(model));
      setStrategyAvailability(apiRef2, props.disableRowGrouping);
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2, props.disableRowGrouping]);
  const addRowGroupingCriteria = React169.useCallback((field, groupingIndex) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    if (currentModel.includes(field)) {
      return;
    }
    const cleanGroupingIndex = groupingIndex ?? currentModel.length;
    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];
    apiRef2.current.setRowGroupingModel(updatedModel);
  }, [apiRef2]);
  const removeRowGroupingCriteria = React169.useCallback((field) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    if (!currentModel.includes(field)) {
      return;
    }
    apiRef2.current.setRowGroupingModel(currentModel.filter((el) => el !== field));
  }, [apiRef2]);
  const setRowGroupingCriteriaIndex = React169.useCallback((field, targetIndex) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    const currentTargetIndex = currentModel.indexOf(field);
    if (currentTargetIndex === -1) {
      return;
    }
    const updatedModel = [...currentModel];
    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);
    apiRef2.current.setRowGroupingModel(updatedModel);
  }, [apiRef2]);
  const rowGroupingApi = {
    setRowGroupingModel,
    addRowGroupingCriteria,
    removeRowGroupingCriteria,
    setRowGroupingCriteriaIndex
  };
  useGridApiMethod(apiRef2, rowGroupingApi, "public");
  const addColumnMenuButtons = React169.useCallback((columnMenuItems, colDef) => {
    if (props.disableRowGrouping) {
      return columnMenuItems;
    }
    if (isGroupingColumn(colDef.field) || colDef.groupable) {
      return [...columnMenuItems, "columnMenuGroupingItem"];
    }
    return columnMenuItems;
  }, [props.disableRowGrouping]);
  const stateExportPreProcessing = React169.useCallback((prevState, context) => {
    var _a2, _b2;
    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef2);
    const shouldExportRowGroupingModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.rowGroupingModel != null || // Always export if the model has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.rowGrouping) == null ? void 0 : _b2.model) != null || // Export if the model is not empty
      Object.keys(rowGroupingModelToExport).length > 0
    );
    if (!shouldExportRowGroupingModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      rowGrouping: {
        model: rowGroupingModelToExport
      }
    });
  }, [apiRef2, props.rowGroupingModel, (_b = (_a = props.initialState) == null ? void 0 : _a.rowGrouping) == null ? void 0 : _b.model]);
  const stateRestorePreProcessing = React169.useCallback((params, context) => {
    var _a2;
    if (props.disableRowGrouping) {
      return params;
    }
    const rowGroupingModel = (_a2 = context.stateToRestore.rowGrouping) == null ? void 0 : _a2.model;
    if (rowGroupingModel != null) {
      apiRef2.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));
    }
    return params;
  }, [apiRef2, props.disableRowGrouping]);
  useGridRegisterPipeProcessor(apiRef2, "columnMenu", addColumnMenuButtons);
  useGridRegisterPipeProcessor(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef2, "restoreState", stateRestorePreProcessing);
  const handleCellKeyDown = React169.useCallback((params, event) => {
    const cellParams = apiRef2.current.getCellParams(params.id, params.field);
    if (isGroupingColumn(cellParams.field) && event.key === " " && !event.shiftKey) {
      event.stopPropagation();
      event.preventDefault();
      if (params.rowNode.type !== "group") {
        return;
      }
      const isOnGroupingCell = props.rowGroupingColumnMode === "single" || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;
      if (!isOnGroupingCell) {
        return;
      }
      apiRef2.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);
    }
  }, [apiRef2, props.rowGroupingColumnMode]);
  const checkGroupingColumnsModelDiff = React169.useCallback(() => {
    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef2);
    const rulesOnLastRowTreeCreation = apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];
    const groupingRules = getGroupingRules({
      sanitizedRowGroupingModel,
      columnsLookup: gridColumnLookupSelector(apiRef2)
    });
    if (!areGroupingRulesEqual(rulesOnLastRowTreeCreation, groupingRules)) {
      apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;
      apiRef2.current.requestPipeProcessorsApplication("hydrateColumns");
      setStrategyAvailability(apiRef2, props.disableRowGrouping);
      if (apiRef2.current.getActiveStrategy("rowTree") === ROW_GROUPING_STRATEGY) {
        apiRef2.current.publishEvent("activeStrategyProcessorChange", "rowTreeCreation");
      }
    }
  }, [apiRef2, props.disableRowGrouping]);
  useGridApiEventHandler(apiRef2, "cellKeyDown", handleCellKeyDown);
  useGridApiEventHandler(apiRef2, "columnsChange", checkGroupingColumnsModelDiff);
  useGridApiEventHandler(apiRef2, "rowGroupingModelChange", checkGroupingColumnsModelDiff);
  React169.useEffect(() => {
    if (props.rowGroupingModel !== void 0) {
      apiRef2.current.setRowGroupingModel(props.rowGroupingModel);
    }
  }, [apiRef2, props.rowGroupingModel]);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js
var React174 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/createGroupingColDef.js
init_objectWithoutPropertiesLoose();
init_extends();
var React173 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/components/GridGroupingColumnFooterCell.js
init_extends();
var React170 = __toESM(require_react());
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
function GridGroupingColumnFooterCell(props) {
  const rootProps = useGridRootProps3();
  const sx = {
    ml: 0
  };
  if (props.rowNode.parent == null) {
    sx.ml = 0;
  } else if (rootProps.rowGroupingColumnMode === "multiple") {
    sx.ml = 2;
  } else {
    sx.ml = (theme) => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(props.rowNode.depth)})`;
  }
  return (0, import_jsx_runtime108.jsx)(GridFooterCell, _extends({
    sx
  }, props));
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridGroupingCriteriaCell.js
init_extends();
var React171 = __toESM(require_react());
init_utils();
var import_jsx_runtime109 = __toESM(require_jsx_runtime());
var useUtilityClasses45 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["groupingCriteriaCell"],
    toggle: ["groupingCriteriaCellToggle"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes2);
};
function GridGroupingCriteriaCell(props) {
  var _a;
  const {
    id,
    field,
    rowNode,
    hideDescendantCount,
    formattedValue
  } = props;
  const rootProps = useGridRootProps3();
  const apiRef2 = useGridApiContext2();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses45(ownerState);
  const filteredDescendantCountLookup = useGridSelector(apiRef2, gridFilteredDescendantCountLookupSelector);
  const filteredDescendantCount = filteredDescendantCountLookup[rowNode.id] ?? 0;
  const Icon = rowNode.childrenExpanded ? rootProps.slots.groupingCriteriaCollapseIcon : rootProps.slots.groupingCriteriaExpandIcon;
  const handleKeyDown = (event) => {
    if (event.key === " ") {
      event.stopPropagation();
    }
    apiRef2.current.publishEvent("cellKeyDown", props, event);
  };
  const handleClick = (event) => {
    apiRef2.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);
    apiRef2.current.setCellFocus(id, field);
    event.stopPropagation();
  };
  let cellContent;
  const colDef = apiRef2.current.getColumn(rowNode.groupingField);
  if (typeof colDef.renderCell === "function") {
    cellContent = colDef.renderCell(props);
  } else if (typeof formattedValue !== "undefined") {
    cellContent = (0, import_jsx_runtime109.jsx)("span", {
      children: formattedValue
    });
  } else {
    cellContent = (0, import_jsx_runtime109.jsx)("span", {
      children: rowNode.groupingKey
    });
  }
  return (0, import_jsx_runtime109.jsxs)(Box_default, {
    className: classes2.root,
    sx: {
      ml: rootProps.rowGroupingColumnMode === "multiple" ? 0 : (theme) => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(rowNode.depth)})`
    },
    children: [(0, import_jsx_runtime109.jsx)("div", {
      className: classes2.toggle,
      children: filteredDescendantCount > 0 && (0, import_jsx_runtime109.jsx)(rootProps.slots.baseIconButton, _extends({
        size: "small",
        onClick: handleClick,
        onKeyDown: handleKeyDown,
        tabIndex: -1,
        "aria-label": rowNode.childrenExpanded ? apiRef2.current.getLocaleText("treeDataCollapse") : apiRef2.current.getLocaleText("treeDataExpand")
      }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
        children: (0, import_jsx_runtime109.jsx)(Icon, {
          fontSize: "inherit"
        })
      }))
    }), cellContent, !hideDescendantCount && filteredDescendantCount > 0 ? (0, import_jsx_runtime109.jsxs)("span", {
      style: {
        whiteSpace: "pre"
      },
      children: [" (", filteredDescendantCount, ")"]
    }) : null]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridGroupingColumnLeafCell.js
var React172 = __toESM(require_react());
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
function GridGroupingColumnLeafCell(props) {
  const {
    rowNode
  } = props;
  const rootProps = useGridRootProps3();
  return (0, import_jsx_runtime110.jsx)(Box_default, {
    sx: {
      ml: rootProps.rowGroupingColumnMode === "multiple" ? 1 : (theme) => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(rowNode.depth)})`
    },
    children: props.formattedValue ?? props.value
  });
}

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/createGroupingColDef.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
var _excluded57 = ["leafField", "mainGroupingCriteria", "hideDescendantCount"];
var _excluded214 = ["leafField", "mainGroupingCriteria", "hideDescendantCount"];
var GROUPING_COL_DEF_DEFAULT_PROPERTIES = _extends({}, GRID_STRING_COL_DEF, {
  type: "custom",
  disableReorder: true
});
var GROUPING_COL_DEF_FORCED_PROPERTIES = {
  editable: false,
  groupable: false
};
var groupingFieldIndexComparator = (v1, v2, cellParams1, cellParams2) => {
  const model = gridRowGroupingSanitizedModelSelector(cellParams1.api.state, cellParams1.api.instanceId);
  const groupingField1 = cellParams1.rowNode.groupingField ?? null;
  const groupingField2 = cellParams2.rowNode.groupingField ?? null;
  if (groupingField1 === groupingField2) {
    return 0;
  }
  if (groupingField1 == null) {
    return -1;
  }
  if (groupingField2 == null) {
    return 1;
  }
  if (model.indexOf(groupingField1) < model.indexOf(groupingField2)) {
    return -1;
  }
  return 1;
};
var getLeafProperties = (leafColDef) => ({
  headerName: leafColDef.headerName ?? leafColDef.field,
  sortable: leafColDef.sortable,
  filterable: leafColDef.filterable,
  valueOptions: isSingleSelectColDef(leafColDef) ? leafColDef.valueOptions : void 0,
  filterOperators: leafColDef.filterOperators,
  sortComparator: (v1, v2, cellParams1, cellParams2) => {
    if (cellParams1.rowNode.type === "leaf" && cellParams2.rowNode.type === "leaf") {
      return leafColDef.sortComparator(v1, v2, cellParams1, cellParams2);
    }
    return groupingFieldIndexComparator(v1, v2, cellParams1, cellParams2);
  }
});
var getGroupingCriteriaProperties = (groupedByColDef, applyHeaderName) => {
  const properties = {
    sortable: groupedByColDef.sortable,
    filterable: groupedByColDef.filterable,
    valueOptions: isSingleSelectColDef(groupedByColDef) ? groupedByColDef.valueOptions : void 0,
    sortComparator: (v1, v2, cellParams1, cellParams2) => {
      if (cellParams1.rowNode.type === "group" && cellParams2.rowNode.type === "group" && cellParams1.rowNode.groupingField === cellParams2.rowNode.groupingField) {
        const colDef = cellParams1.api.getColumn(cellParams1.rowNode.groupingField);
        return colDef.sortComparator(v1, v2, cellParams1, cellParams2);
      }
      return groupingFieldIndexComparator(v1, v2, cellParams1, cellParams2);
    },
    filterOperators: groupedByColDef.filterOperators
  };
  if (applyHeaderName) {
    properties.headerName = groupedByColDef.headerName ?? groupedByColDef.field;
  }
  return properties;
};
var createGroupingColDefForOneGroupingCriteria = ({
  columnsLookup,
  groupedByColDef,
  groupingCriteria,
  colDefOverride
}) => {
  const _ref = colDefOverride ?? {}, {
    leafField,
    mainGroupingCriteria,
    hideDescendantCount
  } = _ref, colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded57);
  const leafColDef = leafField ? columnsLookup[leafField] : null;
  const commonProperties = {
    width: Math.max((groupedByColDef.width ?? GRID_STRING_COL_DEF.width) + 40, (leafColDef == null ? void 0 : leafColDef.width) ?? 0),
    renderCell: (params) => {
      if (params.rowNode.type === "footer" || params.rowNode.type === "pinnedRow") {
        return (0, import_jsx_runtime111.jsx)(GridGroupingColumnFooterCell, _extends({}, params));
      }
      if (params.rowNode.type === "leaf") {
        if (leafColDef) {
          const leafParams = _extends({}, params.api.getCellParams(params.id, leafField), {
            api: params.api,
            hasFocus: params.hasFocus
          });
          if (leafColDef.renderCell) {
            return leafColDef.renderCell(leafParams);
          }
          return (0, import_jsx_runtime111.jsx)(GridGroupingColumnLeafCell, _extends({}, leafParams));
        }
        return "";
      }
      if (params.rowNode.groupingField === groupingCriteria) {
        return (0, import_jsx_runtime111.jsx)(GridGroupingCriteriaCell, _extends({}, params, {
          hideDescendantCount
        }));
      }
      return "";
    },
    valueGetter: (value, row, column, apiRef2) => {
      const rowId = apiRef2.current.getRowId(row);
      const rowNode = apiRef2.current.getRowNode(rowId);
      if (!rowNode || rowNode.type === "footer" || rowNode.type === "pinnedRow") {
        return void 0;
      }
      if (rowNode.type === "leaf") {
        if (leafColDef) {
          return apiRef2.current.getCellValue(rowId, leafField);
        }
        return void 0;
      }
      if (rowNode.groupingField === groupingCriteria) {
        return rowNode.groupingKey;
      }
      return void 0;
    }
  };
  let sourceProperties;
  if (mainGroupingCriteria && mainGroupingCriteria === groupingCriteria) {
    sourceProperties = getGroupingCriteriaProperties(groupedByColDef, true);
  } else if (leafColDef) {
    sourceProperties = getLeafProperties(leafColDef);
  } else {
    sourceProperties = getGroupingCriteriaProperties(groupedByColDef, true);
  }
  const forcedProperties = _extends({
    field: getRowGroupingFieldFromGroupingCriteria(groupingCriteria)
  }, GROUPING_COL_DEF_FORCED_PROPERTIES);
  return _extends({}, GROUPING_COL_DEF_DEFAULT_PROPERTIES, commonProperties, sourceProperties, colDefOverrideProperties, forcedProperties);
};
var createGroupingColDefForAllGroupingCriteria = ({
  apiRef: apiRef2,
  columnsLookup,
  rowGroupingModel,
  colDefOverride
}) => {
  const _ref2 = colDefOverride ?? {}, {
    leafField,
    mainGroupingCriteria,
    hideDescendantCount
  } = _ref2, colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref2, _excluded214);
  const leafColDef = leafField ? columnsLookup[leafField] : null;
  const commonProperties = {
    headerName: apiRef2.current.getLocaleText("groupingColumnHeaderName"),
    width: Math.max(...rowGroupingModel.map((field) => (columnsLookup[field].width ?? GRID_STRING_COL_DEF.width) + 40), (leafColDef == null ? void 0 : leafColDef.width) ?? 0),
    renderCell: (params) => {
      if (params.rowNode.type === "footer" || params.rowNode.type === "pinnedRow") {
        return (0, import_jsx_runtime111.jsx)(GridGroupingColumnFooterCell, _extends({}, params));
      }
      if (params.rowNode.type === "leaf") {
        if (leafColDef) {
          const leafParams = _extends({}, params.api.getCellParams(params.id, leafField), {
            api: params.api,
            hasFocus: params.hasFocus
          });
          if (leafColDef.renderCell) {
            return leafColDef.renderCell(leafParams);
          }
          return (0, import_jsx_runtime111.jsx)(GridGroupingColumnLeafCell, _extends({}, leafParams));
        }
        return "";
      }
      return (0, import_jsx_runtime111.jsx)(GridGroupingCriteriaCell, _extends({}, params, {
        hideDescendantCount
      }));
    },
    valueGetter: (value, row) => {
      const rowId = apiRef2.current.getRowId(row);
      const rowNode = apiRef2.current.getRowNode(rowId);
      if (!rowNode || rowNode.type === "footer" || rowNode.type === "pinnedRow") {
        return void 0;
      }
      if (rowNode.type === "leaf") {
        if (leafColDef) {
          return apiRef2.current.getCellValue(rowId, leafField);
        }
        return void 0;
      }
      return rowNode.groupingKey;
    }
  };
  let sourceProperties;
  if (mainGroupingCriteria && rowGroupingModel.includes(mainGroupingCriteria)) {
    sourceProperties = getGroupingCriteriaProperties(columnsLookup[mainGroupingCriteria], true);
  } else if (leafColDef) {
    sourceProperties = getLeafProperties(leafColDef);
  } else {
    sourceProperties = getGroupingCriteriaProperties(columnsLookup[rowGroupingModel[0]], rowGroupingModel.length === 1);
  }
  const forcedProperties = _extends({
    field: GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD
  }, GROUPING_COL_DEF_FORCED_PROPERTIES);
  return _extends({}, GROUPING_COL_DEF_DEFAULT_PROPERTIES, commonProperties, sourceProperties, colDefOverrideProperties, forcedProperties);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js
var useGridRowGroupingPreProcessors = (apiRef2, props) => {
  const getGroupingColDefs = React174.useCallback((columnsState) => {
    if (props.disableRowGrouping) {
      return [];
    }
    const groupingColDefProp = props.groupingColDef;
    const rowGroupingModel = gridRowGroupingModelSelector(apiRef2).filter((field) => !!columnsState.lookup[field]);
    if (rowGroupingModel.length === 0) {
      return [];
    }
    switch (props.rowGroupingColumnMode) {
      case "single": {
        return [createGroupingColDefForAllGroupingCriteria({
          apiRef: apiRef2,
          rowGroupingModel,
          colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),
          columnsLookup: columnsState.lookup
        })];
      }
      case "multiple": {
        return rowGroupingModel.map((groupingCriteria) => createGroupingColDefForOneGroupingCriteria({
          groupingCriteria,
          colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),
          groupedByColDef: columnsState.lookup[groupingCriteria],
          columnsLookup: columnsState.lookup
        }));
      }
      default: {
        return [];
      }
    }
  }, [apiRef2, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);
  const updateGroupingColumn = React174.useCallback((columnsState) => {
    const groupingColDefs = getGroupingColDefs(columnsState);
    let newColumnFields = [];
    const newColumnsLookup = {};
    columnsState.orderedFields.forEach((field) => {
      if (!isGroupingColumn(field)) {
        newColumnFields.push(field);
        newColumnsLookup[field] = columnsState.lookup[field];
      }
    });
    groupingColDefs.forEach((groupingColDef) => {
      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];
      if (matchingGroupingColDef) {
        groupingColDef.width = matchingGroupingColDef.width;
        groupingColDef.flex = matchingGroupingColDef.flex;
      }
      newColumnsLookup[groupingColDef.field] = groupingColDef;
    });
    const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;
    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map((colDef) => colDef.field), ...newColumnFields.slice(startIndex)];
    columnsState.orderedFields = newColumnFields;
    columnsState.lookup = newColumnsLookup;
    return columnsState;
  }, [getGroupingColDefs]);
  const createRowTreeForRowGrouping = React174.useCallback((params) => {
    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef2);
    const columnsLookup = gridColumnLookupSelector(apiRef2);
    const groupingRules = getGroupingRules({
      sanitizedRowGroupingModel,
      columnsLookup
    });
    apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;
    const getRowTreeBuilderNode = (rowId) => {
      const row = params.dataRowIdToModelLookup[rowId];
      const parentPath = groupingRules.map((groupingRule) => getCellGroupingCriteria({
        row,
        groupingRule,
        colDef: columnsLookup[groupingRule.field],
        apiRef: apiRef2
      })).filter((cell) => cell.key != null);
      const leafGroupingCriteria = {
        key: rowId.toString(),
        field: null
      };
      return {
        path: [...parentPath, leafGroupingCriteria],
        id: rowId
      };
    };
    if (params.updates.type === "full") {
      return createRowTree({
        previousTree: params.previousTree,
        nodes: params.updates.rows.map(getRowTreeBuilderNode),
        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
        isGroupExpandedByDefault: props.isGroupExpandedByDefault,
        groupingName: ROW_GROUPING_STRATEGY
      });
    }
    return updateRowTree({
      nodes: {
        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),
        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),
        removed: params.updates.actions.remove
      },
      previousTree: params.previousTree,
      previousTreeDepth: params.previousTreeDepths,
      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
      isGroupExpandedByDefault: props.isGroupExpandedByDefault,
      groupingName: ROW_GROUPING_STRATEGY
    });
  }, [apiRef2, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);
  const filterRows = React174.useCallback((params) => {
    const rowTree = gridRowTreeSelector(apiRef2);
    return filterRowTreeFromGroupingColumns({
      rowTree,
      isRowMatchingFilters: params.isRowMatchingFilters,
      filterModel: params.filterModel,
      apiRef: apiRef2
    });
  }, [apiRef2]);
  const sortRows = React174.useCallback((params) => {
    const rowTree = gridRowTreeSelector(apiRef2);
    return sortRowTree({
      rowTree,
      sortRowList: params.sortRowList,
      disableChildrenSorting: false,
      shouldRenderGroupBelowLeaves: true
    });
  }, [apiRef2]);
  useGridRegisterPipeProcessor(apiRef2, "hydrateColumns", updateGroupingColumn);
  useGridRegisterStrategyProcessor(apiRef2, ROW_GROUPING_STRATEGY, "rowTreeCreation", createRowTreeForRowGrouping);
  useGridRegisterStrategyProcessor(apiRef2, ROW_GROUPING_STRATEGY, "filtering", filterRows);
  useGridRegisterStrategyProcessor(apiRef2, ROW_GROUPING_STRATEGY, "sorting", sortRows);
  useGridRegisterStrategyProcessor(apiRef2, ROW_GROUPING_STRATEGY, "visibleRowsLookupCreation", getVisibleRowsLookup);
  useFirstRender(() => {
    setStrategyAvailability(apiRef2, props.disableRowGrouping);
  });
  const isFirstRender = React174.useRef(true);
  React174.useEffect(() => {
    if (!isFirstRender.current) {
      setStrategyAvailability(apiRef2, props.disableRowGrouping);
    } else {
      isFirstRender.current = false;
    }
  }, [apiRef2, props.disableRowGrouping]);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/useGridExcelExport.js
init_objectWithoutPropertiesLoose();
var React181 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/serializer/excelSerializer.js
init_extends();
var getExcelJs = async () => {
  const excelJsModule = await import("./exceljs.min-AWENZVO2.js");
  return excelJsModule.default ?? excelJsModule;
};
var warnInvalidFormattedValue = buildWarning(["MUI X: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
var getFormattedValueOptions = (colDef, row, valueOptions, api) => {
  if (!colDef.valueOptions) {
    return [];
  }
  let valueOptionsFormatted = valueOptions;
  if (colDef.valueFormatter) {
    valueOptionsFormatted = valueOptionsFormatted.map((option) => {
      if (typeof option === "object") {
        return option;
      }
      return String(colDef.valueFormatter(option, row, colDef, {
        current: api
      }));
    });
  }
  return valueOptionsFormatted.map((option) => typeof option === "object" ? option.label : option);
};
var serializeRow2 = (id, columns, api, defaultValueOptionsFormulae, options) => {
  const row = {};
  const dataValidation = {};
  const mergedCells = [];
  const firstCellParams = api.getCellParams(id, columns[0].field);
  const outlineLevel = firstCellParams.rowNode.depth;
  api.calculateColSpan({
    rowId: id,
    minFirstColumn: 0,
    maxLastColumn: columns.length,
    columns
  });
  columns.forEach((column, colIndex) => {
    const colSpanInfo = api.unstable_getCellColSpanInfo(id, colIndex);
    if (colSpanInfo && colSpanInfo.spannedByColSpan) {
      return;
    }
    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {
      mergedCells.push({
        leftIndex: colIndex + 1,
        rightIndex: colIndex + colSpanInfo.cellProps.colSpan
      });
    }
    const cellParams = api.getCellParams(id, column.field);
    let cellValue;
    switch (cellParams.colDef.type) {
      case "singleSelect": {
        const castColumn = cellParams.colDef;
        if (typeof castColumn.valueOptions === "function") {
          const valueOptions = castColumn.valueOptions({
            id,
            row,
            field: cellParams.field
          });
          const formattedValueOptions = getFormattedValueOptions(castColumn, row, valueOptions, api);
          dataValidation[castColumn.field] = {
            type: "list",
            allowBlank: true,
            formulae: [`"${formattedValueOptions.map((x) => x.toString().replaceAll(",", "CHAR(44)")).join(",")}"`]
          };
        } else {
          const address = defaultValueOptionsFormulae[column.field].address;
          dataValidation[castColumn.field] = {
            type: "list",
            allowBlank: true,
            formulae: [address]
          };
        }
        const formattedValue = api.getCellParams(id, castColumn.field).formattedValue;
        if (true) {
          if (String(cellParams.formattedValue) === "[object Object]") {
            warnInvalidFormattedValue();
          }
        }
        if (isObject(formattedValue)) {
          row[castColumn.field] = formattedValue == null ? void 0 : formattedValue.label;
        } else {
          row[castColumn.field] = formattedValue;
        }
        break;
      }
      case "boolean":
      case "number":
        cellValue = api.getCellParams(id, column.field).value;
        break;
      case "date":
      case "dateTime": {
        const value = api.getCellParams(id, column.field).value;
        if (!value) {
          break;
        }
        const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds()));
        row[column.field] = utcDate;
        break;
      }
      case "actions":
        break;
      default:
        cellValue = api.getCellParams(id, column.field).formattedValue;
        if (true) {
          if (String(cellParams.formattedValue) === "[object Object]") {
            warnInvalidFormattedValue();
          }
        }
        break;
    }
    if (typeof cellValue === "string" && options.escapeFormulas) {
      if (["=", "+", "-", "@", "	", "\r"].includes(cellValue[0])) {
        cellValue = `'${cellValue}`;
      }
    }
    if (typeof cellValue !== "undefined") {
      row[column.field] = cellValue;
    }
  });
  return {
    row,
    dataValidation,
    outlineLevel,
    mergedCells
  };
};
var defaultColumnsStyles = {
  [GRID_DATE_COL_DEF.type]: {
    numFmt: "dd.mm.yyyy"
  },
  [GRID_DATETIME_COL_DEF.type]: {
    numFmt: "dd.mm.yyyy hh:mm"
  }
};
var serializeColumn = (column, columnsStyles) => {
  const {
    field,
    type
  } = column;
  return {
    key: field,
    headerText: column.headerName ?? column.field,
    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)
    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)
    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the font-size
    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),
    style: _extends({}, type && (defaultColumnsStyles == null ? void 0 : defaultColumnsStyles[type]), columnsStyles == null ? void 0 : columnsStyles[field])
  };
};
var addColumnGroupingHeaders = (worksheet, columns, columnGroupPaths, columnGroupDetails) => {
  const maxDepth = Math.max(...columns.map(({
    key
  }) => {
    var _a;
    return ((_a = columnGroupPaths[key]) == null ? void 0 : _a.length) ?? 0;
  }));
  if (maxDepth === 0) {
    return;
  }
  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {
    const row = columns.map(({
      key
    }) => {
      const groupingPath = columnGroupPaths[key];
      if (groupingPath.length <= rowIndex) {
        return {
          groupId: null,
          parents: groupingPath
        };
      }
      return _extends({}, columnGroupDetails[groupingPath[rowIndex]], {
        parents: groupingPath.slice(0, rowIndex)
      });
    });
    const newRow = worksheet.addRow(row.map((group) => group.groupId === null ? null : (group == null ? void 0 : group.headerName) ?? group.groupId));
    const lastRowIndex = newRow.worksheet.rowCount;
    let leftIndex = 0;
    let rightIndex = 1;
    while (rightIndex < columns.length) {
      const {
        groupId: leftGroupId,
        parents: leftParents
      } = row[leftIndex];
      const {
        groupId: rightGroupId,
        parents: rightParents
      } = row[rightIndex];
      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);
      if (areInSameGroup) {
        rightIndex += 1;
      } else {
        if (rightIndex - leftIndex > 1) {
          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);
        }
        leftIndex = rightIndex;
        rightIndex += 1;
      }
    }
    if (rightIndex - leftIndex > 1) {
      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);
    }
  }
};
function serializeColumns(columns, styles) {
  return columns.map((column) => serializeColumn(column, styles));
}
async function getDataForValueOptionsSheet(columns, valueOptionsSheetName, api) {
  const candidateColumns = columns.filter((column) => isSingleSelectColDef2(column) && Array.isArray(column.valueOptions));
  const excelJS = await getExcelJs();
  const workbook = new excelJS.Workbook();
  const worksheet = workbook.addWorksheet("Sheet1");
  worksheet.columns = candidateColumns.map((column) => ({
    key: column.field
  }));
  return candidateColumns.reduce((acc, column) => {
    const singleSelectColumn = column;
    const formattedValueOptions = getFormattedValueOptions(singleSelectColumn, {}, singleSelectColumn.valueOptions, api);
    const header = column.headerName ?? column.field;
    const values = [header, ...formattedValueOptions];
    const letter = worksheet.getColumn(column.field).letter;
    const address = `${valueOptionsSheetName}!$${letter}$2:$${letter}$${values.length}`;
    acc[column.field] = {
      values,
      address
    };
    return acc;
  }, {});
}
function addSerializedRowToWorksheet(serializedRow, worksheet) {
  const {
    row,
    dataValidation,
    outlineLevel,
    mergedCells
  } = serializedRow;
  const newRow = worksheet.addRow(row);
  Object.keys(dataValidation).forEach((field) => {
    newRow.getCell(field).dataValidation = _extends({}, dataValidation[field]);
  });
  if (outlineLevel) {
    newRow.outlineLevel = outlineLevel;
  }
  const lastRowIndex = newRow.worksheet.rowCount;
  mergedCells.forEach((mergedCell) => {
    worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);
  });
}
async function createValueOptionsSheetIfNeeded(valueOptionsData, sheetName, workbook) {
  if (Object.keys(valueOptionsData).length === 0) {
    return;
  }
  const valueOptionsWorksheet = workbook.addWorksheet(sheetName);
  valueOptionsWorksheet.columns = Object.keys(valueOptionsData).map((key) => ({
    key
  }));
  Object.entries(valueOptionsData).forEach(([field, {
    values
  }]) => {
    valueOptionsWorksheet.getColumn(field).values = values;
  });
}
async function buildExcel(options, api) {
  const {
    columns,
    rowIds,
    includeHeaders,
    includeColumnGroupsHeaders,
    valueOptionsSheetName = "Options",
    exceljsPreProcess,
    exceljsPostProcess,
    columnsStyles = {}
  } = options;
  const excelJS = await getExcelJs();
  const workbook = new excelJS.Workbook();
  const worksheet = workbook.addWorksheet("Sheet1");
  const serializedColumns = serializeColumns(columns, columnsStyles);
  worksheet.columns = serializedColumns;
  if (exceljsPreProcess) {
    await exceljsPreProcess({
      workbook,
      worksheet
    });
  }
  if (includeColumnGroupsHeaders) {
    const columnGroupPaths = columns.reduce((acc, column) => {
      acc[column.field] = api.getColumnGroupPath(column.field);
      return acc;
    }, {});
    addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, api.getAllGroupDetails());
  }
  if (includeHeaders) {
    worksheet.addRow(columns.map((column) => column.headerName ?? column.field));
  }
  const valueOptionsData = await getDataForValueOptionsSheet(columns, valueOptionsSheetName, api);
  createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);
  rowIds.forEach((id) => {
    const serializedRow = serializeRow2(id, columns, api, valueOptionsData, options);
    addSerializedRowToWorksheet(serializedRow, worksheet);
  });
  if (exceljsPostProcess) {
    await exceljsPostProcess({
      workbook,
      worksheet
    });
  }
  return workbook;
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridExcelExportMenuItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React175 = __toESM(require_react());
var import_prop_types62 = __toESM(require_prop_types());
var import_jsx_runtime112 = __toESM(require_jsx_runtime());
var _excluded58 = ["hideMenu", "options"];
function GridExcelExportMenuItem(props) {
  const apiRef2 = useGridApiContext2();
  const {
    hideMenu,
    options
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
  return (0, import_jsx_runtime112.jsx)(MenuItem_default, _extends({
    onClick: () => {
      apiRef2.current.exportDataAsExcel(options);
      hideMenu == null ? void 0 : hideMenu();
    }
  }, other, {
    children: apiRef2.current.getLocaleText("toolbarExportExcel")
  }));
}
true ? GridExcelExportMenuItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  hideMenu: import_prop_types62.default.func,
  options: import_prop_types62.default.shape({
    allColumns: import_prop_types62.default.bool,
    columnsStyles: import_prop_types62.default.object,
    disableToolbarButton: import_prop_types62.default.bool,
    escapeFormulas: import_prop_types62.default.bool,
    exceljsPostProcess: import_prop_types62.default.func,
    exceljsPreProcess: import_prop_types62.default.func,
    fields: import_prop_types62.default.arrayOf(import_prop_types62.default.string),
    fileName: import_prop_types62.default.string,
    getRowsToExport: import_prop_types62.default.func,
    includeColumnGroupsHeaders: import_prop_types62.default.bool,
    includeHeaders: import_prop_types62.default.bool,
    valueOptionsSheetName: import_prop_types62.default.string,
    worker: import_prop_types62.default.func
  })
} : void 0;

// node_modules/@mui/x-data-grid-premium/esm/material/icons.js
var React176 = __toESM(require_react());
init_utils2();
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
var GridWorkspacesIcon = createSvgIcon((0, import_jsx_runtime113.jsx)("g", {
  children: (0, import_jsx_runtime113.jsx)("path", {
    d: "M6,13c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S8.2,13,6,13z M12,3C9.8,3,8,4.8,8,7s1.8,4,4,4s4-1.8,4-4S14.2,3,12,3z M18,13 c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S20.2,13,18,13z"
  })
}), "Workspaces");
var GridGroupWorkIcon = createSvgIcon((0, import_jsx_runtime113.jsx)("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"
}), "GroupWork");
var GridFunctionsIcon = createSvgIcon((0, import_jsx_runtime113.jsx)("path", {
  d: "M18 4H6v2l6.5 6L6 18v2h12v-3h-7l5-5-5-5h7z"
}), "Functions");

// node_modules/@mui/x-data-grid-premium/esm/components/GridColumnMenuAggregationItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React177 = __toESM(require_react());
var import_prop_types63 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime114 = __toESM(require_jsx_runtime());
function GridColumnMenuAggregationItem(props) {
  const {
    colDef
  } = props;
  const apiRef2 = useGridApiContext2();
  const rootProps = useGridRootProps3();
  const id = useId();
  const aggregationModel = useGridSelector(apiRef2, gridAggregationModelSelector);
  const availableAggregationFunctions = React177.useMemo(() => getAvailableAggregationFunctions({
    aggregationFunctions: rootProps.aggregationFunctions,
    colDef
  }), [colDef, rootProps.aggregationFunctions]);
  const selectedAggregationRule = React177.useMemo(() => {
    if (!colDef || !aggregationModel[colDef.field]) {
      return "";
    }
    const aggregationFunctionName = aggregationModel[colDef.field];
    if (canColumnHaveAggregationFunction({
      colDef,
      aggregationFunctionName,
      aggregationFunction: rootProps.aggregationFunctions[aggregationFunctionName]
    })) {
      return aggregationFunctionName;
    }
    return "";
  }, [rootProps.aggregationFunctions, aggregationModel, colDef]);
  const handleAggregationItemChange = (event) => {
    var _a;
    const newAggregationItem = ((_a = event.target) == null ? void 0 : _a.value) || void 0;
    const currentModel = gridAggregationModelSelector(apiRef2);
    const _colDef$field = colDef.field, otherColumnItems = _objectWithoutPropertiesLoose(currentModel, [_colDef$field].map(toPropertyKey));
    const newModel = newAggregationItem == null ? otherColumnItems : _extends({}, otherColumnItems, {
      [colDef == null ? void 0 : colDef.field]: newAggregationItem
    });
    apiRef2.current.setAggregationModel(newModel);
    apiRef2.current.hideColumnMenu();
  };
  const label = apiRef2.current.getLocaleText("aggregationMenuItemHeader");
  return (0, import_jsx_runtime114.jsxs)(MenuItem_default, {
    disableRipple: true,
    children: [(0, import_jsx_runtime114.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime114.jsx)(rootProps.slots.columnMenuAggregationIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime114.jsx)(ListItemText_default, {
      children: (0, import_jsx_runtime114.jsxs)(FormControl_default, {
        size: "small",
        fullWidth: true,
        sx: {
          minWidth: 150
        },
        children: [(0, import_jsx_runtime114.jsx)(InputLabel_default, {
          id: `${id}-label`,
          children: label
        }), (0, import_jsx_runtime114.jsxs)(Select_default, {
          labelId: `${id}-label`,
          id: `${id}-input`,
          value: selectedAggregationRule,
          label,
          color: "primary",
          onChange: handleAggregationItemChange,
          onBlur: (e) => e.stopPropagation(),
          fullWidth: true,
          children: [(0, import_jsx_runtime114.jsx)(MenuItem_default, {
            value: "",
            children: "..."
          }), availableAggregationFunctions.map((aggFunc) => (0, import_jsx_runtime114.jsx)(MenuItem_default, {
            value: aggFunc,
            children: getAggregationFunctionLabel({
              apiRef: apiRef2,
              aggregationRule: {
                aggregationFunctionName: aggFunc,
                aggregationFunction: rootProps.aggregationFunctions[aggFunc]
              }
            })
          }, aggFunc))]
        })]
      })
    })]
  });
}
true ? GridColumnMenuAggregationItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types63.default.object.isRequired,
  onClick: import_prop_types63.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/esm/components/GridPremiumColumnMenu.js
init_extends();
var React180 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/components/GridColumnMenuRowGroupItem.js
var React178 = __toESM(require_react());
var import_jsx_runtime115 = __toESM(require_jsx_runtime());
function GridColumnMenuRowGroupItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext2();
  const rowGroupingModel = useGridSelector(apiRef2, gridRowGroupingSanitizedModelSelector);
  const columnsLookup = useGridSelector(apiRef2, gridColumnLookupSelector);
  const rootProps = useGridRootProps3();
  const renderUnGroupingMenuItem = (field) => {
    const ungroupColumn = (event) => {
      apiRef2.current.removeRowGroupingCriteria(field);
      onClick(event);
    };
    const groupedColumn = columnsLookup[field];
    const name = groupedColumn.headerName ?? field;
    return (0, import_jsx_runtime115.jsxs)(MenuItem_default, {
      onClick: ungroupColumn,
      disabled: !groupedColumn.groupable,
      children: [(0, import_jsx_runtime115.jsx)(ListItemIcon_default, {
        children: (0, import_jsx_runtime115.jsx)(rootProps.slots.columnMenuUngroupIcon, {
          fontSize: "small"
        })
      }), (0, import_jsx_runtime115.jsx)(ListItemText_default, {
        children: apiRef2.current.getLocaleText("unGroupColumn")(name)
      })]
    }, field);
  };
  if (!colDef || !isGroupingColumn(colDef.field)) {
    return null;
  }
  if (colDef.field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {
    return (0, import_jsx_runtime115.jsx)(React178.Fragment, {
      children: rowGroupingModel.map(renderUnGroupingMenuItem)
    });
  }
  return renderUnGroupingMenuItem(getRowGroupingCriteriaFromGroupingField(colDef.field));
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridColumnMenuRowUngroupItem.js
var React179 = __toESM(require_react());
var import_jsx_runtime116 = __toESM(require_jsx_runtime());
function GridColumnMenuRowUngroupItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext2();
  const rowGroupingModel = useGridSelector(apiRef2, gridRowGroupingSanitizedModelSelector);
  const columnsLookup = useGridSelector(apiRef2, gridColumnLookupSelector);
  const rootProps = useGridRootProps3();
  if (!colDef.groupable) {
    return null;
  }
  const ungroupColumn = (event) => {
    apiRef2.current.removeRowGroupingCriteria(colDef.field);
    onClick(event);
  };
  const groupColumn = (event) => {
    apiRef2.current.addRowGroupingCriteria(colDef.field);
    onClick(event);
  };
  const name = columnsLookup[colDef.field].headerName ?? colDef.field;
  if (rowGroupingModel.includes(colDef.field)) {
    return (0, import_jsx_runtime116.jsxs)(MenuItem_default, {
      onClick: ungroupColumn,
      children: [(0, import_jsx_runtime116.jsx)(ListItemIcon_default, {
        children: (0, import_jsx_runtime116.jsx)(rootProps.slots.columnMenuUngroupIcon, {
          fontSize: "small"
        })
      }), (0, import_jsx_runtime116.jsx)(ListItemText_default, {
        children: apiRef2.current.getLocaleText("unGroupColumn")(name)
      })]
    });
  }
  return (0, import_jsx_runtime116.jsxs)(MenuItem_default, {
    onClick: groupColumn,
    children: [(0, import_jsx_runtime116.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime116.jsx)(rootProps.slots.columnMenuGroupIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime116.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("groupColumn")(name)
    })]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridPremiumColumnMenu.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime());
function GridColumnMenuGroupingItem(props) {
  const {
    colDef
  } = props;
  if (isGroupingColumn(colDef.field)) {
    return (0, import_jsx_runtime117.jsx)(GridColumnMenuRowGroupItem, _extends({}, props));
  }
  return (0, import_jsx_runtime117.jsx)(GridColumnMenuRowUngroupItem, _extends({}, props));
}
var GRID_COLUMN_MENU_SLOTS_PREMIUM = _extends({}, GRID_COLUMN_MENU_SLOTS_PRO, {
  columnMenuAggregationItem: GridColumnMenuAggregationItem,
  columnMenuGroupingItem: GridColumnMenuGroupingItem
});
var GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM = _extends({}, GRID_COLUMN_MENU_SLOT_PROPS_PRO, {
  columnMenuAggregationItem: {
    displayOrder: 23
  },
  columnMenuGroupingItem: {
    displayOrder: 27
  }
});
var GridPremiumColumnMenu = React180.forwardRef(function GridPremiumColumnMenuSimple(props, ref) {
  return (0, import_jsx_runtime117.jsx)(GridGenericColumnMenu, _extends({
    ref
  }, props, {
    defaultSlots: GRID_COLUMN_MENU_SLOTS_PREMIUM,
    defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM
  }));
});

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/useGridExcelExport.js
var import_jsx_runtime118 = __toESM(require_jsx_runtime());
var _excluded59 = ["worker", "exceljsPostProcess", "exceljsPreProcess", "columnsStyles", "includeHeaders", "getRowsToExport", "valueOptionsSheetName"];
var useGridExcelExport = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridExcelExport");
  const getDataAsExcel = React181.useCallback((options = {}) => {
    logger.debug(`Get data as excel`);
    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;
    const exportedRowIds = getRowsToExport({
      apiRef: apiRef2
    });
    const exportedColumns = getColumnsToExport({
      apiRef: apiRef2,
      options
    });
    return buildExcel({
      columns: exportedColumns,
      rowIds: exportedRowIds,
      includeHeaders: options.includeHeaders ?? true,
      includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,
      valueOptionsSheetName: (options == null ? void 0 : options.valueOptionsSheetName) || "Options",
      columnsStyles: options == null ? void 0 : options.columnsStyles,
      exceljsPreProcess: options == null ? void 0 : options.exceljsPreProcess,
      exceljsPostProcess: options == null ? void 0 : options.exceljsPostProcess,
      escapeFormulas: options.escapeFormulas ?? true
    }, apiRef2.current);
  }, [logger, apiRef2]);
  const exportDataAsExcel = React181.useCallback(async (options = {}) => {
    const {
      worker: workerFn,
      exceljsPostProcess,
      exceljsPreProcess,
      getRowsToExport = defaultGetRowsToExport,
      valueOptionsSheetName = "Options"
    } = options, cloneableOptions = _objectWithoutPropertiesLoose(options, _excluded59);
    const sendExcelToUser = (buffer) => {
      const blob = new Blob([buffer], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      });
      exportAs(blob, "xlsx", options == null ? void 0 : options.fileName);
    };
    if (!workerFn) {
      apiRef2.current.publishEvent("excelExportStateChange", "pending");
      const workbook = await getDataAsExcel(options);
      if (workbook === null) {
        return;
      }
      const content = await workbook.xlsx.writeBuffer();
      apiRef2.current.publishEvent("excelExportStateChange", "finished");
      sendExcelToUser(content);
      return;
    }
    if (true) {
      if (exceljsPostProcess) {
        console.warn([`MUI X: The exceljsPostProcess option is not supported when a web worker is used.`, "As alternative, pass the callback to the same option in setupExcelExportWebWorker."].join("\n"));
      }
      if (exceljsPreProcess) {
        console.warn([`MUI X: The exceljsPreProcess option is not supported when a web worker is used.`, "As alternative, pass the callback to the same option in setupExcelExportWebWorker."].join("\n"));
      }
    }
    const worker = workerFn();
    apiRef2.current.publishEvent("excelExportStateChange", "pending");
    worker.onmessage = async (event) => {
      sendExcelToUser(event.data);
      apiRef2.current.publishEvent("excelExportStateChange", "finished");
      worker.terminate();
    };
    const exportedRowIds = getRowsToExport({
      apiRef: apiRef2
    });
    const exportedColumns = getColumnsToExport({
      apiRef: apiRef2,
      options
    });
    const valueOptionsData = await getDataForValueOptionsSheet(exportedColumns, valueOptionsSheetName, apiRef2.current);
    const serializedColumns = serializeColumns(exportedColumns, options.columnsStyles || {});
    const serializedRows = exportedRowIds.map((id) => serializeRow2(id, exportedColumns, apiRef2.current, valueOptionsData, {
      escapeFormulas: options.escapeFormulas ?? true
    }));
    const columnGroupPaths = exportedColumns.reduce((acc, column) => {
      acc[column.field] = apiRef2.current.getColumnGroupPath(column.field);
      return acc;
    }, {});
    const message = {
      serializedColumns,
      serializedRows,
      valueOptionsData,
      columnGroupPaths,
      columnGroupDetails: apiRef2.current.getAllGroupDetails(),
      options: cloneableOptions,
      valueOptionsSheetName
    };
    worker.postMessage(message);
  }, [apiRef2, getDataAsExcel]);
  const excelExportApi = {
    getDataAsExcel,
    exportDataAsExcel
  };
  useGridApiMethod2(apiRef2, excelExportApi, "public");
  const addExportMenuButtons = React181.useCallback((initialValue, options) => {
    var _a;
    if ((_a = options.excelOptions) == null ? void 0 : _a.disableToolbarButton) {
      return initialValue;
    }
    return [...initialValue, {
      component: (0, import_jsx_runtime118.jsx)(GridExcelExportMenuItem, {
        options: options.excelOptions
      }),
      componentName: "excelExport"
    }];
  }, []);
  useGridRegisterPipeProcessor2(apiRef2, "exportMenu", addExportMenuButtons);
  useGridApiOptionHandler(apiRef2, "excelExportStateChange", props.onExcelExportStateChange);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/useGridCellSelection.js
init_extends();
var React182 = __toESM(require_react());
init_utils2();

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/gridCellSelectionSelector.js
var gridCellSelectionStateSelector = (state) => state.cellSelection;

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/useGridCellSelection.js
var cellSelectionStateInitializer = (state, props) => {
  var _a;
  return _extends({}, state, {
    cellSelection: _extends({}, props.cellSelectionModel ?? ((_a = props.initialState) == null ? void 0 : _a.cellSelection))
  });
};
function isKeyboardEvent3(event) {
  return !!event.key;
}
var AUTO_SCROLL_SENSITIVITY = 50;
var AUTO_SCROLL_SPEED = 20;
var useGridCellSelection = (apiRef2, props) => {
  const visibleRows = useGridVisibleRows(apiRef2, props);
  const cellWithVirtualFocus = React182.useRef();
  const lastMouseDownCell = React182.useRef();
  const mousePosition = React182.useRef(null);
  const autoScrollRAF = React182.useRef();
  const sortedRowIds = useGridSelector(apiRef2, gridSortedRowIdsSelector);
  const dimensions = useGridSelector(apiRef2, gridDimensionsSelector);
  const totalHeaderHeight = getTotalHeaderHeight(apiRef2, props);
  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;
  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;
  apiRef2.current.registerControlState({
    stateId: "cellSelection",
    propModel: props.cellSelectionModel,
    propOnChange: props.onCellSelectionModelChange,
    stateSelector: gridCellSelectionStateSelector,
    changeEvent: "cellSelectionChange"
  });
  const runIfCellSelectionIsEnabled = (callback) => (...args) => {
    if (props.cellSelection) {
      callback(...args);
    }
  };
  const isCellSelected = React182.useCallback((id, field) => {
    if (!props.cellSelection) {
      return false;
    }
    const cellSelectionModel = gridCellSelectionStateSelector(apiRef2.current.state);
    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;
  }, [apiRef2, props.cellSelection]);
  const getCellSelectionModel = React182.useCallback(() => {
    return gridCellSelectionStateSelector(apiRef2.current.state);
  }, [apiRef2]);
  const setCellSelectionModel = React182.useCallback((newModel) => {
    if (!props.cellSelection) {
      return;
    }
    apiRef2.current.setState((prevState) => _extends({}, prevState, {
      cellSelection: newModel
    }));
    apiRef2.current.forceUpdate();
  }, [apiRef2, props.cellSelection]);
  const selectCellRange = React182.useCallback((start, end, keepOtherSelected = false) => {
    const startRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(start.id);
    const startColumnIndex = apiRef2.current.getColumnIndex(start.field);
    const endRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(end.id);
    const endColumnIndex = apiRef2.current.getColumnIndex(end.field);
    let finalStartRowIndex = startRowIndex;
    let finalStartColumnIndex = startColumnIndex;
    let finalEndRowIndex = endRowIndex;
    let finalEndColumnIndex = endColumnIndex;
    if (finalStartRowIndex > finalEndRowIndex) {
      finalStartRowIndex = endRowIndex;
      finalEndRowIndex = startRowIndex;
    }
    if (finalStartColumnIndex > finalEndColumnIndex) {
      finalStartColumnIndex = endColumnIndex;
      finalEndColumnIndex = startColumnIndex;
    }
    const visibleColumns = apiRef2.current.getVisibleColumns();
    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);
    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);
    const newModel = keepOtherSelected ? apiRef2.current.getCellSelectionModel() : {};
    rowsInRange.forEach((row) => {
      if (!newModel[row.id]) {
        newModel[row.id] = {};
      }
      columnsInRange.forEach((column) => {
        newModel[row.id][column.field] = true;
      }, {});
    });
    apiRef2.current.setCellSelectionModel(newModel);
  }, [apiRef2, visibleRows.rows]);
  const getSelectedCellsAsArray = React182.useCallback(() => {
    const model = apiRef2.current.getCellSelectionModel();
    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef2);
    return Object.entries(model).reduce((acc, [id, fields]) => [...acc, ...Object.entries(fields).reduce((acc2, [field, isSelected]) => {
      return isSelected ? [...acc2, {
        id: idToIdLookup[id],
        field
      }] : acc2;
    }, [])], []);
  }, [apiRef2]);
  const cellSelectionApi = {
    isCellSelected,
    getCellSelectionModel,
    setCellSelectionModel,
    selectCellRange,
    getSelectedCellsAsArray
  };
  useGridApiMethod(apiRef2, cellSelectionApi, "public");
  const hasClickedValidCellForRangeSelection = React182.useCallback((params) => {
    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
      return false;
    }
    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
      return false;
    }
    const column = apiRef2.current.getColumn(params.field);
    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
      return false;
    }
    return params.rowNode.type !== "pinnedRow";
  }, [apiRef2]);
  const handleMouseUp = useEventCallback_default2(() => {
    var _a, _b;
    lastMouseDownCell.current = null;
    (_b = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current) == null ? void 0 : _b.classList.remove(gridClasses["root--disableUserSelection"]);
    stopAutoScroll();
  });
  const handleCellMouseDown = React182.useCallback((params, event) => {
    var _a, _b, _c;
    const isMacOs = window.navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    if (event.button !== 0 || event.ctrlKey && isMacOs) {
      return;
    }
    if (params.field === GRID_REORDER_COL_DEF.field) {
      return;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {
      event.preventDefault();
    }
    lastMouseDownCell.current = {
      id: params.id,
      field: params.field
    };
    (_b = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current) == null ? void 0 : _b.classList.add(gridClasses["root--disableUserSelection"]);
    const document2 = ownerDocument_default((_c = apiRef2.current.rootElementRef) == null ? void 0 : _c.current);
    document2.addEventListener("mouseup", handleMouseUp, {
      once: true
    });
  }, [apiRef2, handleMouseUp, hasClickedValidCellForRangeSelection]);
  const stopAutoScroll = React182.useCallback(() => {
    if (autoScrollRAF.current) {
      cancelAnimationFrame(autoScrollRAF.current);
      autoScrollRAF.current = null;
    }
  }, []);
  const handleCellFocusIn = React182.useCallback((params) => {
    cellWithVirtualFocus.current = {
      id: params.id,
      field: params.field
    };
  }, []);
  const startAutoScroll = React182.useCallback(() => {
    var _a;
    if (autoScrollRAF.current) {
      return;
    }
    if (!((_a = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a.current)) {
      return;
    }
    function autoScroll() {
      var _a2;
      if (!mousePosition.current || !((_a2 = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a2.current)) {
        return;
      }
      const {
        x: mouseX,
        y: mouseY
      } = mousePosition.current;
      const {
        height,
        width
      } = dimensions.viewportInnerSize;
      let deltaX = 0;
      let deltaY = 0;
      let factor = 0;
      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {
        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;
        deltaY = AUTO_SCROLL_SPEED;
      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {
        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;
        deltaY = AUTO_SCROLL_SPEED;
      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {
        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;
        deltaX = AUTO_SCROLL_SPEED;
      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {
        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;
        deltaX = AUTO_SCROLL_SPEED;
      }
      if (deltaX !== 0 || deltaY !== 0) {
        const {
          scrollLeft,
          scrollTop
        } = apiRef2.current.virtualScrollerRef.current;
        apiRef2.current.scroll({
          top: scrollTop + deltaY * factor,
          left: scrollLeft + deltaX * factor
        });
      }
      autoScrollRAF.current = requestAnimationFrame(autoScroll);
    }
    autoScroll();
  }, [apiRef2, dimensions]);
  const handleCellMouseOver = React182.useCallback((params, event) => {
    var _a, _b;
    if (!lastMouseDownCell.current) {
      return;
    }
    const {
      id,
      field
    } = params;
    apiRef2.current.selectCellRange(lastMouseDownCell.current, {
      id,
      field
    }, event.ctrlKey || event.metaKey);
    const virtualScrollerRect = (_b = (_a = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a.current) == null ? void 0 : _b.getBoundingClientRect();
    if (!virtualScrollerRect) {
      return;
    }
    const {
      x,
      y
    } = virtualScrollerRect;
    const {
      height,
      width
    } = dimensions.viewportInnerSize;
    const mouseX = event.clientX - x;
    const mouseY = event.clientY - y - totalHeaderHeight;
    mousePosition.current = {
      x: mouseX,
      y: mouseY
    };
    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;
    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;
    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;
    if (hasEnteredSensitivityArea) {
      startAutoScroll();
    } else {
      stopAutoScroll();
    }
  }, [apiRef2, startAutoScroll, stopAutoScroll, totalHeaderHeight, dimensions]);
  const handleCellClick = useEventCallback_default2((params, event) => {
    const {
      id,
      field
    } = params;
    if (!hasClickedValidCellForRangeSelection(params)) {
      return;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (event.shiftKey && focusedCell) {
      apiRef2.current.selectCellRange(focusedCell, {
        id,
        field
      });
      cellWithVirtualFocus.current = {
        id,
        field
      };
      return;
    }
    if (event.ctrlKey || event.metaKey) {
      const prevModel = apiRef2.current.getCellSelectionModel();
      apiRef2.current.setCellSelectionModel(_extends({}, prevModel, {
        [id]: _extends({}, prevModel[id], {
          [field]: !apiRef2.current.isCellSelected(id, field)
        })
      }));
    } else {
      apiRef2.current.setCellSelectionModel({
        [id]: {
          [field]: true
        }
      });
    }
  });
  const handleCellKeyDown = useEventCallback_default2((params, event) => {
    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {
      return;
    }
    if (!event.shiftKey) {
      apiRef2.current.setCellSelectionModel({});
      return;
    }
    const {
      current: otherCell
    } = cellWithVirtualFocus;
    let endRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(otherCell.id);
    let endColumnIndex = apiRef2.current.getColumnIndex(otherCell.field);
    if (event.key === "ArrowDown") {
      endRowIndex += 1;
    } else if (event.key === "ArrowUp") {
      endRowIndex -= 1;
    } else if (event.key === "ArrowRight") {
      endColumnIndex += 1;
    } else if (event.key === "ArrowLeft") {
      endColumnIndex -= 1;
    }
    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {
      return;
    }
    const visibleColumns = apiRef2.current.getVisibleColumns();
    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {
      return;
    }
    cellWithVirtualFocus.current = {
      id: visibleRows.rows[endRowIndex].id,
      field: visibleColumns[endColumnIndex].field
    };
    apiRef2.current.scrollToIndexes({
      rowIndex: endRowIndex,
      colIndex: endColumnIndex
    });
    const {
      id,
      field
    } = params;
    apiRef2.current.selectCellRange({
      id,
      field
    }, cellWithVirtualFocus.current);
  });
  useGridApiEventHandler(apiRef2, "cellClick", runIfCellSelectionIsEnabled(handleCellClick));
  useGridApiEventHandler(apiRef2, "cellFocusIn", runIfCellSelectionIsEnabled(handleCellFocusIn));
  useGridApiEventHandler(apiRef2, "cellKeyDown", runIfCellSelectionIsEnabled(handleCellKeyDown));
  useGridApiEventHandler(apiRef2, "cellMouseDown", runIfCellSelectionIsEnabled(handleCellMouseDown));
  useGridApiEventHandler(apiRef2, "cellMouseOver", runIfCellSelectionIsEnabled(handleCellMouseOver));
  React182.useEffect(() => {
    if (props.cellSelectionModel) {
      apiRef2.current.setCellSelectionModel(props.cellSelectionModel);
    }
  }, [apiRef2, props.cellSelectionModel]);
  React182.useEffect(() => {
    var _a;
    const rootRef = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current;
    return () => {
      stopAutoScroll();
      const document2 = ownerDocument_default(rootRef);
      document2.removeEventListener("mouseup", handleMouseUp);
    };
  }, [apiRef2, handleMouseUp, stopAutoScroll]);
  const checkIfCellIsSelected = React182.useCallback((isSelected, {
    id,
    field
  }) => {
    return apiRef2.current.isCellSelected(id, field);
  }, [apiRef2]);
  const addClassesToCells = React182.useCallback((classes2, {
    id,
    field
  }) => {
    if (!visibleRows.range || !apiRef2.current.isCellSelected(id, field)) {
      return classes2;
    }
    const newClasses = [...classes2];
    const rowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(id);
    const columnIndex = apiRef2.current.getColumnIndex(field);
    const visibleColumns = apiRef2.current.getVisibleColumns();
    if (rowIndex > 0) {
      const {
        id: previousRowId
      } = visibleRows.rows[rowIndex - 1];
      if (!apiRef2.current.isCellSelected(previousRowId, field)) {
        newClasses.push(gridClasses["cell--rangeTop"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeTop"]);
    }
    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {
      const {
        id: nextRowId
      } = visibleRows.rows[rowIndex + 1];
      if (!apiRef2.current.isCellSelected(nextRowId, field)) {
        newClasses.push(gridClasses["cell--rangeBottom"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeBottom"]);
    }
    if (columnIndex > 0) {
      const {
        field: previousColumnField
      } = visibleColumns[columnIndex - 1];
      if (!apiRef2.current.isCellSelected(id, previousColumnField)) {
        newClasses.push(gridClasses["cell--rangeLeft"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeLeft"]);
    }
    if (columnIndex < visibleColumns.length - 1) {
      const {
        field: nextColumnField
      } = visibleColumns[columnIndex + 1];
      if (!apiRef2.current.isCellSelected(id, nextColumnField)) {
        newClasses.push(gridClasses["cell--rangeRight"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeRight"]);
    }
    return newClasses;
  }, [apiRef2, visibleRows.range, visibleRows.rows]);
  const canUpdateFocus = React182.useCallback((initialValue, {
    event,
    cell
  }) => {
    if (!cell || !props.cellSelection || !event.shiftKey) {
      return initialValue;
    }
    if (isKeyboardEvent3(event)) {
      return isNavigationKey(event.key) ? false : initialValue;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {
      return false;
    }
    return initialValue;
  }, [apiRef2, props.cellSelection, hasClickedValidCellForRangeSelection]);
  const handleClipboardCopy = React182.useCallback((value) => {
    if (apiRef2.current.getSelectedCellsAsArray().length <= 1) {
      return value;
    }
    const cellSelectionModel = apiRef2.current.getCellSelectionModel();
    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);
    const sortedSelectedRowIds = sortedRowIds.filter((id) => unsortedSelectedRowIds.includes(`${id}`));
    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {
      const fieldsMap = cellSelectionModel[rowId];
      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {
        let cellData;
        if (fieldsMap[field]) {
          const cellParams = apiRef2.current.getCellParams(rowId, field);
          cellData = serializeCellValue(cellParams, {
            csvOptions: {
              delimiter: clipboardCopyCellDelimiter,
              shouldAppendQuotes: false,
              escapeFormulas: false
            },
            ignoreValueFormatter
          });
        } else {
          cellData = "";
        }
        return acc2 === "" ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);
      }, "");
      return acc === "" ? rowString : [acc, rowString].join("\r\n");
    }, "");
    return copyData;
  }, [apiRef2, ignoreValueFormatter, clipboardCopyCellDelimiter, sortedRowIds]);
  useGridRegisterPipeProcessor(apiRef2, "isCellSelected", checkIfCellIsSelected);
  useGridRegisterPipeProcessor(apiRef2, "cellClassName", addClassesToCells);
  useGridRegisterPipeProcessor(apiRef2, "canUpdateFocus", canUpdateFocus);
  useGridRegisterPipeProcessor(apiRef2, "clipboardCopy", handleClipboardCopy);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/clipboard/useGridClipboardImport.js
init_extends();
var React183 = __toESM(require_react());
init_utils();
var missingOnProcessRowUpdateErrorWarning3 = buildWarning(["MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence."], "error");
var columnFieldsToExcludeFromPaste = [GRID_CHECKBOX_SELECTION_FIELD2, GRID_REORDER_COL_DEF.field, GRID_DETAIL_PANEL_TOGGLE_FIELD];
function batchRowUpdates(func, wait) {
  let rows = [];
  const debounced = debounce(() => {
    func(rows);
    rows = [];
  }, wait);
  return (row) => {
    rows.push(row);
    debounced();
  };
}
async function getTextFromClipboard(rootEl) {
  return new Promise((resolve) => {
    const focusedCell = getActiveElement(document);
    const el = document.createElement("input");
    el.style.width = "0px";
    el.style.height = "0px";
    el.style.border = "none";
    el.style.margin = "0";
    el.style.padding = "0";
    el.style.outline = "none";
    el.style.position = "absolute";
    el.style.top = "0";
    el.style.left = "0";
    const handlePasteEvent = (event) => {
      var _a;
      el.removeEventListener("paste", handlePasteEvent);
      const text = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/plain");
      if (focusedCell instanceof HTMLElement) {
        focusedCell.focus({
          preventScroll: true
        });
      }
      el.remove();
      resolve(text || "");
    };
    el.addEventListener("paste", handlePasteEvent);
    rootEl.appendChild(el);
    el.focus({
      preventScroll: true
    });
  });
}
var CellValueUpdater = class {
  constructor(options) {
    this.rowsToUpdate = {};
    this.updateRow = void 0;
    this.options = void 0;
    this.options = options;
    this.updateRow = batchRowUpdates(options.apiRef.current.updateRows, 50);
  }
  updateCell({
    rowId,
    field,
    pastedCellValue
  }) {
    if (pastedCellValue === void 0) {
      return;
    }
    const {
      apiRef: apiRef2,
      getRowId
    } = this.options;
    const colDef = apiRef2.current.getColumn(field);
    if (!colDef || !colDef.editable) {
      return;
    }
    const row = this.rowsToUpdate[rowId] || _extends({}, apiRef2.current.getRow(rowId));
    if (!row) {
      return;
    }
    let parsedValue = pastedCellValue;
    if (colDef.pastedValueParser) {
      parsedValue = colDef.pastedValueParser(pastedCellValue, row, colDef, apiRef2);
    } else if (colDef.valueParser) {
      parsedValue = colDef.valueParser(parsedValue, row, colDef, apiRef2);
    }
    if (parsedValue === void 0) {
      return;
    }
    let rowCopy = _extends({}, row);
    if (typeof colDef.valueSetter === "function") {
      rowCopy = colDef.valueSetter(parsedValue, rowCopy, colDef, apiRef2);
    } else {
      rowCopy[field] = parsedValue;
    }
    const newRowId = getRowIdFromRowModel(rowCopy, getRowId);
    if (String(newRowId) !== String(rowId)) {
      return;
    }
    this.rowsToUpdate[rowId] = rowCopy;
  }
  applyUpdates() {
    const {
      apiRef: apiRef2,
      processRowUpdate,
      onProcessRowUpdateError
    } = this.options;
    const rowsToUpdate = this.rowsToUpdate;
    const rowIdsToUpdate = Object.keys(rowsToUpdate);
    if (rowIdsToUpdate.length === 0) {
      apiRef2.current.publishEvent("clipboardPasteEnd");
      return;
    }
    const handleRowUpdate = async (rowId) => {
      const newRow = rowsToUpdate[rowId];
      if (typeof processRowUpdate === "function") {
        const handleError = (errorThrown) => {
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else if (true) {
            missingOnProcessRowUpdateErrorWarning3();
          }
        };
        try {
          const oldRow = apiRef2.current.getRow(rowId);
          const finalRowUpdate = await processRowUpdate(newRow, oldRow);
          this.updateRow(finalRowUpdate);
        } catch (error) {
          handleError(error);
        }
      } else {
        this.updateRow(newRow);
      }
    };
    const promises = rowIdsToUpdate.map((rowId) => {
      return new Promise((resolve) => {
        handleRowUpdate(rowId).then(resolve).catch(resolve);
      });
    });
    Promise.all(promises).then(() => {
      this.rowsToUpdate = {};
      apiRef2.current.publishEvent("clipboardPasteEnd");
    });
  }
};
function defaultPasteResolver({
  pastedData,
  apiRef: apiRef2,
  updateCell,
  pagination
}) {
  const isSingleValuePasted = pastedData.length === 1 && pastedData[0].length === 1;
  const cellSelectionModel = apiRef2.current.getCellSelectionModel();
  const selectedCellsArray = apiRef2.current.getSelectedCellsAsArray();
  if (cellSelectionModel && selectedCellsArray.length > 1) {
    Object.keys(cellSelectionModel).forEach((rowId, rowIndex) => {
      const rowDataArr = pastedData[isSingleValuePasted ? 0 : rowIndex];
      const hasRowData = isSingleValuePasted ? true : rowDataArr !== void 0;
      if (!hasRowData) {
        return;
      }
      Object.keys(cellSelectionModel[rowId]).forEach((field, colIndex) => {
        const cellValue = isSingleValuePasted ? rowDataArr[0] : rowDataArr[colIndex];
        updateCell({
          rowId,
          field,
          pastedCellValue: cellValue
        });
      });
    });
    return;
  }
  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef2).filter((field) => {
    if (columnFieldsToExcludeFromPaste.includes(field)) {
      return false;
    }
    return true;
  });
  const selectedRows = apiRef2.current.getSelectedRows();
  if (selectedRows.size > 0 && !isSingleValuePasted) {
    const pastedRowsDataCount = pastedData.length;
    selectedRows.forEach((row, rowId) => {
      let rowData;
      if (pastedRowsDataCount === 1) {
        rowData = pastedData[0];
      } else {
        rowData = pastedData.shift();
      }
      if (rowData === void 0) {
        return;
      }
      rowData.forEach((newCellValue, cellIndex) => {
        updateCell({
          rowId,
          field: visibleColumnFields[cellIndex],
          pastedCellValue: newCellValue
        });
      });
    });
    return;
  }
  let selectedCell = gridFocusCellSelector2(apiRef2);
  if (!selectedCell && selectedCellsArray.length === 1) {
    selectedCell = selectedCellsArray[0];
  }
  if (!selectedCell) {
    return;
  }
  if (columnFieldsToExcludeFromPaste.includes(selectedCell.field)) {
    return;
  }
  const selectedRowId = selectedCell.id;
  const selectedRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(selectedRowId);
  const visibleRowIds = pagination ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef2) : gridExpandedSortedRowIdsSelector(apiRef2);
  const selectedFieldIndex = visibleColumnFields.indexOf(selectedCell.field);
  pastedData.forEach((rowData, index) => {
    const rowId = visibleRowIds[selectedRowIndex + index];
    if (typeof rowId === "undefined") {
      return;
    }
    for (let i2 = selectedFieldIndex; i2 < visibleColumnFields.length; i2 += 1) {
      const field = visibleColumnFields[i2];
      const stringValue = rowData[i2 - selectedFieldIndex];
      updateCell({
        rowId,
        field,
        pastedCellValue: stringValue
      });
    }
  });
}
var useGridClipboardImport = (apiRef2, props) => {
  var _a;
  const processRowUpdate = props.processRowUpdate;
  const onProcessRowUpdateError = props.onProcessRowUpdateError;
  const getRowId = props.getRowId;
  const enableClipboardPaste = !props.disableClipboardPaste;
  const rootEl = (_a = apiRef2.current.rootElementRef) == null ? void 0 : _a.current;
  const logger = useGridLogger(apiRef2, "useGridClipboardImport");
  const splitClipboardPastedText = props.splitClipboardPastedText;
  const {
    pagination,
    onBeforeClipboardPasteStart
  } = props;
  const handlePaste = React183.useCallback(async (params, event) => {
    if (!enableClipboardPaste) {
      return;
    }
    if (!isPasteShortcut(event)) {
      return;
    }
    const focusedCell = gridFocusCellSelector2(apiRef2);
    if (focusedCell !== null) {
      const cellMode = apiRef2.current.getCellMode(focusedCell.id, focusedCell.field);
      if (cellMode === "edit") {
        return;
      }
    }
    if (!rootEl) {
      return;
    }
    const text = await getTextFromClipboard(rootEl);
    if (!text) {
      return;
    }
    const pastedData = splitClipboardPastedText(text);
    if (!pastedData) {
      return;
    }
    if (onBeforeClipboardPasteStart) {
      try {
        await onBeforeClipboardPasteStart({
          data: pastedData
        });
      } catch (error) {
        logger.debug("Clipboard paste operation cancelled");
        return;
      }
    }
    const cellUpdater = new CellValueUpdater({
      apiRef: apiRef2,
      processRowUpdate,
      onProcessRowUpdateError,
      getRowId
    });
    apiRef2.current.publishEvent("clipboardPasteStart", {
      data: pastedData
    });
    defaultPasteResolver({
      pastedData,
      apiRef: getPublicApiRef(apiRef2),
      updateCell: (...args) => {
        cellUpdater.updateCell(...args);
      },
      pagination
    });
    cellUpdater.applyUpdates();
  }, [apiRef2, processRowUpdate, onProcessRowUpdateError, getRowId, enableClipboardPaste, rootEl, splitClipboardPastedText, pagination, onBeforeClipboardPasteStart, logger]);
  const checkIfCanStartEditing = React183.useCallback((initialValue, {
    event
  }) => {
    if (isPasteShortcut(event) && enableClipboardPaste) {
      return false;
    }
    return initialValue;
  }, [enableClipboardPaste]);
  useGridApiEventHandler2(apiRef2, "cellKeyDown", handlePaste);
  useGridApiOptionHandler(apiRef2, "clipboardPasteStart", props.onClipboardPasteStart);
  useGridApiOptionHandler(apiRef2, "clipboardPasteEnd", props.onClipboardPasteEnd);
  useGridRegisterPipeProcessor2(apiRef2, "canStartEditing", checkIfCanStartEditing);
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/useDataGridPremiumComponent.js
var useDataGridPremiumComponent = (inputApiRef, props) => {
  const apiRef2 = useGridInitialization(inputApiRef, props);
  useGridRowSelectionPreProcessors(apiRef2, props);
  useGridRowReorderPreProcessors(apiRef2, props);
  useGridRowGroupingPreProcessors(apiRef2, props);
  useGridTreeDataPreProcessors(apiRef2, props);
  useGridLazyLoaderPreProcessors(apiRef2, props);
  useGridRowPinningPreProcessors(apiRef2);
  useGridAggregationPreProcessors(apiRef2, props);
  useGridDetailPanelPreProcessors(apiRef2, props);
  useGridColumnPinningPreProcessors(apiRef2, props);
  useGridRowsPreProcessors(apiRef2);
  useGridInitializeState(dimensionsStateInitializer, apiRef2, props);
  useGridInitializeState(headerFilteringStateInitializer, apiRef2, props);
  useGridInitializeState(rowGroupingStateInitializer, apiRef2, props);
  useGridInitializeState(aggregationStateInitializer, apiRef2, props);
  useGridInitializeState(rowSelectionStateInitializer, apiRef2, props);
  useGridInitializeState(cellSelectionStateInitializer, apiRef2, props);
  useGridInitializeState(detailPanelStateInitializer, apiRef2, props);
  useGridInitializeState(columnPinningStateInitializer, apiRef2, props);
  useGridInitializeState(columnsStateInitializer, apiRef2, props);
  useGridInitializeState(rowPinningStateInitializer, apiRef2, props);
  useGridInitializeState(rowsStateInitializer, apiRef2, props);
  useGridInitializeState(editingStateInitializer, apiRef2, props);
  useGridInitializeState(focusStateInitializer, apiRef2, props);
  useGridInitializeState(sortingStateInitializer, apiRef2, props);
  useGridInitializeState(preferencePanelStateInitializer, apiRef2, props);
  useGridInitializeState(filterStateInitializer, apiRef2, props);
  useGridInitializeState(densityStateInitializer, apiRef2, props);
  useGridInitializeState(columnReorderStateInitializer, apiRef2, props);
  useGridInitializeState(columnResizeStateInitializer, apiRef2, props);
  useGridInitializeState(paginationStateInitializer, apiRef2, props);
  useGridInitializeState(rowsMetaStateInitializer, apiRef2, props);
  useGridInitializeState(columnMenuStateInitializer, apiRef2, props);
  useGridInitializeState(columnGroupsStateInitializer, apiRef2, props);
  useGridInitializeState(virtualizationStateInitializer, apiRef2, props);
  useGridRowGrouping(apiRef2, props);
  useGridHeaderFiltering(apiRef2, props);
  useGridTreeData(apiRef2);
  useGridAggregation(apiRef2, props);
  useGridKeyboardNavigation(apiRef2, props);
  useGridRowSelection(apiRef2, props);
  useGridCellSelection(apiRef2, props);
  useGridColumnPinning(apiRef2, props);
  useGridRowPinning(apiRef2, props);
  useGridColumns(apiRef2, props);
  useGridRows(apiRef2, props);
  useGridParamsApi(apiRef2);
  useGridDetailPanel(apiRef2, props);
  useGridColumnSpanning(apiRef2);
  useGridColumnGrouping(apiRef2, props);
  useGridClipboardImport(apiRef2, props);
  useGridEditing(apiRef2, props);
  useGridFocus(apiRef2, props);
  useGridPreferencesPanel(apiRef2, props);
  useGridFilter(apiRef2, props);
  useGridSorting(apiRef2, props);
  useGridDensity(apiRef2, props);
  useGridColumnReorder(apiRef2, props);
  useGridColumnResize(apiRef2, props);
  useGridPagination(apiRef2, props);
  useGridRowsMeta(apiRef2, props);
  useGridRowReorder(apiRef2, props);
  useGridScroll(apiRef2, props);
  useGridInfiniteLoader(apiRef2, props);
  useGridLazyLoader(apiRef2, props);
  useGridColumnMenu(apiRef2);
  useGridCsvExport(apiRef2, props);
  useGridPrintExport(apiRef2, props);
  useGridExcelExport(apiRef2, props);
  useGridClipboard(apiRef2, props);
  useGridDimensions(apiRef2, props);
  useGridEvents(apiRef2, props);
  useGridStatePersistence(apiRef2);
  useGridVirtualization(apiRef2, props);
  return apiRef2;
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/useDataGridPremiumProps.js
init_extends();
var React184 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationFunctions.js
var sumAgg = {
  apply: ({
    values
  }) => {
    let sum = 0;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (isNumber(value)) {
        sum += value;
      }
    }
    return sum;
  },
  columnTypes: ["number"]
};
var avgAgg = {
  apply: ({
    values
  }) => {
    if (values.length === 0) {
      return null;
    }
    let sum = 0;
    let valuesCount = 0;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (isNumber(value)) {
        valuesCount += 1;
        sum += value;
      }
    }
    return sum / valuesCount;
  },
  columnTypes: ["number"]
};
var minAgg = {
  apply: ({
    values
  }) => {
    if (values.length === 0) {
      return null;
    }
    let min = Infinity;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (value != null && value < min) {
        min = value;
      }
    }
    return min;
  },
  columnTypes: ["number", "date", "dateTime"]
};
var maxAgg = {
  apply: ({
    values
  }) => {
    if (values.length === 0) {
      return null;
    }
    let max = -Infinity;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (value != null && value > max) {
        max = value;
      }
    }
    return max;
  },
  columnTypes: ["number", "date", "dateTime"]
};
var sizeAgg = {
  apply: ({
    values
  }) => {
    return values.filter((value) => typeof value !== "undefined").length;
  },
  valueFormatter: (value) => {
    if (value == null || !isNumber(value)) {
      return value;
    }
    return value.toLocaleString();
  },
  hasCellUnit: false
};
var GRID_AGGREGATION_FUNCTIONS = {
  sum: sumAgg,
  avg: avgAgg,
  min: minAgg,
  max: maxAgg,
  size: sizeAgg
};

// node_modules/@mui/x-data-grid-premium/esm/constants/dataGridPremiumDefaultSlotsComponents.js
init_extends();

// node_modules/@mui/x-data-grid-premium/esm/material/index.js
init_extends();
var iconsSlots = {
  columnMenuUngroupIcon: GridWorkspacesIcon,
  columnMenuGroupIcon: GridGroupWorkIcon,
  columnMenuAggregationIcon: GridFunctionsIcon
};
var materialSlots2 = _extends({}, iconsSlots);
var material_default2 = materialSlots2;

// node_modules/@mui/x-data-grid-premium/esm/constants/dataGridPremiumDefaultSlotsComponents.js
var DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS = _extends({}, DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS, material_default2, {
  columnMenu: GridPremiumColumnMenu
});

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/useDataGridPremiumProps.js
var DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES = _extends({}, DATA_GRID_PRO_PROPS_DEFAULT_VALUES, {
  cellSelection: false,
  disableAggregation: false,
  disableRowGrouping: false,
  rowGroupingColumnMode: "single",
  aggregationFunctions: GRID_AGGREGATION_FUNCTIONS,
  aggregationRowsScope: "filtered",
  getAggregationPosition: (groupNode) => groupNode.depth === -1 ? "footer" : "inline",
  disableClipboardPaste: false,
  splitClipboardPastedText: (pastedText) => {
    const text = pastedText.replace(/\r?\n$/, "");
    return text.split(/\r\n|\n|\r/).map((row) => row.split("	"));
  }
});
var defaultSlots2 = DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS;
var useDataGridPremiumProps = (inProps) => {
  const themedProps = useProps(
    // eslint-disable-next-line material-ui/mui-name-matches-component-name
    useThemeProps({
      props: inProps,
      name: "MuiDataGrid"
    })
  );
  const localeText = React184.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
  const slots = React184.useMemo(() => computeSlots({
    defaultSlots: defaultSlots2,
    slots: themedProps.slots
  }), [themedProps.slots]);
  return React184.useMemo(() => _extends({}, DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES, themedProps, {
    localeText,
    slots,
    signature: "DataGridPremium"
  }), [themedProps, localeText, slots]);
};

// node_modules/@mui/x-data-grid-premium/esm/utils/releaseInfo.js
init_utils();
var getReleaseInfo = () => {
  const releaseInfo2 = "MTcxNjQxNTIwMDAwMA==";
  if (true) {
    if (releaseInfo2 === "__RELEASE_INFO__") {
      return ponyfillGlobal_default.__MUI_RELEASE_INFO__;
    }
  }
  return releaseInfo2;
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/DataGridPremium.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime());
var releaseInfo = getReleaseInfo();
var dataGridPremiumPropValidators;
if (true) {
  dataGridPremiumPropValidators = [...propValidatorsDataGrid, ...propValidatorsDataGridPro];
}
var DataGridPremiumRaw = React185.forwardRef(function DataGridPremium(inProps, ref) {
  const props = useDataGridPremiumProps(inProps);
  const privateApiRef = useDataGridPremiumComponent(props.apiRef, props);
  useLicenseVerifier("x-data-grid-premium", releaseInfo);
  if (true) {
    validateProps(props, dataGridPremiumPropValidators);
  }
  return (0, import_jsx_runtime119.jsx)(GridContextProvider, {
    privateApiRef,
    props,
    children: (0, import_jsx_runtime119.jsxs)(GridRoot, _extends({
      className: props.className,
      style: props.style,
      sx: props.sx,
      ref
    }, props.forwardedProps, {
      children: [(0, import_jsx_runtime119.jsx)(GridHeader, {}), (0, import_jsx_runtime119.jsx)(GridVirtualScroller, {
        children: (0, import_jsx_runtime119.jsx)(Watermark, {
          packageName: "x-data-grid-premium",
          releaseInfo
        })
      }), (0, import_jsx_runtime119.jsx)(GridFooterPlaceholder, {})]
    }))
  });
});
var DataGridPremium2 = React185.memo(DataGridPremiumRaw);
true ? DataGridPremiumRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Aggregation functions available on the grid.
   * @default GRID_AGGREGATION_FUNCTIONS
   */
  aggregationFunctions: import_prop_types64.default.object,
  /**
   * Set the aggregation model of the grid.
   */
  aggregationModel: import_prop_types64.default.object,
  /**
   * Rows used to generate the aggregated value.
   * If `filtered`, the aggregated values are generated using only the rows currently passing the filtering process.
   * If `all`, the aggregated values are generated using all the rows.
   * @default "filtered"
   */
  aggregationRowsScope: import_prop_types64.default.oneOf(["all", "filtered"]),
  /**
   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.
   */
  apiRef: import_prop_types64.default.shape({
    current: import_prop_types64.default.object.isRequired
  }),
  /**
   * The label of the Data Grid.
   */
  "aria-label": import_prop_types64.default.string,
  /**
   * The id of the element containing a label for the Data Grid.
   */
  "aria-labelledby": import_prop_types64.default.string,
  /**
   * If `true`, the Data Grid height is dynamic and follow the number of rows in the Data Grid.
   * @default false
   */
  autoHeight: import_prop_types64.default.bool,
  /**
   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
   * @default false
   */
  autoPageSize: import_prop_types64.default.bool,
  /**
   * If `true`, columns are autosized after the datagrid is mounted.
   * @default false
   */
  autosizeOnMount: import_prop_types64.default.bool,
  /**
   * The options for autosize when user-initiated.
   */
  autosizeOptions: import_prop_types64.default.shape({
    columns: import_prop_types64.default.arrayOf(import_prop_types64.default.string),
    expand: import_prop_types64.default.bool,
    includeHeaders: import_prop_types64.default.bool,
    includeOutliers: import_prop_types64.default.bool,
    outliersFactor: import_prop_types64.default.number
  }),
  /**
   * Controls the modes of the cells.
   */
  cellModesModel: import_prop_types64.default.object,
  /**
   * If `true`, the cell selection mode is enabled.
   * @default false
   */
  cellSelection: import_prop_types64.default.bool,
  /**
   * Set the cell selection model of the grid.
   */
  cellSelectionModel: import_prop_types64.default.object,
  /**
   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
   * @default false
   */
  checkboxSelection: import_prop_types64.default.bool,
  /**
   * If `true`, the "Select All" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.
   * It only works if the pagination is enabled.
   * @default false
   */
  checkboxSelectionVisibleOnly: import_prop_types64.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types64.default.object,
  /**
   * The character used to separate cell values when copying to the clipboard.
   * @default '\t'
   */
  clipboardCopyCellDelimiter: import_prop_types64.default.string,
  /**
   * Column region in pixels to render before/after the viewport
   * @default 150
   */
  columnBufferPx: import_prop_types64.default.number,
  columnGroupingModel: import_prop_types64.default.arrayOf(import_prop_types64.default.object),
  /**
   * Sets the height in pixel of the column headers in the Data Grid.
   * @default 56
   */
  columnHeaderHeight: import_prop_types64.default.number,
  /**
   * Set of columns of type [[GridColDef]][].
   */
  columns: import_prop_types64.default.arrayOf(import_prop_types64.default.object).isRequired,
  /**
   * Set the column visibility model of the Data Grid.
   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
   */
  columnVisibilityModel: import_prop_types64.default.object,
  /**
   * If above 0, the row children will be expanded up to this depth.
   * If equal to -1, all the row children will be expanded.
   * @default 0
   */
  defaultGroupingExpansionDepth: import_prop_types64.default.number,
  /**
   * Set the density of the Data Grid.
   * @default "standard"
   */
  density: import_prop_types64.default.oneOf(["comfortable", "compact", "standard"]),
  /**
   * The row ids to show the detail panel.
   */
  detailPanelExpandedRowIds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]).isRequired),
  /**
   * If `true`, aggregation is disabled.
   * @default false
   */
  disableAggregation: import_prop_types64.default.bool,
  /**
   * If `true`, column autosizing on header separator double-click is disabled.
   * @default false
   */
  disableAutosize: import_prop_types64.default.bool,
  /**
   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.
   * @default false
   */
  disableChildrenFiltering: import_prop_types64.default.bool,
  /**
   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.
   * @default false
   */
  disableChildrenSorting: import_prop_types64.default.bool,
  /**
   * If `true`, the clipboard paste is disabled.
   * @default false
   */
  disableClipboardPaste: import_prop_types64.default.bool,
  /**
   * If `true`, column filters are disabled.
   * @default false
   */
  disableColumnFilter: import_prop_types64.default.bool,
  /**
   * If `true`, the column menu is disabled.
   * @default false
   */
  disableColumnMenu: import_prop_types64.default.bool,
  /**
   * If `true`, the column pinning is disabled.
   * @default false
   */
  disableColumnPinning: import_prop_types64.default.bool,
  /**
   * If `true`, reordering columns is disabled.
   * @default false
   */
  disableColumnReorder: import_prop_types64.default.bool,
  /**
   * If `true`, resizing columns is disabled.
   * @default false
   */
  disableColumnResize: import_prop_types64.default.bool,
  /**
   * If `true`, hiding/showing columns is disabled.
   * @default false
   */
  disableColumnSelector: import_prop_types64.default.bool,
  /**
   * If `true`, the column sorting feature will be disabled.
   * @default false
   */
  disableColumnSorting: import_prop_types64.default.bool,
  /**
   * If `true`, the density selector is disabled.
   * @default false
   */
  disableDensitySelector: import_prop_types64.default.bool,
  /**
   * If `true`, `eval()` is not used for performance optimization.
   * @default false
   */
  disableEval: import_prop_types64.default.bool,
  /**
   * If `true`, filtering with multiple columns is disabled.
   * @default false
   */
  disableMultipleColumnsFiltering: import_prop_types64.default.bool,
  /**
   * If `true`, the sorting with multiple columns is disabled.
   * @default false
   */
  disableMultipleColumnsSorting: import_prop_types64.default.bool,
  /**
   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.
   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.
   * @default false (`!props.checkboxSelection` for MIT Data Grid)
   */
  disableMultipleRowSelection: import_prop_types64.default.bool,
  /**
   * If `true`, the row grouping is disabled.
   * @default false
   */
  disableRowGrouping: import_prop_types64.default.bool,
  /**
   * If `true`, the selection on click on a row or cell is disabled.
   * @default false
   */
  disableRowSelectionOnClick: import_prop_types64.default.bool,
  /**
   * If `true`, the virtualization is disabled.
   * @default false
   */
  disableVirtualization: import_prop_types64.default.bool,
  /**
   * Controls whether to use the cell or row editing.
   * @default "cell"
   */
  editMode: import_prop_types64.default.oneOf(["cell", "row"]),
  /**
   * Use if the actual rowCount is not known upfront, but an estimation is available.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Applicable only with `paginationMode="server"` and when `rowCount="-1"`
   */
  estimatedRowCount: import_prop_types64.default.number,
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`, then the feature is fully disabled, and neither property nor method calls will have any effect.
   */
  experimentalFeatures: import_prop_types64.default.shape({
    warnIfFocusStateIsNotSynced: import_prop_types64.default.bool
  }),
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering.
   * @default 150
   */
  filterDebounceMs: import_prop_types64.default.number,
  /**
   * Filtering can be processed on the server or client-side.
   * Set it to 'server' if you would like to handle filtering on the server-side.
   * @default "client"
   */
  filterMode: import_prop_types64.default.oneOf(["client", "server"]),
  /**
   * Set the filter model of the Data Grid.
   */
  filterModel: import_prop_types64.default.shape({
    items: import_prop_types64.default.arrayOf(import_prop_types64.default.shape({
      field: import_prop_types64.default.string.isRequired,
      id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
      operator: import_prop_types64.default.string.isRequired,
      value: import_prop_types64.default.any
    })).isRequired,
    logicOperator: import_prop_types64.default.oneOf(["and", "or"]),
    quickFilterExcludeHiddenColumns: import_prop_types64.default.bool,
    quickFilterLogicOperator: import_prop_types64.default.oneOf(["and", "or"]),
    quickFilterValues: import_prop_types64.default.array
  }),
  /**
   * Forwarded props for the Data Grid root element.
   * @ignore - do not document.
   */
  forwardedProps: import_prop_types64.default.object,
  /**
   * Determines the position of an aggregated value.
   * @param {GridGroupNode} groupNode The current group.
   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group isn't aggregated).
   * @default (groupNode) => groupNode == null ? 'footer' : 'inline'
   */
  getAggregationPosition: import_prop_types64.default.func,
  /**
   * Function that applies CSS classes dynamically on cells.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {string} The CSS class to apply to the cell.
   */
  getCellClassName: import_prop_types64.default.func,
  /**
   * Function that returns the element to render in row detail.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {React.JSX.Element} The row detail element.
   */
  getDetailPanelContent: import_prop_types64.default.func,
  /**
   * Function that returns the height of the row detail panel.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {number | string} The height in pixels or "auto" to use the content height.
   * @default "() => 500"
   */
  getDetailPanelHeight: import_prop_types64.default.func,
  /**
   * Function that returns the estimated height for a row.
   * Only works if dynamic row height is used.
   * Once the row height is measured this value is discarded.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
   */
  getEstimatedRowHeight: import_prop_types64.default.func,
  /**
   * Function that applies CSS classes dynamically on rows.
   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
   * @returns {string} The CSS class to apply to the row.
   */
  getRowClassName: import_prop_types64.default.func,
  /**
   * Function that sets the row height per row.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
   */
  getRowHeight: import_prop_types64.default.func,
  /**
   * Return the id of a given [[GridRowModel]].
   */
  getRowId: import_prop_types64.default.func,
  /**
   * Function that allows to specify the spacing between rows.
   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
   * @returns {GridRowSpacing} The row spacing values.
   */
  getRowSpacing: import_prop_types64.default.func,
  /**
   * Determines the path of a row in the tree data.
   * For instance, a row with the path ["A", "B"] is the child of the row with the path ["A"].
   * Note that all paths must contain at least one element.
   * @template R
   * @param {R} row The row from which we want the path.
   * @returns {string[]} The path to the row.
   */
  getTreeDataPath: import_prop_types64.default.func,
  /**
   * The grouping column used by the tree data.
   */
  groupingColDef: import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object]),
  /**
   * Override the height of the header filters.
   */
  headerFilterHeight: import_prop_types64.default.number,
  /**
   * If `true`, enables the data grid filtering on header feature.
   * @default false
   */
  headerFilters: import_prop_types64.default.bool,
  /**
   * If `true`, the footer component is hidden.
   * @default false
   */
  hideFooter: import_prop_types64.default.bool,
  /**
   * If `true`, the pagination component in the footer is hidden.
   * @default false
   */
  hideFooterPagination: import_prop_types64.default.bool,
  /**
   * If `true`, the row count in the footer is hidden.
   * It has no effect if the pagination is enabled.
   * @default false
   */
  hideFooterRowCount: import_prop_types64.default.bool,
  /**
   * If `true`, the selected row count in the footer is hidden.
   * @default false
   */
  hideFooterSelectedRowCount: import_prop_types64.default.bool,
  /**
   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
   * E.g. when filter value is `cafe`, the rows with `café` will be visible.
   * @default false
   */
  ignoreDiacritics: import_prop_types64.default.bool,
  /**
   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
   * @default false
   */
  ignoreValueFormatterDuringExport: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
    clipboardExport: import_prop_types64.default.bool,
    csvExport: import_prop_types64.default.bool
  }), import_prop_types64.default.bool]),
  /**
   * The initial state of the DataGridPremium.
   * The data in it is set in the state on initialization but isn't controlled.
   * If one of the data in `initialState` is also being controlled, then the control state wins.
   */
  initialState: import_prop_types64.default.object,
  /**
   * Callback fired when a cell is rendered, returns true if the cell is editable.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {boolean} A boolean indicating if the cell is editable.
   */
  isCellEditable: import_prop_types64.default.func,
  /**
   * Determines if a group should be expanded after its creation.
   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.
   * @param {GridGroupNode} node The node of the group to test.
   * @returns {boolean} A boolean indicating if the group is expanded.
   */
  isGroupExpandedByDefault: import_prop_types64.default.func,
  /**
   * Determines if a row can be selected.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {boolean} A boolean indicating if the cell is selectable.
   */
  isRowSelectable: import_prop_types64.default.func,
  /**
   * If `true`, moving the mouse pointer outside the grid before releasing the mouse button
   * in a column re-order action will not cause the column to jump back to its original position.
   * @default false
   */
  keepColumnPositionIfDraggedOutside: import_prop_types64.default.bool,
  /**
   * If `true`, the selection model will retain selected rows that do not exist.
   * Useful when using server side pagination and row selections need to be retained
   * when changing pages.
   * @default false
   */
  keepNonExistentRowsSelected: import_prop_types64.default.bool,
  /**
   * If `true`, a loading overlay is displayed.
   */
  loading: import_prop_types64.default.bool,
  /**
   * Set the locale text of the Data Grid.
   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
   */
  localeText: import_prop_types64.default.object,
  /**
   * Pass a custom logger in the components that implements the [[Logger]] interface.
   * @default console
   */
  logger: import_prop_types64.default.shape({
    debug: import_prop_types64.default.func.isRequired,
    error: import_prop_types64.default.func.isRequired,
    info: import_prop_types64.default.func.isRequired,
    warn: import_prop_types64.default.func.isRequired
  }),
  /**
   * Allows to pass the logging level or false to turn off logging.
   * @default "error" ("warn" in dev mode)
   */
  logLevel: import_prop_types64.default.oneOf(["debug", "error", "info", "warn", false]),
  /**
   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
   */
  nonce: import_prop_types64.default.string,
  /**
   * Callback fired when the row grouping model changes.
   * @param {GridAggregationModel} model The aggregated columns.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onAggregationModelChange: import_prop_types64.default.func,
  /**
   * Callback fired before the clipboard paste operation starts.
   * Use it to confirm or cancel the paste operation.
   * @param {object} params Params passed to the callback.
   * @param {string[][]} params.data The raw pasted data split by rows and cells.
   * @returns {Promise<any>} A promise that resolves to confirm the paste operation, and rejects to cancel it.
   */
  onBeforeClipboardPasteStart: import_prop_types64.default.func,
  /**
   * Callback fired when any cell is clicked.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellClick: import_prop_types64.default.func,
  /**
   * Callback fired when a double click event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellDoubleClick: import_prop_types64.default.func,
  /**
   * Callback fired when the cell turns to edit mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStart: import_prop_types64.default.func,
  /**
   * Callback fired when the cell turns to view mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStop: import_prop_types64.default.func,
  /**
   * Callback fired when a keydown event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellKeyDown: import_prop_types64.default.func,
  /**
   * Callback fired when the `cellModesModel` prop changes.
   * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellModesModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when the selection state of one or multiple cells changes.
   * @param {GridCellSelectionModel} cellSelectionModel Object in the shape of [[GridCellSelectionModel]] containing the selected cells.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellSelectionModelChange: import_prop_types64.default.func,
  /**
   * Callback called when the data is copied to the clipboard.
   * @param {string} data The data copied to the clipboard.
   */
  onClipboardCopy: import_prop_types64.default.func,
  /**
   * Callback fired when the clipboard paste operation ends.
   */
  onClipboardPasteEnd: import_prop_types64.default.func,
  /**
   * Callback fired when the clipboard paste operation starts.
   */
  onClipboardPasteStart: import_prop_types64.default.func,
  /**
   * Callback fired when a click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderClick: import_prop_types64.default.func,
  /**
   * Callback fired when a double click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderDoubleClick: import_prop_types64.default.func,
  /**
   * Callback fired when a mouse enter event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderEnter: import_prop_types64.default.func,
  /**
   * Callback fired when a mouse leave event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderLeave: import_prop_types64.default.func,
  /**
   * Callback fired when a mouseout event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOut: import_prop_types64.default.func,
  /**
   * Callback fired when a mouseover event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOver: import_prop_types64.default.func,
  /**
   * Callback fired when a column is reordered.
   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnOrderChange: import_prop_types64.default.func,
  /**
   * Callback fired while a column is being resized.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnResize: import_prop_types64.default.func,
  /**
   * Callback fired when the column visibility model changes.
   * @param {GridColumnVisibilityModel} model The new model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnVisibilityModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when the width of a column is changed.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnWidthChange: import_prop_types64.default.func,
  /**
   * Callback fired when the density changes.
   * @param {GridDensity} density New density value.
   */
  onDensityChange: import_prop_types64.default.func,
  /**
   * Callback fired when the detail panel of a row is opened or closed.
   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onDetailPanelExpandedRowIdsChange: import_prop_types64.default.func,
  /**
   * Callback fired when the state of the Excel export changes.
   * @param {string} inProgress Indicates if the task is in progress.
   */
  onExcelExportStateChange: import_prop_types64.default.func,
  /**
   * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.
   * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFetchRows: import_prop_types64.default.func,
  /**
   * Callback fired when the Filter model changes before the filters are applied.
   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFilterModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when the menu is closed.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuClose: import_prop_types64.default.func,
  /**
   * Callback fired when the menu is opened.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuOpen: import_prop_types64.default.func,
  /**
   * Callback fired when the pagination meta has changed.
   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.
   */
  onPaginationMetaChange: import_prop_types64.default.func,
  /**
   * Callback fired when the pagination model has changed.
   * @param {GridPaginationModel} model Updated pagination model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPaginationModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when the pinned columns have changed.
   * @param {GridPinnedColumnFields} pinnedColumns The changed pinned columns.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPinnedColumnsChange: import_prop_types64.default.func,
  /**
   * Callback fired when the preferences panel is closed.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelClose: import_prop_types64.default.func,
  /**
   * Callback fired when the preferences panel is opened.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelOpen: import_prop_types64.default.func,
  /**
   * Callback called when `processRowUpdate` throws an error or rejects.
   * @param {any} error The error thrown.
   */
  onProcessRowUpdateError: import_prop_types64.default.func,
  /**
   * Callback fired when the Data Grid is resized.
   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onResize: import_prop_types64.default.func,
  /**
   * Callback fired when a row is clicked.
   * Not called if the target clicked is an interactive element added by the built-in columns.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowClick: import_prop_types64.default.func,
  /**
   * Callback fired when the row count has changed.
   * @param {number} count Updated row count.
   */
  onRowCountChange: import_prop_types64.default.func,
  /**
   * Callback fired when a double click event comes from a row container element.
   * @param {GridRowParams} params With all properties from [[RowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowDoubleClick: import_prop_types64.default.func,
  /**
   * Callback fired when the row turns to edit mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStart: import_prop_types64.default.func,
  /**
   * Callback fired when the row turns to view mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStop: import_prop_types64.default.func,
  /**
   * Callback fired when the row grouping model changes.
   * @param {GridRowGroupingModel} model Columns used as grouping criteria.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowGroupingModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when the `rowModesModel` prop changes.
   * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowModesModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when a row is being reordered.
   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowOrderChange: import_prop_types64.default.func,
  /**
   * Callback fired when the selection state of one or multiple rows changes.
   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowSelectionModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when scrolling to the bottom of the grid viewport.
   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowsScrollEnd: import_prop_types64.default.func,
  /**
   * Callback fired when the sort model changes before a column is sorted.
   * @param {GridSortModel} model With all properties from [[GridSortModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onSortModelChange: import_prop_types64.default.func,
  /**
   * Callback fired when the state of the Data Grid is updated.
   * @param {GridState} state The new state.
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   * @ignore - do not document.
   */
  onStateChange: import_prop_types64.default.func,
  /**
   * Select the pageSize dynamically using the component UI.
   * @default [25, 50, 100]
   */
  pageSizeOptions: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.shape({
    label: import_prop_types64.default.string.isRequired,
    value: import_prop_types64.default.number.isRequired
  })]).isRequired),
  /**
   * If `true`, pagination is enabled.
   * @default false
   */
  pagination: import_prop_types64.default.bool,
  /**
   * The extra information about the pagination state of the Data Grid.
   * Only applicable with `paginationMode="server"`.
   */
  paginationMeta: import_prop_types64.default.shape({
    hasNextPage: import_prop_types64.default.bool
  }),
  /**
   * Pagination can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle the pagination on the client-side.
   * Set it to 'server' if you would like to handle the pagination on the server-side.
   * @default "client"
   */
  paginationMode: import_prop_types64.default.oneOf(["client", "server"]),
  /**
   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
   */
  paginationModel: import_prop_types64.default.shape({
    page: import_prop_types64.default.number.isRequired,
    pageSize: import_prop_types64.default.number.isRequired
  }),
  /**
   * The column fields to display pinned to left or right.
   */
  pinnedColumns: import_prop_types64.default.object,
  /**
   * Rows data to pin on top or bottom.
   */
  pinnedRows: import_prop_types64.default.shape({
    bottom: import_prop_types64.default.arrayOf(import_prop_types64.default.object),
    top: import_prop_types64.default.arrayOf(import_prop_types64.default.object)
  }),
  /**
   * Callback called before updating a row with new values in the row and cell editing.
   * @template R
   * @param {R} newRow Row object with the new values.
   * @param {R} oldRow Row object with the old values.
   * @returns {Promise<R> | R} The final values to update the row.
   */
  processRowUpdate: import_prop_types64.default.func,
  /**
   * The milliseconds throttle delay for resizing the grid.
   * @default 60
   */
  resizeThrottleMs: import_prop_types64.default.number,
  /**
   * Row region in pixels to render before/after the viewport
   * @default 150
   */
  rowBufferPx: import_prop_types64.default.number,
  /**
   * Set the total number of rows, if it is different from the length of the value `rows` prop.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Only works with `paginationMode="server"`, ignored when `paginationMode="client"`.
   */
  rowCount: import_prop_types64.default.number,
  /**
   * If `single`, all the columns that are grouped are represented in the same grid column.
   * If `multiple`, each column that is grouped is represented in its own grid column.
   * @default 'single'
   */
  rowGroupingColumnMode: import_prop_types64.default.oneOf(["multiple", "single"]),
  /**
   * Set the row grouping model of the grid.
   */
  rowGroupingModel: import_prop_types64.default.arrayOf(import_prop_types64.default.string),
  /**
   * Sets the height in pixel of a row in the Data Grid.
   * @default 52
   */
  rowHeight: import_prop_types64.default.number,
  /**
   * Controls the modes of the rows.
   */
  rowModesModel: import_prop_types64.default.object,
  /**
   * The milliseconds delay to wait after measuring the row height before recalculating row positions.
   * Setting it to a lower value could be useful when using dynamic row height,
   * but might reduce performance when displaying a large number of rows.
   * @default 166
   */
  rowPositionsDebounceMs: import_prop_types64.default.number,
  /**
   * If `true`, the reordering of rows is enabled.
   * @default false
   */
  rowReordering: import_prop_types64.default.bool,
  /**
   * Set of rows of type [[GridRowsProp]].
   * @default []
   */
  rows: import_prop_types64.default.arrayOf(import_prop_types64.default.object),
  /**
   * If `false`, the row selection mode is disabled.
   * @default true
   */
  rowSelection: import_prop_types64.default.bool,
  /**
   * Sets the row selection model of the Data Grid.
   */
  rowSelectionModel: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]).isRequired), import_prop_types64.default.number, import_prop_types64.default.string]),
  /**
   * Loading rows can be processed on the server or client-side.
   * Set it to 'client' if you would like enable infnite loading.
   * Set it to 'server' if you would like to enable lazy loading.
   * * @default "client"
   */
  rowsLoadingMode: import_prop_types64.default.oneOf(["client", "server"]),
  /**
   * Sets the type of space between rows added by `getRowSpacing`.
   * @default "margin"
   */
  rowSpacingType: import_prop_types64.default.oneOf(["border", "margin"]),
  /**
   * Override the height/width of the Data Grid inner scrollbar.
   */
  scrollbarSize: import_prop_types64.default.number,
  /**
   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.
   * @default 80
   */
  scrollEndThreshold: import_prop_types64.default.number,
  /**
   * If `true`, the vertical borders of the cells are displayed.
   * @default false
   */
  showCellVerticalBorder: import_prop_types64.default.bool,
  /**
   * If `true`, the right border of the column headers are displayed.
   * @default false
   */
  showColumnVerticalBorder: import_prop_types64.default.bool,
  /**
   * Overridable components props dynamically passed to the component at rendering.
   */
  slotProps: import_prop_types64.default.object,
  /**
   * Overridable components.
   */
  slots: import_prop_types64.default.object,
  /**
   * Sorting can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle sorting on the client-side.
   * Set it to 'server' if you would like to handle sorting on the server-side.
   * @default "client"
   */
  sortingMode: import_prop_types64.default.oneOf(["client", "server"]),
  /**
   * The order of the sorting sequence.
   * @default ['asc', 'desc', null]
   */
  sortingOrder: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOf(["asc", "desc"])),
  /**
   * Set the sort model of the Data Grid.
   */
  sortModel: import_prop_types64.default.arrayOf(import_prop_types64.default.shape({
    field: import_prop_types64.default.string.isRequired,
    sort: import_prop_types64.default.oneOf(["asc", "desc"])
  })),
  /**
   * The function is used to split the pasted text into rows and cells.
   * @param {string} text The text pasted from the clipboard.
   * @returns {string[][] | null} A 2D array of strings. The first dimension is the rows, the second dimension is the columns.
   * @default (pastedText) => { const text = pastedText.replace(/\r?\n$/, ''); return text.split(/\r\n|\n|\r/).map((row) => row.split('\t')); }
   */
  splitClipboardPastedText: import_prop_types64.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
  /**
   * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.
   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.
   * @default 0
   */
  throttleRowsMs: import_prop_types64.default.number,
  /**
   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.
   * @default false
   */
  treeData: import_prop_types64.default.bool
} : void 0;

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useKeepGroupedColumnsHidden.js
init_extends();
var React186 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/services/static-data.js
var COLORS = [pink_default[500], blue_default[500], orange_default[500], red_default[500], green_default[500], lightBlue_default[500], purple_default[500]];
var STATUS_OPTIONS = ["Open", "PartiallyFilled", "Filled", "Rejected"];
var TAXCODE_OPTIONS = ["BR", "1250L", "20G", "BC45", "IGN179"];
var RATE_TYPE_OPTIONS = ["Fixed", "Floating"];
var CONTRACT_TYPE_OPTIONS = ["FP", "TM", "CR"];
var INCOTERM_OPTIONS = ["EXW (Ex Works)", "FAS (Free Alongside Ship)", "FCA (Free Carrier)", "CPT (Carriage Paid To)", "DAP (Delivered at Place)", "DPU (Delivered at Place Unloaded)", "DDP (Delivered Duty Paid)"];
var COMMODITY_OPTIONS = ["Corn", "Oats", "Rough Rice", "Soybeans", "Rapeseed", "Soybeans", "Soybean Meal", "Soybean Oil", "Wheat", "Milk", "Cocoa", "Coffee C", "Cotton No.2", "Sugar No.11", "Sugar No.14", "Frozen Concentrated Orange Juice", "Adzuki bean", "Robusta coffee"];
var CURRENCY_OPTIONS = ["USD", "GBP", "JPY", "EUR", "BRL", "MXN", "AUD", "CAD", "NZD", "ARS", "CHF", "THB", "HKD", "TRY"];
var COUNTRY_ISO_OPTIONS = [{
  value: "AD",
  code: "AD",
  label: "Andorra",
  phone: "376"
}, {
  value: "AE",
  code: "AE",
  label: "United Arab Emirates",
  phone: "971"
}, {
  value: "AF",
  code: "AF",
  label: "Afghanistan",
  phone: "93"
}, {
  value: "AG",
  code: "AG",
  label: "Antigua and Barbuda",
  phone: "1-268"
}, {
  value: "AI",
  code: "AI",
  label: "Anguilla",
  phone: "1-264"
}, {
  value: "AL",
  code: "AL",
  label: "Albania",
  phone: "355"
}, {
  value: "AM",
  code: "AM",
  label: "Armenia",
  phone: "374"
}, {
  value: "AO",
  code: "AO",
  label: "Angola",
  phone: "244"
}, {
  value: "AQ",
  code: "AQ",
  label: "Antarctica",
  phone: "672"
}, {
  value: "AR",
  code: "AR",
  label: "Argentina",
  phone: "54"
}, {
  value: "AS",
  code: "AS",
  label: "American Samoa",
  phone: "1-684"
}, {
  value: "AT",
  code: "AT",
  label: "Austria",
  phone: "43"
}, {
  value: "AU",
  code: "AU",
  label: "Australia",
  phone: "61",
  suggested: true
}, {
  value: "AW",
  code: "AW",
  label: "Aruba",
  phone: "297"
}, {
  value: "AX",
  code: "AX",
  label: "Alland Islands",
  phone: "358"
}, {
  value: "AZ",
  code: "AZ",
  label: "Azerbaijan",
  phone: "994"
}, {
  value: "BA",
  code: "BA",
  label: "Bosnia and Herzegovina",
  phone: "387"
}, {
  value: "BB",
  code: "BB",
  label: "Barbados",
  phone: "1-246"
}, {
  value: "BD",
  code: "BD",
  label: "Bangladesh",
  phone: "880"
}, {
  value: "BE",
  code: "BE",
  label: "Belgium",
  phone: "32"
}, {
  value: "BF",
  code: "BF",
  label: "Burkina Faso",
  phone: "226"
}, {
  value: "BG",
  code: "BG",
  label: "Bulgaria",
  phone: "359"
}, {
  value: "BH",
  code: "BH",
  label: "Bahrain",
  phone: "973"
}, {
  value: "BI",
  code: "BI",
  label: "Burundi",
  phone: "257"
}, {
  value: "BJ",
  code: "BJ",
  label: "Benin",
  phone: "229"
}, {
  value: "BL",
  code: "BL",
  label: "Saint Barthelemy",
  phone: "590"
}, {
  value: "BM",
  code: "BM",
  label: "Bermuda",
  phone: "1-441"
}, {
  value: "BN",
  code: "BN",
  label: "Brunei Darussalam",
  phone: "673"
}, {
  value: "BO",
  code: "BO",
  label: "Bolivia",
  phone: "591"
}, {
  value: "BR",
  code: "BR",
  label: "Brazil",
  phone: "55"
}, {
  value: "BS",
  code: "BS",
  label: "Bahamas",
  phone: "1-242"
}, {
  value: "BT",
  code: "BT",
  label: "Bhutan",
  phone: "975"
}, {
  value: "BV",
  code: "BV",
  label: "Bouvet Island",
  phone: "47"
}, {
  value: "BW",
  code: "BW",
  label: "Botswana",
  phone: "267"
}, {
  value: "BY",
  code: "BY",
  label: "Belarus",
  phone: "375"
}, {
  value: "BZ",
  code: "BZ",
  label: "Belize",
  phone: "501"
}, {
  value: "CA",
  code: "CA",
  label: "Canada",
  phone: "1",
  suggested: true
}, {
  value: "CC",
  code: "CC",
  label: "Cocos (Keeling) Islands",
  phone: "61"
}, {
  value: "CD",
  code: "CD",
  label: "Congo, Democratic Republic of the",
  phone: "243"
}, {
  value: "CF",
  code: "CF",
  label: "Central African Republic",
  phone: "236"
}, {
  value: "CG",
  code: "CG",
  label: "Congo, Republic of the",
  phone: "242"
}, {
  value: "CH",
  code: "CH",
  label: "Switzerland",
  phone: "41"
}, {
  value: "CI",
  code: "CI",
  label: "Cote d'Ivoire",
  phone: "225"
}, {
  value: "CK",
  code: "CK",
  label: "Cook Islands",
  phone: "682"
}, {
  value: "CL",
  code: "CL",
  label: "Chile",
  phone: "56"
}, {
  value: "CM",
  code: "CM",
  label: "Cameroon",
  phone: "237"
}, {
  value: "CN",
  code: "CN",
  label: "China",
  phone: "86"
}, {
  value: "CO",
  code: "CO",
  label: "Colombia",
  phone: "57"
}, {
  value: "CR",
  code: "CR",
  label: "Costa Rica",
  phone: "506"
}, {
  value: "CU",
  code: "CU",
  label: "Cuba",
  phone: "53"
}, {
  value: "CV",
  code: "CV",
  label: "Cape Verde",
  phone: "238"
}, {
  value: "CW",
  code: "CW",
  label: "Curacao",
  phone: "599"
}, {
  value: "CX",
  code: "CX",
  label: "Christmas Island",
  phone: "61"
}, {
  value: "CY",
  code: "CY",
  label: "Cyprus",
  phone: "357"
}, {
  value: "CZ",
  code: "CZ",
  label: "Czech Republic",
  phone: "420"
}, {
  value: "DE",
  code: "DE",
  label: "Germany",
  phone: "49",
  suggested: true
}, {
  value: "DJ",
  code: "DJ",
  label: "Djibouti",
  phone: "253"
}, {
  value: "DK",
  code: "DK",
  label: "Denmark",
  phone: "45"
}, {
  value: "DM",
  code: "DM",
  label: "Dominica",
  phone: "1-767"
}, {
  value: "DO",
  code: "DO",
  label: "Dominican Republic",
  phone: "1-809"
}, {
  value: "DZ",
  code: "DZ",
  label: "Algeria",
  phone: "213"
}, {
  value: "EC",
  code: "EC",
  label: "Ecuador",
  phone: "593"
}, {
  value: "EE",
  code: "EE",
  label: "Estonia",
  phone: "372"
}, {
  value: "EG",
  code: "EG",
  label: "Egypt",
  phone: "20"
}, {
  value: "EH",
  code: "EH",
  label: "Western Sahara",
  phone: "212"
}, {
  value: "ER",
  code: "ER",
  label: "Eritrea",
  phone: "291"
}, {
  value: "ES",
  code: "ES",
  label: "Spain",
  phone: "34"
}, {
  value: "ET",
  code: "ET",
  label: "Ethiopia",
  phone: "251"
}, {
  value: "FI",
  code: "FI",
  label: "Finland",
  phone: "358"
}, {
  value: "FJ",
  code: "FJ",
  label: "Fiji",
  phone: "679"
}, {
  value: "FK",
  code: "FK",
  label: "Falkland Islands (Malvinas)",
  phone: "500"
}, {
  value: "FM",
  code: "FM",
  label: "Micronesia, Federated States of",
  phone: "691"
}, {
  value: "FO",
  code: "FO",
  label: "Faroe Islands",
  phone: "298"
}, {
  value: "FR",
  code: "FR",
  label: "France",
  phone: "33",
  suggested: true
}, {
  value: "GA",
  code: "GA",
  label: "Gabon",
  phone: "241"
}, {
  value: "GB",
  code: "GB",
  label: "United Kingdom",
  phone: "44"
}, {
  value: "GD",
  code: "GD",
  label: "Grenada",
  phone: "1-473"
}, {
  value: "GE",
  code: "GE",
  label: "Georgia",
  phone: "995"
}, {
  value: "GF",
  code: "GF",
  label: "French Guiana",
  phone: "594"
}, {
  value: "GG",
  code: "GG",
  label: "Guernsey",
  phone: "44"
}, {
  value: "GH",
  code: "GH",
  label: "Ghana",
  phone: "233"
}, {
  value: "GI",
  code: "GI",
  label: "Gibraltar",
  phone: "350"
}, {
  value: "GL",
  code: "GL",
  label: "Greenland",
  phone: "299"
}, {
  value: "GM",
  code: "GM",
  label: "Gambia",
  phone: "220"
}, {
  value: "GN",
  code: "GN",
  label: "Guinea",
  phone: "224"
}, {
  value: "GP",
  code: "GP",
  label: "Guadeloupe",
  phone: "590"
}, {
  value: "GQ",
  code: "GQ",
  label: "Equatorial Guinea",
  phone: "240"
}, {
  value: "GR",
  code: "GR",
  label: "Greece",
  phone: "30"
}, {
  value: "GS",
  code: "GS",
  label: "South Georgia and the South Sandwich Islands",
  phone: "500"
}, {
  value: "GT",
  code: "GT",
  label: "Guatemala",
  phone: "502"
}, {
  value: "GU",
  code: "GU",
  label: "Guam",
  phone: "1-671"
}, {
  value: "GW",
  code: "GW",
  label: "Guinea-Bissau",
  phone: "245"
}, {
  value: "GY",
  code: "GY",
  label: "Guyana",
  phone: "592"
}, {
  value: "HK",
  code: "HK",
  label: "Hong Kong",
  phone: "852"
}, {
  value: "HM",
  code: "HM",
  label: "Heard Island and McDonald Islands",
  phone: "672"
}, {
  value: "HN",
  code: "HN",
  label: "Honduras",
  phone: "504"
}, {
  value: "HR",
  code: "HR",
  label: "Croatia",
  phone: "385"
}, {
  value: "HT",
  code: "HT",
  label: "Haiti",
  phone: "509"
}, {
  value: "HU",
  code: "HU",
  label: "Hungary",
  phone: "36"
}, {
  value: "ID",
  code: "ID",
  label: "Indonesia",
  phone: "62"
}, {
  value: "IE",
  code: "IE",
  label: "Ireland",
  phone: "353"
}, {
  value: "IL",
  code: "IL",
  label: "Israel",
  phone: "972"
}, {
  value: "IM",
  code: "IM",
  label: "Isle of Man",
  phone: "44"
}, {
  value: "IN",
  code: "IN",
  label: "India",
  phone: "91"
}, {
  value: "IO",
  code: "IO",
  label: "British Indian Ocean Territory",
  phone: "246"
}, {
  value: "IQ",
  code: "IQ",
  label: "Iraq",
  phone: "964"
}, {
  value: "IR",
  code: "IR",
  label: "Iran, Islamic Republic of",
  phone: "98"
}, {
  value: "IS",
  code: "IS",
  label: "Iceland",
  phone: "354"
}, {
  value: "IT",
  code: "IT",
  label: "Italy",
  phone: "39"
}, {
  value: "JE",
  code: "JE",
  label: "Jersey",
  phone: "44"
}, {
  value: "JM",
  code: "JM",
  label: "Jamaica",
  phone: "1-876"
}, {
  value: "JO",
  code: "JO",
  label: "Jordan",
  phone: "962"
}, {
  value: "JP",
  code: "JP",
  label: "Japan",
  phone: "81",
  suggested: true
}, {
  value: "KE",
  code: "KE",
  label: "Kenya",
  phone: "254"
}, {
  value: "KG",
  code: "KG",
  label: "Kyrgyzstan",
  phone: "996"
}, {
  value: "KH",
  code: "KH",
  label: "Cambodia",
  phone: "855"
}, {
  value: "KI",
  code: "KI",
  label: "Kiribati",
  phone: "686"
}, {
  value: "KM",
  code: "KM",
  label: "Comoros",
  phone: "269"
}, {
  value: "KN",
  code: "KN",
  label: "Saint Kitts and Nevis",
  phone: "1-869"
}, {
  value: "KP",
  code: "KP",
  label: "Korea, Democratic People's Republic of",
  phone: "850"
}, {
  value: "KR",
  code: "KR",
  label: "Korea, Republic of",
  phone: "82"
}, {
  value: "KW",
  code: "KW",
  label: "Kuwait",
  phone: "965"
}, {
  value: "KY",
  code: "KY",
  label: "Cayman Islands",
  phone: "1-345"
}, {
  value: "KZ",
  code: "KZ",
  label: "Kazakhstan",
  phone: "7"
}, {
  value: "LA",
  code: "LA",
  label: "Lao People's Democratic Republic",
  phone: "856"
}, {
  value: "LB",
  code: "LB",
  label: "Lebanon",
  phone: "961"
}, {
  value: "LC",
  code: "LC",
  label: "Saint Lucia",
  phone: "1-758"
}, {
  value: "LI",
  code: "LI",
  label: "Liechtenstein",
  phone: "423"
}, {
  value: "LK",
  code: "LK",
  label: "Sri Lanka",
  phone: "94"
}, {
  value: "LR",
  code: "LR",
  label: "Liberia",
  phone: "231"
}, {
  value: "LS",
  code: "LS",
  label: "Lesotho",
  phone: "266"
}, {
  value: "LT",
  code: "LT",
  label: "Lithuania",
  phone: "370"
}, {
  value: "LU",
  code: "LU",
  label: "Luxembourg",
  phone: "352"
}, {
  value: "LV",
  code: "LV",
  label: "Latvia",
  phone: "371"
}, {
  value: "LY",
  code: "LY",
  label: "Libya",
  phone: "218"
}, {
  value: "MA",
  code: "MA",
  label: "Morocco",
  phone: "212"
}, {
  value: "MC",
  code: "MC",
  label: "Monaco",
  phone: "377"
}, {
  value: "MD",
  code: "MD",
  label: "Moldova, Republic of",
  phone: "373"
}, {
  value: "ME",
  code: "ME",
  label: "Montenegro",
  phone: "382"
}, {
  value: "MF",
  code: "MF",
  label: "Saint Martin (French part)",
  phone: "590"
}, {
  value: "MG",
  code: "MG",
  label: "Madagascar",
  phone: "261"
}, {
  value: "MH",
  code: "MH",
  label: "Marshall Islands",
  phone: "692"
}, {
  value: "MK",
  code: "MK",
  label: "North Macedonia",
  phone: "389"
}, {
  value: "ML",
  code: "ML",
  label: "Mali",
  phone: "223"
}, {
  value: "MM",
  code: "MM",
  label: "Myanmar",
  phone: "95"
}, {
  value: "MN",
  code: "MN",
  label: "Mongolia",
  phone: "976"
}, {
  value: "MO",
  code: "MO",
  label: "Macao",
  phone: "853"
}, {
  value: "MP",
  code: "MP",
  label: "Northern Mariana Islands",
  phone: "1-670"
}, {
  value: "MQ",
  code: "MQ",
  label: "Martinique",
  phone: "596"
}, {
  value: "MR",
  code: "MR",
  label: "Mauritania",
  phone: "222"
}, {
  value: "MS",
  code: "MS",
  label: "Montserrat",
  phone: "1-664"
}, {
  value: "MT",
  code: "MT",
  label: "Malta",
  phone: "356"
}, {
  value: "MU",
  code: "MU",
  label: "Mauritius",
  phone: "230"
}, {
  value: "MV",
  code: "MV",
  label: "Maldives",
  phone: "960"
}, {
  value: "MW",
  code: "MW",
  label: "Malawi",
  phone: "265"
}, {
  value: "MX",
  code: "MX",
  label: "Mexico",
  phone: "52"
}, {
  value: "MY",
  code: "MY",
  label: "Malaysia",
  phone: "60"
}, {
  value: "MZ",
  code: "MZ",
  label: "Mozambique",
  phone: "258"
}, {
  value: "NA",
  code: "NA",
  label: "Namibia",
  phone: "264"
}, {
  value: "NC",
  code: "NC",
  label: "New Caledonia",
  phone: "687"
}, {
  value: "NE",
  code: "NE",
  label: "Niger",
  phone: "227"
}, {
  value: "NF",
  code: "NF",
  label: "Norfolk Island",
  phone: "672"
}, {
  value: "NG",
  code: "NG",
  label: "Nigeria",
  phone: "234"
}, {
  value: "NI",
  code: "NI",
  label: "Nicaragua",
  phone: "505"
}, {
  value: "NL",
  code: "NL",
  label: "Netherlands",
  phone: "31"
}, {
  value: "NO",
  code: "NO",
  label: "Norway",
  phone: "47"
}, {
  value: "NP",
  code: "NP",
  label: "Nepal",
  phone: "977"
}, {
  value: "NR",
  code: "NR",
  label: "Nauru",
  phone: "674"
}, {
  value: "NU",
  code: "NU",
  label: "Niue",
  phone: "683"
}, {
  value: "NZ",
  code: "NZ",
  label: "New Zealand",
  phone: "64"
}, {
  value: "OM",
  code: "OM",
  label: "Oman",
  phone: "968"
}, {
  value: "PA",
  code: "PA",
  label: "Panama",
  phone: "507"
}, {
  value: "PE",
  code: "PE",
  label: "Peru",
  phone: "51"
}, {
  value: "PF",
  code: "PF",
  label: "French Polynesia",
  phone: "689"
}, {
  value: "PG",
  code: "PG",
  label: "Papua New Guinea",
  phone: "675"
}, {
  value: "PH",
  code: "PH",
  label: "Philippines",
  phone: "63"
}, {
  value: "PK",
  code: "PK",
  label: "Pakistan",
  phone: "92"
}, {
  value: "PL",
  code: "PL",
  label: "Poland",
  phone: "48"
}, {
  value: "PM",
  code: "PM",
  label: "Saint Pierre and Miquelon",
  phone: "508"
}, {
  value: "PN",
  code: "PN",
  label: "Pitcairn",
  phone: "870"
}, {
  value: "PR",
  code: "PR",
  label: "Puerto Rico",
  phone: "1"
}, {
  value: "PS",
  code: "PS",
  label: "Palestine, State of",
  phone: "970"
}, {
  value: "PT",
  code: "PT",
  label: "Portugal",
  phone: "351"
}, {
  value: "PW",
  code: "PW",
  label: "Palau",
  phone: "680"
}, {
  value: "PY",
  code: "PY",
  label: "Paraguay",
  phone: "595"
}, {
  value: "QA",
  code: "QA",
  label: "Qatar",
  phone: "974"
}, {
  value: "RE",
  code: "RE",
  label: "Reunion",
  phone: "262"
}, {
  value: "RO",
  code: "RO",
  label: "Romania",
  phone: "40"
}, {
  value: "RS",
  code: "RS",
  label: "Serbia",
  phone: "381"
}, {
  value: "RU",
  code: "RU",
  label: "Russian Federation",
  phone: "7"
}, {
  value: "RW",
  code: "RW",
  label: "Rwanda",
  phone: "250"
}, {
  value: "SA",
  code: "SA",
  label: "Saudi Arabia",
  phone: "966"
}, {
  value: "SB",
  code: "SB",
  label: "Solomon Islands",
  phone: "677"
}, {
  value: "SC",
  code: "SC",
  label: "Seychelles",
  phone: "248"
}, {
  value: "SD",
  code: "SD",
  label: "Sudan",
  phone: "249"
}, {
  value: "SE",
  code: "SE",
  label: "Sweden",
  phone: "46"
}, {
  value: "SG",
  code: "SG",
  label: "Singapore",
  phone: "65"
}, {
  value: "SH",
  code: "SH",
  label: "Saint Helena",
  phone: "290"
}, {
  value: "SI",
  code: "SI",
  label: "Slovenia",
  phone: "386"
}, {
  value: "SJ",
  code: "SJ",
  label: "Svalbard and Jan Mayen",
  phone: "47"
}, {
  value: "SK",
  code: "SK",
  label: "Slovakia",
  phone: "421"
}, {
  value: "SL",
  code: "SL",
  label: "Sierra Leone",
  phone: "232"
}, {
  value: "SM",
  code: "SM",
  label: "San Marino",
  phone: "378"
}, {
  value: "SN",
  code: "SN",
  label: "Senegal",
  phone: "221"
}, {
  value: "SO",
  code: "SO",
  label: "Somalia",
  phone: "252"
}, {
  value: "SR",
  code: "SR",
  label: "Suriname",
  phone: "597"
}, {
  value: "SS",
  code: "SS",
  label: "South Sudan",
  phone: "211"
}, {
  value: "ST",
  code: "ST",
  label: "Sao Tome and Principe",
  phone: "239"
}, {
  value: "SV",
  code: "SV",
  label: "El Salvador",
  phone: "503"
}, {
  value: "SX",
  code: "SX",
  label: "Sint Maarten (Dutch part)",
  phone: "1-721"
}, {
  value: "SY",
  code: "SY",
  label: "Syrian Arab Republic",
  phone: "963"
}, {
  value: "SZ",
  code: "SZ",
  label: "Swaziland",
  phone: "268"
}, {
  value: "TC",
  code: "TC",
  label: "Turks and Caicos Islands",
  phone: "1-649"
}, {
  value: "TD",
  code: "TD",
  label: "Chad",
  phone: "235"
}, {
  value: "TF",
  code: "TF",
  label: "French Southern Territories",
  phone: "262"
}, {
  value: "TG",
  code: "TG",
  label: "Togo",
  phone: "228"
}, {
  value: "TH",
  code: "TH",
  label: "Thailand",
  phone: "66"
}, {
  value: "TJ",
  code: "TJ",
  label: "Tajikistan",
  phone: "992"
}, {
  value: "TK",
  code: "TK",
  label: "Tokelau",
  phone: "690"
}, {
  value: "TL",
  code: "TL",
  label: "Timor-Leste",
  phone: "670"
}, {
  value: "TM",
  code: "TM",
  label: "Turkmenistan",
  phone: "993"
}, {
  value: "TN",
  code: "TN",
  label: "Tunisia",
  phone: "216"
}, {
  value: "TO",
  code: "TO",
  label: "Tonga",
  phone: "676"
}, {
  value: "TR",
  code: "TR",
  label: "Turkey",
  phone: "90"
}, {
  value: "TT",
  code: "TT",
  label: "Trinidad and Tobago",
  phone: "1-868"
}, {
  value: "TV",
  code: "TV",
  label: "Tuvalu",
  phone: "688"
}, {
  value: "TW",
  code: "TW",
  label: "Taiwan, Province of China",
  phone: "886"
}, {
  value: "TZ",
  code: "TZ",
  label: "United Republic of Tanzania",
  phone: "255"
}, {
  value: "UA",
  code: "UA",
  label: "Ukraine",
  phone: "380"
}, {
  value: "UG",
  code: "UG",
  label: "Uganda",
  phone: "256"
}, {
  value: "US",
  code: "US",
  label: "United States",
  phone: "1",
  suggested: true
}, {
  value: "UY",
  code: "UY",
  label: "Uruguay",
  phone: "598"
}, {
  value: "UZ",
  code: "UZ",
  label: "Uzbekistan",
  phone: "998"
}, {
  value: "VA",
  code: "VA",
  label: "Holy See (Vatican City State)",
  phone: "379"
}, {
  value: "VC",
  code: "VC",
  label: "Saint Vincent and the Grenadines",
  phone: "1-784"
}, {
  value: "VE",
  code: "VE",
  label: "Venezuela",
  phone: "58"
}, {
  value: "VG",
  code: "VG",
  label: "British Virgin Islands",
  phone: "1-284"
}, {
  value: "VI",
  code: "VI",
  label: "US Virgin Islands",
  phone: "1-340"
}, {
  value: "VN",
  code: "VN",
  label: "Vietnam",
  phone: "84"
}, {
  value: "VU",
  code: "VU",
  label: "Vanuatu",
  phone: "678"
}, {
  value: "WF",
  code: "WF",
  label: "Wallis and Futuna",
  phone: "681"
}, {
  value: "WS",
  code: "WS",
  label: "Samoa",
  phone: "685"
}, {
  value: "XK",
  code: "XK",
  label: "Kosovo",
  phone: "383"
}, {
  value: "YE",
  code: "YE",
  label: "Yemen",
  phone: "967"
}, {
  value: "YT",
  code: "YT",
  label: "Mayotte",
  phone: "262"
}, {
  value: "ZA",
  code: "ZA",
  label: "South Africa",
  phone: "27"
}, {
  value: "ZM",
  code: "ZM",
  label: "Zambia",
  phone: "260"
}, {
  value: "ZW",
  code: "ZW",
  label: "Zimbabwe",
  phone: "263"
}];
var COUNTRY_ISO_OPTIONS_SORTED = [...COUNTRY_ISO_OPTIONS].sort((v1, v2) => v1.label.localeCompare(v2.label));

// node_modules/@mui/x-data-grid-generator/renderer/renderEditCurrency.js
var import_jsx_runtime120 = __toESM(require_jsx_runtime());
var StyledAutocomplete = styled_default(Autocomplete_default)(({
  theme
}) => ({
  height: "100%",
  [`& .${autocompleteClasses_default.inputRoot}`]: _extends({}, theme.typography.body2, {
    padding: "1px 0",
    height: "100%",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  })
}));
function EditCurrency(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext2();
  const handleChange = React187.useCallback(async (event, newValue) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: newValue.toUpperCase()
    }, event);
    apiRef2.current.stopCellEditMode({
      id,
      field
    });
  }, [apiRef2, field, id]);
  return (0, import_jsx_runtime120.jsx)(StyledAutocomplete, {
    value,
    onChange: handleChange,
    options: CURRENCY_OPTIONS,
    autoHighlight: true,
    fullWidth: true,
    open: true,
    disableClearable: true,
    renderOption: (optionProps, option) => (0, import_jsx_runtime120.jsxs)(Box_default, _extends({
      component: "li",
      sx: {
        "& > img": {
          mr: 1.5,
          flexShrink: 0
        }
      }
    }, optionProps, {
      children: [(0, import_jsx_runtime120.jsx)("img", {
        loading: "lazy",
        width: "20",
        src: `https://flagcdn.com/w20/${option.slice(0, -1).toLowerCase()}.png`,
        srcSet: `https://flagcdn.com/w40/${option.slice(0, -1).toLowerCase()}.png 2x`,
        alt: ""
      }), option]
    })),
    renderInput: (params) => (0, import_jsx_runtime120.jsx)(InputBase_default, _extends({
      autoFocus: true,
      fullWidth: true,
      id: params.id,
      inputProps: _extends({}, params.inputProps, {
        autoComplete: "new-password"
        // disable autocomplete and autofill
      })
    }, params.InputProps))
  });
}
function renderEditCurrency(params) {
  return (0, import_jsx_runtime120.jsx)(EditCurrency, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditProgress.js
init_extends();
var React188 = __toESM(require_react());
init_clsx();
init_utils();
var import_jsx_runtime121 = __toESM(require_jsx_runtime());
var StyledSlider = styled_default(Slider_default)(({
  theme
}) => ({
  display: "flex",
  height: "100%",
  width: "100%",
  alignItems: "center",
  justifyContent: "center",
  padding: 0,
  borderRadius: 0,
  [`& .${sliderClasses_default.rail}`]: {
    height: "100%",
    backgroundColor: "transparent"
  },
  [`& .${sliderClasses_default.track}`]: {
    height: "100%",
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shorter
    }),
    "&.low": {
      backgroundColor: "#f44336"
    },
    "&.medium": {
      backgroundColor: "#efbb5aa3"
    },
    "&.high": {
      backgroundColor: "#088208a3"
    }
  },
  [`& .${sliderClasses_default.thumb}`]: {
    height: "100%",
    width: 5,
    borderRadius: 0,
    marginTop: 0,
    backgroundColor: alpha("#000000", 0.2)
  }
}));
function ValueLabelComponent(props) {
  const {
    children,
    open,
    value
  } = props;
  return (0, import_jsx_runtime121.jsx)(Tooltip_default, {
    open,
    enterTouchDelay: 0,
    placement: "top",
    title: value,
    children
  });
}
function EditProgress(props) {
  const {
    id,
    value,
    field
  } = props;
  const [valueState, setValueState] = React188.useState(Number(value));
  const apiRef2 = useGridApiContext2();
  const updateCellEditProps = React188.useCallback((newValue) => {
    apiRef2.current.setEditCellValue({
      id,
      field,
      value: newValue
    });
  }, [apiRef2, field, id]);
  const debouncedUpdateCellEditProps = React188.useMemo(() => debounce(updateCellEditProps, 60), [updateCellEditProps]);
  const handleChange = (event, newValue) => {
    setValueState(newValue);
    debouncedUpdateCellEditProps(newValue);
  };
  React188.useEffect(() => {
    setValueState(Number(value));
  }, [value]);
  const handleRef = (element) => {
    if (element) {
      element.querySelector('[type="range"]').focus();
    }
  };
  return (0, import_jsx_runtime121.jsx)(StyledSlider, {
    ref: handleRef,
    classes: {
      track: clsx_default(valueState < 0.3 && "low", valueState >= 0.3 && valueState <= 0.7 && "medium", valueState > 0.7 && "high")
    },
    value: valueState,
    max: 1,
    step: 1e-5,
    onChange: handleChange,
    components: {
      ValueLabel: ValueLabelComponent
    },
    valueLabelDisplay: "auto",
    valueLabelFormat: (newValue) => `${(newValue * 100).toLocaleString()} %`
  });
}
function renderEditProgress(params) {
  return (0, import_jsx_runtime121.jsx)(EditProgress, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditStatus.js
init_extends();
var React189 = __toESM(require_react());
var import_ReportProblem2 = __toESM(require_ReportProblem());
var import_Info3 = __toESM(require_Info());
var import_Autorenew2 = __toESM(require_Autorenew());
var import_Done2 = __toESM(require_Done());
var import_jsx_runtime122 = __toESM(require_jsx_runtime());
function EditStatus(props) {
  const {
    id,
    value,
    field
  } = props;
  const rootProps = useGridRootProps3();
  const apiRef2 = useGridApiContext2();
  const handleChange = async (event) => {
    const isValid = await apiRef2.current.setEditCellValue({
      id,
      field,
      value: event.target.value
    });
    if (isValid && rootProps.editMode === GridEditModes.Cell) {
      apiRef2.current.stopCellEditMode({
        id,
        field,
        cellToFocusAfter: "below"
      });
    }
  };
  const handleClose = (event, reason) => {
    if (reason === "backdropClick") {
      apiRef2.current.stopCellEditMode({
        id,
        field,
        ignoreModifications: true
      });
    }
  };
  return (0, import_jsx_runtime122.jsx)(Select_default, {
    value,
    onChange: handleChange,
    MenuProps: {
      onClose: handleClose
    },
    sx: {
      height: "100%",
      "& .MuiSelect-select": {
        display: "flex",
        alignItems: "center",
        pl: 1
      }
    },
    autoFocus: true,
    fullWidth: true,
    open: true,
    children: STATUS_OPTIONS.map((option) => {
      let IconComponent = null;
      if (option === "Rejected") {
        IconComponent = import_ReportProblem2.default;
      } else if (option === "Open") {
        IconComponent = import_Info3.default;
      } else if (option === "PartiallyFilled") {
        IconComponent = import_Autorenew2.default;
      } else if (option === "Filled") {
        IconComponent = import_Done2.default;
      }
      let label = option;
      if (option === "PartiallyFilled") {
        label = "Partially Filled";
      }
      return (0, import_jsx_runtime122.jsxs)(MenuItem_default, {
        value: option,
        children: [(0, import_jsx_runtime122.jsx)(ListItemIcon_default, {
          sx: {
            minWidth: 36
          },
          children: (0, import_jsx_runtime122.jsx)(IconComponent, {
            fontSize: "small"
          })
        }), (0, import_jsx_runtime122.jsx)(ListItemText_default, {
          primary: label,
          sx: {
            overflow: "hidden"
          }
        })]
      }, option);
    })
  });
}
function renderEditStatus(params) {
  return (0, import_jsx_runtime122.jsx)(EditStatus, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditIncoterm.js
init_extends();
var React190 = __toESM(require_react());
var import_jsx_runtime123 = __toESM(require_jsx_runtime());
function EditIncoterm(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext2();
  const handleChange = async (event) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: event.target.value
    }, event);
    apiRef2.current.stopCellEditMode({
      id,
      field
    });
  };
  const handleClose = (event, reason) => {
    if (reason === "backdropClick") {
      apiRef2.current.stopCellEditMode({
        id,
        field
      });
    }
  };
  return (0, import_jsx_runtime123.jsx)(Select_default, {
    value,
    onChange: handleChange,
    MenuProps: {
      onClose: handleClose
    },
    sx: {
      height: "100%",
      "& .MuiSelect-select": {
        display: "flex",
        alignItems: "center",
        pl: 1
      }
    },
    autoFocus: true,
    fullWidth: true,
    open: true,
    children: INCOTERM_OPTIONS.map((option) => {
      const tooltip = option.slice(option.indexOf("(") + 1, option.indexOf(")"));
      const code = option.slice(0, option.indexOf("(")).trim();
      return (0, import_jsx_runtime123.jsxs)(MenuItem_default, {
        value: option,
        children: [(0, import_jsx_runtime123.jsx)(ListItemIcon_default, {
          sx: {
            minWidth: 36
          },
          children: code
        }), (0, import_jsx_runtime123.jsx)(ListItemText_default, {
          primary: tooltip,
          sx: {
            overflow: "hidden"
          }
        })]
      }, option);
    })
  });
}
function renderEditIncoterm(params) {
  return (0, import_jsx_runtime123.jsx)(EditIncoterm, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditRating.js
init_extends();
var React191 = __toESM(require_react());
var import_jsx_runtime124 = __toESM(require_jsx_runtime());
function EditRating(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext2();
  const changedThroughKeyboard = React191.useRef(false);
  const handleChange = async (event) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: Number(event.target.value)
    }, event);
    if (!changedThroughKeyboard.current) {
      apiRef2.current.stopCellEditMode({
        id,
        field
      });
    }
    changedThroughKeyboard.current = false;
  };
  const handleRef = (element) => {
    if (element) {
      if (value !== 0) {
        element.querySelector(`input[value="${value}"]`).focus();
      } else {
        element.querySelector('input[value=""]').focus();
      }
    }
  };
  const handleKeyDown = (event) => {
    if (event.key.startsWith("Arrow")) {
      changedThroughKeyboard.current = true;
    } else {
      changedThroughKeyboard.current = false;
    }
  };
  return (0, import_jsx_runtime124.jsxs)(Box_default, {
    sx: {
      display: "flex",
      alignItems: "center",
      lineHeight: "24px",
      color: "text.secondary",
      mr: 1
    },
    children: [(0, import_jsx_runtime124.jsx)(Rating_default, {
      ref: handleRef,
      name: "rating",
      value: Number(value),
      precision: 1,
      onChange: handleChange,
      sx: {
        mr: 1
      },
      onKeyDown: handleKeyDown
    }), Number(value)]
  });
}
function renderEditRating(params) {
  return (0, import_jsx_runtime124.jsx)(EditRating, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditCountry.js
init_extends();
var React192 = __toESM(require_react());
var import_jsx_runtime125 = __toESM(require_jsx_runtime());
var StyledAutocomplete2 = styled_default(Autocomplete_default)(({
  theme
}) => ({
  height: "100%",
  [`& .${autocompleteClasses_default.inputRoot}`]: _extends({}, theme.typography.body2, {
    padding: "1px 0",
    height: "100%",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  })
}));
function EditCountry(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext2();
  const handleChange = React192.useCallback(async (event, newValue) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: newValue
    }, event);
    apiRef2.current.stopCellEditMode({
      id,
      field
    });
  }, [apiRef2, field, id]);
  return (0, import_jsx_runtime125.jsx)(StyledAutocomplete2, {
    value,
    onChange: handleChange,
    options: COUNTRY_ISO_OPTIONS,
    getOptionLabel: (option) => option.label,
    autoHighlight: true,
    fullWidth: true,
    open: true,
    disableClearable: true,
    renderOption: (optionProps, option) => (0, import_jsx_runtime125.jsxs)(Box_default, _extends({
      component: "li",
      sx: {
        "& > img": {
          mr: 1.5,
          flexShrink: 0
        }
      }
    }, optionProps, {
      children: [(0, import_jsx_runtime125.jsx)("img", {
        loading: "lazy",
        width: "20",
        src: `https://flagcdn.com/w20/${option.code.toLowerCase()}.png`,
        srcSet: `https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`,
        alt: ""
      }), option.label]
    })),
    renderInput: (params) => (0, import_jsx_runtime125.jsx)(InputBase_default, _extends({
      autoFocus: true,
      fullWidth: true,
      id: params.id,
      inputProps: _extends({}, params.inputProps, {
        autoComplete: "new-password"
        // disable autocomplete and autofill
      })
    }, params.InputProps))
  });
}
function renderEditCountry(params) {
  return (0, import_jsx_runtime125.jsx)(EditCountry, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/services/random-generator.js
var import_chance = __toESM(require_chance());
var chance2;
var chanceGuid;
if (typeof DISABLE_CHANCE_RANDOM !== "undefined" && DISABLE_CHANCE_RANDOM) {
  chance2 = new import_chance.Chance(() => 0.5);
  chanceGuid = new import_chance.Chance(42);
} else {
  chance2 = new import_chance.Chance();
  chanceGuid = chance2;
}
var uniquenessHandler = (generator) => (data, context) => {
  const rawValue = generator(data, context);
  if (!context.values) {
    return rawValue;
  }
  const valueCount = (context.values[rawValue] ?? 0) + 1;
  context.values[rawValue] = valueCount + 1;
  if (valueCount > 1) {
    return `${rawValue} ${valueCount}`;
  }
  return rawValue;
};
function dateFuture(years, refDate) {
  let date = /* @__PURE__ */ new Date();
  if (typeof refDate !== "undefined") {
    date = new Date(Date.parse(refDate));
  }
  const range2 = {
    min: 1e3,
    max: (years || 1) * 365 * 24 * 3600 * 1e3
  };
  const past = date.getTime() + chance2.integer(range2);
  date.setTime(past);
  return date;
}
function dateRecent(days, refDate) {
  let date = /* @__PURE__ */ new Date();
  if (typeof refDate !== "undefined") {
    date = new Date(Date.parse(refDate));
  }
  const range2 = {
    min: 1e3,
    max: (days || 1) * 24 * 3600 * 1e3
  };
  const past = date.getTime() - chance2.integer(range2);
  date.setTime(past);
  return date;
}
function datePast(years, refDate) {
  let date = /* @__PURE__ */ new Date();
  if (typeof refDate !== "undefined") {
    date = new Date(Date.parse(refDate));
  }
  const range2 = {
    min: 1e3,
    max: (years || 1) * 365 * 24 * 3600 * 1e3
  };
  const past = date.getTime() - chance2.integer(range2);
  date.setTime(past);
  return date;
}
var random = (min, max) => chance2.floating({
  min,
  max
});
var randomInt = (min, max) => chance2.integer({
  min,
  max
});
var randomPrice = (min = 0, max = 1e5) => Number(random(min, max).toFixed(2));
var randomRate = () => random(0, 1);
var randomDate = (start, end) => new Date(start.getTime() + chance2.floating({
  min: 0,
  max: 1
}) * (end.getTime() - start.getTime()));
var randomArrayItem = (arr) => arr[randomInt(0, arr.length - 1)];
var randomBoolean = () => randomArrayItem([true, false]);
var randomColor = () => randomArrayItem(COLORS);
var randomId = () => chanceGuid.guid();
var randomDesk = () => `D-${chance2.integer({
  min: 0,
  max: 1e4
})}`;
var randomCommodity = () => randomArrayItem(COMMODITY_OPTIONS);
var randomTraderName = () => chance2.name();
var randomUserName = () => chance2.twitter();
var randomEmail = () => chance2.email();
var randomUrl = () => chance2.url();
var randomPhoneNumber = () => chance2.phone();
var randomUnitPrice = () => randomPrice(1, 100);
var randomUnitPriceCurrency = () => randomArrayItem(CURRENCY_OPTIONS);
var randomQuantity = () => randomInt(1e3, 1e5);
var randomFeeRate = () => Number(random(0.1, 0.4).toFixed(3));
var randomIncoterm = () => randomArrayItem(INCOTERM_OPTIONS);
var randomStatusOptions = () => randomArrayItem(STATUS_OPTIONS);
var randomPnL = () => random(-1e8, 1e8);
var randomMaturityDate = () => dateFuture();
var randomTradeDate = () => dateRecent();
var randomBrokerId = () => chance2.guid();
var randomCompanyName = () => chance2.company();
var randomCountry = () => randomArrayItem(COUNTRY_ISO_OPTIONS);
var randomCurrency = () => randomArrayItem(CURRENCY_OPTIONS);
var randomAddress = () => chance2.address();
var randomCity = () => chance2.city();
var randomTaxCode = () => randomArrayItem(TAXCODE_OPTIONS);
var randomContractType = () => randomArrayItem(CONTRACT_TYPE_OPTIONS);
var randomRateType = () => randomArrayItem(RATE_TYPE_OPTIONS);
var randomCreatedDate = () => datePast();
var randomUpdatedDate = () => dateRecent();
var randomJobTitle = () => chance2.profession();
var randomRating = () => randomInt(1, 5);
var randomName = uniquenessHandler(() => chance2.name());
var generateFilledQuantity = (data) => Number((data.quantity * randomRate()).toFixed()) / data.quantity;
var generateIsFilled = (data) => data.quantity === data.filledQuantity;

// node_modules/@mui/x-data-grid-generator/services/asyncWorker.js
function asyncWorker({
  work,
  tasks,
  done
}) {
  const myNonEssentialWork = (deadline) => {
    while ((deadline.timeRemaining() > 0 || deadline.didTimeout) && tasks.current > 0) {
      work();
    }
    if (tasks.current > 0) {
      requestIdleCallback(myNonEssentialWork);
    } else {
      done();
    }
  };
  if (typeof requestIdleCallback === "function" && !requestIdleCallback.clock) {
    requestIdleCallback(myNonEssentialWork);
  } else {
    while (tasks.current > 0) {
      work();
    }
    done();
  }
}

// node_modules/@mui/x-data-grid-generator/services/real-data-service.js
function getRealGridData(rowLength, columns) {
  return new Promise((resolve) => {
    const tasks = {
      current: rowLength
    };
    const rows = [];
    const indexedValues = {};
    function work() {
      const row = {};
      for (let j = 0; j < columns.length; j += 1) {
        const column = columns[j];
        if (column.generateData) {
          const context = {};
          if (column.dataGeneratorUniquenessEnabled) {
            let fieldValues = indexedValues[column.field];
            if (!fieldValues) {
              fieldValues = {};
              indexedValues[column.field] = fieldValues;
            }
            context.values = fieldValues;
          }
          row[column.field] = column.generateData(row, context);
        }
      }
      rows.push(row);
      tasks.current -= 1;
    }
    const columnVisibilityModel = {};
    columns.forEach((col) => {
      if (col.hide) {
        columnVisibilityModel[col.field] = false;
      }
    });
    asyncWorker({
      work,
      done: () => resolve({
        columns,
        rows,
        initialState: {
          columns: {
            columnVisibilityModel
          }
        }
      }),
      tasks
    });
  });
}

// node_modules/@mui/x-data-grid-generator/services/basic-data-service.js
var currencyPairs = ["USDGBP", "USDEUR", "GBPEUR", "JPYUSD", "MXNUSD", "BTCUSD", "USDCAD", "EURJPY", "EURUSD", "EURCHF", "USDCHF", "EURGBP", "GBPUSD", "AUDCAD", "NZDUSD", "GBPCHF", "AUDUSD", "GBPJPY", "USDJPY", "CHFJPY", "EURCAD", "AUDJPY", "EURAUD", "AUDNZD", "CADEUR", "CHFMXN", "ETHUSD", "BCHUSD", "ETHBTC", "XRPUSD", "XRPBTC", "USDLTC", "USDXRP", "USDDSH", "USDBCH", "JPYEUR", "JPYUSD", "JPYGBP", "JPYCAD", "JPYCHF", "JPYAUD", "JPYNZD", "JPYSGD", "JPYNOK", "JPYRUB", "JPYSEK", "JPYTRY", "JPYZAR", "JPYHKD", "JPYCNH", "JPYDKK", "JPYMXN", "JPYPLN", "JPYXAG", "JPYXAU", "JPYBTC", "JPYETH", "JPYLTC", "JPYXRP", "JPYDSH", "JPYBCH", "GBPEUR", "GBPRUB", "GBPTRY"];
var getBasicGridData = (rowLength, colLength) => {
  const data = [];
  const pricesColLength = colLength - 2;
  for (let i2 = 0; i2 < rowLength; i2 += 1) {
    const idx = i2 >= currencyPairs.length ? i2 % currencyPairs.length : i2;
    const model = {
      id: i2,
      currencyPair: currencyPairs[idx]
    };
    for (let j = 1; j <= pricesColLength; j += 1) {
      model[`price${j}M`] = Number(`${i2.toString()}${j}`);
    }
    data.push(model);
  }
  const columns = [{
    field: "id",
    headerName: "id",
    type: "number"
  }, {
    field: "currencyPair",
    headerName: "Currency Pair"
  }];
  for (let j = 1; j <= pricesColLength; j += 1) {
    columns.push({
      field: `price${j}M`,
      headerName: `${j}M`,
      type: "number"
    });
  }
  columns.length = colLength;
  return {
    columns,
    rows: data
  };
};

// node_modules/@mui/x-data-grid-generator/columns/commodities.columns.js
var getCommodityColumns = (editable = false) => [{
  field: "id",
  generateData: randomId,
  hide: true
}, {
  field: "desk",
  headerName: "Desk",
  generateData: randomDesk,
  width: 110
}, {
  field: "commodity",
  headerName: "Commodity",
  generateData: randomCommodity,
  width: 180,
  editable
}, {
  field: "traderName",
  headerName: "Trader Name",
  generateData: randomTraderName,
  width: 120,
  editable
}, {
  field: "traderEmail",
  headerName: "Trader Email",
  generateData: randomEmail,
  renderCell: renderEmail,
  width: 150,
  editable
}, {
  field: "quantity",
  headerName: "Quantity",
  type: "number",
  width: 140,
  generateData: randomQuantity,
  editable,
  valueParser: (value) => Number(value)
}, {
  field: "filledQuantity",
  headerName: "Filled Quantity",
  generateData: generateFilledQuantity,
  renderCell: renderProgress,
  renderEditCell: renderEditProgress,
  availableAggregationFunctions: ["min", "max", "avg", "size"],
  type: "number",
  width: 120,
  editable
}, {
  field: "isFilled",
  headerName: "Is Filled",
  align: "center",
  generateData: generateIsFilled,
  type: "boolean",
  width: 80,
  editable
}, {
  field: "status",
  headerName: "Status",
  generateData: randomStatusOptions,
  renderCell: renderStatus,
  renderEditCell: renderEditStatus,
  type: "singleSelect",
  valueOptions: STATUS_OPTIONS,
  width: 150,
  editable
}, {
  field: "unitPrice",
  headerName: "Unit Price",
  generateData: randomUnitPrice,
  type: "number",
  editable,
  valueParser: (value) => Number(value)
}, {
  field: "unitPriceCurrency",
  headerName: "Unit Price Currency",
  generateData: randomUnitPriceCurrency,
  renderEditCell: renderEditCurrency,
  type: "singleSelect",
  valueOptions: CURRENCY_OPTIONS,
  width: 120,
  editable
}, {
  field: "subTotal",
  headerName: "Sub Total",
  valueGetter: (value, row) => row.quantity == null || row.unitPrice == null ? null : row.quantity * row.unitPrice,
  type: "number",
  width: 120
}, {
  field: "feeRate",
  headerName: "Fee Rate",
  generateData: randomFeeRate,
  type: "number",
  width: 80,
  editable,
  valueParser: (value) => Number(value)
}, {
  field: "feeAmount",
  headerName: "Fee Amount",
  valueGetter: (value, row) => row.feeRate == null || row.quantity == null || row.unitPrice == null ? null : row.feeRate * row.quantity * row.unitPrice,
  type: "number",
  width: 120
}, {
  field: "incoTerm",
  generateData: randomIncoterm,
  renderCell: renderIncoterm,
  renderEditCell: renderEditIncoterm,
  type: "singleSelect",
  valueOptions: INCOTERM_OPTIONS,
  editable
}, {
  field: "totalPrice",
  headerName: "Total in USD",
  valueGetter: (value, row) => row.feeRate == null || row.quantity == null || row.unitPrice == null ? null : row.feeRate + row.quantity * row.unitPrice,
  renderCell: renderTotalPrice,
  type: "number",
  width: 160
}, {
  field: "pnl",
  headerName: "PnL",
  generateData: randomPnL,
  renderCell: renderPnl,
  type: "number",
  width: 140
}, {
  field: "maturityDate",
  headerName: "Maturity Date",
  generateData: randomMaturityDate,
  type: "date",
  editable
}, {
  field: "tradeDate",
  headerName: "Trade Date",
  generateData: randomTradeDate,
  type: "date",
  editable
}, {
  field: "brokerId",
  headerName: "Broker Id",
  generateData: randomBrokerId,
  hide: true,
  editable
}, {
  field: "brokerName",
  headerName: "Broker Name",
  generateData: randomCompanyName,
  width: 140,
  editable
}, {
  field: "counterPartyName",
  headerName: "Counterparty",
  generateData: randomCompanyName,
  width: 180,
  editable
}, {
  field: "counterPartyCountry",
  headerName: "Counterparty Country",
  type: "singleSelect",
  generateData: randomCountry,
  renderCell: renderCountry,
  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,
  valueParser: (value) => {
    if (typeof value === "string") {
      return COUNTRY_ISO_OPTIONS_SORTED.find((country) => country.value === value);
    }
    return value;
  },
  valueFormatter: (value) => value == null ? void 0 : value.label,
  groupingValueGetter: (value) => value.code,
  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),
  editable,
  width: 120
}, {
  field: "counterPartyCurrency",
  headerName: "Counterparty Currency",
  generateData: randomCurrency,
  renderEditCell: renderEditCurrency,
  type: "singleSelect",
  valueOptions: CURRENCY_OPTIONS,
  editable
}, {
  field: "counterPartyAddress",
  headerName: "Counterparty Address",
  generateData: randomAddress,
  width: 200,
  editable
}, {
  field: "counterPartyCity",
  headerName: "Counterparty City",
  generateData: randomCity,
  width: 120,
  editable
}, {
  field: "taxCode",
  headerName: "Tax Code",
  generateData: randomTaxCode,
  type: "singleSelect",
  valueOptions: TAXCODE_OPTIONS,
  editable
}, {
  field: "contractType",
  headerName: "Contract Type",
  generateData: randomContractType,
  type: "singleSelect",
  valueOptions: CONTRACT_TYPE_OPTIONS,
  editable
}, {
  field: "rateType",
  headerName: "Rate Type",
  generateData: randomRateType,
  type: "singleSelect",
  valueOptions: RATE_TYPE_OPTIONS,
  editable
}, {
  field: "lastUpdated",
  headerName: "Updated on",
  generateData: randomUpdatedDate,
  type: "dateTime",
  width: 180,
  editable
}, {
  field: "dateCreated",
  headerName: "Created on",
  generateData: randomCreatedDate,
  type: "date",
  width: 150,
  editable
}];

// node_modules/@mui/x-data-grid-generator/columns/employees.columns.js
var getEmployeeColumns = () => [{
  field: "id",
  generateData: randomId,
  hide: true
}, {
  field: "avatar",
  headerName: "Avatar",
  generateData: randomColor,
  display: "flex",
  renderCell: renderAvatar,
  valueGetter: (value, row) => row.name == null || row.avatar == null ? null : {
    name: row.name,
    color: row.avatar
  },
  sortable: false,
  filterable: false,
  groupable: false,
  aggregable: false,
  disableExport: true
}, {
  field: "name",
  headerName: "Name",
  generateData: randomName,
  dataGeneratorUniquenessEnabled: true,
  width: 120,
  editable: true,
  groupable: false,
  aggregable: false
}, {
  field: "website",
  headerName: "Website",
  generateData: randomUrl,
  renderCell: renderLink,
  width: 160,
  editable: true,
  groupable: false,
  aggregable: false
}, {
  field: "rating",
  headerName: "Rating",
  generateData: randomRating,
  display: "flex",
  renderCell: renderRating,
  renderEditCell: renderEditRating,
  width: 180,
  type: "number",
  editable: true,
  availableAggregationFunctions: ["avg", "min", "max", "size"]
}, {
  field: "email",
  headerName: "Email",
  generateData: randomEmail,
  renderCell: renderEmail,
  width: 150,
  editable: true
}, {
  field: "phone",
  headerName: "Phone",
  generateData: randomPhoneNumber,
  width: 150,
  editable: true
}, {
  field: "username",
  headerName: "Username",
  generateData: randomUserName,
  width: 150,
  editable: true
}, {
  field: "city",
  headerName: "City",
  generateData: randomCity,
  editable: true
}, {
  field: "country",
  headerName: "Country",
  type: "singleSelect",
  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,
  valueFormatter: (value) => value == null ? void 0 : value.label,
  generateData: randomCountry,
  renderCell: renderCountry,
  renderEditCell: renderEditCountry,
  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),
  width: 150,
  editable: true
}, {
  field: "company",
  headerName: "Company",
  generateData: randomCompanyName,
  width: 180,
  editable: true
}, {
  field: "position",
  headerName: "Position",
  generateData: randomJobTitle,
  width: 180,
  editable: true
}, {
  field: "lastUpdated",
  headerName: "Updated on",
  generateData: randomUpdatedDate,
  type: "dateTime",
  width: 180,
  editable: true
}, {
  field: "dateCreated",
  headerName: "Created on",
  generateData: randomCreatedDate,
  type: "date",
  width: 120,
  editable: true
}, {
  field: "isAdmin",
  headerName: "Is admin?",
  generateData: randomBoolean,
  type: "boolean",
  width: 150,
  editable: true
}, {
  field: "salary",
  headerName: "Salary",
  generateData: () => randomInt(3e4, 8e4),
  type: "number",
  valueFormatter: (value) => {
    if (!value || typeof value !== "number") {
      return value;
    }
    return `${value.toLocaleString()}$`;
  }
}];

// node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js
init_extends();
var React193 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/node_modules/lru-cache/index.mjs
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var hasAbortController = typeof AbortController === "function";
var AC = hasAbortController ? AbortController : class AbortController2 {
  constructor() {
    this.signal = new AS();
  }
  abort(reason = new Error("This operation was aborted")) {
    this.signal.reason = this.signal.reason || reason;
    this.signal.aborted = true;
    this.signal.dispatchEvent({
      type: "abort",
      target: this.signal
    });
  }
};
var hasAbortSignal = typeof AbortSignal === "function";
var hasACAbortSignal = typeof AC.AbortSignal === "function";
var AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal2 {
  constructor() {
    this.reason = void 0;
    this.aborted = false;
    this._listeners = [];
  }
  dispatchEvent(e) {
    if (e.type === "abort") {
      this.aborted = true;
      this.onabort(e);
      this._listeners.forEach((f) => f(e), this);
    }
  }
  onabort() {
  }
  addEventListener(ev, fn) {
    if (ev === "abort") {
      this._listeners.push(fn);
    }
  }
  removeEventListener(ev, fn) {
    if (ev === "abort") {
      this._listeners = this._listeners.filter((f) => f !== fn);
    }
  }
};
var warned = /* @__PURE__ */ new Set();
var deprecatedOption = (opt, instead) => {
  const code = `LRU_CACHE_OPTION_${opt}`;
  if (shouldWarn(code)) {
    warn(code, `${opt} option`, `options.${instead}`, LRUCache);
  }
};
var deprecatedMethod = (method, instead) => {
  const code = `LRU_CACHE_METHOD_${method}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get } = Object.getOwnPropertyDescriptor(prototype, method);
    warn(code, `${method} method`, `cache.${instead}()`, get);
  }
};
var deprecatedProperty = (field, instead) => {
  const code = `LRU_CACHE_PROPERTY_${field}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get } = Object.getOwnPropertyDescriptor(prototype, field);
    warn(code, `${field} property`, `cache.${instead}`, get);
  }
};
var emitWarning = (...a) => {
  typeof process === "object" && process && typeof process.emitWarning === "function" ? process.emitWarning(...a) : console.error(...a);
};
var shouldWarn = (code) => !warned.has(code);
var warn = (code, what, instead, fn) => {
  warned.add(code);
  const msg = `The ${what} is deprecated. Please use ${instead} instead.`;
  emitWarning(msg, "DeprecationWarning", code, fn);
};
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class {
  constructor(max) {
    if (max === 0) {
      return [];
    }
    const UintArray = getUintArray(max);
    this.heap = new UintArray(max);
    this.length = 0;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var LRUCache = class _LRUCache {
  constructor(options = {}) {
    const {
      max = 0,
      ttl,
      ttlResolution = 1,
      ttlAutopurge,
      updateAgeOnGet,
      updateAgeOnHas,
      allowStale,
      dispose,
      disposeAfter,
      noDisposeOnSet,
      noUpdateTTL,
      maxSize = 0,
      maxEntrySize = 0,
      sizeCalculation,
      fetchMethod,
      fetchContext,
      noDeleteOnFetchRejection,
      noDeleteOnStaleGet,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort
    } = options;
    const { length, maxAge, stale } = options instanceof _LRUCache ? {} : options;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    this.max = max;
    this.maxSize = maxSize;
    this.maxEntrySize = maxEntrySize || this.maxSize;
    this.sizeCalculation = sizeCalculation || length;
    if (this.sizeCalculation) {
      if (!this.maxSize && !this.maxEntrySize) {
        throw new TypeError(
          "cannot set sizeCalculation without setting maxSize or maxEntrySize"
        );
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    this.fetchMethod = fetchMethod || null;
    if (this.fetchMethod && typeof this.fetchMethod !== "function") {
      throw new TypeError(
        "fetchMethod must be a function if specified"
      );
    }
    this.fetchContext = fetchContext;
    if (!this.fetchMethod && fetchContext !== void 0) {
      throw new TypeError(
        "cannot set fetchContext without fetchMethod"
      );
    }
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyList = new Array(max).fill(null);
    this.valList = new Array(max).fill(null);
    this.next = new UintArray(max);
    this.prev = new UintArray(max);
    this.head = 0;
    this.tail = 0;
    this.free = new Stack(max);
    this.initialFill = 1;
    this.size = 0;
    if (typeof dispose === "function") {
      this.dispose = dispose;
    }
    if (typeof disposeAfter === "function") {
      this.disposeAfter = disposeAfter;
      this.disposed = [];
    } else {
      this.disposeAfter = null;
      this.disposed = null;
    }
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (this.maxSize !== 0) {
        if (!isPosInt(this.maxSize)) {
          throw new TypeError(
            "maxSize must be a positive integer if specified"
          );
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError(
          "maxEntrySize must be a positive integer if specified"
        );
      }
      this.initializeSizeTracking();
    }
    this.allowStale = !!allowStale || !!stale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || maxAge || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError(
          "ttl must be a positive integer if specified"
        );
      }
      this.initializeTTLTracking();
    }
    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
      throw new TypeError(
        "At least one of max, maxSize, or ttl is required"
      );
    }
    if (!this.ttlAutopurge && !this.max && !this.maxSize) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
      }
    }
    if (stale) {
      deprecatedOption("stale", "allowStale");
    }
    if (maxAge) {
      deprecatedOption("maxAge", "ttl");
    }
    if (length) {
      deprecatedOption("length", "sizeCalculation");
    }
  }
  getRemainingTTL(key) {
    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0;
  }
  initializeTTLTracking() {
    this.ttls = new ZeroArray(this.max);
    this.starts = new ZeroArray(this.max);
    this.setItemTTL = (index, ttl, start = perf.now()) => {
      this.starts[index] = ttl !== 0 ? start : 0;
      this.ttls[index] = ttl;
      if (ttl !== 0 && this.ttlAutopurge) {
        const t = setTimeout(() => {
          if (this.isStale(index)) {
            this.delete(this.keyList[index]);
          }
        }, ttl + 1);
        if (t.unref) {
          t.unref();
        }
      }
    };
    this.updateItemAge = (index) => {
      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;
    };
    this.statusTTL = (status, index) => {
      if (status) {
        status.ttl = this.ttls[index];
        status.start = this.starts[index];
        status.now = cachedNow || getNow();
        status.remainingTTL = status.now + status.ttl - status.start;
      }
    };
    let cachedNow = 0;
    const getNow = () => {
      const n = perf.now();
      if (this.ttlResolution > 0) {
        cachedNow = n;
        const t = setTimeout(
          () => cachedNow = 0,
          this.ttlResolution
        );
        if (t.unref) {
          t.unref();
        }
      }
      return n;
    };
    this.getRemainingTTL = (key) => {
      const index = this.keyMap.get(key);
      if (index === void 0) {
        return 0;
      }
      return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());
    };
    this.isStale = (index) => {
      return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];
    };
  }
  updateItemAge(_index) {
  }
  statusTTL(_status, _index) {
  }
  setItemTTL(_index, _ttl, _start) {
  }
  isStale(_index) {
    return false;
  }
  initializeSizeTracking() {
    this.calculatedSize = 0;
    this.sizes = new ZeroArray(this.max);
    this.removeItemSize = (index) => {
      this.calculatedSize -= this.sizes[index];
      this.sizes[index] = 0;
    };
    this.requireSize = (k2, v, size, sizeCalculation) => {
      if (this.isBackgroundFetch(v)) {
        return 0;
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation must be a function");
          }
          size = sizeCalculation(v, k2);
          if (!isPosInt(size)) {
            throw new TypeError(
              "sizeCalculation return invalid (expect positive integer)"
            );
          }
        } else {
          throw new TypeError(
            "invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set."
          );
        }
      }
      return size;
    };
    this.addItemSize = (index, size, status) => {
      this.sizes[index] = size;
      if (this.maxSize) {
        const maxSize = this.maxSize - this.sizes[index];
        while (this.calculatedSize > maxSize) {
          this.evict(true);
        }
      }
      this.calculatedSize += this.sizes[index];
      if (status) {
        status.entrySize = size;
        status.totalCalculatedSize = this.calculatedSize;
      }
    };
  }
  removeItemSize(_index) {
  }
  addItemSize(_index, _size) {
  }
  requireSize(_k, _v, size, sizeCalculation) {
    if (size || sizeCalculation) {
      throw new TypeError(
        "cannot set size without setting maxSize or maxEntrySize on cache"
      );
    }
  }
  *indexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i2 = this.tail; true; ) {
        if (!this.isValidIndex(i2)) {
          break;
        }
        if (allowStale || !this.isStale(i2)) {
          yield i2;
        }
        if (i2 === this.head) {
          break;
        } else {
          i2 = this.prev[i2];
        }
      }
    }
  }
  *rindexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i2 = this.head; true; ) {
        if (!this.isValidIndex(i2)) {
          break;
        }
        if (allowStale || !this.isStale(i2)) {
          yield i2;
        }
        if (i2 === this.tail) {
          break;
        } else {
          i2 = this.next[i2];
        }
      }
    }
  }
  isValidIndex(index) {
    return index !== void 0 && this.keyMap.get(this.keyList[index]) === index;
  }
  *entries() {
    for (const i2 of this.indexes()) {
      if (this.valList[i2] !== void 0 && this.keyList[i2] !== void 0 && !this.isBackgroundFetch(this.valList[i2])) {
        yield [this.keyList[i2], this.valList[i2]];
      }
    }
  }
  *rentries() {
    for (const i2 of this.rindexes()) {
      if (this.valList[i2] !== void 0 && this.keyList[i2] !== void 0 && !this.isBackgroundFetch(this.valList[i2])) {
        yield [this.keyList[i2], this.valList[i2]];
      }
    }
  }
  *keys() {
    for (const i2 of this.indexes()) {
      if (this.keyList[i2] !== void 0 && !this.isBackgroundFetch(this.valList[i2])) {
        yield this.keyList[i2];
      }
    }
  }
  *rkeys() {
    for (const i2 of this.rindexes()) {
      if (this.keyList[i2] !== void 0 && !this.isBackgroundFetch(this.valList[i2])) {
        yield this.keyList[i2];
      }
    }
  }
  *values() {
    for (const i2 of this.indexes()) {
      if (this.valList[i2] !== void 0 && !this.isBackgroundFetch(this.valList[i2])) {
        yield this.valList[i2];
      }
    }
  }
  *rvalues() {
    for (const i2 of this.rindexes()) {
      if (this.valList[i2] !== void 0 && !this.isBackgroundFetch(this.valList[i2])) {
        yield this.valList[i2];
      }
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  find(fn, getOptions) {
    for (const i2 of this.indexes()) {
      const v = this.valList[i2];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      if (fn(value, this.keyList[i2], this)) {
        return this.get(this.keyList[i2], getOptions);
      }
    }
  }
  forEach(fn, thisp = this) {
    for (const i2 of this.indexes()) {
      const v = this.valList[i2];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, this.keyList[i2], this);
    }
  }
  rforEach(fn, thisp = this) {
    for (const i2 of this.rindexes()) {
      const v = this.valList[i2];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, this.keyList[i2], this);
    }
  }
  get prune() {
    deprecatedMethod("prune", "purgeStale");
    return this.purgeStale;
  }
  purgeStale() {
    let deleted = false;
    for (const i2 of this.rindexes({ allowStale: true })) {
      if (this.isStale(i2)) {
        this.delete(this.keyList[i2]);
        deleted = true;
      }
    }
    return deleted;
  }
  dump() {
    const arr = [];
    for (const i2 of this.indexes({ allowStale: true })) {
      const key = this.keyList[i2];
      const v = this.valList[i2];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      const entry = { value };
      if (this.ttls) {
        entry.ttl = this.ttls[i2];
        const age = perf.now() - this.starts[i2];
        entry.start = Math.floor(Date.now() - age);
      }
      if (this.sizes) {
        entry.size = this.sizes[i2];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  dispose(_v, _k, _reason) {
  }
  set(k2, v, {
    ttl = this.ttl,
    start,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    status
  } = {}) {
    size = this.requireSize(k2, v, size, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.delete(k2);
      return this;
    }
    let index = this.size === 0 ? void 0 : this.keyMap.get(k2);
    if (index === void 0) {
      index = this.newIndex();
      this.keyList[index] = k2;
      this.valList[index] = v;
      this.keyMap.set(k2, index);
      this.next[this.tail] = index;
      this.prev[index] = this.tail;
      this.tail = index;
      this.size++;
      this.addItemSize(index, size, status);
      if (status) {
        status.set = "add";
      }
      noUpdateTTL = false;
    } else {
      this.moveToTail(index);
      const oldVal = this.valList[index];
      if (v !== oldVal) {
        if (this.isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
        } else {
          if (!noDisposeOnSet) {
            this.dispose(oldVal, k2, "set");
            if (this.disposeAfter) {
              this.disposed.push([oldVal, k2, "set"]);
            }
          }
        }
        this.removeItemSize(index);
        this.valList[index] = v;
        this.addItemSize(index, size, status);
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
      this.initializeTTLTracking();
    }
    if (!noUpdateTTL) {
      this.setItemTTL(index, ttl, start);
    }
    this.statusTTL(status, index);
    if (this.disposeAfter) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return this;
  }
  newIndex() {
    if (this.size === 0) {
      return this.tail;
    }
    if (this.size === this.max && this.max !== 0) {
      return this.evict(false);
    }
    if (this.free.length !== 0) {
      return this.free.pop();
    }
    return this.initialFill++;
  }
  pop() {
    if (this.size) {
      const val = this.valList[this.head];
      this.evict(true);
      return val;
    }
  }
  evict(free) {
    const head = this.head;
    const k2 = this.keyList[head];
    const v = this.valList[head];
    if (this.isBackgroundFetch(v)) {
      v.__abortController.abort(new Error("evicted"));
    } else {
      this.dispose(v, k2, "evict");
      if (this.disposeAfter) {
        this.disposed.push([v, k2, "evict"]);
      }
    }
    this.removeItemSize(head);
    if (free) {
      this.keyList[head] = null;
      this.valList[head] = null;
      this.free.push(head);
    }
    this.head = this.next[head];
    this.keyMap.delete(k2);
    this.size--;
    return head;
  }
  has(k2, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {
    const index = this.keyMap.get(k2);
    if (index !== void 0) {
      if (!this.isStale(index)) {
        if (updateAgeOnHas) {
          this.updateItemAge(index);
        }
        if (status)
          status.has = "hit";
        this.statusTTL(status, index);
        return true;
      } else if (status) {
        status.has = "stale";
        this.statusTTL(status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  // like get(), but without any LRU updating or TTL expiration
  peek(k2, { allowStale = this.allowStale } = {}) {
    const index = this.keyMap.get(k2);
    if (index !== void 0 && (allowStale || !this.isStale(index))) {
      const v = this.valList[index];
      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
  }
  backgroundFetch(k2, index, options, context) {
    const v = index === void 0 ? void 0 : this.valList[index];
    if (this.isBackgroundFetch(v)) {
      return v;
    }
    const ac = new AC();
    if (options.signal) {
      options.signal.addEventListener(
        "abort",
        () => ac.abort(options.signal.reason)
      );
    }
    const fetchOpts = {
      signal: ac.signal,
      options,
      context
    };
    const cb = (v2, updateCache = false) => {
      const { aborted } = ac.signal;
      const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
      if (options.status) {
        if (aborted && !updateCache) {
          options.status.fetchAborted = true;
          options.status.fetchError = ac.signal.reason;
          if (ignoreAbort)
            options.status.fetchAbortIgnored = true;
        } else {
          options.status.fetchResolved = true;
        }
      }
      if (aborted && !ignoreAbort && !updateCache) {
        return fetchFail(ac.signal.reason);
      }
      if (this.valList[index] === p) {
        if (v2 === void 0) {
          if (p.__staleWhileFetching) {
            this.valList[index] = p.__staleWhileFetching;
          } else {
            this.delete(k2);
          }
        } else {
          if (options.status)
            options.status.fetchUpdated = true;
          this.set(k2, v2, fetchOpts.options);
        }
      }
      return v2;
    };
    const eb = (er) => {
      if (options.status) {
        options.status.fetchRejected = true;
        options.status.fetchError = er;
      }
      return fetchFail(er);
    };
    const fetchFail = (er) => {
      const { aborted } = ac.signal;
      const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
      const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
      const noDelete = allowStale || options.noDeleteOnFetchRejection;
      if (this.valList[index] === p) {
        const del = !noDelete || p.__staleWhileFetching === void 0;
        if (del) {
          this.delete(k2);
        } else if (!allowStaleAborted) {
          this.valList[index] = p.__staleWhileFetching;
        }
      }
      if (allowStale) {
        if (options.status && p.__staleWhileFetching !== void 0) {
          options.status.returnedStale = true;
        }
        return p.__staleWhileFetching;
      } else if (p.__returned === p) {
        throw er;
      }
    };
    const pcall = (res, rej) => {
      this.fetchMethod(k2, v, fetchOpts).then((v2) => res(v2), rej);
      ac.signal.addEventListener("abort", () => {
        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
          res();
          if (options.allowStaleOnFetchAbort) {
            res = (v2) => cb(v2, true);
          }
        }
      });
    };
    if (options.status)
      options.status.fetchDispatched = true;
    const p = new Promise(pcall).then(cb, eb);
    p.__abortController = ac;
    p.__staleWhileFetching = v;
    p.__returned = null;
    if (index === void 0) {
      this.set(k2, p, { ...fetchOpts.options, status: void 0 });
      index = this.keyMap.get(k2);
    } else {
      this.valList[index] = p;
    }
    return p;
  }
  isBackgroundFetch(p) {
    return p && typeof p === "object" && typeof p.then === "function" && Object.prototype.hasOwnProperty.call(
      p,
      "__staleWhileFetching"
    ) && Object.prototype.hasOwnProperty.call(p, "__returned") && (p.__returned === p || p.__returned === null);
  }
  // this takes the union of get() and set() opts, because it does both
  async fetch(k2, {
    // get options
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    // set options
    ttl = this.ttl,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    // fetch exclusive options
    noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
    allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
    ignoreFetchAbort = this.ignoreFetchAbort,
    allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
    fetchContext = this.fetchContext,
    forceRefresh = false,
    status,
    signal
  } = {}) {
    if (!this.fetchMethod) {
      if (status)
        status.fetch = "get";
      return this.get(k2, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = this.keyMap.get(k2);
    if (index === void 0) {
      if (status)
        status.fetch = "miss";
      const p = this.backgroundFetch(k2, index, options, fetchContext);
      return p.__returned = p;
    } else {
      const v = this.valList[index];
      if (this.isBackgroundFetch(v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = this.isStale(index);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        this.moveToTail(index);
        if (updateAgeOnGet) {
          this.updateItemAge(index);
        }
        this.statusTTL(status, index);
        return v;
      }
      const p = this.backgroundFetch(k2, index, options, fetchContext);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = hasStale && isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  get(k2, {
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    status
  } = {}) {
    const index = this.keyMap.get(k2);
    if (index !== void 0) {
      const value = this.valList[index];
      const fetching = this.isBackgroundFetch(value);
      this.statusTTL(status, index);
      if (this.isStale(index)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k2);
          }
          if (status)
            status.returnedStale = allowStale;
          return allowStale ? value : void 0;
        } else {
          if (status) {
            status.returnedStale = allowStale && value.__staleWhileFetching !== void 0;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        this.moveToTail(index);
        if (updateAgeOnGet) {
          this.updateItemAge(index);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  connect(p, n) {
    this.prev[n] = p;
    this.next[p] = n;
  }
  moveToTail(index) {
    if (index !== this.tail) {
      if (index === this.head) {
        this.head = this.next[index];
      } else {
        this.connect(this.prev[index], this.next[index]);
      }
      this.connect(this.tail, index);
      this.tail = index;
    }
  }
  get del() {
    deprecatedMethod("del", "delete");
    return this.delete;
  }
  delete(k2) {
    let deleted = false;
    if (this.size !== 0) {
      const index = this.keyMap.get(k2);
      if (index !== void 0) {
        deleted = true;
        if (this.size === 1) {
          this.clear();
        } else {
          this.removeItemSize(index);
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            this.dispose(v, k2, "delete");
            if (this.disposeAfter) {
              this.disposed.push([v, k2, "delete"]);
            }
          }
          this.keyMap.delete(k2);
          this.keyList[index] = null;
          this.valList[index] = null;
          if (index === this.tail) {
            this.tail = this.prev[index];
          } else if (index === this.head) {
            this.head = this.next[index];
          } else {
            this.next[this.prev[index]] = this.next[index];
            this.prev[this.next[index]] = this.prev[index];
          }
          this.size--;
          this.free.push(index);
        }
      }
    }
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return deleted;
  }
  clear() {
    for (const index of this.rindexes({ allowStale: true })) {
      const v = this.valList[index];
      if (this.isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k2 = this.keyList[index];
        this.dispose(v, k2, "delete");
        if (this.disposeAfter) {
          this.disposed.push([v, k2, "delete"]);
        }
      }
    }
    this.keyMap.clear();
    this.valList.fill(null);
    this.keyList.fill(null);
    if (this.ttls) {
      this.ttls.fill(0);
      this.starts.fill(0);
    }
    if (this.sizes) {
      this.sizes.fill(0);
    }
    this.head = 0;
    this.tail = 0;
    this.initialFill = 1;
    this.free.length = 0;
    this.calculatedSize = 0;
    this.size = 0;
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
  }
  get reset() {
    deprecatedMethod("reset", "clear");
    return this.clear;
  }
  get length() {
    deprecatedProperty("length", "size");
    return this.size;
  }
  static get AbortController() {
    return AC;
  }
  static get AbortSignal() {
    return AS;
  }
};
var lru_cache_default = LRUCache;

// node_modules/@mui/x-data-grid-generator/services/tree-data-generator.js
init_extends();
var addTreeDataOptionsToDemoData = (data, options = {}) => {
  const {
    averageChildren = 2,
    maxDepth = 1,
    groupingField
  } = options;
  const hasTreeData = maxDepth > 1 && groupingField != null;
  if (!hasTreeData) {
    return data;
  }
  if (data.rows.length > 1e3) {
    throw new Error("MUI X: useDemoData tree data mode only works up to 1000 rows.");
  }
  const rowsByTreeDepth = {};
  const rowsCount = data.rows.length;
  const groupingCol = data.columns.find((col) => col.field === options.groupingField);
  if (!groupingCol) {
    throw new Error("MUI X: The tree data grouping field does not exist.");
  }
  data.initialState.columns.columnVisibilityModel[groupingField] = false;
  for (let i2 = 0; i2 < rowsCount; i2 += 1) {
    const row = data.rows[i2];
    const currentChunk = Math.floor(i2 * (averageChildren ** maxDepth - 1) / rowsCount) + 1;
    const currentDepth = Math.floor(Math.log(currentChunk) / Math.log(averageChildren));
    if (!rowsByTreeDepth[currentDepth]) {
      rowsByTreeDepth[currentDepth] = {
        rows: {},
        rowIndexes: []
      };
    }
    rowsByTreeDepth[currentDepth].rows[i2] = {
      value: row,
      parentIndex: null
    };
    rowsByTreeDepth[currentDepth].rowIndexes.push(i2);
  }
  Object.entries(rowsByTreeDepth).forEach(([depthStr, {
    rows
  }]) => {
    const depth = Number(depthStr);
    Object.values(rows).forEach((row) => {
      const path = [];
      let previousRow = null;
      for (let k2 = depth; k2 >= 0; k2 -= 1) {
        let rowTemp;
        if (k2 === depth) {
          if (depth > 0) {
            row.parentIndex = Number(randomArrayItem(rowsByTreeDepth[depth - 1].rowIndexes));
          }
          rowTemp = row;
        } else {
          rowTemp = rowsByTreeDepth[k2].rows[previousRow.parentIndex];
        }
        path.unshift(rowTemp.value[groupingField]);
        previousRow = rowTemp;
      }
      row.value.path = path;
    });
  });
  return _extends({}, data, {
    groupingColDef: {
      headerName: groupingCol.headerName ?? groupingCol.field,
      width: 250
    },
    getTreeDataPath: (row) => row.path,
    treeData: true
  });
};

// node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js
var dataCache = new lru_cache_default({
  max: 10,
  ttl: 60 * 5 * 1e3
  // 5 minutes
});
async function extrapolateSeed(rowLength, data) {
  return new Promise((resolve) => {
    const seed = data.rows;
    const rows = data.rows.slice();
    const tasks = {
      current: rowLength - seed.length
    };
    function work() {
      const row = {};
      for (let j = 0; j < data.columns.length; j += 1) {
        const column = data.columns[j];
        const index = Math.round(Math.random() * (seed.length - 1));
        if (column.field === "id") {
          row.id = `id-${tasks.current + seed.length}`;
        } else {
          row[column.field] = seed[index][column.field];
        }
      }
      rows.push(row);
      tasks.current -= 1;
    }
    asyncWorker({
      work,
      done: () => resolve(_extends({}, data, {
        rows
      })),
      tasks
    });
  });
}
var deepFreeze = (object) => {
  const propNames = Object.getOwnPropertyNames(object);
  for (const name of propNames) {
    const value = object[name];
    if (value && typeof value === "object") {
      deepFreeze(value);
    }
  }
  return Object.freeze(object);
};
var getColumnsFromOptions = (options) => {
  let columns = options.dataSet === "Commodity" ? getCommodityColumns(options.editable) : getEmployeeColumns();
  if (options.visibleFields) {
    columns = columns.map((col) => {
      var _a;
      return ((_a = options.visibleFields) == null ? void 0 : _a.includes(col.field)) ? col : _extends({}, col, {
        hide: true
      });
    });
  }
  if (options.maxColumns) {
    columns = columns.slice(0, options.maxColumns);
  }
  return columns;
};
var getInitialState = (options, columns) => {
  var _a;
  const columnVisibilityModel = {};
  columns.forEach((col) => {
    if (col.hide) {
      columnVisibilityModel[col.field] = false;
    }
  });
  const groupingField = (_a = options.treeData) == null ? void 0 : _a.groupingField;
  if (groupingField) {
    columnVisibilityModel[groupingField] = false;
  }
  return {
    columns: {
      columnVisibilityModel
    }
  };
};
var useDemoData = (options) => {
  var _a, _b, _c;
  const [rowLength, setRowLength] = React193.useState(options.rowLength);
  const [index, setIndex] = React193.useState(0);
  const [loading, setLoading] = React193.useState(true);
  const columns = React193.useMemo(() => {
    return getColumnsFromOptions({
      dataSet: options.dataSet,
      editable: options.editable,
      maxColumns: options.maxColumns,
      visibleFields: options.visibleFields
    });
  }, [options.dataSet, options.editable, options.maxColumns, options.visibleFields]);
  const [data, setData] = React193.useState(() => {
    return addTreeDataOptionsToDemoData({
      columns,
      rows: [],
      initialState: getInitialState(options, columns)
    }, options.treeData);
  });
  React193.useEffect(() => {
    const cacheKey = `${options.dataSet}-${rowLength}-${index}-${options.maxColumns}`;
    if (dataCache.has(cacheKey)) {
      const newData = dataCache.get(cacheKey);
      setData(newData);
      setLoading(false);
      return void 0;
    }
    let active = true;
    (async () => {
      var _a2, _b2, _c2;
      setLoading(true);
      let newData;
      if (rowLength > 1e3) {
        newData = await getRealGridData(1e3, columns);
        newData = await extrapolateSeed(rowLength, newData);
      } else {
        newData = await getRealGridData(rowLength, columns);
      }
      if (!active) {
        return;
      }
      newData = addTreeDataOptionsToDemoData(newData, {
        maxDepth: (_a2 = options.treeData) == null ? void 0 : _a2.maxDepth,
        groupingField: (_b2 = options.treeData) == null ? void 0 : _b2.groupingField,
        averageChildren: (_c2 = options.treeData) == null ? void 0 : _c2.averageChildren
      });
      if (true) {
        deepFreeze(newData);
      }
      dataCache.set(cacheKey, newData);
      setData(newData);
      setLoading(false);
    })();
    return () => {
      active = false;
    };
  }, [rowLength, options.dataSet, options.maxColumns, (_a = options.treeData) == null ? void 0 : _a.maxDepth, (_b = options.treeData) == null ? void 0 : _b.groupingField, (_c = options.treeData) == null ? void 0 : _c.averageChildren, index, columns]);
  return {
    data,
    loading,
    setRowLength,
    loadNewData: () => {
      setIndex((oldIndex) => oldIndex + 1);
    }
  };
};

// node_modules/@mui/x-data-grid-generator/hooks/useBasicDemoData.js
var React194 = __toESM(require_react());
var useBasicDemoData = (nbRows, nbCols) => {
  return React194.useMemo(() => getBasicGridData(nbRows, nbCols), [nbRows, nbCols]);
};

// node_modules/@mui/x-data-grid-generator/hooks/useMovieData.js
var currencyFormatter2 = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
});
var COLUMNS = [{
  field: "title",
  headerName: "Title",
  width: 200,
  groupable: false
}, {
  field: "gross",
  headerName: "Gross",
  type: "number",
  width: 150,
  groupable: false,
  valueFormatter: (value) => {
    if (!value) {
      return "";
    }
    return currencyFormatter2.format(value);
  }
}, {
  field: "company",
  headerName: "Company",
  width: 200
}, {
  field: "director",
  headerName: "Director",
  width: 200
}, {
  field: "year",
  headerName: "Year",
  type: "number",
  availableAggregationFunctions: ["max", "min"]
}, {
  field: "cinematicUniverse",
  headerName: "Cinematic Universe",
  width: 220
}];
var ROWS = [{
  id: 0,
  title: "Avatar",
  gross: 2847246203,
  budget: 237e6,
  director: "James Cameron",
  company: "20th Century Fox",
  year: 2009,
  imdbRating: 7.9,
  composer: {
    name: "James Horner"
  }
}, {
  id: 1,
  title: "Avengers: Endgame",
  gross: 2797501328,
  budget: 356e6,
  director: "Anthony & Joe Russo",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 8.4,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Alan Silvestri"
  }
}, {
  id: 2,
  title: "Titanic",
  gross: 2187425379,
  budget: 2e8,
  director: "James Cameron",
  company: "20th Century Fox",
  year: 1997,
  imdbRating: 7.9,
  composer: {
    name: "James Horner"
  }
}, {
  id: 3,
  title: "Star Wars: The Force Awakens",
  gross: 2068223624,
  budget: 306e6,
  director: "J. J. Abrams",
  company: "Disney Studios",
  year: 2015,
  imdbRating: 7.9,
  cinematicUniverse: "Star Wars",
  composer: {
    name: "John Williams"
  }
}, {
  id: 4,
  title: "Avengers: Infinity War",
  gross: 2048359754,
  budget: 321e6,
  director: "Anthony & Joe Russo",
  company: "Disney Studios",
  year: 2018,
  imdbRating: 8.5,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Alan Silvestri"
  }
}, {
  id: 5,
  title: "Spider-Man: No Way Home",
  gross: 1892768346,
  budget: 2e8,
  director: "Jon Watts",
  company: "Disney Studios",
  year: 2021,
  imdbRating: 8.3,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 6,
  title: "Jurassic World",
  gross: 1671713208,
  budget: 15e7,
  director: "Colin Trevorrow",
  company: "Universal Pictures",
  year: 2015,
  imdbRating: 7,
  cinematicUniverse: "Jurassic Park",
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 7,
  title: "The Lion King",
  gross: 1656943394,
  budget: 26e7,
  director: "Jon Favreau",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.9,
  composer: {
    name: "Hans Zimmer"
  }
}, {
  id: 8,
  title: "The Avengers",
  gross: 1518812988,
  budget: 22e7,
  director: "Joss Whedon",
  company: "Disney Studios",
  year: 2012,
  imdbRating: 8.1,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Alan Silvestri"
  }
}, {
  id: 9,
  title: "Furious 7",
  gross: 1516045911,
  budget: 19e7,
  director: "James Wan",
  company: "Universal Pictures",
  year: 2015,
  imdbRating: 7.2,
  cinematicUniverse: "Fast & Furious",
  composer: {
    name: "Brian Tyler"
  }
}, {
  id: 10,
  title: "Frozen II",
  gross: 1450026933,
  budget: 15e7,
  director: "Chris Buck & Jennifer Lee",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.8,
  cinematicUniverse: "Frozen",
  composer: {
    name: "Christophe Beck"
  }
}, {
  id: 11,
  title: "Avengers: Age of Ultron",
  gross: 1402804868,
  budget: 28e7,
  director: "Joss Whedon",
  company: "Disney Studios",
  year: 2015,
  imdbRating: 7.3,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Danny Elfman"
  }
}, {
  id: 12,
  title: "Black Panther",
  gross: 1347280838,
  budget: 2e8,
  director: "Ryan Coogler",
  company: "Disney Studios",
  year: 2018,
  imdbRating: 7.3,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Ludwig Göransson"
  }
}, {
  id: 13,
  title: "Harry Potter and the Deathly Hallows – Part 2",
  gross: 1342025430,
  budget: 125e6,
  director: "David Yates",
  company: "Warner Bros. Pictures",
  year: 2011,
  imdbRating: 8.2,
  cinematicUniverse: "Harry Potter",
  composer: {
    name: "Alexandre Desplat"
  }
}, {
  id: 14,
  title: "Star Wars: The Last Jedi",
  gross: 1332539889,
  budget: 317e6,
  director: "Rian Johnson",
  company: "Disney Studios",
  year: 2017,
  imdbRating: 6.9,
  cinematicUniverse: "Star Wars",
  composer: {
    name: "John Williams"
  }
}, {
  id: 15,
  title: "Jurassic World: Fallen Kingdom",
  gross: 1309484461,
  budget: 17e7,
  director: "J. A. Bayona",
  company: "Universal Pictures",
  year: 2018,
  cinematicUniverse: "Jurassic Park",
  imdbRating: 6.2,
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 16,
  title: "Frozen",
  gross: 129e7,
  budget: 15e7,
  director: "Chris Buck & Jennifer Lee",
  company: "Disney Studios",
  year: 2013,
  imdbRating: 7.5,
  cinematicUniverse: "Frozen",
  composer: {
    name: "Christophe Beck"
  }
}, {
  id: 17,
  title: "Beauty and the Beast",
  gross: 1263521136,
  budget: 16e7,
  director: "Bill Condon",
  company: "Disney Studios",
  year: 2017,
  imdbRating: 7.1,
  composer: {
    name: "Alan Menken"
  }
}, {
  id: 18,
  title: "Incredibles 2",
  gross: 1242805359,
  budget: 2e8,
  director: "Brad Bird",
  company: "Disney Studios",
  year: 2018,
  imdbRating: 7.6,
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 19,
  title: "The Fate of the Furious",
  gross: 1238764765,
  budget: 25e7,
  director: "F. Gary Gray",
  company: "Universal Pictures",
  year: 2017,
  imdbRating: 6.6,
  cinematicUniverse: "Fast & Furious",
  composer: {
    name: "Brian Tyler"
  }
}, {
  id: 20,
  title: "Iron Man 3",
  gross: 1214811252,
  budget: 2e8,
  director: "Shane Black",
  company: "Disney Studios",
  year: 2013,
  imdbRating: 7.2,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Brian Tyler"
  }
}, {
  id: 21,
  title: "Minions",
  gross: 1159398397,
  budget: 74e6,
  director: "Pierre Coffin & Kyle Balda",
  company: "Universal Pictures",
  year: 2015,
  imdbRating: 6.4,
  composer: {
    name: "Heitor Pereira"
  }
}, {
  id: 22,
  title: "Captain America: Civil War",
  gross: 1153329473,
  budget: 25e7,
  director: "Anthony & Joe Russo",
  company: "Disney Studios",
  year: 2016,
  imdbRating: 7.8,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Henry Jackman"
  }
}, {
  id: 23,
  title: "Aquaman",
  gross: 1148485886,
  budget: 16e7,
  director: "James Wan",
  company: "Warner Bros. Pictures",
  year: 2018,
  imdbRating: 6.8,
  cinematicUniverse: "DC Cinematic Universe",
  composer: {
    name: "Rupert Gregson-Williams"
  }
}, {
  id: 24,
  title: "The Lord of the Rings: The Return of the King",
  gross: 1146030912,
  budget: 94e6,
  director: "Peter Jackson",
  company: "New Line Cinema",
  year: 2003,
  imdbRating: 9,
  cinematicUniverse: "The Lord of the Rings",
  composer: {
    name: "Howard Shore"
  }
}, {
  id: 25,
  title: "Spider-Man: Far From Home",
  gross: 1131927996,
  budget: 16e7,
  director: "Jon Watts",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 7.4,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 26,
  title: "Captain Marvel",
  gross: 1128274794,
  budget: 152e6,
  director: "Anna Boden & Ryan Fleck",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.8,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Pinar Toprak"
  }
}, {
  id: 27,
  title: "Transformers: Dark of the Moon",
  gross: 1123794079,
  budget: 195e6,
  director: "Michael Bay",
  company: "Paramount Pictures",
  year: 2011,
  imdbRating: 6.2,
  cinematicUniverse: "Transformers",
  composer: {
    name: "Steve Jablonsky"
  }
}, {
  id: 28,
  title: "Skyfall",
  gross: 1108561013,
  budget: 2e8,
  director: "Sam Mendes",
  company: "20th Century Fox",
  year: 2012,
  imdbRating: 7.8,
  cinematicUniverse: "James Bond",
  composer: {
    name: "Thomas Newman"
  }
}, {
  id: 29,
  title: "Transformers: Age of Extinction",
  gross: 1104054072,
  budget: 21e7,
  director: "Michael Bay",
  company: "Paramount Pictures",
  year: 2014,
  imdbRating: 5.6,
  cinematicUniverse: "Transformers",
  composer: {
    name: "Steve Jablonsky"
  }
}, {
  id: 30,
  title: "The Dark Knight Rises",
  gross: 1081142612,
  budget: 25e7,
  director: "Christopher Nolan",
  company: "Warner Bros. Pictures",
  year: 2012,
  imdbRating: 8.4,
  cinematicUniverse: "Batman",
  composer: {
    name: "Hans Zimmer"
  }
}, {
  id: 31,
  title: "Joker",
  gross: 1074251311,
  budget: 55e6,
  director: "Todd Phillips",
  company: "Warner Bros. Pictures",
  year: 2019,
  imdbRating: 8.4,
  cinematicUniverse: "Batman",
  composer: {
    name: "Hildur Guðnadóttir"
  }
}, {
  id: 32,
  title: "Star Wars: The Rise of Skywalker",
  gross: 1074144248,
  budget: 275e6,
  director: "J. J. Abrams",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.5,
  cinematicUniverse: "Star Wars",
  composer: {
    name: "John Williams"
  }
}, {
  id: 33,
  title: "Toy Story 4",
  gross: 1073394593,
  budget: 2e8,
  director: "Josh Cooley",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 7.7,
  cinematicUniverse: "Toy Story",
  composer: {
    name: "Randy Newman"
  }
}, {
  id: 34,
  title: "Toy Story 3",
  gross: 1066969703,
  budget: 2e8,
  director: "Lee Unkrich",
  company: "Disney Studios",
  year: 2010,
  imdbRating: 8.3,
  cinematicUniverse: "Toy Story",
  composer: {
    name: "Randy Newman"
  }
}];
var useMovieData = () => {
  return {
    rows: ROWS,
    columns: COLUMNS
  };
};

// node_modules/@mui/x-data-grid-generator/hooks/useQuery.js
init_extends();
var React196 = __toESM(require_react());

// node_modules/@mui/x-data-grid/hooks/features/headerFiltering/useGridHeaderFiltering.js
init_extends();
var React195 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/hooks/useQuery.js
var apiRef = {};
var simplifiedValueGetter = (field, colDef) => (row) => {
  var _a;
  return ((_a = colDef.valueGetter) == null ? void 0 : _a.call(colDef, row[row.id], row, colDef, apiRef)) || row[field];
};
var getRowComparator = (sortModel, columnsWithDefaultColDef) => {
  if (!sortModel) {
    const comparator2 = () => 0;
    return comparator2;
  }
  const sortOperators = sortModel.map((sortItem) => {
    const columnField = sortItem.field;
    const colDef = columnsWithDefaultColDef.find(({
      field
    }) => field === columnField);
    return _extends({}, sortItem, {
      valueGetter: simplifiedValueGetter(columnField, colDef),
      sortComparator: colDef.sortComparator
    });
  });
  const comparator = (row1, row2) => sortOperators.reduce((acc, {
    valueGetter,
    sort,
    sortComparator
  }) => {
    if (acc !== 0) {
      return acc;
    }
    const v1 = valueGetter(row1);
    const v2 = valueGetter(row2);
    return sort === "desc" ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);
  }, 0);
  return comparator;
};
var getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  if (filterModel === void 0 || filterModel.items.length === 0) {
    return rows;
  }
  const valueGetters = filterModel.items.map(({
    field
  }) => simplifiedValueGetter(field, columnsWithDefaultColDef.find((column) => column.field === field)));
  const filterFunctions = filterModel.items.map((filterItem) => {
    var _a;
    const {
      field,
      operator
    } = filterItem;
    const colDef = columnsWithDefaultColDef.find((column) => column.field === field);
    const filterOperator = colDef.filterOperators.find(({
      value
    }) => operator === value);
    let parsedValue = filterItem.value;
    if (colDef.valueParser) {
      const parser = colDef.valueParser;
      parsedValue = Array.isArray(filterItem.value) ? (_a = filterItem.value) == null ? void 0 : _a.map((x) => parser(x)) : parser(filterItem.value);
    }
    return filterOperator == null ? void 0 : filterOperator.getApplyFilterFn({
      filterItem,
      value: parsedValue
    }, colDef);
  });
  if (filterModel.logicOperator === GridLogicOperator.Or) {
    return rows.filter((row) => filterModel.items.some((_, index) => {
      const value = valueGetters[index](row);
      return filterFunctions[index] === null ? true : filterFunctions[index]({
        value
      });
    }));
  }
  return rows.filter((row) => filterModel.items.every((_, index) => {
    const value = valueGetters[index](row);
    return filterFunctions[index] === null ? true : filterFunctions[index](value);
  }));
};
var loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {
  const {
    minDelay = 100,
    maxDelay = 300,
    useCursorPagination
  } = serverOptions;
  if (maxDelay < minDelay) {
    throw new Error("serverOptions.minDelay is larger than serverOptions.maxDelay ");
  }
  const delay = randomInt(minDelay, maxDelay);
  const {
    cursor,
    page = 0,
    pageSize
  } = queryOptions;
  let nextCursor;
  let firstRowIndex;
  let lastRowIndex;
  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);
  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
  filteredRows = [...filteredRows].sort(rowComparator);
  const totalRowCount = filteredRows.length;
  if (!pageSize) {
    firstRowIndex = 0;
    lastRowIndex = filteredRows.length;
  } else if (useCursorPagination) {
    firstRowIndex = cursor ? filteredRows.findIndex(({
      id
    }) => id === cursor) : 0;
    firstRowIndex = Math.max(firstRowIndex, 0);
    lastRowIndex = firstRowIndex + pageSize;
    nextCursor = lastRowIndex >= filteredRows.length ? void 0 : filteredRows[lastRowIndex].id;
  } else {
    firstRowIndex = page * pageSize;
    lastRowIndex = (page + 1) * pageSize;
  }
  const hasNextPage = lastRowIndex < filteredRows.length - 1;
  const response = {
    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),
    nextCursor,
    hasNextPage,
    totalRowCount
  };
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(response);
    }, delay);
  });
};
var DEFAULT_DATASET_OPTIONS = {
  dataSet: "Commodity",
  rowLength: 100,
  maxColumns: 6
};
var disableDelay = typeof DISABLE_CHANCE_RANDOM !== "undefined" && DISABLE_CHANCE_RANDOM;
var DEFAULT_SERVER_OPTIONS = {
  minDelay: disableDelay ? 0 : 100,
  maxDelay: disableDelay ? 0 : 300,
  useCursorPagination: true
};
var createFakeServer = (dataSetOptions, serverOptions) => {
  const dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);
  const serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);
  const columns = getColumnsFromOptions(dataSetOptionsWithDefault);
  const initialState = getInitialState(dataSetOptionsWithDefault, columns);
  const defaultColDef = getGridDefaultColumnTypes();
  const columnsWithDefaultColDef = columns.map((column) => _extends({}, defaultColDef[column.type || "string"], column));
  const useQuery = (queryOptions) => {
    const {
      data: {
        rows
      },
      loading: dataGenerationIsLoading
    } = useDemoData(dataSetOptionsWithDefault);
    const queryOptionsRef = React196.useRef(queryOptions);
    const [response, setResponse] = React196.useState({
      pageInfo: {},
      rows: []
    });
    const [isLoading, setIsLoading] = React196.useState(dataGenerationIsLoading);
    React196.useEffect(() => {
      if (dataGenerationIsLoading) {
        return () => {
        };
      }
      queryOptionsRef.current = queryOptions;
      let active = true;
      setIsLoading(true);
      setResponse((prev) => Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {
        pageInfo: {}
      }));
      (async function fetchData() {
        const {
          returnedRows,
          nextCursor,
          totalRowCount,
          hasNextPage
        } = await loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);
        if (!active) {
          return;
        }
        const newRep = {
          rows: returnedRows,
          pageInfo: {
            totalRowCount,
            nextCursor,
            hasNextPage,
            pageSize: returnedRows.length
          }
        };
        setResponse((prev) => isDeepEqual2(prev, newRep) ? prev : newRep);
        setIsLoading(false);
      })();
      return () => {
        active = false;
      };
    }, [dataGenerationIsLoading, queryOptions, rows]);
    const effectShouldStart = queryOptionsRef.current !== queryOptions;
    return _extends({
      isLoading: isLoading || effectShouldStart
    }, response);
  };
  return {
    columns,
    columnsWithDefaultColDef,
    initialState,
    useQuery
  };
};
export {
  DemoLink,
  createFakeServer,
  currencyPairs,
  generateFilledQuantity,
  generateIsFilled,
  getBasicGridData,
  getColumnsFromOptions,
  getCommodityColumns,
  getEmployeeColumns,
  getInitialState,
  getRealGridData,
  loadServerRows,
  random,
  randomAddress,
  randomArrayItem,
  randomBoolean,
  randomBrokerId,
  randomCity,
  randomColor,
  randomCommodity,
  randomCompanyName,
  randomContractType,
  randomCountry,
  randomCreatedDate,
  randomCurrency,
  randomDate,
  randomDesk,
  randomEmail,
  randomFeeRate,
  randomId,
  randomIncoterm,
  randomInt,
  randomJobTitle,
  randomMaturityDate,
  randomName,
  randomPhoneNumber,
  randomPnL,
  randomPrice,
  randomQuantity,
  randomRate,
  randomRateType,
  randomRating,
  randomStatusOptions,
  randomTaxCode,
  randomTradeDate,
  randomTraderName,
  randomUnitPrice,
  randomUnitPriceCurrency,
  randomUpdatedDate,
  randomUrl,
  randomUserName,
  renderAvatar,
  renderCountry,
  renderEditCountry,
  renderEditCurrency,
  renderEditIncoterm,
  renderEditProgress,
  renderEditRating,
  renderEditStatus,
  renderEmail,
  renderIncoterm,
  renderLink,
  renderPnl,
  renderProgress,
  renderRating,
  renderStatus,
  renderTotalPrice,
  useBasicDemoData,
  useDemoData,
  useMovieData
};
/*! Bundled license information:

@mui/x-license/index.js:
  (**
   * @mui/x-license v7.2.1
   *
   * @license MUI X Commercial
   * This source code is licensed under the commercial license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/x-data-grid/index.js:
  (**
   * @mui/x-data-grid v7.5.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/x-data-grid-generator/index.js:
  (**
   * @mui/x-data-grid-generator v7.5.1
   *
   * @license MUI X Commercial
   * This source code is licensed under the commercial license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_x-data-grid-generator.js.map
